package RangeInSortedArray;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest10 {

    public static boolean debug = false;

    @Test
    public void test5001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5001");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int int22 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (int) (byte) -1, 0, (int) (short) 0);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (-1));
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) (short) 1);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) '#');
        int int32 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray28, 4, (int) (short) -1, 1);
        java.lang.Class<?> wildcardClass33 = intArray28.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test5002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5002");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 10);
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) ' ');
        int[] intArray28 = new int[] { ' ', (byte) -1 };
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray36, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray44, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray28, (-1), (int) ' ', (int) (byte) 10, intArray44, false);
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray22, 100, (int) (short) 100, (-1), intArray50, true);
        int[] intArray58 = new int[] { (-1), 100 };
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) (byte) 1);
        int[] intArray66 = new int[] { (-1), 100 };
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray60, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray68, false);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) 'a');
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (int) ' ');
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray74, (int) (byte) 10);
        int int78 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray74, (int) (short) -1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray22, (int) (byte) 1, (-1), (int) (short) 1, intArray74, true);
        int[] intArray82 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray74, (int) '4');
        int[] intArray84 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray82, 0);
        java.lang.Class<?> wildcardClass85 = intArray82.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 2 + "'", int78 == 2);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test5003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5003");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int int24 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) (short) 1);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) (byte) -1);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) 'a');
        int int32 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray28, (int) (short) 0, 1, (int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            int int36 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray28, 10, (int) (short) -1, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
    }

    @Test
    public void test5004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5004");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) ' ');
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (short) 100);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray2, (int) (byte) 10);
        int int14 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray2, (int) '4', 1, 1);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[1, 1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
    }

    @Test
    public void test5005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5005");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, 10);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) 'a');
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (short) 100);
        int[] intArray14 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) -1);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray14, 1);
        int int20 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray16, (int) (byte) 100, 3, 0);
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray36, false);
        int[] intArray44 = new int[] { (-1), 100 };
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) (byte) 1);
        int[] intArray52 = new int[] { (-1), 100 };
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray46, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray54, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (byte) 10, (int) '4', 10, intArray54, true);
        int int60 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray28, 0);
        int int64 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray28, (int) (byte) 0, (-1), 1);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray28, (int) '4');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray16, 0, (int) (short) 100, (int) ' ', intArray28, true);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 1]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2 + "'", int60 == 2);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2 + "'", int64 == 2);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
    }

    @Test
    public void test5006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5006");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 1, (int) (byte) 1, (int) (short) -1, intArray32, false);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 10);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 1);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, (int) (byte) 10, (int) (short) 1, 1, intArray46, false);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        int[] intArray64 = new int[] { (-1), 100 };
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray58, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray66, false);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) 'a');
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) ' ');
        int int76 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray72, (int) (byte) -1, 0, (int) (short) 0);
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (-1));
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray32, (int) '4', 1, (int) (short) 0, intArray78, false);
        int int82 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray32, (int) (short) 1);
        int int86 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray32, (int) (byte) 10, 1, (int) (byte) -1);
        int[] intArray88 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, 4);
        int[] intArray90 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray88, (int) (byte) 1);
        int int92 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray90, 10);
        int int96 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray90, 0, 10, 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 2 + "'", int92 == 2);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 0 + "'", int96 == 0);
    }

    @Test
    public void test5007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5007");
        int[] intArray1 = new int[] { 10 };
        int[] intArray3 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray1, (int) '4');
        int[] intArray8 = new int[] { '#' };
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) (short) 0);
        int int12 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) (byte) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray3, 10, (int) (byte) 1, (int) (short) 0, intArray8, false);
        int[] intArray19 = new int[] { 10 };
        int[] intArray21 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, (int) '4');
        int[] intArray26 = new int[] { '#' };
        int int28 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray26, (int) (short) 0);
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray26, (int) (byte) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray21, 10, (int) (byte) 1, (int) (short) 0, intArray26, false);
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray3, 0, 0, 1, intArray34, false);
        int int38 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray3, (int) ' ');
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray3, (int) ' ');
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) 'a');
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) (short) 100);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray62, (int) (byte) 100, (int) (short) 100, 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray40, (int) (short) 10, 0, 1, intArray62, false);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, 3);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, (int) (short) 100);
        int int74 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray62, 100);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[10]");
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[35]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[10]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[35]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2 + "'", int74 == 2);
    }

    @Test
    public void test5008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5008");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, 10);
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (int) (short) 1);
        int int12 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray10, 10);
        int[] intArray14 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (short) 100);
        int int18 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray14, 0, (int) 'a', 4);
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray14, (int) (byte) -1);
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray14, (int) 'a');
        int[] intArray28 = new int[] { ' ', (byte) -1 };
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray36, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray44, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray28, (-1), (int) ' ', (int) (byte) 10, intArray44, false);
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, 1);
        int int52 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray50, (int) (short) 1);
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) 'a');
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (-1));
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (short) 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray14, (-1), 0, (int) (short) -1, intArray58, true);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray14, (int) (byte) -1);
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray14, (int) 'a');
        java.lang.Class<?> wildcardClass65 = intArray64.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test5009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5009");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 1, (int) (byte) 1, (int) (short) -1, intArray32, false);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 10);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 1);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, (int) (byte) 10, (int) (short) 1, 1, intArray46, false);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        int[] intArray64 = new int[] { (-1), 100 };
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray58, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray66, false);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) 'a');
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) ' ');
        int int76 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray72, (int) (byte) -1, 0, (int) (short) 0);
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (-1));
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray32, (int) '4', 1, (int) (short) 0, intArray78, false);
        int[] intArray82 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 100);
        int int84 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray32, 2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[1, 1]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1);
    }

    @Test
    public void test5010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5010");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { ' ', (byte) -1 };
        int[] intArray38 = new int[] { (-1), 100 };
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 1);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray40, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray48, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, (-1), (int) ' ', (int) (byte) 10, intArray48, false);
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, 100);
        int int56 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray32, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray24, 10, (int) 'a', (-1), intArray32, true);
        int int60 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) '#');
        int[] intArray66 = new int[] { (-1), 100 };
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) (byte) 1);
        int[] intArray74 = new int[] { (-1), 100 };
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray74, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray68, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray76, false);
        int[] intArray80 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray76, (int) ' ');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray24, (int) (byte) 100, 100, 0, intArray80, false);
        int int84 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (-1));
        int int86 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, 10);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2 + "'", int60 == 2);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 2 + "'", int84 == 2);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 2 + "'", int86 == 2);
    }

    @Test
    public void test5011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5011");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 1, (int) (byte) 1, (int) (short) -1, intArray32, false);
        int int40 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray32, 10, 100, (int) '#');
        int int42 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray32, (int) (byte) 0);
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) ' ');
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (short) 100);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray32, 1, 10, (int) (byte) 0, intArray54, true);
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, 1);
        int int62 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray58, (int) (short) 100, 1, 0);
        int[] intArray68 = new int[] { (-1), 100 };
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) (byte) 1);
        int[] intArray76 = new int[] { (-1), 100 };
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray76, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray70, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray78, false);
        int[] intArray82 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray78, (int) 'a');
        int[] intArray84 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray82, (int) ' ');
        int[] intArray86 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray82, (-1));
        int int90 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray82, (int) (short) 0, (int) (byte) 0, 1);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray58, 100, (int) (byte) 0, (int) 'a', intArray82, true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[1, 1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 2 + "'", int90 == 2);
    }

    @Test
    public void test5012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5012");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, 10);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) 'a');
        int int12 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, 0);
        int[] intArray18 = new int[] { ' ', (byte) -1 };
        int[] intArray24 = new int[] { (-1), 100 };
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 1);
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray26, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray34, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (-1), (int) ' ', (int) (byte) 10, intArray34, false);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 100);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) '4');
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray42, 1, (int) (byte) 1, (int) (short) -1, intArray48, false);
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (short) 10);
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (short) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray8, (int) (short) 100, (int) (short) 1, 0, intArray56, false);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (short) -1);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, 0);
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, 100);
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, 1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[0, 0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
    }

    @Test
    public void test5013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5013");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int int8 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, 0);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, (int) (short) -1);
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (int) (byte) 0);
        int[] intArray18 = new int[] { ' ', (byte) -1 };
        int[] intArray24 = new int[] { (-1), 100 };
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 1);
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray26, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray34, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (-1), (int) ' ', (int) (byte) 10, intArray34, false);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, 1);
        int int42 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray40, (int) (short) 1);
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) 'a');
        int int46 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray40, 10);
        int int48 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray40, (int) (short) 100);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray12, (int) (short) 10, 1, (int) (short) -1, intArray40, true);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        int[] intArray64 = new int[] { (-1), 100 };
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray58, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray66, false);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) 'a');
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) ' ');
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (int) (byte) 10);
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (int) (short) 100);
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray12, (int) (byte) 100, (int) '#', (int) (byte) 10, intArray78, false);
        int int82 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray78, 0);
        int[] intArray84 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray78, 3);
        int[] intArray88 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray78, (int) (byte) -1, 4, 2, intArray88, true);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2 + "'", int42 == 2);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 2 + "'", int82 == 2);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1]");
    }

    @Test
    public void test5014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5014");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 1);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (short) 1);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) 'a');
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray36, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray44, false);
        int[] intArray52 = new int[] { (-1), 100 };
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) (byte) 1);
        int[] intArray60 = new int[] { (-1), 100 };
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray54, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray62, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray36, (int) (byte) 10, (int) '4', 10, intArray62, true);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, 2);
        int int72 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray68, (int) (short) 100, (int) ' ', 1);
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, 0, (int) (byte) 0, 0, intArray74, true);
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, 100);
        java.lang.Class<?> wildcardClass79 = intArray28.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test5015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5015");
        int[] intArray1 = new int[] { 10 };
        int[] intArray3 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray1, (int) '4');
        int[] intArray8 = new int[] { '#' };
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) (short) 0);
        int int12 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) (byte) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray3, 10, (int) (byte) 1, (int) (short) 0, intArray8, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, 1);
        int[] intArray22 = new int[] { (-1), 100 };
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, (int) (byte) 1);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (short) 10);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, 10);
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray28, (int) 'a');
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (short) 100);
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) -1);
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, 1);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray16, 0, 0, (int) '#', intArray34, false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 17 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[10]");
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[35]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
    }

    @Test
    public void test5016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5016");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 0);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) ' ');
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray26, 0, 2, (int) (short) -1);
        int int34 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray26, 1, (int) 'a', (int) (byte) -1);
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, 10);
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        int[] intArray50 = new int[] { (-1), 100 };
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray44, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray52, false);
        int[] intArray60 = new int[] { ' ', (byte) -1 };
        int[] intArray66 = new int[] { (-1), 100 };
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) (byte) 1);
        int[] intArray74 = new int[] { (-1), 100 };
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray74, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray68, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray76, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray60, (-1), (int) ' ', (int) (byte) 10, intArray76, false);
        int[] intArray82 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, 100);
        int[] intArray84 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) (byte) 100);
        int[] intArray86 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray52, (int) '#', (int) (short) 10, 0, intArray60, false);
        int int92 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray60, 100, 4, 0);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, (int) (byte) 100, (int) (short) 1, (int) (short) 10, intArray60, true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 5 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
    }

    @Test
    public void test5017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5017");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 0);
        int[] intArray24 = new int[] { (-1), 100 };
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 1);
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray26, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray34, false);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) 'a');
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) ' ');
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (-1));
        int int44 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray42, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) ' ', (int) 'a', 1, intArray42, false);
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 10);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) ' ');
        int int62 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray58, (int) (short) 1, (-1), (int) (byte) 0);
        int[] intArray66 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray58, 2, (int) '4', (int) (short) 0, intArray66, true);
        int int72 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray58, (int) (short) -1, (int) ' ', (int) (byte) 1);
        int[] intArray78 = new int[] { (-1), 100 };
        int[] intArray80 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray78, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray58, 0, (int) 'a', 2, intArray78, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, 4, (int) (byte) -1, 1, intArray78, true);
        int[] intArray86 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray78, (int) (short) 1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1]");
    }

    @Test
    public void test5018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5018");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 100);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) 'a');
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, 1);
        int int34 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray30, (int) (byte) 0, 0, 0);
        int[] intArray39 = new int[] { 10 };
        int[] intArray41 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray39, (int) '4');
        int[] intArray46 = new int[] { '#' };
        int int48 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray46, (int) (short) 0);
        int int50 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray46, (int) (byte) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray41, 10, (int) (byte) 1, (int) (short) 0, intArray46, false);
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, 100, (int) (short) 100, 0, intArray46, true);
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray30, (int) (byte) 100);
        int int62 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray58, (int) (short) -1, (int) '4', 3);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[35]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
    }

    @Test
    public void test5019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5019");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 0);
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 1);
        int int24 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (int) ' ', 10, 0);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) (byte) 0);
        int int28 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) '4');
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray36, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray44, false);
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) 'a');
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) ' ');
        int int54 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray50, (int) (byte) -1, 0, (int) (short) 0);
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (-1));
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) '#');
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) '#');
        int int62 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray58, (int) (short) 100);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray58, (int) (short) 0, (int) '#', (int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, 10, (int) (short) 0, 4, intArray58, false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 2 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2 + "'", int62 == 2);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
    }

    @Test
    public void test5020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5020");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 100);
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray26, (-1), 2, (int) (byte) -1);
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (short) 1);
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (short) 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
    }

    @Test
    public void test5021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5021");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray22 = new int[] { ' ', (byte) -1 };
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray22, (-1), (int) ' ', (int) (byte) 10, intArray38, false);
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray50, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray58, false);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray38, (int) 'a', 100, (int) (byte) 1, intArray58, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray12, (int) (short) 100, (int) 'a', (int) (short) 0, intArray38, true);
        int int68 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray12, (int) '4');
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, 10);
        int int72 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray70, 0);
        int int74 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray70, (int) (short) 100);
        int int78 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray70, 2, (int) (short) 100, (int) (short) 10);
        int int82 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray70, 2, 4, 2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2 + "'", int68 == 2);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 2 + "'", int72 == 2);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2 + "'", int74 == 2);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
    }

    @Test
    public void test5022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5022");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 1, (int) (byte) 1, (int) (short) -1, intArray32, false);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 10);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 1);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, (int) (byte) 10, (int) (short) 1, 1, intArray46, false);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        int[] intArray64 = new int[] { (-1), 100 };
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray58, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray66, false);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) 'a');
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) ' ');
        int int76 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray72, (int) (byte) -1, 0, (int) (short) 0);
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (-1));
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray32, (int) '4', 1, (int) (short) 0, intArray78, false);
        int int82 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray32, 1);
        int[] intArray84 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) 'a');
        int int86 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray84, 3);
        int[] intArray88 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray84, (int) ' ');
        int[] intArray90 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray84, 0);
        int int92 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray90, (int) (short) 100);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 2 + "'", int86 == 2);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 2 + "'", int92 == 2);
    }

    @Test
    public void test5023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5023");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 1, (int) (byte) 1, (int) (short) -1, intArray32, false);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 10);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) 'a');
        int[] intArray46 = new int[] { ' ', (byte) -1 };
        int[] intArray52 = new int[] { (-1), 100 };
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) (byte) 1);
        int[] intArray60 = new int[] { (-1), 100 };
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray54, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray62, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray46, (-1), (int) ' ', (int) (byte) 10, intArray62, false);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, 1);
        int int70 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray68, (int) (short) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray40, 0, (int) ' ', (int) (short) -1, intArray68, false);
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) (byte) 0);
        int int76 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray74, 10);
        int[] intArray82 = new int[] { (-1), 100 };
        int[] intArray84 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray82, (int) (byte) 1);
        int[] intArray86 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray84, (int) (short) 10);
        int[] intArray88 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray86, (int) (byte) -1);
        int[] intArray92 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray88, (-1), (int) (short) 1, (int) (byte) -1, intArray92, true);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray74, (int) (byte) -1, (int) (short) 100, 0, intArray88, false);
        int[] intArray98 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray88, 100);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2 + "'", int70 == 2);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2 + "'", int76 == 2);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray98);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray98), "[-1, -1]");
    }

    @Test
    public void test5024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5024");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 1, (int) (byte) 1, (int) (short) -1, intArray32, false);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 10);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 1);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, (int) (byte) 10, (int) (short) 1, 1, intArray46, false);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        int[] intArray64 = new int[] { (-1), 100 };
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray58, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray66, false);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) 'a');
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) ' ');
        int int76 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray72, (int) (byte) -1, 0, (int) (short) 0);
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (-1));
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray32, (int) '4', 1, (int) (short) 0, intArray78, false);
        int[] intArray82 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray78, (int) (byte) -1);
        int int86 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray78, 4, 0, (int) (short) 1);
        int int88 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray78, (-1));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 2 + "'", int86 == 2);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
    }

    @Test
    public void test5025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5025");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) 'a', 100, (int) (byte) 1, intArray38, false);
        int int46 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, (int) '4');
        int int50 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray38, (int) ' ', (int) (byte) 1, 0);
        int int52 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, 0);
        int int54 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, 100);
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (short) 1);
        int int58 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray56, (int) (byte) 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2 + "'", int54 == 2);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2 + "'", int58 == 2);
    }

    @Test
    public void test5026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5026");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray22 = new int[] { ' ', (byte) -1 };
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray22, (-1), (int) ' ', (int) (byte) 10, intArray38, false);
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray50, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray58, false);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray38, (int) 'a', 100, (int) (byte) 1, intArray58, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray12, (int) (short) 100, (int) 'a', (int) (short) 0, intArray38, true);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (-1));
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) (short) 100);
        int[] intArray75 = new int[] { 10 };
        int[] intArray77 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray75, (int) '4');
        int[] intArray79 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray75, (int) 'a');
        int int83 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray79, 1, 10, 0);
        int int85 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray79, (int) (short) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray12, (int) 'a', 100, 1, intArray79, true);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[10]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 2 + "'", int85 == 2);
    }

    @Test
    public void test5027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5027");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 100);
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray26, (-1), 2, (int) (byte) -1);
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) '4');
        int int36 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray32, (int) (byte) 0, 4, (int) (short) 0);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 0);
        int int40 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray32, (int) (short) 1);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 100);
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 100);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2 + "'", int40 == 2);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
    }

    @Test
    public void test5028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5028");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray24, 0, (int) (byte) 100, 0);
        int int32 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) '#');
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) 'a');
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
    }

    @Test
    public void test5029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5029");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 100);
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray26, (-1), 2, (int) (byte) -1);
        int[] intArray34 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, (int) (short) 1, (int) (byte) 100, (int) (byte) -1, intArray34, false);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) ' ');
        java.lang.Class<?> wildcardClass39 = intArray38.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test5030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5030");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) '4');
        int int20 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) (byte) -1);
        int int24 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (int) '#', (-1), (int) (byte) 0);
        int[] intArray32 = new int[] { (byte) -1, 2, (short) 1, '#' };
        int int34 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray32, (int) '4');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, (-1), 4, 2, intArray32, true);
        int int38 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, 4);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 3);
        java.lang.Class<?> wildcardClass41 = intArray40.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 2, 1, 35]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 4 + "'", int34 == 4);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test5031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5031");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) ' ');
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray6, (int) (short) 1, (-1), (int) (byte) 0);
        int[] intArray14 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray6, 2, (int) '4', (int) (short) 0, intArray14, true);
        int int20 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray6, (int) (short) -1, (int) ' ', (int) (byte) 1);
        int[] intArray26 = new int[] { ' ', (byte) -1 };
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        int[] intArray40 = new int[] { (-1), 100 };
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray34, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray42, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, (-1), (int) ' ', (int) (byte) 10, intArray42, false);
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, 0);
        int int50 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray48, (int) (byte) 0);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) ' ');
        int[] intArray66 = new int[] { (-1), 100 };
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) (byte) 1);
        int[] intArray74 = new int[] { (-1), 100 };
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray74, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray68, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray76, false);
        int[] intArray80 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray76, (int) ' ');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray56, (int) (short) 0, (int) ' ', 0, intArray80, true);
        int int86 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray80, 0, 0, (-1));
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (short) 10, (int) (byte) 10, (int) (byte) -1, intArray80, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray6, (int) (short) 1, (int) ' ', (int) (short) 1, intArray48, false);
        int int94 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray6, (int) (short) 1, 3, (int) (short) 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
    }

    @Test
    public void test5032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5032");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray27 = new int[] { (short) 100, (short) 0, 100, (byte) -1, 10 };
        int int31 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray27, 1, (int) (byte) 100, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, 100, (int) '#', (int) (short) 10, intArray27, false);
        int int35 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, 0);
        int[] intArray37 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (short) 1);
        int[] intArray43 = new int[] { (-1), 100 };
        int[] intArray45 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray43, (int) (byte) 1);
        int[] intArray51 = new int[] { (-1), 100 };
        int[] intArray53 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray51, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray45, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray53, false);
        int[] intArray60 = new int[] { '#' };
        int int62 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray60, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray45, (int) (short) -1, 1, 2, intArray60, true);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, (int) (short) 10, 2, (int) (byte) 1, intArray45, true);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 0);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, 2);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) '#');
        int int74 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray68, 4);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[100, 0, 100, -1, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[35]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2 + "'", int74 == 2);
    }

    @Test
    public void test5033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5033");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { ' ', (byte) -1 };
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray36, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, (-1), (int) ' ', (int) (byte) 10, intArray36, false);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (int) 'a', 100, (int) (byte) 1, intArray56, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, 10, (int) (short) 0, (int) (short) -1, intArray36, true);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, 0);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, 10);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 100);
        int int72 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray70, (int) (byte) 0);
        int int74 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray70, 0);
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, 0);
        int int78 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray76, (int) ' ');
        int[] intArray80 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray76, 2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 2 + "'", int72 == 2);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2 + "'", int74 == 2);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 2 + "'", int78 == 2);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1]");
    }

    @Test
    public void test5034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5034");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 0);
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 1);
        int int24 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (int) ' ', 10, 0);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (short) 10);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (short) -1);
        int[] intArray34 = new int[] { ' ', (byte) -1 };
        int[] intArray40 = new int[] { (-1), 100 };
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) (byte) 1);
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray42, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray50, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray34, (-1), (int) ' ', (int) (byte) 10, intArray50, false);
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, 100);
        int int58 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray34, (int) (short) -1);
        int int60 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray34, 2);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, 4, 0, (int) (short) 10, intArray34, true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
    }

    @Test
    public void test5035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5035");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 100);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 1);
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) '4');
        int[] intArray36 = new int[] { ' ', (byte) -1 };
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        int[] intArray50 = new int[] { (-1), 100 };
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray44, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray52, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (-1), (int) ' ', (int) (byte) 10, intArray52, false);
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) (byte) 1, (int) (byte) 0, intArray52, true);
        int int62 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray52, (int) (short) 1);
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (-1));
        int int68 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray64, (int) (short) 10, 10, (-1));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2 + "'", int62 == 2);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
    }

    @Test
    public void test5036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5036");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 0);
        int[] intArray24 = new int[] { (-1), 100 };
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 1);
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray26, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray34, false);
        int[] intArray41 = new int[] { '#' };
        int int43 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray41, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray26, (int) (short) -1, 1, 2, intArray41, true);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) (short) -1, 0, (int) (short) 0, intArray41, true);
        int[] intArray49 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray41, (int) (byte) 100);
        int[] intArray51 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray41, (int) (byte) 100);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[0]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, -1]");
    }

    @Test
    public void test5037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5037");
        int[] intArray0 = null;
        int[] intArray6 = new int[] { ' ', (byte) -1 };
        int[] intArray12 = new int[] { (-1), 100 };
        int[] intArray14 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) (byte) 1);
        int[] intArray20 = new int[] { (-1), 100 };
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray14, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray22, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray6, (-1), (int) ' ', (int) (byte) 10, intArray22, false);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, 100);
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (int) (byte) 100);
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray30, (int) 'a');
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, 1);
        int int38 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray34, (int) (byte) 0, 0, 0);
        int[] intArray43 = new int[] { 10 };
        int[] intArray45 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray43, (int) '4');
        int[] intArray50 = new int[] { '#' };
        int int52 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray50, (int) (short) 0);
        int int54 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray50, (int) (byte) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray45, 10, (int) (byte) 1, (int) (short) 0, intArray50, false);
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray34, 100, (int) (short) 100, 0, intArray50, true);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, 4);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray0, (int) (byte) 10, (int) (byte) 10, (int) (byte) 0, intArray50, false);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[35]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
    }

    @Test
    public void test5038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5038");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) ' ');
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 10);
        int[] intArray14 = new int[] { ' ', (byte) -1 };
        int[] intArray20 = new int[] { (-1), 100 };
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 1);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray22, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray30, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray14, (-1), (int) ' ', (int) (byte) 10, intArray30, false);
        int[] intArray40 = new int[] { (-1), 100 };
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) (byte) 1);
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray42, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray50, false);
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray30, (int) 'a', 100, (int) (byte) 1, intArray50, false);
        int int58 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray50, (int) '4');
        int int60 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray50, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, 0, (int) (short) -1, 0, intArray50, false);
        int[] intArray68 = new int[] { (-1), 100 };
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) (byte) 1);
        int[] intArray76 = new int[] { (-1), 100 };
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray76, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray70, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray78, false);
        int[] intArray82 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray78, (int) ' ');
        int[] intArray84 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray78, (int) '4');
        int int88 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray84, (int) ' ', 100, (int) (short) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray50, 2, (int) (short) -1, (int) (byte) 0, intArray84, false);
        java.lang.Class<?> wildcardClass91 = intArray50.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2 + "'", int58 == 2);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2 + "'", int60 == 2);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test5039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5039");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, 10);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) 'a');
        int int12 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, 0);
        int int14 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) (byte) 100);
        int int16 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, 4);
        int int18 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) (short) -1);
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) '4');
        int int22 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) (byte) 0);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) -1);
        int[] intArray30 = new int[] { (-1), 100 };
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray30, (int) (byte) 1);
        int[] intArray38 = new int[] { (-1), 100 };
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray32, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray40, false);
        int[] intArray48 = new int[] { ' ', (byte) -1 };
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        int[] intArray62 = new int[] { (-1), 100 };
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray56, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray64, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray48, (-1), (int) ' ', (int) (byte) 10, intArray64, false);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, 100);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 100);
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray40, (int) '#', (int) (short) 10, 0, intArray48, false);
        int int80 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray48, 100, 4, 0);
        int[] intArray82 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, 100);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray8, 100, (int) (short) 0, (int) (short) -1, intArray48, true);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1]");
    }

    @Test
    public void test5040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5040");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int int24 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) (short) 1);
        int[] intArray30 = new int[] { (-1), 100 };
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray30, (int) (byte) 1);
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 10);
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, 10);
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        int[] intArray50 = new int[] { (-1), 100 };
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray44, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray52, false);
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) 'a');
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) ' ');
        int int62 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray58, (int) (byte) -1, 0, (int) (short) 0);
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (-1));
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray58, (int) (byte) 100);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray36, (-1), 100, 3, intArray58, true);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) (byte) 100);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) (short) 1, (int) (byte) 10, (int) (short) -1, intArray70, false);
        int[] intArray78 = new int[] { (-1), 100 };
        int[] intArray80 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray78, (int) (byte) 1);
        int[] intArray82 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray80, (int) (short) 10);
        int int84 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray82, 0);
        int int88 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray82, 10, (int) ' ', 10);
        int int92 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray82, (int) ' ', 0, (-1));
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray70, (int) (short) -1, (int) '#', (int) (byte) 100, intArray82, true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 2 + "'", int84 == 2);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
    }

    @Test
    public void test5041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5041");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray22 = new int[] { ' ', (byte) -1 };
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray22, (-1), (int) ' ', (int) (byte) 10, intArray38, false);
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray50, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray58, false);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray38, (int) 'a', 100, (int) (byte) 1, intArray58, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray12, (int) (short) 100, (int) 'a', (int) (short) 0, intArray38, true);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (-1));
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) (short) 100);
        int int74 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray12, (int) (short) 100, (int) 'a', (int) (short) -1);
        int int78 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray12, 100, 1, (int) (byte) 1);
        int int80 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray12, (int) '#');
        int int82 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray12, 1);
        java.lang.Class<?> wildcardClass83 = intArray12.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 2 + "'", int78 == 2);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2 + "'", int80 == 2);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 2 + "'", int82 == 2);
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test5042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5042");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int int8 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, 0);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, 2);
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, 1);
        int[] intArray14 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (int) (byte) 100);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, -1]");
    }

    @Test
    public void test5043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5043");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 0);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) ' ');
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 10);
        int[] intArray34 = new int[] { ' ', (byte) -1 };
        int[] intArray40 = new int[] { (-1), 100 };
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) (byte) 1);
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray42, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray50, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray34, (-1), (int) ' ', (int) (byte) 10, intArray50, false);
        int[] intArray60 = new int[] { (-1), 100 };
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) (byte) 1);
        int[] intArray68 = new int[] { (-1), 100 };
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray62, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray70, false);
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray50, (int) 'a', 100, (int) (byte) 1, intArray70, false);
        int int78 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray70, (int) '4');
        int int82 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray70, (int) ' ', (int) (byte) 1, 0);
        int int84 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray70, 0);
        int int86 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray70, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, (int) '4', 100, (int) '4', intArray70, false);
        int[] intArray90 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) '#');
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 2 + "'", int78 == 2);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 2 + "'", int84 == 2);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 2 + "'", int86 == 2);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1]");
    }

    @Test
    public void test5044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5044");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 0);
        int int22 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, 100, (int) (byte) 100, 10);
        int[] intArray28 = new int[] { ' ', (byte) -1 };
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray36, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray44, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray28, (-1), (int) ' ', (int) (byte) 10, intArray44, false);
        int int50 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray44, (int) (short) 1);
        int int52 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray44, (int) '#');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (-1), 100, 0, intArray44, false);
        int int56 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, 0);
        int int58 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, 10);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2 + "'", int56 == 2);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2 + "'", int58 == 2);
    }

    @Test
    public void test5045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5045");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { ' ', (byte) -1 };
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray36, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, (-1), (int) ' ', (int) (byte) 10, intArray36, false);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (int) 'a', 100, (int) (byte) 1, intArray56, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, 10, (int) (short) 0, (int) (short) -1, intArray36, true);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, 0);
        int[] intArray72 = new int[] { (-1), 100 };
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (int) (byte) 1);
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray74, (int) (short) 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, 2, 10, (int) (short) 1, intArray74, false);
        int int80 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, (int) (short) 0);
        int int84 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray36, (-1), (int) (short) 10, (int) (byte) -1);
        int[] intArray86 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, 3);
        int[] intArray88 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (-1));
        java.lang.Class<?> wildcardClass89 = intArray88.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2 + "'", int80 == 2);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[0, 1]");
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test5046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5046");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) ' ');
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (short) 100);
        int[] intArray14 = new int[] { (-1), 100 };
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray14, (int) (byte) 1);
        int[] intArray22 = new int[] { (-1), 100 };
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray16, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray24, false);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) ' ');
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 0);
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) '#');
        int[] intArray38 = new int[] { (-1), 100 };
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 1);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray40, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray48, false);
        int[] intArray55 = new int[] { '#' };
        int int57 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray55, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray40, (int) (short) -1, 1, 2, intArray55, true);
        int[] intArray61 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray55, 10);
        int[] intArray63 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray55, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray28, (int) (byte) 0, (int) (short) 10, (int) (byte) 1, intArray63, false);
        int[] intArray67 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray8, (int) '4', (int) (byte) 1, (int) (short) 0, intArray67, false);
        int[] intArray71 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) '#');
        int int73 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) (byte) 100);
        int int75 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, 2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[1, 1]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[35]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 2 + "'", int73 == 2);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 2 + "'", int75 == 2);
    }

    @Test
    public void test5047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5047");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 100);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 1);
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray2, 0);
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (short) 0);
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) 'a');
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
    }

    @Test
    public void test5048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5048");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 1, (int) (byte) 1, (int) (short) -1, intArray32, false);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 10);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 1);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, (int) (byte) 10, (int) (short) 1, 1, intArray46, false);
        int int52 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray46, (int) '#');
        int[] intArray57 = new int[] { '#' };
        int int59 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray57, (int) (short) 0);
        int int61 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray57, (int) (byte) 0);
        int[] intArray67 = new int[] { ' ', (byte) -1 };
        int[] intArray73 = new int[] { (-1), 100 };
        int[] intArray75 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray73, (int) (byte) 1);
        int[] intArray81 = new int[] { (-1), 100 };
        int[] intArray83 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray81, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray75, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray83, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray67, (-1), (int) ' ', (int) (byte) 10, intArray83, false);
        int[] intArray89 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray83, 0);
        int int91 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray89, (int) (byte) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray57, 10, 0, (int) (byte) 0, intArray89, true);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray46, 3, (int) ' ', 0, intArray57, false);
        int int99 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray46, 4, (int) '4', 3);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[35]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 2 + "'", int91 == 2);
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + 0 + "'", int99 == 0);
    }

    @Test
    public void test5049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5049");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int int20 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray16, 0, (-1), 0);
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
    }

    @Test
    public void test5050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5050");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 1, (int) (byte) 1, (int) (short) -1, intArray32, false);
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        int[] intArray50 = new int[] { (-1), 100 };
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray44, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray52, false);
        int[] intArray59 = new int[] { '#' };
        int int61 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray59, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray44, (int) (short) -1, 1, 2, intArray59, true);
        int[] intArray65 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray59, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, (int) (short) 100, 0, 1, intArray65, false);
        int[] intArray69 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 100);
        int int71 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray32, 1);
        int[] intArray73 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) '#');
        int int77 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray73, (int) (byte) 100, (int) (short) 100, (int) ' ');
        int int81 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray73, (int) (short) 0, (int) 'a', 2);
        int int83 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray73, (int) '4');
        int int85 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray73, (int) '4');
        int int87 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray73, 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[35]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[1, 1]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 2 + "'", int83 == 2);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 2 + "'", int85 == 2);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 2 + "'", int87 == 2);
    }

    @Test
    public void test5051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5051");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 100);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 1);
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) '4');
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 0);
        int int36 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray32, (int) (short) 100, (int) (byte) 0, (int) (byte) 1);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 0);
        int int40 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, (int) (byte) 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2 + "'", int40 == 2);
    }

    @Test
    public void test5052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5052");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 100);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 1);
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) '4');
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 0);
        int int36 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray32, (int) (short) 100, (int) (byte) 0, (int) (byte) 1);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) -1);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, 0);
        int int42 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray40, 2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2 + "'", int42 == 2);
    }

    @Test
    public void test5053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5053");
        int[] intArray0 = null;
        int[] intArray6 = new int[] { (-1), 100 };
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (int) (byte) 1);
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (int) ' ');
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, 10);
        int[] intArray18 = new int[] { ' ', (byte) -1 };
        int[] intArray24 = new int[] { (-1), 100 };
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 1);
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray26, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray34, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (-1), (int) ' ', (int) (byte) 10, intArray34, false);
        int[] intArray44 = new int[] { (-1), 100 };
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) (byte) 1);
        int[] intArray52 = new int[] { (-1), 100 };
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray46, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray54, false);
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray34, (int) 'a', 100, (int) (byte) 1, intArray54, false);
        int int62 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray54, (int) '4');
        int int64 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray54, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray6, 0, (int) (short) -1, 0, intArray54, false);
        int int68 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray54, 2);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray0, (int) (byte) 1, 0, 3, intArray54, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2 + "'", int62 == 2);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2 + "'", int64 == 2);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2 + "'", int68 == 2);
    }

    @Test
    public void test5054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5054");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) ' ');
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (short) 100);
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (short) 10);
        int int14 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray10, (int) (byte) 10, 100, (int) '4');
        int int16 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray10, (int) '4');
        int int18 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray10, (int) (byte) -1);
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) 'a');
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[1, 1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
    }

    @Test
    public void test5055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5055");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 0);
        int int22 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, 100, (int) (byte) 100, 10);
        int[] intArray28 = new int[] { ' ', (byte) -1 };
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray36, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray44, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray28, (-1), (int) ' ', (int) (byte) 10, intArray44, false);
        int int50 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray44, (int) (short) 1);
        int int52 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray44, (int) '#');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (-1), 100, 0, intArray44, false);
        int int56 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (-1));
        int int58 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) (byte) 10);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2 + "'", int56 == 2);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2 + "'", int58 == 2);
    }

    @Test
    public void test5056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5056");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (-1));
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) '#');
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) 'a');
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) ' ');
        int int46 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray42, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, 3, (int) (short) 1, 0, intArray42, false);
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 10);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
    }

    @Test
    public void test5057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5057");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int int22 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (int) (byte) -1, 0, (int) (short) 0);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (-1));
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) (byte) 100);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) '4');
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray36, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray44, false);
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) ' ');
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 0);
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) '#');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, (int) (short) 1, (int) (short) 100, 0, intArray48, false);
        int int58 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray48, 100, (int) (byte) 100, (int) (byte) -1);
        int int60 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray48, 1);
        int int64 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray48, (int) (byte) 0, (int) (byte) 10, (int) (short) 0);
        int[] intArray68 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (short) 0, 2, 3, intArray68, false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2 + "'", int60 == 2);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
    }

    @Test
    public void test5058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5058");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int int8 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, 0);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, 2);
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, 1);
        int[] intArray18 = new int[] { ' ', (byte) -1 };
        int[] intArray24 = new int[] { (-1), 100 };
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 1);
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray26, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray34, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (-1), (int) ' ', (int) (byte) 10, intArray34, false);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 100);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) '4');
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray42, 1, (int) (byte) 1, (int) (short) -1, intArray48, false);
        int[] intArray58 = new int[] { (-1), 100 };
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) (byte) 1);
        int[] intArray66 = new int[] { (-1), 100 };
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray60, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray68, false);
        int[] intArray75 = new int[] { '#' };
        int int77 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray75, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray60, (int) (short) -1, 1, 2, intArray75, true);
        int[] intArray81 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray75, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray48, (int) (short) 100, 0, 1, intArray81, false);
        int[] intArray85 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 100);
        int int89 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray48, (int) '#', (int) (short) 100, (-1));
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray6, (int) (byte) -1, (int) '4', (int) (byte) 1, intArray48, true);
        int[] intArray93 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, 0);
        java.lang.Class<?> wildcardClass94 = intArray93.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[35]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 1]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[1, 1]");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test5059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5059");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 1);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (short) 1);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) 'a');
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (-1));
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray30, 2);
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 10);
        int[] intArray40 = new int[] { (-1), 100 };
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) (byte) 1);
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray42, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray50, false);
        int[] intArray57 = new int[] { '#' };
        int int59 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray57, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray42, (int) (short) -1, 1, 2, intArray57, true);
        int[] intArray63 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray57, 10);
        int int67 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray63, 1, (int) (short) 1, (int) (byte) -1);
        int[] intArray69 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray63, (int) ' ');
        int int73 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray63, 10, (int) (byte) 0, (int) (short) 1);
        int[] intArray75 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray63, (int) '#');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray32, 10, 10, 3, intArray63, true);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[35]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 2 + "'", int73 == 2);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1]");
    }

    @Test
    public void test5060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5060");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 1, (int) (byte) 1, (int) (short) -1, intArray32, false);
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        int[] intArray50 = new int[] { (-1), 100 };
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray44, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray52, false);
        int[] intArray59 = new int[] { '#' };
        int int61 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray59, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray44, (int) (short) -1, 1, 2, intArray59, true);
        int[] intArray65 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray59, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, (int) (short) 100, 0, 1, intArray65, false);
        int[] intArray71 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray65, (int) (byte) 0, (int) (byte) 10, (int) (short) -1, intArray71, true);
        int[] intArray75 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray65, (int) ' ');
        int int77 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray75, 10);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[35]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 1]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 2 + "'", int77 == 2);
    }

    @Test
    public void test5061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5061");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) 'a', 100, (int) (byte) 1, intArray38, false);
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (short) 100);
        int[] intArray52 = new int[] { (-1), 100 };
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) (byte) 1);
        int[] intArray60 = new int[] { (-1), 100 };
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray54, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray62, false);
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, (int) 'a');
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) ' ');
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (-1));
        int int72 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray70, 0);
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray46, (int) (short) 100, (int) '#', (int) (short) -1, intArray74, true);
        int int78 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray46, (int) '4');
        int[] intArray80 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, 3);
        int[] intArray84 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray46, (int) (short) 1, (int) (short) 100, (int) (short) 0, intArray84, false);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 2 + "'", int78 == 2);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1]");
    }

    @Test
    public void test5062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5062");
        int[] intArray0 = null;
        int[] intArray6 = new int[] { (-1), 100 };
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (int) (byte) 1);
        int[] intArray14 = new int[] { (-1), 100 };
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray14, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray8, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray16, false);
        int[] intArray23 = new int[] { '#' };
        int int25 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray23, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray8, (int) (short) -1, 1, 2, intArray23, true);
        int[] intArray29 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray23, 10);
        int[] intArray31 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray23, (int) 'a');
        int int33 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray23, (int) ' ');
        int[] intArray35 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray23, 1);
        int int37 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray35, (int) (short) 100);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray0, (int) (short) -1, (int) 'a', (int) '4', intArray35, false);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[35]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2 + "'", int37 == 2);
    }

    @Test
    public void test5063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5063");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 1);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (short) 1);
        int int28 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) 'a');
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, 0);
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) ' ');
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (short) 1);
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (short) 100);
        int int38 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, (int) ' ');
        int int42 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray36, 100, 1, (int) (short) -1);
        int[] intArray48 = new int[] { ' ', (byte) -1 };
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        int[] intArray62 = new int[] { (-1), 100 };
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray56, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray64, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray48, (-1), (int) ' ', (int) (byte) 10, intArray64, false);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, 1);
        int int72 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray70, (int) (short) 1);
        int int74 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray70, (int) 'a');
        int int76 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray70, 0);
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) ' ');
        int[] intArray80 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) (short) 1);
        int int82 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray80, (int) '4');
        int int86 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray80, (int) (short) 10, (int) (byte) 1, (int) (short) 0);
        int[] intArray88 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray80, 10);
        int[] intArray90 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray80, (int) (byte) -1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray36, (int) '4', (int) ' ', 0, intArray80, true);
        // The following exception was thrown during execution in test generation
        try {
            int int96 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray80, 100, (int) (byte) 0, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 2 + "'", int72 == 2);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2 + "'", int74 == 2);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2 + "'", int76 == 2);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 2 + "'", int82 == 2);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[0, 1]");
    }

    @Test
    public void test5064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5064");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray22 = new int[] { ' ', (byte) -1 };
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray22, (-1), (int) ' ', (int) (byte) 10, intArray38, false);
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray50, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray58, false);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray38, (int) 'a', 100, (int) (byte) 1, intArray58, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray12, (int) (short) 100, (int) 'a', (int) (short) 0, intArray38, true);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, 4);
        // The following exception was thrown during execution in test generation
        try {
            int int72 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray68, (int) (short) 100, 10, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
    }

    @Test
    public void test5065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5065");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int int22 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (int) (byte) -1, 0, (int) (short) 0);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (-1));
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) (short) 1);
        int int28 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, 0);
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) '#');
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 2);
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) 'a');
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) '#');
        int int38 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray34, 10);
        // The following exception was thrown during execution in test generation
        try {
            int int42 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray34, 4, (int) '4', (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
    }

    @Test
    public void test5066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5066");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int int22 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (int) (byte) -1, 0, (int) (short) 0);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (-1));
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '#');
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) '#');
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) ' ');
        java.lang.Class<?> wildcardClass31 = intArray30.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test5067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5067");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, 10);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) 'a');
        int int12 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, 0);
        int[] intArray14 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (short) 10);
        int int18 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray8, (int) (short) 0, (int) '#', 10);
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (short) 1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
    }

    @Test
    public void test5068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5068");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 1);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (short) 1);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) 'a');
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, 0);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        int[] intArray44 = new int[] { (-1), 100 };
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray38, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray46, false);
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) ' ');
        int int52 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray50, 0);
        int int54 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray50, (int) (short) 10);
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) 'a');
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray30, 4, (int) (short) 10, (int) (byte) 0, intArray50, true);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2 + "'", int54 == 2);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
    }

    @Test
    public void test5069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5069");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int int20 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray16, (int) (byte) 1);
        int int22 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray16, (-1));
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        java.lang.Class<?> wildcardClass25 = intArray24.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test5070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5070");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray27 = new int[] { (short) 100, (short) 0, 100, (byte) -1, 10 };
        int int31 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray27, 1, (int) (byte) 100, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, 100, (int) '#', (int) (short) 10, intArray27, false);
        int int35 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, 0);
        int[] intArray41 = new int[] { (-1), 100 };
        int[] intArray43 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray41, (int) (byte) 1);
        int[] intArray49 = new int[] { (-1), 100 };
        int[] intArray51 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray49, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray43, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray51, false);
        int[] intArray55 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray51, (int) ' ');
        int[] intArray57 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray55, (int) (byte) 0);
        int[] intArray59 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray57, (int) (byte) 1);
        int int63 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray57, (int) ' ', 10, 0);
        int[] intArray65 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray57, (int) (short) 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, 0, (int) (short) 100, (int) '#', intArray65, false);
        int[] intArray69 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) '4');
        int int71 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray69, (int) (short) 100);
        java.lang.Class<?> wildcardClass72 = intArray69.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[100, 0, 100, -1, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2 + "'", int71 == 2);
        org.junit.Assert.assertNotNull(wildcardClass72);
    }

    @Test
    public void test5071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5071");
        int[] intArray0 = null;
        int[] intArray6 = new int[] { (-1), 100 };
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (int) (byte) 1);
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (int) ' ');
        int int14 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray10, (int) (short) 1, (-1), (int) (byte) 0);
        int int18 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray10, 10, (int) 'a', (int) (short) 10);
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) '#');
        int[] intArray26 = new int[] { ' ', (byte) -1 };
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        int[] intArray40 = new int[] { (-1), 100 };
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray34, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray42, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, (-1), (int) ' ', (int) (byte) 10, intArray42, false);
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, 100);
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 100);
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, 1);
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) '4');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray10, (-1), 1, (-1), intArray26, true);
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) 'a');
        int int62 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray58, 0, (int) (byte) 100, (int) (short) 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray0, (int) (short) 100, (int) '4', (int) (byte) 1, intArray58, true);
        // The following exception was thrown during execution in test generation
        try {
            int int68 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray0, 1, (int) (short) 0, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
    }

    @Test
    public void test5072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5072");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 100);
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray26, (-1), 2, (int) (byte) -1);
        int int34 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray26, (int) ' ', (int) (byte) 100, 4);
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (-1));
        int[] intArray42 = new int[] { ' ', (byte) -1 };
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray50, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray58, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray42, (-1), (int) ' ', (int) (byte) 10, intArray58, false);
        int[] intArray68 = new int[] { (-1), 100 };
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) (byte) 1);
        int[] intArray76 = new int[] { (-1), 100 };
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray76, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray70, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray78, false);
        int[] intArray82 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray78, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray58, (int) 'a', 100, (int) (byte) 1, intArray78, false);
        int[] intArray86 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, 10);
        int[] intArray88 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray36, (int) (short) 100, (int) (byte) 1, (-1), intArray58, true);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1]");
    }

    @Test
    public void test5073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5073");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 100);
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray26, (-1), 2, (int) (byte) -1);
        int[] intArray34 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, (int) (short) 1, (int) (byte) 100, (int) (byte) -1, intArray34, false);
        int int38 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray26, (int) (short) 1);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, 4);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        int[] intArray63 = new int[] { '#' };
        int int65 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray63, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (short) -1, 1, 2, intArray63, true);
        int[] intArray69 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray63, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, (int) (short) -1, 0, 1, intArray69, false);
        int int75 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray69, 100, (int) '4', 10);
        int[] intArray77 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray69, (int) (byte) 100);
        int int81 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray77, (int) (short) 0, 3, (int) (short) 1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[35]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 1]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
    }

    @Test
    public void test5074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5074");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 100);
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray26, (int) (short) 10, (-1), (int) (short) 1);
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, 100);
        int int34 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray32, (int) (short) 10);
        int int38 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray32, (int) (short) -1, 100, (int) (short) 0);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 0);
        int[] intArray46 = new int[] { ' ', (byte) -1 };
        int[] intArray52 = new int[] { (-1), 100 };
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) (byte) 1);
        int[] intArray60 = new int[] { (-1), 100 };
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray54, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray62, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray46, (-1), (int) ' ', (int) (byte) 10, intArray62, false);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, 100);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 100);
        int int74 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray70, (-1), 2, (int) (byte) -1);
        int int78 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray70, (int) ' ', (int) (byte) 100, 4);
        int[] intArray80 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (-1));
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray40, (int) (byte) 100, (int) (byte) 0, (int) (byte) 10, intArray70, false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[0, 1]");
    }

    @Test
    public void test5075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5075");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { (-1), 100 };
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 1);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray22, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray30, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) 10, (int) '4', 10, intArray30, true);
        int int36 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray4, (int) (byte) -1);
        int int38 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray4, (int) ' ');
        int[] intArray42 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (short) 0, (int) (short) 1, (int) (byte) -1, intArray42, false);
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (byte) 1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
    }

    @Test
    public void test5076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5076");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 1, (int) (byte) 1, (int) (short) -1, intArray32, false);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 10);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) 'a');
        int[] intArray45 = new int[] { 10 };
        int[] intArray47 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray45, (int) '4');
        int[] intArray52 = new int[] { '#' };
        int int54 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray52, (int) (short) 0);
        int int56 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray52, (int) (byte) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray47, 10, (int) (byte) 1, (int) (short) 0, intArray52, false);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, 10, 100, (int) (short) 1, intArray60, false);
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) -1);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray32, (int) (byte) -1);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, 100);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[10]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[35]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[1, 1]");
    }

    @Test
    public void test5077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5077");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray27 = new int[] { (short) 100, (short) 0, 100, (byte) -1, 10 };
        int int31 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray27, 1, (int) (byte) 100, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, 100, (int) '#', (int) (short) 10, intArray27, false);
        int[] intArray35 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (short) 1);
        int int37 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) (byte) 10);
        int int39 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) (byte) -1);
        int[] intArray41 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 10);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[100, 0, 100, -1, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2 + "'", int37 == 2);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2 + "'", int39 == 2);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, -1]");
    }

    @Test
    public void test5078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5078");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 1);
        int[] intArray30 = new int[] { ' ', (byte) -1 };
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        int[] intArray44 = new int[] { (-1), 100 };
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray38, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray46, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray30, (-1), (int) ' ', (int) (byte) 10, intArray46, false);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        int[] intArray64 = new int[] { (-1), 100 };
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray58, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray66, false);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray46, (int) 'a', 100, (int) (byte) 1, intArray66, false);
        int int74 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray66, (int) '4');
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) (byte) 10, (int) '#', 0, intArray66, false);
        int[] intArray80 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) (short) 1);
        int int84 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray80, (int) '4', 100, (-1));
        int[] intArray86 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray80, 4);
        java.lang.Class<?> wildcardClass87 = intArray86.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2 + "'", int74 == 2);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test5079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5079");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 0);
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 1);
        int int24 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (int) ' ', 10, 0);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (short) 10);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) '4');
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (short) -1);
        int[] intArray36 = new int[] { ' ', (byte) -1 };
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        int[] intArray50 = new int[] { (-1), 100 };
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray44, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray52, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (-1), (int) ' ', (int) (byte) 10, intArray52, false);
        int[] intArray62 = new int[] { (-1), 100 };
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, (int) (byte) 1);
        int[] intArray70 = new int[] { (-1), 100 };
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray64, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray72, false);
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray52, (int) 'a', 100, (int) (byte) 1, intArray72, false);
        int int80 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray72, (int) '4');
        int int82 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray72, 0);
        int int86 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray72, (int) (byte) 10, 10, 3);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray28, 3, (int) (short) 10, 1, intArray72, true);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2 + "'", int80 == 2);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 2 + "'", int82 == 2);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
    }

    @Test
    public void test5080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5080");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) ' ');
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray6, (int) (short) 1, (-1), (int) (byte) 0);
        int[] intArray14 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray6, 2, (int) '4', (int) (short) 0, intArray14, true);
        int int20 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray6, (int) (short) -1, (int) ' ', (int) (byte) 1);
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray6, 0, (int) 'a', 2, intArray26, false);
        int int34 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray6, (int) (short) 1, (int) (byte) 1, 1);
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, 0);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (int) (byte) 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
    }

    @Test
    public void test5081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5081");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, 0);
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (short) -1);
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, 3);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, 100);
        java.lang.Class<?> wildcardClass25 = intArray24.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test5082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5082");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) '4');
        int int20 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) (byte) -1);
        int int22 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (-1));
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (-1), (int) '#', 4);
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (int) (short) 0, (int) '#', (int) (byte) 1);
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            int int36 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray32, (int) (byte) 0, 10, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
    }

    @Test
    public void test5083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5083");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int int18 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray16, 0);
        int int20 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray16, (int) (short) 10);
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) 'a');
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, 3);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, 100);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
    }

    @Test
    public void test5084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5084");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int int8 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, 0);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, 4);
        int int14 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray6, (int) (short) 0, (int) (short) 10, (int) (short) 1);
        int int18 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray6, (int) (short) 100, (int) ' ', 4);
        int[] intArray23 = new int[] { 10 };
        int[] intArray25 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray23, (int) '4');
        int[] intArray27 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray23, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray6, (int) ' ', (int) 'a', (int) '#', intArray27, true);
        int[] intArray31 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray27, 2);
        int int33 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray31, (int) (short) 100);
        int[] intArray35 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray31, 100);
        java.lang.Class<?> wildcardClass36 = intArray31.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[10]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test5085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5085");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { ' ', (byte) -1 };
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray36, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, (-1), (int) ' ', (int) (byte) 10, intArray36, false);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, 100);
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 100);
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray12, (int) '#', (int) (short) 10, 0, intArray20, false);
        int int50 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray12, (int) (short) 10);
        int int54 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray12, 0, (int) (short) 0, (int) (byte) 1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2 + "'", int54 == 2);
    }

    @Test
    public void test5086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5086");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { (-1), 100 };
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 1);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray22, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray30, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) 10, (int) '4', 10, intArray30, true);
        int int36 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray4, 0);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (byte) 100);
        int int42 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray38, (int) (byte) 0, 100, (int) (short) 1);
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (short) -1);
        int[] intArray50 = new int[] { ' ', (byte) -1 };
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        int[] intArray64 = new int[] { (-1), 100 };
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray58, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray66, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray50, (-1), (int) ' ', (int) (byte) 10, intArray66, false);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, 100);
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (int) '4');
        int[] intArray80 = new int[] { (-1), 100 };
        int[] intArray82 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray80, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray74, 1, (int) (byte) 1, (int) (short) -1, intArray80, false);
        int[] intArray86 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray80, (int) (short) 10);
        int int88 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray80, (int) '#');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray44, (int) 'a', (int) 'a', 4, intArray80, false);
        int int92 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray44, (int) (short) 10);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 2 + "'", int92 == 2);
    }

    @Test
    public void test5087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5087");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int int22 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (int) (byte) -1, 0, (int) (short) 0);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (-1));
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) (byte) 100);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) '4');
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray36, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray44, false);
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) ' ');
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 0);
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) '#');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, (int) (short) 1, (int) (short) 100, 0, intArray48, false);
        int int58 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray48, 100, (int) (byte) 100, (int) (byte) -1);
        int int60 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray48, 1);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 100);
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, 3);
        java.lang.Class<?> wildcardClass65 = intArray64.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2 + "'", int60 == 2);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test5088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5088");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int int8 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, 0);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, 2);
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (-1));
        int int14 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, (int) (byte) 100);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (int) (byte) -1);
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, 0);
        int int22 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (-1), (int) (short) 10, (int) (byte) 1);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) 'a');
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) ' ');
        int[] intArray53 = new int[] { (short) 100, (short) 0, 100, (byte) -1, 10 };
        int int57 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray53, 1, (int) (byte) 100, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray44, 100, (int) '#', (int) (short) 10, intArray53, false);
        int int61 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray44, 0);
        int[] intArray67 = new int[] { ' ', (byte) -1 };
        int[] intArray73 = new int[] { (-1), 100 };
        int[] intArray75 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray73, (int) (byte) 1);
        int[] intArray81 = new int[] { (-1), 100 };
        int[] intArray83 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray81, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray75, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray83, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray67, (-1), (int) ' ', (int) (byte) 10, intArray83, false);
        int[] intArray89 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray83, 1);
        int int91 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray89, (int) (short) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray44, (int) (byte) 1, (-1), 0, intArray89, false);
        int[] intArray95 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray89, (int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, (int) (short) 10, (int) (short) 1, (int) '4', intArray95, true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[100, 0, 100, -1, 10]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2 + "'", int61 == 2);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 2 + "'", int91 == 2);
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, -1]");
    }

    @Test
    public void test5089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5089");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { ' ', (byte) -1 };
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray36, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, (-1), (int) ' ', (int) (byte) 10, intArray36, false);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, 100);
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 100);
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray12, (int) '#', (int) (short) 10, 0, intArray20, false);
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, 4);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        int[] intArray64 = new int[] { (-1), 100 };
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray58, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray66, false);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) 'a');
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) ' ');
        int int76 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray72, (int) (byte) -1, 0, (int) (short) 0);
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (-1));
        int int80 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray72, (int) (short) 1);
        int int82 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray72, 0);
        int int84 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray72, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray50, 100, (int) '4', 0, intArray72, false);
        int[] intArray88 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (int) 'a');
        java.lang.Class<?> wildcardClass89 = intArray88.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2 + "'", int80 == 2);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 2 + "'", int82 == 2);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 2 + "'", int84 == 2);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test5090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5090");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray19 = new int[] { '#' };
        int int21 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (short) -1, 1, 2, intArray19, true);
        int[] intArray29 = new int[] { ' ', (byte) -1 };
        int[] intArray35 = new int[] { (-1), 100 };
        int[] intArray37 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray35, (int) (byte) 1);
        int[] intArray43 = new int[] { (-1), 100 };
        int[] intArray45 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray43, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray37, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray45, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray29, (-1), (int) ' ', (int) (byte) 10, intArray45, false);
        int int51 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray45, (int) (short) 1);
        int[] intArray57 = new int[] { (-1), 100 };
        int[] intArray59 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray57, (int) (byte) 1);
        int[] intArray65 = new int[] { (-1), 100 };
        int[] intArray67 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray65, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray59, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray67, false);
        int[] intArray71 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray67, (int) 'a');
        int[] intArray73 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray71, (int) ' ');
        int[] intArray75 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray73, (int) (byte) 10);
        int[] intArray77 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray75, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray45, (int) 'a', (int) (short) 10, (int) (byte) 0, intArray75, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray19, (int) (byte) -1, 2, (int) (byte) 0, intArray45, false);
        int int83 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (byte) -1);
        int[] intArray85 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, (int) (short) 0);
        int[] intArray87 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray85, 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2 + "'", int51 == 2);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, -1]");
    }

    @Test
    public void test5091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5091");
        int[] intArray0 = null;
        int[] intArray6 = new int[] { ' ', (byte) -1 };
        int[] intArray12 = new int[] { (-1), 100 };
        int[] intArray14 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) (byte) 1);
        int[] intArray20 = new int[] { (-1), 100 };
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray14, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray22, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray6, (-1), (int) ' ', (int) (byte) 10, intArray22, false);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, 1);
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray28, (int) (short) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        int[] intArray44 = new int[] { (-1), 100 };
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray38, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray46, false);
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) 'a');
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) (short) 100);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) '#', (int) 'a', (int) '#', intArray52, false);
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, 0);
        int int60 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray52, (int) (short) 0, 1, (int) (short) -1);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) (byte) 1);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray62, (int) ' ', 0, (int) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray0, (int) (byte) -1, 0, 3, intArray62, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot load from int array because \"nums\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
    }

    @Test
    public void test5092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5092");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 10);
        int[] intArray24 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) (byte) 0, (int) (short) 100, (int) (byte) -1, intArray24, false);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) 'a');
        int int32 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray28, (int) (short) 10, 100, 2);
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, 1);
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (short) 0);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, 2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
    }

    @Test
    public void test5093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5093");
        int[] intArray1 = new int[] { 10 };
        int[] intArray3 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray1, (int) '4');
        int[] intArray8 = new int[] { '#' };
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) (short) 0);
        int int12 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) (byte) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray3, 10, (int) (byte) 1, (int) (short) 0, intArray8, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (short) 0);
        int[] intArray22 = new int[] { (-1), 100 };
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, (int) (byte) 1);
        int[] intArray30 = new int[] { (-1), 100 };
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray30, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray24, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray32, false);
        int[] intArray40 = new int[] { (-1), 100 };
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) (byte) 1);
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray42, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray50, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray24, (int) (byte) 10, (int) '4', 10, intArray50, true);
        int int56 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, 0);
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 100);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int int62 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, 0);
        int int64 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (byte) 100);
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray16, (int) (short) 100, 0, 1, intArray24, true);
        java.lang.Class<?> wildcardClass69 = intArray16.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[10]");
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[35]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2 + "'", int56 == 2);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2 + "'", int62 == 2);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2 + "'", int64 == 2);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test5094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5094");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { ' ', (byte) -1 };
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray36, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, (-1), (int) ' ', (int) (byte) 10, intArray36, false);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (int) 'a', 100, (int) (byte) 1, intArray56, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, 10, (int) (short) 0, (int) (short) -1, intArray36, true);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, 0);
        int int70 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray36, 10, 10, (int) (short) 1);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, 0);
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) '#');
        java.lang.Class<?> wildcardClass75 = intArray36.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test5095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5095");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (short) 100);
        int int20 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray16, 3);
        int int22 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray16, 100);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray16, (int) (short) 0, (int) ' ', 4);
        int int28 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray16, 2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
    }

    @Test
    public void test5096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5096");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int int6 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray2, (int) (byte) 100);
        int int8 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray2, 0);
        int int12 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray2, (int) 'a', (int) (byte) 100, 1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test5097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5097");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 10);
        int[] intArray24 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) (byte) 0, (int) (short) 100, (int) (byte) -1, intArray24, false);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) 'a');
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) '#');
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, 100);
        int[] intArray38 = new int[] { (-1), 100 };
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 1);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) (short) 10);
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) '#');
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, 4);
        int int48 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray44, 2);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, 2, (int) (short) 100, (int) (short) 0, intArray44, false);
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 0);
        int int54 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray28, (int) (byte) 1);
        java.lang.Class<?> wildcardClass55 = intArray28.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2 + "'", int54 == 2);
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test5098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5098");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 10);
        int[] intArray24 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) (byte) 0, (int) (short) 100, (int) (byte) -1, intArray24, false);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) 'a');
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) '#');
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, 100);
        int[] intArray38 = new int[] { (-1), 100 };
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 1);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) ' ');
        int int46 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray42, (int) (short) 1, (-1), (int) (byte) 0);
        int[] intArray50 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray42, 2, (int) '4', (int) (short) 0, intArray50, true);
        int int56 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray42, (int) (short) -1, (int) ' ', (int) (byte) 1);
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) '#');
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) (byte) 100);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray32, (int) 'a', (int) 'a', (int) (byte) 1, intArray58, true);
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, 2);
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, 100);
        java.lang.Class<?> wildcardClass67 = intArray66.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass67);
    }

    @Test
    public void test5099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5099");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray22 = new int[] { ' ', (byte) -1 };
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray22, (-1), (int) ' ', (int) (byte) 10, intArray38, false);
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray50, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray58, false);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray38, (int) 'a', 100, (int) (byte) 1, intArray58, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray12, (int) (short) 100, (int) 'a', (int) (short) 0, intArray38, true);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (-1));
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) (short) 100);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) (byte) 1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
    }

    @Test
    public void test5100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5100");
        int[] intArray0 = null;
        int[] intArray6 = new int[] { ' ', (byte) -1 };
        int[] intArray12 = new int[] { (-1), 100 };
        int[] intArray14 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) (byte) 1);
        int[] intArray20 = new int[] { (-1), 100 };
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray14, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray22, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray6, (-1), (int) ' ', (int) (byte) 10, intArray22, false);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, 0);
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) '4');
        int[] intArray36 = new int[] { ' ', (byte) -1 };
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        int[] intArray50 = new int[] { (-1), 100 };
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray44, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray52, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (-1), (int) ' ', (int) (byte) 10, intArray52, false);
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, 0);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) ' ');
        int int62 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray60, (int) (byte) -1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (byte) -1, (int) (short) 0, (-1), intArray60, true);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray60, (int) '4');
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray0, (int) (byte) 100, (int) '4', (int) (byte) 100, intArray60, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot load from int array because \"nums\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2 + "'", int62 == 2);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
    }

    @Test
    public void test5101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5101");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray19 = new int[] { '#' };
        int int21 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (short) -1, 1, 2, intArray19, true);
        int[] intArray25 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 10);
        int[] intArray27 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 0);
        int[] intArray33 = new int[] { ' ', (byte) -1 };
        int[] intArray39 = new int[] { (-1), 100 };
        int[] intArray41 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray39, (int) (byte) 1);
        int[] intArray47 = new int[] { (-1), 100 };
        int[] intArray49 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray47, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray41, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray49, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray33, (-1), (int) ' ', (int) (byte) 10, intArray49, false);
        int[] intArray59 = new int[] { (-1), 100 };
        int[] intArray61 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray59, (int) (byte) 1);
        int[] intArray67 = new int[] { (-1), 100 };
        int[] intArray69 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray67, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray61, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray69, false);
        int[] intArray73 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray69, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray49, (int) 'a', 100, (int) (byte) 1, intArray69, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray27, (int) (short) 0, (int) (byte) 1, (int) (short) 1, intArray49, true);
        int[] intArray79 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray27, (int) 'a');
        java.lang.Class<?> wildcardClass80 = intArray27.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass80);
    }

    @Test
    public void test5102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5102");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 0);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 10);
        int int28 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray26, 0);
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray26, (int) (byte) 100);
        int int34 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray26, (int) ' ', (int) '#', (int) (byte) 10);
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, 2);
        int[] intArray40 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 10, (int) (short) 10, 4, intArray40, true);
        java.lang.Class<?> wildcardClass43 = intArray26.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test5103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5103");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) 'a', 100, (int) (byte) 1, intArray38, false);
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (short) 100);
        int int50 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray46, (-1), (int) 'a', (int) (byte) 0);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        int[] intArray64 = new int[] { (-1), 100 };
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray58, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray66, false);
        int[] intArray73 = new int[] { '#' };
        int int75 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray73, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray58, (int) (short) -1, 1, 2, intArray73, true);
        int[] intArray79 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray73, 10);
        int[] intArray81 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray73, (int) 'a');
        int int83 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray73, (int) ' ');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray46, 0, 3, (int) (byte) 0, intArray73, true);
        java.lang.Class<?> wildcardClass86 = intArray46.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[35]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test5104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5104");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, 0);
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (short) -1);
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, 3);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) -1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[0, 1]");
    }

    @Test
    public void test5105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5105");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { (-1), 100 };
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 1);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray22, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray30, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) 10, (int) '4', 10, intArray30, true);
        int[] intArray40 = new int[] { ' ', (byte) -1 };
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray40, (-1), (int) ' ', (int) (byte) 10, intArray56, false);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, 0);
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, (int) ' ');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, 2, (int) 'a', 4, intArray62, true);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, (int) 'a');
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, 4);
        int int72 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray62, (int) (byte) -1);
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, (int) (short) 1);
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, (-1));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 2 + "'", int72 == 2);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[0, 1]");
    }

    @Test
    public void test5106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5106");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int int22 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (int) (byte) -1, 0, (int) (short) 0);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (-1));
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) (byte) 100);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (short) 10);
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray28, (int) 'a');
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        int[] intArray44 = new int[] { (-1), 100 };
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray38, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray46, false);
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) 'a');
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) ' ');
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) (byte) 10);
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) (short) 100);
        int int58 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray56, (int) (short) 0);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) -1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray28, 0, 1, (-1), intArray60, false);
        int int64 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray28, 4);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2 + "'", int58 == 2);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2 + "'", int64 == 2);
    }

    @Test
    public void test5107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5107");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) ' ');
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray6, (int) (short) 1, (-1), (int) (byte) 0);
        int int14 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray6, 4, 10, 0);
        int[] intArray20 = new int[] { (-1), 100 };
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 1);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray22, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray30, false);
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray30, (int) 'a');
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) ' ');
        int[] intArray45 = new int[] { (short) 100, (short) 0, 100, (byte) -1, 10 };
        int int49 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray45, 1, (int) (byte) 100, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray36, 100, (int) '#', (int) (short) 10, intArray45, false);
        int[] intArray53 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (short) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray6, (int) (byte) 10, (int) (byte) 10, 4, intArray36, true);
        java.lang.Class<?> wildcardClass56 = intArray36.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[100, 0, 100, -1, 10]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass56);
    }

    @Test
    public void test5108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5108");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) ' ');
        int[] intArray11 = new int[] { 10 };
        int[] intArray13 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray11, (int) '4');
        int[] intArray18 = new int[] { '#' };
        int int20 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) (short) 0);
        int int22 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) (byte) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray13, 10, (int) (byte) 1, (int) (short) 0, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray6, (int) (byte) 1, 0, (-1), intArray13, true);
        int int28 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray13, 2);
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray13, (int) '4');
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[10]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[35]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
    }

    @Test
    public void test5109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5109");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { ' ', (byte) -1 };
        int[] intArray38 = new int[] { (-1), 100 };
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 1);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray40, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray48, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, (-1), (int) ' ', (int) (byte) 10, intArray48, false);
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, 100);
        int int56 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray32, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray24, 10, (int) 'a', (-1), intArray32, true);
        int int60 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) '#');
        int[] intArray66 = new int[] { (-1), 100 };
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) (byte) 1);
        int[] intArray74 = new int[] { (-1), 100 };
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray74, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray68, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray76, false);
        int[] intArray80 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray76, (int) ' ');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray24, (int) (byte) 100, 100, 0, intArray80, false);
        int int84 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (-1));
        int int88 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray24, 100, (int) 'a', (int) (short) 1);
        int int90 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (byte) 0);
        int[] intArray92 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2 + "'", int60 == 2);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 2 + "'", int84 == 2);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 2 + "'", int90 == 2);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1]");
    }

    @Test
    public void test5110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5110");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) 'a', 100, (int) (byte) 1, intArray38, false);
        int int46 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, (int) '4');
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) 'a');
        int int50 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray48, (int) (short) -1);
        int int52 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray48, (int) (byte) 100);
        java.lang.Class<?> wildcardClass53 = intArray48.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test5111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5111");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 1, (int) (byte) 1, (int) (short) -1, intArray32, false);
        int int40 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray32, 10, 100, (int) '#');
        int int42 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray32, (int) (byte) 0);
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) (short) 10);
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray32, (int) ' ', (int) (short) -1, (int) (byte) 1, intArray52, false);
        int int60 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray52, (int) 'a', 100, (int) ' ');
        java.lang.Class<?> wildcardClass61 = intArray52.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(wildcardClass61);
    }

    @Test
    public void test5112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5112");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) '4');
        int int20 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) (byte) -1);
        int int22 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (-1));
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (-1), (int) '#', 4);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) -1);
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 2);
        int int34 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (int) (short) 0, 1, 1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
    }

    @Test
    public void test5113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5113");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 1);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (short) 1);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) 'a');
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (-1));
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (short) 10);
        int int34 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray28, (int) (byte) -1);
        int int38 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray28, (int) (byte) 1, (int) (short) 100, 1);
        int int42 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray28, (int) ' ', (int) (byte) 0, (int) (byte) 1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2 + "'", int42 == 2);
    }

    @Test
    public void test5114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5114");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray19 = new int[] { '#' };
        int int21 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (short) -1, 1, 2, intArray19, true);
        int[] intArray25 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 10);
        int[] intArray27 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 100);
        int[] intArray33 = new int[] { ' ', (byte) -1 };
        int[] intArray39 = new int[] { (-1), 100 };
        int[] intArray41 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray39, (int) (byte) 1);
        int[] intArray47 = new int[] { (-1), 100 };
        int[] intArray49 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray47, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray41, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray49, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray33, (-1), (int) ' ', (int) (byte) 10, intArray49, false);
        int[] intArray55 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray33, 100);
        int[] intArray57 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray55, (int) '4');
        int int61 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray55, 0, (int) (byte) 100, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray27, (int) (byte) 0, (-1), 1, intArray55, false);
        int[] intArray65 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray27, 1);
        int[] intArray67 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray27, (int) '#');
        java.lang.Class<?> wildcardClass68 = intArray27.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass68);
    }

    @Test
    public void test5115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5115");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 100);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray36, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray44, false);
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) ' ');
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, 4, (int) (byte) 10, (int) (byte) 1, intArray48, false);
        int[] intArray58 = new int[] { (-1), 100 };
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) (byte) 1);
        int[] intArray66 = new int[] { (-1), 100 };
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray60, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray68, false);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) ' ');
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (int) (byte) 0);
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (int) '#');
        int int80 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray72, (-1), (int) (short) 100, (int) (byte) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (short) 10, (int) (short) 100, 1, intArray72, false);
        int[] intArray86 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, 1, 3, 100, intArray86, false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
    }

    @Test
    public void test5116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5116");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) ' ');
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray6, (int) (short) 1, (-1), (int) (byte) 0);
        int[] intArray14 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray6, 2, (int) '4', (int) (short) 0, intArray14, true);
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, 0);
        int int20 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, (int) (short) -1);
        int int22 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, (int) (short) -1);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (-1));
        int[] intArray30 = new int[] { (-1), 100 };
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray30, (int) (byte) 1);
        int[] intArray38 = new int[] { (-1), 100 };
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray32, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray40, false);
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) 'a');
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) ' ');
        int int50 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray46, (int) (byte) -1, 0, (int) (short) 0);
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (-1));
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) '#');
        int int56 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray52, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray24, (int) (byte) 10, 1, 1, intArray52, false);
        // The following exception was thrown during execution in test generation
        try {
            int int62 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray24, (int) '#', (int) (short) 0, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2 + "'", int56 == 2);
    }

    @Test
    public void test5117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5117");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int int28 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray26, 0);
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray26, (int) (short) 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
    }

    @Test
    public void test5118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5118");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { (-1), 100 };
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 1);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray22, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray30, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) 10, (int) '4', 10, intArray30, true);
        int[] intArray38 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) 1, 4, 1, intArray38, false);
        java.lang.Class<?> wildcardClass41 = intArray30.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test5119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5119");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int int24 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) (short) 1);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) (byte) -1);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) 'a');
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 0);
        java.lang.Class<?> wildcardClass31 = intArray30.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test5120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5120");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { ' ', (byte) -1 };
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray36, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, (-1), (int) ' ', (int) (byte) 10, intArray36, false);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (int) 'a', 100, (int) (byte) 1, intArray56, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, 10, (int) (short) 0, (int) (short) -1, intArray36, true);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, 0);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, 10);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 100);
        int int72 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray70, (int) (byte) 0);
        int int74 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray70, 0);
        int int76 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray70, (int) (byte) 100);
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, 100);
        java.lang.Class<?> wildcardClass79 = intArray78.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 2 + "'", int72 == 2);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2 + "'", int74 == 2);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2 + "'", int76 == 2);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test5121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5121");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 100);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) 'a');
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, 1);
        int int34 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray30, (int) (byte) 0, 0, 0);
        int[] intArray39 = new int[] { 10 };
        int[] intArray41 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray39, (int) '4');
        int[] intArray46 = new int[] { '#' };
        int int48 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray46, (int) (short) 0);
        int int50 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray46, (int) (byte) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray41, 10, (int) (byte) 1, (int) (short) 0, intArray46, false);
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, 100, (int) (short) 100, 0, intArray46, true);
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (short) -1);
        int int62 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray46, 1, 4, 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[35]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
    }

    @Test
    public void test5122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5122");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) '#');
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, 4);
        int[] intArray16 = new int[] { ' ', (byte) -1 };
        int[] intArray22 = new int[] { (-1), 100 };
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, (int) (byte) 1);
        int[] intArray30 = new int[] { (-1), 100 };
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray30, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray24, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray32, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray16, (-1), (int) ' ', (int) (byte) 10, intArray32, false);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, 1);
        int int40 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, (int) (short) 1);
        int int42 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, (int) 'a');
        int int44 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, 0);
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) ' ');
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (short) 1);
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (short) 100);
        int int52 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray50, (int) ' ');
        int int56 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray50, 100, 1, (int) (short) -1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray10, (int) (short) 0, 1, 0, intArray50, false);
        int int60 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray50, 1);
        int int62 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray50, (int) '4');
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) (short) 0);
        int[] intArray70 = new int[] { (-1), 100 };
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) (byte) 1);
        int[] intArray78 = new int[] { (-1), 100 };
        int[] intArray80 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray78, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray72, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray80, false);
        int[] intArray84 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray80, (int) ' ');
        int[] intArray86 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray84, (int) (byte) 0);
        int[] intArray88 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray84, (int) '#');
        int int90 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray84, (int) ' ');
        int[] intArray92 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray84, 4);
        int[] intArray94 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray84, 3);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray50, (int) (short) 100, (int) (byte) 1, 3, intArray84, true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2 + "'", int40 == 2);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2 + "'", int42 == 2);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2 + "'", int44 == 2);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2 + "'", int60 == 2);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2 + "'", int62 == 2);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 2 + "'", int90 == 2);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, -1]");
    }

    @Test
    public void test5123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5123");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 10);
        int[] intArray24 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) (byte) 0, (int) (short) 100, (int) (byte) -1, intArray24, false);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) 'a');
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) '#');
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, 100);
        int[] intArray38 = new int[] { (-1), 100 };
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 1);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) ' ');
        int int46 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray42, (int) (short) 1, (-1), (int) (byte) 0);
        int[] intArray50 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray42, 2, (int) '4', (int) (short) 0, intArray50, true);
        int int56 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray42, (int) (short) -1, (int) ' ', (int) (byte) 1);
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) '#');
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) (byte) 100);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray32, (int) 'a', (int) 'a', (int) (byte) 1, intArray58, true);
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, 2);
        // The following exception was thrown during execution in test generation
        try {
            int int68 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray64, (int) (short) -1, (int) (byte) 10, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
    }

    @Test
    public void test5124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5124");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            int int22 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray16, (int) (byte) 0, (int) (short) 0, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
    }

    @Test
    public void test5125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5125");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray19 = new int[] { '#' };
        int int21 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (short) -1, 1, 2, intArray19, true);
        int[] intArray25 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 10);
        int[] intArray27 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 0);
        int[] intArray33 = new int[] { ' ', (byte) -1 };
        int[] intArray39 = new int[] { (-1), 100 };
        int[] intArray41 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray39, (int) (byte) 1);
        int[] intArray47 = new int[] { (-1), 100 };
        int[] intArray49 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray47, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray41, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray49, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray33, (-1), (int) ' ', (int) (byte) 10, intArray49, false);
        int[] intArray59 = new int[] { (-1), 100 };
        int[] intArray61 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray59, (int) (byte) 1);
        int[] intArray67 = new int[] { (-1), 100 };
        int[] intArray69 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray67, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray61, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray69, false);
        int[] intArray73 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray69, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray49, (int) 'a', 100, (int) (byte) 1, intArray69, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray27, (int) (short) 0, (int) (byte) 1, (int) (short) 1, intArray49, true);
        int int79 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray27, (int) (byte) -1);
        int[] intArray81 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray27, 1);
        int[] intArray83 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray81, (int) (short) -1);
        int[] intArray85 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray81, (int) (short) 100);
        int[] intArray87 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray85, (int) '4');
        int[] intArray89 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray87, 0);
        int[] intArray91 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray89, 0);
        int int93 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray91, (int) (short) -1);
        int[] intArray95 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray91, (int) (short) 10);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 2 + "'", int79 == 2);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 2 + "'", int93 == 2);
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, -1]");
    }

    @Test
    public void test5126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5126");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 100);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) 'a');
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, 1);
        int int34 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray30, (int) (byte) 0, 0, 0);
        int[] intArray39 = new int[] { 10 };
        int[] intArray41 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray39, (int) '4');
        int[] intArray46 = new int[] { '#' };
        int int48 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray46, (int) (short) 0);
        int int50 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray46, (int) (byte) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray41, 10, (int) (byte) 1, (int) (short) 0, intArray46, false);
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, 100, (int) (short) 100, 0, intArray46, true);
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, 4);
        int int62 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray46, (int) (short) 100, (int) (byte) 100, (int) (byte) -1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[35]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
    }

    @Test
    public void test5127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5127");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) ' ');
        int[] intArray11 = new int[] { 10 };
        int[] intArray13 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray11, (int) '4');
        int[] intArray18 = new int[] { '#' };
        int int20 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) (short) 0);
        int int22 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) (byte) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray13, 10, (int) (byte) 1, (int) (short) 0, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray6, (int) (byte) 1, 0, (-1), intArray13, true);
        int[] intArray32 = new int[] { ' ', (byte) -1 };
        int[] intArray38 = new int[] { (-1), 100 };
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 1);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray40, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray48, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, (-1), (int) ' ', (int) (byte) 10, intArray48, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray13, (int) (byte) -1, (int) (short) 100, 4, intArray32, true);
        int int56 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray32, 4);
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) ' ');
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, 4);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[10]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[35]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[0, 0]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
    }

    @Test
    public void test5128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5128");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray22 = new int[] { ' ', (byte) -1 };
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray22, (-1), (int) ' ', (int) (byte) 10, intArray38, false);
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray50, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray58, false);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray38, (int) 'a', 100, (int) (byte) 1, intArray58, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray12, (int) (short) 100, (int) 'a', (int) (short) 0, intArray38, true);
        int int68 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, 2);
        int int70 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, (int) (short) -1);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) '#');
        java.lang.Class<?> wildcardClass73 = intArray38.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2 + "'", int68 == 2);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2 + "'", int70 == 2);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test5129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5129");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 100);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray36, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray44, false);
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) ' ');
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, 4, (int) (byte) 10, (int) (byte) 1, intArray48, false);
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, 0);
        int int58 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray54, (int) (short) 1, 3, (int) (byte) 1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
    }

    @Test
    public void test5130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5130");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 1);
        int[] intArray30 = new int[] { ' ', (byte) -1 };
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        int[] intArray44 = new int[] { (-1), 100 };
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray38, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray46, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray30, (-1), (int) ' ', (int) (byte) 10, intArray46, false);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        int[] intArray64 = new int[] { (-1), 100 };
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray58, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray66, false);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray46, (int) 'a', 100, (int) (byte) 1, intArray66, false);
        int int74 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray66, (int) '4');
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) (byte) 10, (int) '#', 0, intArray66, false);
        int[] intArray80 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) (short) 1);
        int int84 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray80, (int) '4', 100, (-1));
        int int86 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray80, (int) (short) 0);
        int int90 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray80, 10, (int) (short) 100, 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2 + "'", int74 == 2);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 2 + "'", int86 == 2);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
    }

    @Test
    public void test5131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5131");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { ' ', (byte) -1 };
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray36, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, (-1), (int) ' ', (int) (byte) 10, intArray36, false);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (int) 'a', 100, (int) (byte) 1, intArray56, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, 10, (int) (short) 0, (int) (short) -1, intArray36, true);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, 0);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, 10);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 100);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 0);
        int int76 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, (int) (byte) 0);
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 100);
        int int82 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray36, (int) 'a', (int) (byte) 100, (-1));
        java.lang.Class<?> wildcardClass83 = intArray36.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2 + "'", int76 == 2);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test5132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5132");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) '4');
        int int20 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) (byte) -1);
        int int22 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (-1));
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (-1), (int) '#', 4);
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (int) (short) 0, (int) '#', (int) (byte) 1);
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 0);
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 1);
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, 10);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
    }

    @Test
    public void test5133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5133");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 0);
        int[] intArray24 = new int[] { (-1), 100 };
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 1);
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray26, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray34, false);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) 'a');
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) ' ');
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (-1));
        int int44 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray42, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) ' ', (int) 'a', 1, intArray42, false);
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) 'a');
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        int[] intArray62 = new int[] { (-1), 100 };
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray56, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray64, false);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) 'a');
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) ' ');
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (-1));
        int int76 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray68, (int) (short) 0, (int) (byte) 0, 1);
        int int78 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray68, (int) (byte) 10);
        int[] intArray80 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, 4);
        int[] intArray82 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) 0, 3, (int) (short) 0, intArray68, true);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2 + "'", int76 == 2);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 2 + "'", int78 == 2);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1]");
    }

    @Test
    public void test5134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5134");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, 10);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) 'a');
        int int12 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, 0);
        int[] intArray14 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (short) 10);
        int int16 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
    }

    @Test
    public void test5135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5135");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, 10);
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (int) (short) 1);
        int int12 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray10, 10);
        int[] intArray14 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (short) 100);
        int int16 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray14, (int) (byte) 10);
        int int18 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray14, 2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
    }

    @Test
    public void test5136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5136");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 1, (int) (byte) 1, (int) (short) -1, intArray32, false);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 10);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 1);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, (int) (byte) 10, (int) (short) 1, 1, intArray46, false);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        int[] intArray64 = new int[] { (-1), 100 };
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray58, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray66, false);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) 'a');
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) ' ');
        int int76 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray72, (int) (byte) -1, 0, (int) (short) 0);
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (-1));
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray32, (int) '4', 1, (int) (short) 0, intArray78, false);
        int int82 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray78, (int) (short) 1);
        int int86 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray78, (int) (short) 100, (int) '4', (int) '#');
        int int88 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray78, 4);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 2 + "'", int82 == 2);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 2 + "'", int88 == 2);
    }

    @Test
    public void test5137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5137");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray27 = new int[] { (short) 100, (short) 0, 100, (byte) -1, 10 };
        int int31 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray27, 1, (int) (byte) 100, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, 100, (int) '#', (int) (short) 10, intArray27, false);
        int int35 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, 0);
        int[] intArray37 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) 'a');
        int[] intArray39 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray37, 2);
        int int43 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray39, (int) (byte) 0, 4, 2);
        int[] intArray45 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray39, (int) (short) 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[100, 0, 100, -1, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1]");
    }

    @Test
    public void test5138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5138");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 1);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (short) 1);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) 'a');
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, 10);
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray30, (int) '4');
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) -1);
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) '#');
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
    }

    @Test
    public void test5139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5139");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, 0);
        int[] intArray24 = new int[] { (-1), 100 };
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 1);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (short) 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, 4, 2, (int) (byte) 0, intArray26, false);
        int int32 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray26, (-1));
        int int36 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray26, 3, (int) (short) 10, 3);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
    }

    @Test
    public void test5140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5140");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 100);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 1);
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) '4');
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        int[] intArray44 = new int[] { (-1), 100 };
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray38, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray46, false);
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) 'a');
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) ' ');
        int int56 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray52, (int) (byte) -1, 0, (int) (short) 0);
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (-1));
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) '#');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray30, (int) (short) 100, (int) '#', (int) (short) 1, intArray58, false);
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) '4');
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) (short) 10);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (-1));
        // The following exception was thrown during execution in test generation
        try {
            int int72 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray66, (int) (byte) 100, 1, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[0, 1]");
    }

    @Test
    public void test5141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5141");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 0);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) ' ');
        int int28 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray26, (int) (byte) -1);
        java.lang.Class<?> wildcardClass29 = intArray26.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test5142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5142");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 1);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (short) 1);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) 'a');
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (-1));
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        int[] intArray44 = new int[] { (-1), 100 };
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray38, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray46, false);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        int[] intArray62 = new int[] { (-1), 100 };
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray56, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray64, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray38, (int) (byte) 10, (int) '4', 10, intArray64, true);
        int int70 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray30, 100, (int) (byte) 100, (int) (byte) 10, intArray38, true);
        // The following exception was thrown during execution in test generation
        try {
            int int76 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray38, (int) (short) 10, (int) (short) 1, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2 + "'", int70 == 2);
    }

    @Test
    public void test5143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5143");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray19 = new int[] { '#' };
        int int21 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (short) -1, 1, 2, intArray19, true);
        int[] intArray25 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 10);
        int int27 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) -1);
        int int29 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (byte) -1);
        int[] intArray31 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 1);
        int int33 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray31, (int) (byte) 10);
        int[] intArray39 = new int[] { (-1), 100 };
        int[] intArray41 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray39, (int) (byte) 1);
        int[] intArray47 = new int[] { (-1), 100 };
        int[] intArray49 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray47, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray41, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray49, false);
        int[] intArray53 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray49, (int) 'a');
        int[] intArray55 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray53, (int) ' ');
        int int59 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray55, (int) (byte) -1, 0, (int) (short) 0);
        int[] intArray61 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray55, (-1));
        int int63 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray55, (int) (byte) 100);
        int[] intArray65 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray55, (int) '4');
        int[] intArray67 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray65, (int) (short) 10);
        int[] intArray73 = new int[] { (-1), 100 };
        int[] intArray75 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray73, (int) (byte) 1);
        int[] intArray77 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray75, (int) (short) 10);
        int[] intArray79 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray77, 10);
        int[] intArray81 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray77, (int) (short) 1);
        int int83 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray81, 2);
        int int85 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray81, 2);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray65, (int) ' ', (int) (short) 1, (int) (byte) 1, intArray81, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray31, (int) (short) 0, (int) (byte) 1, (int) (short) 0, intArray65, false);
        int int91 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray65, (int) (short) 10);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 2 + "'", int63 == 2);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 2 + "'", int83 == 2);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 2 + "'", int85 == 2);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 2 + "'", int91 == 2);
    }

    @Test
    public void test5144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5144");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 0);
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 1);
        int int24 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (int) ' ', 10, 0);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (short) 10);
        int[] intArray32 = new int[] { ' ', (byte) -1 };
        int[] intArray38 = new int[] { (-1), 100 };
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 1);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray40, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray48, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, (-1), (int) ' ', (int) (byte) 10, intArray48, false);
        int[] intArray58 = new int[] { (-1), 100 };
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) (byte) 1);
        int[] intArray66 = new int[] { (-1), 100 };
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray60, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray68, false);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray48, (int) 'a', 100, (int) (byte) 1, intArray68, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, (int) (byte) -1, (int) (byte) 100, (int) (short) 10, intArray68, false);
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) (byte) -1);
        int int80 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray78, (int) 'a');
        int int82 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray78, (int) (short) 100);
        int[] intArray84 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray78, (-1));
        java.lang.Class<?> wildcardClass85 = intArray84.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2 + "'", int80 == 2);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 2 + "'", int82 == 2);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test5145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5145");
        int[] intArray0 = null;
        int[] intArray4 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray0, (int) (short) 100, (int) (short) 100, (int) ' ', intArray4, true);
    }

    @Test
    public void test5146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5146");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (short) 100);
        int int20 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, 4);
        int int22 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) (byte) 100);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
    }

    @Test
    public void test5147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5147");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, 10);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) 'a');
        int int12 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, 0);
        int int14 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) (byte) 100);
        int int16 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, 4);
        int int18 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) (short) -1);
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) '4');
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) '#');
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray22, (int) 'a', 2, (int) (short) 0);
        int int28 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray22, (int) ' ');
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
    }

    @Test
    public void test5148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5148");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray27 = new int[] { (short) 100, (short) 0, 100, (byte) -1, 10 };
        int int31 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray27, 1, (int) (byte) 100, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, 100, (int) '#', (int) (short) 10, intArray27, false);
        int int35 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, 0);
        int[] intArray41 = new int[] { ' ', (byte) -1 };
        int[] intArray47 = new int[] { (-1), 100 };
        int[] intArray49 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray47, (int) (byte) 1);
        int[] intArray55 = new int[] { (-1), 100 };
        int[] intArray57 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray55, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray49, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray57, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray41, (-1), (int) ' ', (int) (byte) 10, intArray57, false);
        int[] intArray63 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray57, 1);
        int int65 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray63, (int) (short) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, (int) (byte) 1, (-1), 0, intArray63, false);
        int[] intArray69 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) ' ');
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[100, 0, 100, -1, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2 + "'", int65 == 2);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1]");
    }

    @Test
    public void test5149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5149");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int int24 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) (short) 1);
        int[] intArray30 = new int[] { (-1), 100 };
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray30, (int) (byte) 1);
        int[] intArray38 = new int[] { (-1), 100 };
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray32, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray40, false);
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) 'a');
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) ' ');
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 10);
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, (int) 'a', (int) (short) 10, (int) (byte) 0, intArray48, false);
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 10);
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 2);
        int int58 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray56, (int) (byte) 10);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2 + "'", int58 == 2);
    }

    @Test
    public void test5150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5150");
        int[] intArray0 = null;
        int[] intArray5 = new int[] { 10 };
        int[] intArray7 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray5, (int) '4');
        int[] intArray12 = new int[] { '#' };
        int int14 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray12, (int) (short) 0);
        int int16 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray12, (int) (byte) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray7, 10, (int) (byte) 1, (int) (short) 0, intArray12, false);
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, 1);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray0, (int) (byte) -1, (int) (short) 1, 10, intArray12, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[10]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[35]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
    }

    @Test
    public void test5151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5151");
        int[] intArray1 = new int[] { '#' };
        int int3 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray1, (int) (short) 0);
        int[] intArray9 = new int[] { ' ', (byte) -1 };
        int[] intArray15 = new int[] { (-1), 100 };
        int[] intArray17 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray15, (int) (byte) 1);
        int[] intArray23 = new int[] { (-1), 100 };
        int[] intArray25 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray23, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray17, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray25, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray9, (-1), (int) ' ', (int) (byte) 10, intArray25, false);
        int[] intArray31 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray25, 1);
        int int33 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray31, (int) (short) 1);
        int int35 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray31, (int) 'a');
        int int37 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray31, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray1, (-1), (int) (byte) 0, (int) (byte) 1, intArray31, false);
        int[] intArray41 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray1, (int) (short) 10);
        int[] intArray47 = new int[] { (-1), 100 };
        int[] intArray49 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray47, (int) (byte) 1);
        int[] intArray55 = new int[] { (-1), 100 };
        int[] intArray57 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray55, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray49, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray57, false);
        int[] intArray61 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray57, (int) ' ');
        int[] intArray63 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray61, 0);
        int[] intArray65 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray61, (int) (short) -1);
        int[] intArray67 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray61, 3);
        int int69 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray61, 4);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray41, (int) '4', 100, 0, intArray61, true);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[35]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2 + "'", int37 == 2);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 2 + "'", int69 == 2);
    }

    @Test
    public void test5152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5152");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int int24 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) (short) 1);
        int[] intArray30 = new int[] { (-1), 100 };
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray30, (int) (byte) 1);
        int[] intArray38 = new int[] { (-1), 100 };
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray32, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray40, false);
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) 'a');
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) ' ');
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 10);
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, (int) 'a', (int) (short) 10, (int) (byte) 0, intArray48, false);
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 10);
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 2);
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, 3);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
    }

    @Test
    public void test5153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5153");
        int[] intArray0 = null;
        int int4 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray0, (int) (byte) -1, (int) '#', (int) (byte) 10);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test5154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5154");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 1, (int) (byte) 1, (int) (short) -1, intArray32, false);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 10);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 1);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) 'a');
        int int44 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray42, (int) 'a');
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2 + "'", int44 == 2);
    }

    @Test
    public void test5155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5155");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { ' ', (byte) -1 };
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray36, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, (-1), (int) ' ', (int) (byte) 10, intArray36, false);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (int) 'a', 100, (int) (byte) 1, intArray56, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, 10, (int) (short) 0, (int) (short) -1, intArray36, true);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, 0);
        int[] intArray72 = new int[] { (-1), 100 };
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (int) (byte) 1);
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray74, (int) (short) 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, 2, 10, (int) (short) 1, intArray74, false);
        int int80 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, (int) (short) 0);
        int int84 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray36, (-1), (int) (short) 10, (int) (byte) -1);
        int[] intArray86 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) -1);
        int[] intArray88 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray86, (int) (byte) 0);
        int int90 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray88, (int) (short) 1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2 + "'", int80 == 2);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 2 + "'", int90 == 2);
    }

    @Test
    public void test5156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5156");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 1, (int) (byte) 1, (int) (short) -1, intArray32, false);
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        int[] intArray50 = new int[] { (-1), 100 };
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray44, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray52, false);
        int[] intArray60 = new int[] { (-1), 100 };
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) (byte) 1);
        int[] intArray68 = new int[] { (-1), 100 };
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray62, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray70, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray44, (int) (byte) 10, (int) '4', 10, intArray70, true);
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, 2);
        int int80 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray76, (int) (short) 100, (int) ' ', 1);
        int[] intArray82 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray76, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray32, (int) (byte) 100, 0, (int) (short) 1, intArray82, false);
        int[] intArray86 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, 1);
        // The following exception was thrown during execution in test generation
        try {
            int int90 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray86, (int) ' ', (int) (short) -1, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 1]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1]");
    }

    @Test
    public void test5157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5157");
        int[] intArray0 = null;
        int[] intArray4 = null;
        int[] intArray10 = new int[] { ' ', (byte) -1 };
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        int[] intArray24 = new int[] { (-1), 100 };
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray26, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray10, (-1), (int) ' ', (int) (byte) 10, intArray26, false);
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, 100);
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) '4');
        int[] intArray40 = new int[] { ' ', (byte) -1 };
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray40, (-1), (int) ' ', (int) (byte) 10, intArray56, false);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, 100);
        int int64 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray40, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, 10, (int) 'a', (-1), intArray40, true);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, (int) ' ', (int) (byte) 1, (int) (short) -1, intArray40, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray0, (int) (short) 0, (int) (short) 1, (int) (short) -1, intArray40, true);
        int int74 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray40, 10, (int) (short) 100, 1);
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) (byte) 10);
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray76, (int) (short) -1);
        int int80 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray76, 1);
        int int82 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray76, (int) (byte) -1);
        int[] intArray84 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray76, (int) (short) 1);
        int int86 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray84, (int) '4');
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2 + "'", int80 == 2);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 2 + "'", int82 == 2);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 2 + "'", int86 == 2);
    }

    @Test
    public void test5158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5158");
        int[] intArray0 = null;
        int[] intArray6 = new int[] { (-1), 100 };
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (int) (byte) 1);
        int[] intArray14 = new int[] { (-1), 100 };
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray14, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray8, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray16, false);
        int[] intArray24 = new int[] { (-1), 100 };
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 1);
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray26, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray34, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray8, (int) (byte) 10, (int) '4', 10, intArray34, true);
        int int40 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, 0);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 100);
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) '4');
        int int46 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, 0);
        int int48 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) (byte) 100);
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray0, (int) ' ', (int) (short) 10, 0, intArray50, false);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2 + "'", int40 == 2);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
    }

    @Test
    public void test5159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5159");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 100);
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray26, (int) (short) -1, (int) (byte) -1, (int) (short) 1);
        int int34 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray26, (int) (short) 100, (int) '#', 3);
        int int36 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray26, (int) (byte) 100);
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        int[] intArray50 = new int[] { (-1), 100 };
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray44, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray52, false);
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) ' ');
        int[] intArray62 = new int[] { (-1), 100 };
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, (int) (byte) 1);
        int[] intArray70 = new int[] { (-1), 100 };
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray64, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray72, false);
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (int) 'a');
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray76, (int) ' ');
        int[] intArray80 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray78, (int) (byte) 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray56, (int) (byte) 1, (int) 'a', 0, intArray78, true);
        int[] intArray84 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, 100);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 1, (-1), (int) (short) 100, intArray56, false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 49 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1]");
    }

    @Test
    public void test5160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5160");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) ' ');
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray6, (int) (short) 1, (-1), (int) (byte) 0);
        int int14 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray6, 10, (int) 'a', (int) (short) 10);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (int) '#');
        int[] intArray22 = new int[] { ' ', (byte) -1 };
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray22, (-1), (int) ' ', (int) (byte) 10, intArray38, false);
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, 100);
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, (int) (byte) 100);
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, 1);
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, (int) '4');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray6, (-1), 1, (-1), intArray22, true);
        int int56 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray6, (int) ' ', (int) 'a', (int) '4');
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (int) (short) 100);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, 100);
        int int64 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray60, (int) ' ', 3, (int) (byte) -1);
        int int68 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray60, (int) (short) 0, 10, 3);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) (byte) 1);
        int int74 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray70, (int) ' ', (int) (byte) 100, (int) (byte) 10);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
    }

    @Test
    public void test5161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5161");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (short) 100);
        int[] intArray24 = new int[] { (-1), 100 };
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 1);
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray26, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray34, false);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) ' ');
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) '4');
        int int42 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray40, (int) (byte) -1);
        int int46 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray40, (int) '#', (-1), (int) (byte) 0);
        int[] intArray54 = new int[] { (byte) -1, 2, (short) 1, '#' };
        int int56 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray54, (int) '4');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray40, (-1), 4, 2, intArray54, true);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray16, (-1), (int) (byte) 100, 2, intArray54, false);
        int int64 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray16, (int) (short) -1, (int) (byte) 10, (int) (byte) 0);
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, 3);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2 + "'", int42 == 2);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 2, 1, 35]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 4 + "'", int56 == 4);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
    }

    @Test
    public void test5162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5162");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 0);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 10);
        int int28 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray26, 0);
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (short) 100);
        int int34 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray30, (-1), (int) 'a', 0);
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray30, (int) (short) 1);
        int int38 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, (int) '#');
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, 2);
        int int42 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, (int) (byte) -1);
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (short) 100);
        int[] intArray50 = new int[] { (-1), 100 };
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) (byte) 1);
        int[] intArray58 = new int[] { (-1), 100 };
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray52, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray60, false);
        int[] intArray68 = new int[] { (-1), 100 };
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) (byte) 1);
        int[] intArray76 = new int[] { (-1), 100 };
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray76, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray70, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray78, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray52, (int) (byte) 10, (int) '4', 10, intArray78, true);
        int[] intArray84 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, 2);
        int int88 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray52, (int) (short) 1, (int) (short) 100, (int) (byte) -1);
        int[] intArray90 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, 100);
        int[] intArray92 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (-1));
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray36, 0, 2, 3, intArray92, true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2 + "'", int42 == 2);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[0, 1]");
    }

    @Test
    public void test5163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5163");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) 'a', 100, (int) (byte) 1, intArray38, false);
        int int46 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, (int) '4');
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) 'a');
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, 1);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) (short) 10);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, 10);
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) (short) 1);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray64, 10);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) (short) 100);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray50, (int) (byte) 10, (int) (short) 10, (-1), intArray68, true);
        int int72 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray50, 0);
        int int74 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray50, (int) (short) 1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 2 + "'", int72 == 2);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2 + "'", int74 == 2);
    }

    @Test
    public void test5164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5164");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 100);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 1);
        int int32 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray2, (int) (byte) 1, 0, (int) (byte) 0);
        int[] intArray38 = new int[] { (-1), 100 };
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 1);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) ' ');
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray50, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray58, false);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) ' ');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray38, (int) (short) 0, (int) ' ', 0, intArray62, true);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray2, (int) (byte) 10, (int) (byte) 1, (int) (short) 1, intArray62, true);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, (int) (byte) 10);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) (byte) 1);
        java.lang.Class<?> wildcardClass71 = intArray68.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test5165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5165");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 100);
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray26, (-1), 2, (int) (byte) -1);
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (short) 1);
        int int36 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray32, (int) '#', (int) (short) 1, (int) (byte) 0);
        int[] intArray42 = new int[] { ' ', (byte) -1 };
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray50, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray58, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray42, (-1), (int) ' ', (int) (byte) 10, intArray58, false);
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, 100);
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 100);
        int int70 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray66, (-1), 2, (int) (byte) -1);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) (short) 1);
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (int) (byte) 1);
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray74, (int) (short) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray32, 0, 0, (int) (byte) 1, intArray74, false);
        int[] intArray80 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray74, 0);
        int int82 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray80, (int) (short) 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 2 + "'", int82 == 2);
    }

    @Test
    public void test5166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5166");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) ' ');
        int[] intArray12 = new int[] { (-1), 100 };
        int[] intArray14 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) (byte) 1);
        int[] intArray20 = new int[] { (-1), 100 };
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray14, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray22, false);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, (int) ' ');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray2, (int) (short) 0, (int) ' ', 0, intArray26, true);
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
    }

    @Test
    public void test5167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5167");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { ' ', (byte) -1 };
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray36, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, (-1), (int) ' ', (int) (byte) 10, intArray36, false);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (int) 'a', 100, (int) (byte) 1, intArray56, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, 10, (int) (short) 0, (int) (short) -1, intArray36, true);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, (int) 'a');
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, 1);
        int int72 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray36, 100, (int) (short) 100, 2);
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) '#');
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
    }

    @Test
    public void test5168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5168");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int int18 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray16, (int) ' ');
        int[] intArray24 = new int[] { (-1), 100 };
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 1);
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray26, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray34, false);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) 'a');
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) ' ');
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (-1));
        int int46 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray38, (int) (short) 0, (int) (byte) 0, 1);
        int int48 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, (int) (byte) 10);
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) '4');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray16, (int) 'a', (int) ' ', 1, intArray50, false);
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, 4);
        java.lang.Class<?> wildcardClass55 = intArray54.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test5169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5169");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 100);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 1);
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray2, 0);
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) '4');
        int int36 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray2, 0, (int) '#', 10);
        // The following exception was thrown during execution in test generation
        try {
            int int40 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray2, (int) (short) 10, (int) (short) 0, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
    }

    @Test
    public void test5170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5170");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int int8 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, 0);
        int int12 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray6, 10, (int) ' ', 10);
        int[] intArray18 = new int[] { (-1), 100 };
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 1);
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray20, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray28, false);
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) 'a');
        int[] intArray38 = new int[] { ' ', (byte) -1 };
        int[] intArray44 = new int[] { (-1), 100 };
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) (byte) 1);
        int[] intArray52 = new int[] { (-1), 100 };
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray46, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray54, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray38, (-1), (int) ' ', (int) (byte) 10, intArray54, false);
        int[] intArray64 = new int[] { (-1), 100 };
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) (byte) 1);
        int[] intArray72 = new int[] { (-1), 100 };
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray66, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray74, false);
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray74, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray54, (int) 'a', 100, (int) (byte) 1, intArray74, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (short) 100, (int) 'a', (int) (short) 0, intArray54, true);
        int int84 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray28, (int) '4');
        int[] intArray86 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) 'a');
        int[] intArray88 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, 3);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray6, 100, (int) '#', (int) (byte) -1, intArray88, true);
        int int94 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray88, 100, (int) (short) 100, (int) '4');
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 2 + "'", int84 == 2);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
    }

    @Test
    public void test5171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5171");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 0);
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) '#');
        int int22 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray16, (int) ' ');
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, 4);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (short) 100);
        int[] intArray32 = new int[] { ' ', (byte) -1 };
        int[] intArray38 = new int[] { (-1), 100 };
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 1);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray40, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray48, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, (-1), (int) ' ', (int) (byte) 10, intArray48, false);
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, 100);
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 100);
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, 1);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) (byte) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray26, (int) (byte) 1, (int) (short) 100, 10, intArray60, false);
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (-1));
        // The following exception was thrown during execution in test generation
        try {
            int int68 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray64, (int) (short) -1, (int) (short) -1, 3);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[0, 1]");
    }

    @Test
    public void test5172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5172");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 1, (int) (byte) 1, (int) (short) -1, intArray32, false);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 10);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) 'a');
        int int44 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray40, (int) (byte) 10, (int) (short) 10, (int) (byte) 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
    }

    @Test
    public void test5173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5173");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 1, (int) (byte) 1, (int) (short) -1, intArray32, false);
        int int38 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray26, (int) (short) 10);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, 1);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) 'a');
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) ' ');
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray62, (int) (byte) -1, 0, (int) (short) 0);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, (-1));
        int int70 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray62, (int) (short) 1);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, (int) '#');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray40, (int) (byte) -1, 0, (-1), intArray62, false);
        int int76 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray40, (-1));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2 + "'", int70 == 2);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2 + "'", int76 == 2);
    }

    @Test
    public void test5174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5174");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 1);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (short) 1);
        int int28 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) 'a');
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, 0);
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) ' ');
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (short) 1);
        int int36 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray34, (int) '4');
        int[] intArray40 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray34, (int) (byte) 1, (-1), 100, intArray40, true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 49 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
    }

    @Test
    public void test5175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5175");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 0);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 10);
        int int28 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray26, 0);
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (short) 100);
        int int32 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray26, (int) (byte) 10);
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) '#');
        int int36 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray26, (int) ' ');
        int int38 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray26, (int) '#');
        int int42 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray26, (int) (byte) -1, 0, (int) (byte) 0);
        int int44 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray26, 1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2 + "'", int44 == 2);
    }

    @Test
    public void test5176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5176");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 1);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (short) 1);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) 'a');
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray36, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray44, false);
        int int50 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray36, (int) ' ', (int) (short) -1, (int) (short) 1);
        int int52 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, (int) '#');
        int int56 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray36, (int) (short) -1, 100, 10);
        int int60 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray36, 4, (int) ' ', (int) (byte) 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (-1), 1, (int) (byte) 0, intArray36, true);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray36, 0, (int) (byte) 100, 1);
        int int70 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray36, (int) ' ', (int) '#', (int) (short) 1);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) 'a');
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (short) 1);
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 10);
        int int78 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray76, 2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 2 + "'", int78 == 2);
    }

    @Test
    public void test5177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5177");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) 'a', 100, (int) (byte) 1, intArray38, false);
        int int46 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, (int) (short) 1);
        int int48 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, (int) (byte) 1);
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (short) -1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[0, 1]");
    }

    @Test
    public void test5178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5178");
        int[] intArray0 = null;
        int[] intArray4 = null;
        int[] intArray10 = new int[] { ' ', (byte) -1 };
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        int[] intArray24 = new int[] { (-1), 100 };
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray26, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray10, (-1), (int) ' ', (int) (byte) 10, intArray26, false);
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, 100);
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) '4');
        int[] intArray40 = new int[] { ' ', (byte) -1 };
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray40, (-1), (int) ' ', (int) (byte) 10, intArray56, false);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, 100);
        int int64 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray40, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, 10, (int) 'a', (-1), intArray40, true);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, (int) ' ', (int) (byte) 1, (int) (short) -1, intArray40, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray0, (int) (short) 0, (int) (short) 1, (int) (short) -1, intArray40, true);
        int int74 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray40, 10, (int) (short) 100, 1);
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) (byte) 10);
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray76, (int) (short) -1);
        int int80 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray76, 1);
        int[] intArray82 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray76, (int) (byte) 10);
        int[] intArray84 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray82, (int) 'a');
        int int86 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray84, (int) (short) 100);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2 + "'", int80 == 2);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 2 + "'", int86 == 2);
    }

    @Test
    public void test5179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5179");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) '4');
        int[] intArray24 = new int[] { (-1), 100 };
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 1);
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray26, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray34, false);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) 'a');
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) ' ');
        int int44 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray40, (int) (byte) -1, 0, (int) (short) 0);
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (-1));
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) '#');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, 10, 0, (int) (byte) -1, intArray48, true);
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 100);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
    }

    @Test
    public void test5180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5180");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { (-1), 100 };
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 1);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray22, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray30, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) 10, (int) '4', 10, intArray30, true);
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, 2);
        int[] intArray42 = new int[] { ' ', (byte) -1 };
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray50, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray58, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray42, (-1), (int) ' ', (int) (byte) 10, intArray58, false);
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, 100);
        int int68 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray42, 0, (int) (byte) 10, (int) (byte) -1);
        int int70 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray42, 10);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) -1);
        int int74 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray42, (int) (short) 10);
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, 4);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (int) (short) 0, 3, (int) (short) -1, intArray42, true);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
    }

    @Test
    public void test5181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5181");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray22 = new int[] { ' ', (byte) -1 };
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray22, (-1), (int) ' ', (int) (byte) 10, intArray38, false);
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray50, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray58, false);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray38, (int) 'a', 100, (int) (byte) 1, intArray58, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray12, (int) (short) 100, (int) 'a', (int) (short) 0, intArray38, true);
        int int68 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray12, (int) '4');
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, 3);
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) '4');
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2 + "'", int68 == 2);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
    }

    @Test
    public void test5182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5182");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int int22 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (int) (byte) -1, 0, (int) (short) 0);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (-1));
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) (byte) 100);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (short) 10);
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) -1);
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (short) 100);
        int[] intArray38 = new int[] { (-1), 100 };
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 1);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray40, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray48, false);
        int[] intArray55 = new int[] { '#' };
        int int57 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray55, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray40, (int) (short) -1, 1, 2, intArray55, true);
        int[] intArray65 = new int[] { (-1), 100 };
        int[] intArray67 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray65, (int) (byte) 1);
        int[] intArray73 = new int[] { (-1), 100 };
        int[] intArray75 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray73, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray67, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray75, false);
        int[] intArray79 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray75, (int) 'a');
        int int83 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray79, 0, (-1), 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray55, (int) (short) 100, (int) (short) 0, (int) (short) 0, intArray79, true);
        int int87 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray79, 2);
        int int89 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray79, (int) (byte) 1);
        int[] intArray91 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray79, (int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) (short) 100, (int) (byte) -1, (int) (short) 100, intArray91, false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 49 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[35]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 2 + "'", int87 == 2);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 2 + "'", int89 == 2);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, -1]");
    }

    @Test
    public void test5183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5183");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 100);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 1);
        int int32 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray2, (int) (byte) 1, 0, (int) (byte) 0);
        int[] intArray38 = new int[] { (-1), 100 };
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 1);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) ' ');
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray50, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray58, false);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) ' ');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray38, (int) (short) 0, (int) ' ', 0, intArray62, true);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray2, (int) (byte) 10, (int) (byte) 1, (int) (short) 1, intArray62, true);
        int int70 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray2, (int) '4', (int) '4', (-1));
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            int int76 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray2, (int) 'a', (-1), 3);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
    }

    @Test
    public void test5184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5184");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 0);
        int[] intArray24 = new int[] { (-1), 100 };
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 1);
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray26, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray34, false);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) 'a');
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) ' ');
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (-1));
        int int44 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray42, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) ' ', (int) 'a', 1, intArray42, false);
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 10);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) ' ');
        int int62 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray58, (int) (short) 1, (-1), (int) (byte) 0);
        int[] intArray66 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray58, 2, (int) '4', (int) (short) 0, intArray66, true);
        int int72 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray58, (int) (short) -1, (int) ' ', (int) (byte) 1);
        int[] intArray78 = new int[] { (-1), 100 };
        int[] intArray80 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray78, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray58, 0, (int) 'a', 2, intArray78, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, 4, (int) (byte) -1, 1, intArray78, true);
        int int88 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray48, 4, 4, 0);
        int[] intArray90 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) '4');
        int[] intArray92 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (-1));
        int[] intArray94 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, 0);
        // The following exception was thrown during execution in test generation
        try {
            int int98 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray48, (int) (byte) 10, (int) ' ', (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, -1]");
    }

    @Test
    public void test5185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5185");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int int22 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (int) (byte) -1, 0, (int) (short) 0);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (-1));
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '#');
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray24, (int) (byte) -1, (int) (short) 100, 1);
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) 'a');
        java.lang.Class<?> wildcardClass33 = intArray32.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test5186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5186");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int int8 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, 0);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, (int) (short) -1);
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (int) (byte) 0);
        int[] intArray18 = new int[] { ' ', (byte) -1 };
        int[] intArray24 = new int[] { (-1), 100 };
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 1);
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray26, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray34, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (-1), (int) ' ', (int) (byte) 10, intArray34, false);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 100);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) '4');
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray42, 1, (int) (byte) 1, (int) (short) -1, intArray48, false);
        int[] intArray58 = new int[] { (-1), 100 };
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) (byte) 1);
        int[] intArray66 = new int[] { (-1), 100 };
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray60, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray68, false);
        int[] intArray75 = new int[] { '#' };
        int int77 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray75, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray60, (int) (short) -1, 1, 2, intArray75, true);
        int[] intArray81 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray75, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray48, (int) (short) 100, 0, 1, intArray81, false);
        int[] intArray85 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 100);
        int int87 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray48, (-1));
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray6, 0, 0, (int) (byte) 1, intArray48, true);
        int[] intArray91 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) '4');
        int[] intArray93 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (short) 1);
        java.lang.Class<?> wildcardClass94 = intArray93.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[35]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 1]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[1, 1]");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1 + "'", int87 == 1);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test5187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5187");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 100);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) 'a');
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, 1);
        int int34 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray30, (int) (byte) 0, 0, 0);
        int[] intArray39 = new int[] { 10 };
        int[] intArray41 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray39, (int) '4');
        int[] intArray46 = new int[] { '#' };
        int int48 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray46, (int) (short) 0);
        int int50 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray46, (int) (byte) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray41, 10, (int) (byte) 1, (int) (short) 0, intArray46, false);
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, 100, (int) (short) 100, 0, intArray46, true);
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, 1);
        int[] intArray64 = new int[] { (-1), 100 };
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) (byte) 1);
        int[] intArray72 = new int[] { (-1), 100 };
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray66, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray74, false);
        int[] intArray81 = new int[] { '#' };
        int int83 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray81, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray66, (int) (short) -1, 1, 2, intArray81, true);
        int[] intArray87 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray81, 10);
        int int89 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray81, (int) (short) -1);
        int int91 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray81, (int) (byte) -1);
        int[] intArray93 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray81, 1);
        int[] intArray95 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray81, 4);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray46, (int) (short) 0, 3, (int) (short) 10, intArray81, false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 6 out of bounds for length 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[35]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[35]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, -1]");
    }

    @Test
    public void test5188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5188");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 0);
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) '#');
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray36, false);
        int[] intArray43 = new int[] { '#' };
        int int45 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray43, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (short) -1, 1, 2, intArray43, true);
        int[] intArray49 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray43, 10);
        int[] intArray51 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray43, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray16, (int) (byte) 0, (int) (short) 10, (int) (byte) 1, intArray51, false);
        int[] intArray55 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray51, (int) (short) 100);
        int[] intArray57 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray51, 100);
        int int61 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray57, (int) (short) 10, (int) ' ', 0);
        int int63 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray57, 0);
        int[] intArray65 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray57, (int) ' ');
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[35]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 2 + "'", int63 == 2);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1]");
    }

    @Test
    public void test5189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5189");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 100);
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray26, (int) (short) 10, (-1), (int) (short) 1);
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, 100);
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) ' ');
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 10);
        int int42 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, (int) (byte) 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2 + "'", int42 == 2);
    }

    @Test
    public void test5190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5190");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int int22 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (int) (byte) -1, 0, (int) (short) 0);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (-1));
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) (byte) 100);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) '4');
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray36, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray44, false);
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) ' ');
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 0);
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) '#');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, (int) (short) 1, (int) (short) 100, 0, intArray48, false);
        int int56 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray48, (int) '#');
        int[] intArray60 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray48, (int) (short) -1, 0, (int) (short) -1, intArray60, true);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray48, (int) (byte) 1, (int) '4', 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2 + "'", int56 == 2);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
    }

    @Test
    public void test5191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5191");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int int18 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray16, 0);
        int int20 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray16, (int) (short) 10);
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) 'a');
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, 3);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray16, 4);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
    }

    @Test
    public void test5192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5192");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray22 = new int[] { (-1), 100 };
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, (int) (byte) 1);
        int[] intArray30 = new int[] { (-1), 100 };
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray30, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray24, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray32, false);
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) 'a');
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) ' ');
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray16, (int) (byte) 1, (int) 'a', 0, intArray38, true);
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, 100);
        int int48 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray16, 0, (int) 'a', 2);
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, 0);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        int[] intArray64 = new int[] { (-1), 100 };
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray58, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray66, false);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) ' ');
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) (byte) 0);
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) '#');
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray74, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray50, (int) '#', 100, 2, intArray76, true);
        int int82 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray50, (int) (byte) 100, 3, (int) (byte) 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
    }

    @Test
    public void test5193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5193");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 10);
        int[] intArray24 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) (byte) 0, (int) (short) 100, (int) (byte) -1, intArray24, false);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) 'a');
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) '#');
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, 100);
        int[] intArray38 = new int[] { (-1), 100 };
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 1);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) ' ');
        int int46 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray42, (int) (short) 1, (-1), (int) (byte) 0);
        int[] intArray50 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray42, 2, (int) '4', (int) (short) 0, intArray50, true);
        int int56 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray42, (int) (short) -1, (int) ' ', (int) (byte) 1);
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) '#');
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) (byte) 100);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray32, (int) 'a', (int) 'a', (int) (byte) 1, intArray58, true);
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, 2);
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, 100);
        int int68 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray66, (int) (short) -1);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) (short) 0);
        java.lang.Class<?> wildcardClass71 = intArray70.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2 + "'", int68 == 2);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test5194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5194");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) ' ');
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 10);
        int[] intArray14 = new int[] { ' ', (byte) -1 };
        int[] intArray20 = new int[] { (-1), 100 };
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 1);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray22, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray30, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray14, (-1), (int) ' ', (int) (byte) 10, intArray30, false);
        int[] intArray40 = new int[] { (-1), 100 };
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) (byte) 1);
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray42, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray50, false);
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray30, (int) 'a', 100, (int) (byte) 1, intArray50, false);
        int int58 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray50, (int) '4');
        int int60 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray50, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, 0, (int) (short) -1, 0, intArray50, false);
        int int64 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray2, 10);
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int int68 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray2, (int) (short) -1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2 + "'", int58 == 2);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2 + "'", int60 == 2);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
    }

    @Test
    public void test5195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5195");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) ' ');
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray6, (int) (short) 1, (-1), (int) (byte) 0);
        int int14 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray6, 10, (int) 'a', (int) (short) 10);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (int) '#');
        int[] intArray22 = new int[] { ' ', (byte) -1 };
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray22, (-1), (int) ' ', (int) (byte) 10, intArray38, false);
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, 100);
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, (int) (byte) 100);
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, 1);
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, (int) '4');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray6, (-1), 1, (-1), intArray22, true);
        int int56 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray6, (int) ' ', (int) 'a', (int) '4');
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (int) (short) 100);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (int) (short) 10);
        int[] intArray64 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray6, (int) (short) 0, (int) 'a', 0, intArray64, true);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
    }

    @Test
    public void test5196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5196");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int int28 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray2, 0, (int) (byte) 10, (int) (byte) -1);
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray2, 10);
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) -1);
        java.lang.Class<?> wildcardClass33 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test5197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5197");
        int[] intArray0 = null;
        int[] intArray6 = new int[] { (-1), 100 };
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (int) (byte) 1);
        int[] intArray14 = new int[] { (-1), 100 };
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray14, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray8, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray16, false);
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) 'a');
        int[] intArray26 = new int[] { ' ', (byte) -1 };
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        int[] intArray40 = new int[] { (-1), 100 };
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray34, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray42, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, (-1), (int) ' ', (int) (byte) 10, intArray42, false);
        int[] intArray52 = new int[] { (-1), 100 };
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) (byte) 1);
        int[] intArray60 = new int[] { (-1), 100 };
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray54, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray62, false);
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray42, (int) 'a', 100, (int) (byte) 1, intArray62, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray16, (int) (short) 100, (int) 'a', (int) (short) 0, intArray42, true);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (-1));
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (short) 100);
        int int78 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray16, (int) (short) 100, (int) 'a', (int) (short) -1);
        int int82 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray16, 100, 1, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray0, (int) ' ', (int) (byte) 100, (int) (short) 1, intArray16, false);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 2 + "'", int82 == 2);
    }

    @Test
    public void test5198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5198");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 100);
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray26, (int) (short) -1, (int) (byte) -1, (int) (short) 1);
        int int34 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray26, (int) (short) 100, (int) '#', 3);
        int int38 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray26, (int) (short) 100, (int) (short) 100, 3);
        int int42 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray26, (int) (short) -1, (int) '4', 2);
        int[] intArray48 = new int[] { ' ', (byte) -1 };
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        int[] intArray62 = new int[] { (-1), 100 };
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray56, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray64, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray48, (-1), (int) ' ', (int) (byte) 10, intArray64, false);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, 1);
        int int72 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray70, (int) (short) 1);
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) 'a');
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray74, 10);
        int[] intArray81 = new int[] { '#' };
        int int83 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray81, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray74, 4, (int) '#', 1, intArray81, false);
        int[] intArray87 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray81, (int) (byte) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray26, (int) '4', 4, (int) (byte) -1, intArray87, false);
        int int91 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray26, (-1));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 2 + "'", int72 == 2);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[35]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 2 + "'", int91 == 2);
    }

    @Test
    public void test5199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5199");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray2, (int) (short) -1);
        int int28 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray2, 2);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) ' ');
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (short) 100);
        int int42 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray34, 1);
        int int46 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray34, (-1), 1, 2);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, 1, (int) (short) 10, (int) (byte) -1, intArray34, false);
        int int50 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray2, 100);
        int int54 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray2, (int) (short) 100, 4, 1);
        int[] intArray60 = new int[] { (-1), 100 };
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) (byte) 1);
        int[] intArray68 = new int[] { (-1), 100 };
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray62, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray70, false);
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) 'a');
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray74, (int) ' ');
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray76, (int) (byte) 10);
        int int80 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray78, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (int) (byte) 100, 4, (int) '4', intArray78, false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 28 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[1, 1]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2 + "'", int80 == 2);
    }

    @Test
    public void test5200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5200");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray2, 2);
        int int28 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray2, 0);
        // The following exception was thrown during execution in test generation
        try {
            int int32 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray2, 1, (int) 'a', (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
    }

    @Test
    public void test5201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5201");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray19 = new int[] { '#' };
        int int21 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (short) -1, 1, 2, intArray19, true);
        int[] intArray25 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 10);
        int[] intArray27 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 0);
        int[] intArray33 = new int[] { ' ', (byte) -1 };
        int[] intArray39 = new int[] { (-1), 100 };
        int[] intArray41 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray39, (int) (byte) 1);
        int[] intArray47 = new int[] { (-1), 100 };
        int[] intArray49 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray47, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray41, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray49, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray33, (-1), (int) ' ', (int) (byte) 10, intArray49, false);
        int[] intArray59 = new int[] { (-1), 100 };
        int[] intArray61 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray59, (int) (byte) 1);
        int[] intArray67 = new int[] { (-1), 100 };
        int[] intArray69 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray67, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray61, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray69, false);
        int[] intArray73 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray69, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray49, (int) 'a', 100, (int) (byte) 1, intArray69, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray27, (int) (short) 0, (int) (byte) 1, (int) (short) 1, intArray49, true);
        int int79 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray27, (int) (byte) -1);
        int[] intArray81 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray27, 1);
        int[] intArray83 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray81, (int) (short) -1);
        int[] intArray85 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray81, (int) (short) 100);
        int[] intArray87 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray85, (int) '4');
        int[] intArray89 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray85, 2);
        int[] intArray91 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray89, 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 2 + "'", int79 == 2);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, -1]");
    }

    @Test
    public void test5202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5202");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 1, (int) (byte) 1, (int) (short) -1, intArray32, false);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 10);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) 'a');
        int[] intArray46 = new int[] { ' ', (byte) -1 };
        int[] intArray52 = new int[] { (-1), 100 };
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) (byte) 1);
        int[] intArray60 = new int[] { (-1), 100 };
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray54, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray62, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray46, (-1), (int) ' ', (int) (byte) 10, intArray62, false);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, 1);
        int int70 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray68, (int) (short) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray40, 0, (int) ' ', (int) (short) -1, intArray68, false);
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) (short) 10);
        int int76 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray68, (int) (short) 10);
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) '4');
        int[] intArray80 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, 2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2 + "'", int70 == 2);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2 + "'", int76 == 2);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1]");
    }

    @Test
    public void test5203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5203");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray22 = new int[] { ' ', (byte) -1 };
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray22, (-1), (int) ' ', (int) (byte) 10, intArray38, false);
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray50, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray58, false);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray38, (int) 'a', 100, (int) (byte) 1, intArray58, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray12, (int) (short) 100, (int) 'a', (int) (short) 0, intArray38, true);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (-1));
        int int72 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray12, (int) (byte) 100, (int) '4', 10);
        int int76 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray12, (-1), (int) '#', (int) (short) -1);
        java.lang.Class<?> wildcardClass77 = intArray12.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test5204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5204");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int int18 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray12, (int) 'a', 0, 0);
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, 100);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
    }

    @Test
    public void test5205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5205");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 0);
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) '#');
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray36, false);
        int[] intArray43 = new int[] { '#' };
        int int45 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray43, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (short) -1, 1, 2, intArray43, true);
        int[] intArray49 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray43, 10);
        int[] intArray51 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray43, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray16, (int) (byte) 0, (int) (short) 10, (int) (byte) 1, intArray51, false);
        int[] intArray55 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray51, (int) (short) 100);
        int[] intArray57 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray51, 100);
        int[] intArray63 = new int[] { (-1), 100 };
        int[] intArray65 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray63, (int) (byte) 1);
        int[] intArray71 = new int[] { (-1), 100 };
        int[] intArray73 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray71, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray65, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray73, false);
        int[] intArray77 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray73, (int) ' ');
        int[] intArray79 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray77, 0);
        int[] intArray85 = new int[] { (-1), 100 };
        int[] intArray87 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray85, (int) (byte) 1);
        int[] intArray89 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray87, (int) (short) 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray79, 4, 2, (int) (byte) 0, intArray87, false);
        int[] intArray93 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray87, 3);
        int[] intArray95 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray87, 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray57, 100, (int) (byte) 100, (int) (short) 10, intArray95, false);
        int int99 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray95, (int) (short) 10);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[35]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + 2 + "'", int99 == 2);
    }

    @Test
    public void test5206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5206");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 1, (int) (byte) 1, (int) (short) -1, intArray32, false);
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        int[] intArray50 = new int[] { (-1), 100 };
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray44, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray52, false);
        int[] intArray59 = new int[] { '#' };
        int int61 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray59, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray44, (int) (short) -1, 1, 2, intArray59, true);
        int[] intArray65 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray59, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, (int) (short) 100, 0, 1, intArray65, false);
        int[] intArray69 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 100);
        int int73 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray32, (int) '#', (int) (short) 100, (-1));
        int[] intArray75 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 100);
        int int79 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray75, (int) (short) 10, 1, (int) (short) 0);
        int[] intArray81 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray75, 0);
        int int83 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray81, (int) (byte) 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[35]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[1, 1]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[1, 1]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 2 + "'", int83 == 2);
    }

    @Test
    public void test5207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5207");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 0);
        int int22 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, 0, 1, (-1));
        int int24 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) '4');
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (short) 0);
        int int28 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) (byte) 100);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
    }

    @Test
    public void test5208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5208");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray27 = new int[] { (short) 100, (short) 0, 100, (byte) -1, 10 };
        int int31 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray27, 1, (int) (byte) 100, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, 100, (int) '#', (int) (short) 10, intArray27, false);
        int int35 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, 0);
        int[] intArray37 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (short) 1);
        int[] intArray43 = new int[] { (-1), 100 };
        int[] intArray45 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray43, (int) (byte) 1);
        int[] intArray51 = new int[] { (-1), 100 };
        int[] intArray53 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray51, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray45, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray53, false);
        int[] intArray60 = new int[] { '#' };
        int int62 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray60, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray45, (int) (short) -1, 1, 2, intArray60, true);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, (int) (short) 10, 2, (int) (byte) 1, intArray45, true);
        int int68 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray45, (int) '4');
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[100, 0, 100, -1, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[35]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2 + "'", int68 == 2);
    }

    @Test
    public void test5209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5209");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 10);
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (short) 100);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 0);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, 10);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
    }

    @Test
    public void test5210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5210");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray19 = new int[] { '#' };
        int int21 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (short) -1, 1, 2, intArray19, true);
        int[] intArray25 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 10);
        int[] intArray27 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 0);
        int[] intArray29 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, (int) '#');
        int[] intArray31 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, (int) (byte) 100);
        int int33 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) 10);
        int[] intArray39 = new int[] { (-1), 100 };
        int[] intArray41 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray39, (int) (byte) 1);
        int[] intArray43 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray39, (int) ' ');
        int[] intArray45 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray39, (int) (short) 100);
        int int47 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray39, 1);
        int int51 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray39, (-1), 1, 2);
        int[] intArray53 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray39, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray19, 3, (int) (short) 10, (int) (byte) -1, intArray39, true);
        int int57 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray39, 0);
        int[] intArray59 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray39, (int) (byte) -1);
        int[] intArray65 = new int[] { (-1), 100 };
        int[] intArray67 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray65, (int) (byte) 1);
        int[] intArray69 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray67, (int) (byte) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray39, (int) (short) 1, (int) '#', (-1), intArray69, true);
        java.lang.Class<?> wildcardClass72 = intArray69.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[0, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[1, 1]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[0, 0]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass72);
    }

    @Test
    public void test5211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5211");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) 'a', 100, (int) (byte) 1, intArray38, false);
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) ' ');
        int int48 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) (short) -1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
    }

    @Test
    public void test5212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5212");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int int8 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, 0);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, 4);
        int[] intArray16 = new int[] { ' ', (byte) -1 };
        int[] intArray22 = new int[] { (-1), 100 };
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, (int) (byte) 1);
        int[] intArray30 = new int[] { (-1), 100 };
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray30, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray24, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray32, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray16, (-1), (int) ' ', (int) (byte) 10, intArray32, false);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, 100);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 100);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, 1);
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) '4');
        int[] intArray50 = new int[] { ' ', (byte) -1 };
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        int[] intArray64 = new int[] { (-1), 100 };
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray58, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray66, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray50, (-1), (int) ' ', (int) (byte) 10, intArray66, false);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray16, (-1), (int) (byte) 1, (int) (byte) 0, intArray66, true);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray6, (int) '#', (int) (short) -1, 0, intArray16, false);
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (short) -1);
        int[] intArray80 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) -1);
        java.lang.Class<?> wildcardClass81 = intArray16.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test5213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5213");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray22 = new int[] { ' ', (byte) -1 };
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray22, (-1), (int) ' ', (int) (byte) 10, intArray38, false);
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray50, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray58, false);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray38, (int) 'a', 100, (int) (byte) 1, intArray58, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray12, (int) (short) 100, (int) 'a', (int) (short) 0, intArray38, true);
        int int68 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, (int) (byte) 0);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (short) -1);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, 0);
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, 0);
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (int) 'a');
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2 + "'", int68 == 2);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[0, 0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
    }

    @Test
    public void test5214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5214");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 1);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (short) 1);
        int int28 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) 'a');
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, 0);
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) ' ');
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (short) 1);
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 10);
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        int[] intArray50 = new int[] { (-1), 100 };
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray44, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray52, false);
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) 'a');
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) ' ');
        int[] intArray67 = new int[] { (short) 100, (short) 0, 100, (byte) -1, 10 };
        int int71 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray67, 1, (int) (byte) 100, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray58, 100, (int) '#', (int) (short) 10, intArray67, false);
        int int75 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray58, 0);
        int[] intArray77 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) (short) 1);
        int int79 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray58, (int) '4');
        int[] intArray81 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) (short) 100);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray36, (int) '4', (int) (byte) 10, (int) (byte) 1, intArray58, false);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[100, 0, 100, -1, 10]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 2 + "'", int75 == 2);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 2 + "'", int79 == 2);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1]");
    }

    @Test
    public void test5215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5215");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) 'a', 100, (int) (byte) 1, intArray38, false);
        int int46 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, (int) (short) 1);
        int[] intArray52 = new int[] { (-1), 100 };
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) (byte) 1);
        int[] intArray60 = new int[] { (-1), 100 };
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray54, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray62, false);
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, (int) 'a');
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) ' ');
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) (byte) 10);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) (byte) 1);
        int int74 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray70, (int) (byte) 100);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray38, (int) (byte) 0, (int) ' ', (int) (byte) 1, intArray70, true);
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, 0);
        int int82 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray70, (int) (byte) -1, (int) '#', (int) (short) 1);
        int[] intArray84 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) (byte) 100);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2 + "'", int74 == 2);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1]");
    }

    @Test
    public void test5216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5216");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, 10);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) 'a');
        int int12 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, 0);
        int int14 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) (byte) 100);
        int int16 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, 4);
        int int18 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) (short) -1);
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, 1);
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (short) 1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
    }

    @Test
    public void test5217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5217");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { (-1), 100 };
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 1);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray22, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray30, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) 10, (int) '4', 10, intArray30, true);
        int int36 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray30, (int) (short) -1);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray30, 100);
        int int42 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray30, 2, (int) (byte) 1, (int) (byte) 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
    }

    @Test
    public void test5218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5218");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, 10);
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (int) (short) 1);
        int int12 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray10, 10);
        int[] intArray14 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (short) 100);
        int[] intArray20 = new int[] { (-1), 100 };
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 1);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray22, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray30, false);
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray30, (int) 'a');
        int[] intArray40 = new int[] { ' ', (byte) -1 };
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray40, (-1), (int) ' ', (int) (byte) 10, intArray56, false);
        int[] intArray66 = new int[] { (-1), 100 };
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) (byte) 1);
        int[] intArray74 = new int[] { (-1), 100 };
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray74, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray68, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray76, false);
        int[] intArray80 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray76, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray56, (int) 'a', 100, (int) (byte) 1, intArray76, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (short) 100, (int) 'a', (int) (short) 0, intArray56, true);
        int[] intArray86 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray30, (-1));
        int int88 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray86, (int) '4');
        int[] intArray90 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray86, (int) (byte) 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray14, (int) (byte) 1, (int) 'a', (-1), intArray90, false);
        int[] intArray94 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray14, (int) (byte) 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 2 + "'", int88 == 2);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, -1]");
    }

    @Test
    public void test5219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5219");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { ' ', (byte) -1 };
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray36, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, (-1), (int) ' ', (int) (byte) 10, intArray36, false);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (int) 'a', 100, (int) (byte) 1, intArray56, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, 10, (int) (short) 0, (int) (short) -1, intArray36, true);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, 0);
        int[] intArray72 = new int[] { (-1), 100 };
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (int) (byte) 1);
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray74, (int) (short) 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, 2, 10, (int) (short) 1, intArray74, false);
        int int80 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, (int) (short) 0);
        int int84 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray36, (-1), (int) (short) 10, (int) (byte) -1);
        int[] intArray86 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, 3);
        int int88 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray86, (int) (byte) -1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2 + "'", int80 == 2);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 2 + "'", int88 == 2);
    }

    @Test
    public void test5220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5220");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 100);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 1);
        int int32 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray2, (int) (byte) 1, 0, (int) (byte) 0);
        int[] intArray38 = new int[] { (-1), 100 };
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 1);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) ' ');
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray50, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray58, false);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) ' ');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray38, (int) (short) 0, (int) ' ', 0, intArray62, true);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray2, (int) (byte) 10, (int) (byte) 1, (int) (short) 1, intArray62, true);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, (int) (byte) 10);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (-1));
        java.lang.Class<?> wildcardClass71 = intArray70.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[0, 1]");
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test5221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5221");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int int24 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) (short) 1);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) (byte) -1);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) 'a');
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 0);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        int[] intArray44 = new int[] { (-1), 100 };
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray38, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray46, false);
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) 'a');
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) ' ');
        int int56 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray52, (int) (byte) -1, 0, (int) (short) 0);
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (-1));
        int int60 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray52, (int) (short) 1);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, 3);
        int[] intArray68 = new int[] { (-1), 100 };
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) (byte) 1);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) (short) 10);
        int int74 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray72, 0);
        int int78 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray72, 10, (int) ' ', 10);
        int[] intArray83 = new int[] { '#' };
        int int85 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray83, (int) (short) 0);
        int[] intArray89 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray83, 100, 0, (int) (short) -1, intArray89, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray72, (int) (short) -1, (int) (short) 1, (-1), intArray83, true);
        int[] intArray95 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (int) (short) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray52, 4, (int) (short) 10, 3, intArray95, true);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) '#', (-1), (int) '#', intArray52, false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2 + "'", int60 == 2);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2 + "'", int74 == 2);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[35]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, -1]");
    }

    @Test
    public void test5222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5222");
        int[] intArray0 = null;
        int int4 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray0, (int) 'a', (int) (byte) 100, 3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test5223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5223");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray27 = new int[] { (short) 100, (short) 0, 100, (byte) -1, 10 };
        int int31 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray27, 1, (int) (byte) 100, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, 100, (int) '#', (int) (short) 10, intArray27, false);
        int int35 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, 0);
        int[] intArray41 = new int[] { (-1), 100 };
        int[] intArray43 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray41, (int) (byte) 1);
        int[] intArray49 = new int[] { (-1), 100 };
        int[] intArray51 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray49, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray43, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray51, false);
        int[] intArray55 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray51, (int) ' ');
        int[] intArray57 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray55, (int) (byte) 0);
        int[] intArray59 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray57, (int) (byte) 1);
        int int63 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray57, (int) ' ', 10, 0);
        int[] intArray65 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray57, (int) (short) 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, 0, (int) (short) 100, (int) '#', intArray65, false);
        int[] intArray69 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) '4');
        int[] intArray73 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, (int) (byte) 0, (int) (byte) 100, (int) '4', intArray73, true);
        int int79 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (int) (byte) 0, (int) (short) 0, (int) (short) -1);
        int int81 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) (short) 100);
        java.lang.Class<?> wildcardClass82 = intArray18.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[100, 0, 100, -1, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 2 + "'", int81 == 2);
        org.junit.Assert.assertNotNull(wildcardClass82);
    }

    @Test
    public void test5224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5224");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 100);
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray26, (-1), 2, (int) (byte) -1);
        int int34 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray26, (int) ' ', (int) (byte) 100, 4);
        java.lang.Class<?> wildcardClass35 = intArray26.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test5225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5225");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 0);
        int[] intArray24 = new int[] { (-1), 100 };
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 1);
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray26, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray34, false);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) 'a');
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) ' ');
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (-1));
        int int44 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray42, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) ' ', (int) 'a', 1, intArray42, false);
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 10);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) ' ');
        int int62 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray58, (int) (short) 1, (-1), (int) (byte) 0);
        int[] intArray66 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray58, 2, (int) '4', (int) (short) 0, intArray66, true);
        int int72 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray58, (int) (short) -1, (int) ' ', (int) (byte) 1);
        int[] intArray78 = new int[] { (-1), 100 };
        int[] intArray80 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray78, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray58, 0, (int) 'a', 2, intArray78, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, 4, (int) (byte) -1, 1, intArray78, true);
        int int88 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray78, 0, (int) ' ', (int) (short) -1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
    }

    @Test
    public void test5226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5226");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, 0);
        int int20 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray16, (int) '4');
        java.lang.Class<?> wildcardClass21 = intArray16.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test5227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5227");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 0);
        int int22 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, 100, (int) (byte) 100, 10);
        int[] intArray28 = new int[] { ' ', (byte) -1 };
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray36, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray44, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray28, (-1), (int) ' ', (int) (byte) 10, intArray44, false);
        int int50 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray44, (int) (short) 1);
        int int52 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray44, (int) '#');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (-1), 100, 0, intArray44, false);
        int int58 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (int) '4', (int) 'a', 0);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 2);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) (byte) 10);
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) (byte) 100);
        int int68 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray64, (int) '#', 0, (int) (short) 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
    }

    @Test
    public void test5228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5228");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 1);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (short) 1);
        int int28 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) 'a');
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, 0);
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) ' ');
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (short) 1);
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (short) 100);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (short) -1);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 1);
        int int42 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray40, 0);
        int int46 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray40, 2, 1, (int) (short) -1);
        int int48 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray40, 10);
        int int50 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray40, (int) ' ');
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[1, 1]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
    }

    @Test
    public void test5229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5229");
        int[] intArray0 = null;
        int[] intArray6 = new int[] { (-1), 100 };
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (int) (byte) 1);
        int[] intArray14 = new int[] { (-1), 100 };
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray14, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray8, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray16, false);
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) 'a');
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) ' ');
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, (int) (byte) 10);
        int int28 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray24, (int) (byte) 100, 100, 10);
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (short) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray0, (int) (short) 1, (int) ' ', 2, intArray24, true);
        int[] intArray38 = new int[] { ' ', (byte) -1 };
        int[] intArray44 = new int[] { (-1), 100 };
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) (byte) 1);
        int[] intArray52 = new int[] { (-1), 100 };
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray46, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray54, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray38, (-1), (int) ' ', (int) (byte) 10, intArray54, false);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, 1);
        int[] intArray66 = new int[] { (-1), 100 };
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) (byte) 1);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) (short) 10);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, 10);
        int int74 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray72, (int) 'a');
        int int76 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray72, 0);
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (int) (short) 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray60, (int) (byte) 1, (int) (short) 100, (-1), intArray72, false);
        int int82 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray60, (int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray24, (int) ' ', (int) (byte) 10, 10, intArray60, true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 10 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2 + "'", int74 == 2);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2 + "'", int76 == 2);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 2 + "'", int82 == 2);
    }

    @Test
    public void test5230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5230");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 100);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 1);
        int int32 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray2, (int) (short) 0, (int) 'a', 2);
        int int36 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray2, 10, 100, (int) (short) 1);
        int int38 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray2, (int) (short) 10);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) ' ');
        int int42 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray40, 10);
        int int44 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray40, 2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2 + "'", int42 == 2);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2 + "'", int44 == 2);
    }

    @Test
    public void test5231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5231");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray22 = new int[] { (-1), 100 };
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, (int) (byte) 1);
        int[] intArray30 = new int[] { (-1), 100 };
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray30, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray24, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray32, false);
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) 'a');
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) ' ');
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray16, (int) (byte) 1, (int) 'a', 0, intArray38, true);
        int int44 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray16, (int) ' ');
        int int48 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray16, (int) ' ', (int) (byte) 100, (int) (byte) 10);
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int int52 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray16, 3);
        int int54 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray16, (int) '4');
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2 + "'", int44 == 2);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2 + "'", int54 == 2);
    }

    @Test
    public void test5232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5232");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int int22 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (int) (byte) -1, 0, (int) (short) 0);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (-1));
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) (byte) 100);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) '4');
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray36, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray44, false);
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) ' ');
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 0);
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) '#');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, (int) (short) 1, (int) (short) 100, 0, intArray48, false);
        int int58 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray48, 100, (int) (byte) 100, (int) (byte) -1);
        int int60 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray48, 1);
        int int64 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray48, (int) (byte) 0, (int) (byte) 10, (int) (short) 0);
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2 + "'", int60 == 2);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
    }

    @Test
    public void test5233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5233");
        int[] intArray1 = new int[] { 10 };
        int[] intArray3 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray1, (int) '4');
        int[] intArray8 = new int[] { '#' };
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) (short) 0);
        int int12 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) (byte) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray3, 10, (int) (byte) 1, (int) (short) 0, intArray8, false);
        int int18 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray3, 4, (int) (short) 0, (-1));
        int int22 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray3, (int) (short) 10, (int) (short) 10, (int) (short) 0);
        int[] intArray28 = new int[] { ' ', (byte) -1 };
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray36, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray44, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray28, (-1), (int) ' ', (int) (byte) 10, intArray44, false);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        int[] intArray62 = new int[] { (-1), 100 };
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray56, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray64, false);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray44, (int) 'a', 100, (int) (byte) 1, intArray64, false);
        int int72 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray64, (int) '4');
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) 'a');
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, 1);
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray3, 0, 4, 3, intArray78, true);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[10]");
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[35]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 2 + "'", int72 == 2);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1]");
    }

    @Test
    public void test5234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5234");
        int[] intArray1 = new int[] { '#' };
        int int3 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray1, (int) (short) 0);
        int[] intArray7 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray1, 100, 0, (int) (short) -1, intArray7, false);
        int[] intArray15 = new int[] { (-1), 100 };
        int[] intArray17 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray15, (int) (byte) 1);
        int[] intArray23 = new int[] { (-1), 100 };
        int[] intArray25 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray23, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray17, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray25, false);
        int[] intArray32 = new int[] { '#' };
        int int34 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray32, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray17, (int) (short) -1, 1, 2, intArray32, true);
        int[] intArray42 = new int[] { ' ', (byte) -1 };
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray50, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray58, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray42, (-1), (int) ' ', (int) (byte) 10, intArray58, false);
        int int64 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray58, (int) (short) 1);
        int[] intArray70 = new int[] { (-1), 100 };
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) (byte) 1);
        int[] intArray78 = new int[] { (-1), 100 };
        int[] intArray80 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray78, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray72, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray80, false);
        int[] intArray84 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray80, (int) 'a');
        int[] intArray86 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray84, (int) ' ');
        int[] intArray88 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray86, (int) (byte) 10);
        int[] intArray90 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray88, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray58, (int) 'a', (int) (short) 10, (int) (byte) 0, intArray88, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray32, (int) (byte) -1, 2, (int) (byte) 0, intArray58, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray1, (int) '#', 1, (int) (byte) 0, intArray32, true);
        int[] intArray98 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray1, (int) '#');
        java.lang.Class<?> wildcardClass99 = intArray98.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[35]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[35]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2 + "'", int64 == 2);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray98);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray98), "[0, 0]");
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test5235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5235");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 100);
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray26, (-1), 2, (int) (byte) -1);
        int[] intArray34 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, (int) (short) 1, (int) (byte) 100, (int) (byte) -1, intArray34, false);
        int int38 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray26, (int) (short) 1);
        int int40 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray26, 10);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        int[] intArray63 = new int[] { '#' };
        int int65 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray63, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (short) -1, 1, 2, intArray63, true);
        int[] intArray69 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray63, 10);
        int int73 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray69, 1, (int) (short) 1, (int) (byte) -1);
        int[] intArray75 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray69, (int) ' ');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 2, (int) (short) 100, 1, intArray75, false);
        int int79 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray75, (int) ' ');
        int[] intArray81 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray75, (int) ' ');
        java.lang.Class<?> wildcardClass82 = intArray81.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2 + "'", int40 == 2);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[35]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 2 + "'", int79 == 2);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass82);
    }

    @Test
    public void test5236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5236");
        int[] intArray0 = null;
        int[] intArray4 = null;
        int[] intArray10 = new int[] { ' ', (byte) -1 };
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        int[] intArray24 = new int[] { (-1), 100 };
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray26, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray10, (-1), (int) ' ', (int) (byte) 10, intArray26, false);
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, 100);
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) '4');
        int[] intArray40 = new int[] { ' ', (byte) -1 };
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray40, (-1), (int) ' ', (int) (byte) 10, intArray56, false);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, 100);
        int int64 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray40, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, 10, (int) 'a', (-1), intArray40, true);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, (int) ' ', (int) (byte) 1, (int) (short) -1, intArray40, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray0, (int) (short) 0, (int) (short) 1, (int) (short) -1, intArray40, true);
        int int74 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray40, 10, (int) (short) 100, 1);
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, 2);
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, 100);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1]");
    }

    @Test
    public void test5237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5237");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 1, (int) (byte) 1, (int) (short) -1, intArray32, false);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 10);
        int int40 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray32, (int) '#');
        // The following exception was thrown during execution in test generation
        try {
            int int44 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray32, 10, (int) (short) 0, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
    }

    @Test
    public void test5238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5238");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray22 = new int[] { ' ', (byte) -1 };
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray22, (-1), (int) ' ', (int) (byte) 10, intArray38, false);
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray50, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray58, false);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray38, (int) 'a', 100, (int) (byte) 1, intArray58, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray12, (int) (short) 100, (int) 'a', (int) (short) 0, intArray38, true);
        int int68 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray12, (int) '4');
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, 10);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) (short) -1);
        int int74 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray72, 10);
        int int76 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray72, 10);
        int int78 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray72, (int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            int int82 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray72, (int) (byte) 10, (int) 'a', (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2 + "'", int68 == 2);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2 + "'", int74 == 2);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2 + "'", int76 == 2);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 2 + "'", int78 == 2);
    }

    @Test
    public void test5239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5239");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) '4');
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 2);
        int int22 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray20, 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
    }

    @Test
    public void test5240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5240");
        int[] intArray4 = new int[] { (byte) -1, 2, (short) 1, '#' };
        int int6 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray4, (int) '4');
        int int8 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray4, (int) 'a');
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, 2, 1, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 4 + "'", int8 == 4);
    }

    @Test
    public void test5241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5241");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 10);
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (short) 1);
        int int24 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
    }

    @Test
    public void test5242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5242");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 1);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (short) 1);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) 'a');
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray36, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray44, false);
        int int50 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray36, (int) ' ', (int) (short) -1, (int) (short) 1);
        int int52 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, (int) '#');
        int int56 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray36, (int) (short) -1, 100, 10);
        int int60 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray36, 4, (int) ' ', (int) (byte) 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (-1), 1, (int) (byte) 0, intArray36, true);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray36, 0, (int) (byte) 100, 1);
        int int70 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray36, (int) ' ', (int) '#', (int) (short) 1);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) 'a');
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, 0);
        int int78 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray72, (int) (short) -1, (int) '4', (int) (short) 0);
        int[] intArray80 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (int) 'a');
        java.lang.Class<?> wildcardClass81 = intArray72.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test5243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5243");
        int[] intArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int4 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray0, (int) (byte) 10, 0, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test5244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5244");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 1, (int) (byte) 1, (int) (short) -1, intArray32, false);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 10);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 1);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) 'a');
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, 3);
        int int46 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray44, (int) (short) 100);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
    }

    @Test
    public void test5245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5245");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 10);
        int[] intArray24 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) (byte) 0, (int) (short) 100, (int) (byte) -1, intArray24, false);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) 'a');
        int int32 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray28, (int) (short) 10, 100, 2);
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, 1);
        int[] intArray40 = new int[] { ' ', (byte) -1 };
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray40, (-1), (int) ' ', (int) (byte) 10, intArray56, false);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, 100);
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) (byte) 100);
        int int68 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray64, (-1), 2, (int) (byte) -1);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) (short) 1);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, 0, (-1), 0, intArray70, true);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
    }

    @Test
    public void test5246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5246");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 1);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (short) 1);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) 'a');
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (-1));
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray30, 2);
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, 10);
        int[] intArray40 = new int[] { ' ', (byte) -1 };
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray40, (-1), (int) ' ', (int) (byte) 10, intArray56, false);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, 0);
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, (int) (byte) 10);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray64, 0);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) (short) 100);
        int int72 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray68, (-1), (int) 'a', 0);
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) (short) 1);
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray74, (int) (byte) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray32, (-1), 10, 1, intArray74, false);
        java.lang.Class<?> wildcardClass79 = intArray74.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test5247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5247");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) '#');
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, 4);
        int int12 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, 2);
        int int14 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) (short) 100);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, 2);
        int int18 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, 1);
        int[] intArray24 = new int[] { (-1), 100 };
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 1);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (short) 10);
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) '#');
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray30, 4);
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, 100);
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 10);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray8, (int) (byte) 0, (int) (byte) 0, 2, intArray36, false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
    }

    @Test
    public void test5248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5248");
        int[] intArray1 = new int[] { 10 };
        int[] intArray3 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray1, (int) '4');
        int[] intArray8 = new int[] { '#' };
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) (short) 0);
        int int12 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) (byte) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray3, 10, (int) (byte) 1, (int) (short) 0, intArray8, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, 1);
        int int20 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray8, (int) (byte) 10, (int) 'a', (int) '#');
        int int22 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) '#');
        int[] intArray28 = new int[] { ' ', (byte) -1 };
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray36, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray44, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray28, (-1), (int) ' ', (int) (byte) 10, intArray44, false);
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, 1);
        int int52 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray50, (int) (short) 1);
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) 'a');
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (-1));
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (short) 10);
        int int60 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray58, (int) (short) -1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray8, 4, (int) 'a', 1, intArray58, false);
        java.lang.Class<?> wildcardClass63 = intArray58.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[10]");
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[35]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2 + "'", int60 == 2);
        org.junit.Assert.assertNotNull(wildcardClass63);
    }

    @Test
    public void test5249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5249");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray19 = new int[] { '#' };
        int int21 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (short) -1, 1, 2, intArray19, true);
        int[] intArray25 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 10);
        int int29 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray25, 1, (int) (short) 1, (int) (byte) -1);
        int[] intArray31 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray25, (int) (short) 1);
        int[] intArray33 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray25, (int) (short) 10);
        java.lang.Class<?> wildcardClass34 = intArray25.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test5250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5250");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray19 = new int[] { '#' };
        int int21 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (short) -1, 1, 2, intArray19, true);
        int[] intArray25 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 10);
        int[] intArray27 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 0);
        int[] intArray33 = new int[] { ' ', (byte) -1 };
        int[] intArray39 = new int[] { (-1), 100 };
        int[] intArray41 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray39, (int) (byte) 1);
        int[] intArray47 = new int[] { (-1), 100 };
        int[] intArray49 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray47, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray41, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray49, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray33, (-1), (int) ' ', (int) (byte) 10, intArray49, false);
        int[] intArray59 = new int[] { (-1), 100 };
        int[] intArray61 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray59, (int) (byte) 1);
        int[] intArray67 = new int[] { (-1), 100 };
        int[] intArray69 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray67, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray61, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray69, false);
        int[] intArray73 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray69, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray49, (int) 'a', 100, (int) (byte) 1, intArray69, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray27, (int) (short) 0, (int) (byte) 1, (int) (short) 1, intArray49, true);
        int int79 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray27, (int) (byte) -1);
        int[] intArray81 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray27, 1);
        int int83 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray27, (int) ' ');
        int[] intArray85 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray27, (int) 'a');
        int[] intArray87 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray85, 0);
        int[] intArray89 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray87, 3);
        // The following exception was thrown during execution in test generation
        try {
            int int93 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray87, (int) '4', (int) (byte) 1, 2);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 2 + "'", int79 == 2);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 2 + "'", int83 == 2);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, -1]");
    }

    @Test
    public void test5251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5251");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray19 = new int[] { '#' };
        int int21 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (short) -1, 1, 2, intArray19, true);
        int[] intArray25 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 10);
        int int29 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray25, 1, (int) (short) 1, (int) (byte) -1);
        int[] intArray31 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray25, (int) (byte) 100);
        int[] intArray37 = new int[] { ' ', (byte) -1 };
        int[] intArray43 = new int[] { (-1), 100 };
        int[] intArray45 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray43, (int) (byte) 1);
        int[] intArray51 = new int[] { (-1), 100 };
        int[] intArray53 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray51, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray45, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray53, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray37, (-1), (int) ' ', (int) (byte) 10, intArray53, false);
        int[] intArray63 = new int[] { (-1), 100 };
        int[] intArray65 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray63, (int) (byte) 1);
        int[] intArray71 = new int[] { (-1), 100 };
        int[] intArray73 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray71, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray65, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray73, false);
        int[] intArray77 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray73, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray53, (int) 'a', 100, (int) (byte) 1, intArray73, false);
        int int81 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray73, (int) '4');
        int int85 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray73, (int) ' ', (int) (byte) 1, 0);
        int int87 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray73, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray31, (int) (short) 0, (int) (byte) 10, (int) (short) 1, intArray73, false);
        int int91 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray31, (int) 'a');
        int[] intArray93 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray31, (int) (byte) 100);
        int int95 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray31, (int) (short) -1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 2 + "'", int81 == 2);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 2 + "'", int87 == 2);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 2 + "'", int91 == 2);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 2 + "'", int95 == 2);
    }

    @Test
    public void test5252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5252");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) ' ');
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (short) 100);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, 100);
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) '#');
        int int14 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) (byte) 1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[1, 1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
    }

    @Test
    public void test5253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5253");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, 10);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) 'a');
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (short) 100);
        int[] intArray14 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) -1);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray14, 1);
        int int20 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray14, (int) (byte) 0, 0, 1);
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray36, false);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) 'a');
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) ' ');
        int int46 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray42, (int) (byte) -1, 0, (int) (short) 0);
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (-1));
        int int50 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray42, (int) (byte) 100);
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (short) 10);
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) -1);
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray14, (int) (byte) 10, (-1), (int) '#', intArray42, true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 1]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
    }

    @Test
    public void test5254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5254");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) ' ');
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray6, (int) (short) 1, (-1), (int) (byte) 0);
        int int14 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray6, 10, (int) 'a', (int) (short) 10);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (int) '#');
        int[] intArray22 = new int[] { ' ', (byte) -1 };
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray22, (-1), (int) ' ', (int) (byte) 10, intArray38, false);
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, 100);
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, (int) (byte) 100);
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, 1);
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, (int) '4');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray6, (-1), 1, (-1), intArray22, true);
        int int56 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray6, (int) ' ', (int) 'a', (int) '4');
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (int) (short) 100);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, 100);
        int int64 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray60, (int) ' ', 3, (int) (byte) -1);
        int int68 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray60, (int) (short) 0, 10, 3);
        int int70 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray60, 100);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2 + "'", int70 == 2);
    }

    @Test
    public void test5255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5255");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) ' ');
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 10);
        int[] intArray14 = new int[] { ' ', (byte) -1 };
        int[] intArray20 = new int[] { (-1), 100 };
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 1);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray22, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray30, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray14, (-1), (int) ' ', (int) (byte) 10, intArray30, false);
        int[] intArray40 = new int[] { (-1), 100 };
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) (byte) 1);
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray42, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray50, false);
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray30, (int) 'a', 100, (int) (byte) 1, intArray50, false);
        int int58 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray50, (int) '4');
        int int60 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray50, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, 0, (int) (short) -1, 0, intArray50, false);
        int int64 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray2, 10);
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) (byte) 10);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, 100);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2 + "'", int58 == 2);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2 + "'", int60 == 2);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[1, 1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
    }

    @Test
    public void test5256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5256");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 0);
        int int22 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, 100, (int) (byte) 100, 10);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) 'a');
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
    }

    @Test
    public void test5257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5257");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { ' ', (byte) -1 };
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray36, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, (-1), (int) ' ', (int) (byte) 10, intArray36, false);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (int) 'a', 100, (int) (byte) 1, intArray56, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, 10, (int) (short) 0, (int) (short) -1, intArray36, true);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, 0);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, 10);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 100);
        int int72 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray70, (int) (byte) 0);
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) (byte) 10);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 2 + "'", int72 == 2);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
    }

    @Test
    public void test5258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5258");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) '4');
        int int20 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) (byte) -1);
        int int22 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (-1));
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (-1), (int) '#', 4);
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (int) (short) 0, (int) '#', (int) (byte) 1);
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 0);
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 1);
        int int38 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray34, (int) (short) 100, 10, (int) (byte) 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
    }

    @Test
    public void test5259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5259");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) '4');
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 2);
        int int24 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (int) '#', (int) (short) -1, 1);
        java.lang.Class<?> wildcardClass25 = intArray18.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test5260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5260");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray19 = new int[] { '#' };
        int int21 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (short) -1, 1, 2, intArray19, true);
        int[] intArray25 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 10);
        int[] intArray27 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 0);
        int[] intArray33 = new int[] { ' ', (byte) -1 };
        int[] intArray39 = new int[] { (-1), 100 };
        int[] intArray41 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray39, (int) (byte) 1);
        int[] intArray47 = new int[] { (-1), 100 };
        int[] intArray49 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray47, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray41, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray49, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray33, (-1), (int) ' ', (int) (byte) 10, intArray49, false);
        int[] intArray59 = new int[] { (-1), 100 };
        int[] intArray61 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray59, (int) (byte) 1);
        int[] intArray67 = new int[] { (-1), 100 };
        int[] intArray69 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray67, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray61, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray69, false);
        int[] intArray73 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray69, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray49, (int) 'a', 100, (int) (byte) 1, intArray69, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray27, (int) (short) 0, (int) (byte) 1, (int) (short) 1, intArray49, true);
        int int79 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray27, (int) (byte) -1);
        int int81 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray27, (int) (byte) -1);
        int[] intArray83 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray27, 1);
        int[] intArray85 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray83, 0);
        int[] intArray87 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray83, (int) (byte) 10);
        int int89 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray87, 3);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 2 + "'", int79 == 2);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 2 + "'", int81 == 2);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 2 + "'", int89 == 2);
    }

    @Test
    public void test5261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5261");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { ' ', (byte) -1 };
        int[] intArray38 = new int[] { (-1), 100 };
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 1);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray40, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray48, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, (-1), (int) ' ', (int) (byte) 10, intArray48, false);
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, 100);
        int int56 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray32, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray24, 10, (int) 'a', (-1), intArray32, true);
        int int60 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray32, (int) ' ');
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) '4');
        int int64 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray32, 0);
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2 + "'", int60 == 2);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
    }

    @Test
    public void test5262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5262");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 1, (int) (byte) 1, (int) (short) -1, intArray32, false);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 10);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 1);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, (int) (byte) 10, (int) (short) 1, 1, intArray46, false);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        int[] intArray64 = new int[] { (-1), 100 };
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray58, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray66, false);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) 'a');
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) ' ');
        int int76 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray72, (int) (byte) -1, 0, (int) (short) 0);
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (-1));
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray32, (int) '4', 1, (int) (short) 0, intArray78, false);
        int[] intArray82 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        int int84 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray82, 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 2 + "'", int84 == 2);
    }

    @Test
    public void test5263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5263");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int int8 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, 0);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, (int) (short) -1);
        int[] intArray16 = new int[] { ' ', (byte) -1 };
        int[] intArray22 = new int[] { (-1), 100 };
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, (int) (byte) 1);
        int[] intArray30 = new int[] { (-1), 100 };
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray30, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray24, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray32, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray16, (-1), (int) ' ', (int) (byte) 10, intArray32, false);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, 100);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) '4');
        int[] intArray46 = new int[] { ' ', (byte) -1 };
        int[] intArray52 = new int[] { (-1), 100 };
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) (byte) 1);
        int[] intArray60 = new int[] { (-1), 100 };
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray54, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray62, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray46, (-1), (int) ' ', (int) (byte) 10, intArray62, false);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, 100);
        int int70 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray46, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray38, 10, (int) 'a', (-1), intArray46, true);
        int int74 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray46, (int) ' ');
        int int76 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray46, (int) '4');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray6, (int) (short) 0, (int) (short) 10, (int) (byte) 0, intArray46, false);
        int int82 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray46, (int) (short) 1, 4, (-1));
        int[] intArray84 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray86 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, 0);
        int int88 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray86, 2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2 + "'", int74 == 2);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2 + "'", int76 == 2);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 2 + "'", int88 == 2);
    }

    @Test
    public void test5264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5264");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 10);
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) ' ');
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        int[] intArray45 = new int[] { '#' };
        int int47 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray45, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (short) -1, 1, 2, intArray45, true);
        int[] intArray51 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray45, 10);
        int[] intArray53 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray45, 0);
        int[] intArray55 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray45, (int) '#');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray20, 0, 2, (int) (short) 1, intArray55, true);
        int int59 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray55, (int) (short) -1);
        int[] intArray61 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray55, (int) (short) 10);
        java.lang.Class<?> wildcardClass62 = intArray55.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[35]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass62);
    }

    @Test
    public void test5265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5265");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) 'a', 100, (int) (byte) 1, intArray38, false);
        int int46 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, (int) '4');
        int int50 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray38, (int) ' ', (int) (byte) 1, 0);
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, 100);
        int int54 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray52, 2);
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, 100);
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (short) 0);
        int int60 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray58, (int) (short) 10);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2 + "'", int54 == 2);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2 + "'", int60 == 2);
    }

    @Test
    public void test5266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5266");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 0);
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 1);
        int int24 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (int) ' ', 10, 0);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 2);
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (int) (byte) 10, 100, (int) (byte) -1);
        int int32 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
    }

    @Test
    public void test5267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5267");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray19 = new int[] { '#' };
        int int21 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (short) -1, 1, 2, intArray19, true);
        int[] intArray25 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 10);
        int[] intArray27 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 1);
        int[] intArray29 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray27, (-1));
        int[] intArray31 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray29, 0);
        int[] intArray33 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray29, (int) 'a');
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[0, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1]");
    }

    @Test
    public void test5268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5268");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 1);
        int[] intArray30 = new int[] { ' ', (byte) -1 };
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        int[] intArray44 = new int[] { (-1), 100 };
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray38, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray46, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray30, (-1), (int) ' ', (int) (byte) 10, intArray46, false);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        int[] intArray64 = new int[] { (-1), 100 };
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray58, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray66, false);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray46, (int) 'a', 100, (int) (byte) 1, intArray66, false);
        int int74 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray66, (int) '4');
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) (byte) 10, (int) '#', 0, intArray66, false);
        int int80 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) (byte) 10);
        int int82 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) (byte) 1);
        int int84 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) '#');
        int int88 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (int) (short) 10, 0, (int) (byte) 1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2 + "'", int74 == 2);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2 + "'", int80 == 2);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 2 + "'", int82 == 2);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 2 + "'", int84 == 2);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 2 + "'", int88 == 2);
    }

    @Test
    public void test5269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5269");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { ' ', (byte) -1 };
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray36, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, (-1), (int) ' ', (int) (byte) 10, intArray36, false);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (int) 'a', 100, (int) (byte) 1, intArray56, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, 10, (int) (short) 0, (int) (short) -1, intArray36, true);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, 0);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, 10);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 100);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        int int74 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray72, 0);
        int int78 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray72, (int) (byte) 100, (int) (short) 100, (int) 'a');
        int int80 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray72, (int) '4');
        int[] intArray82 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (int) (short) -1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2 + "'", int74 == 2);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2 + "'", int80 == 2);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[0, 1]");
    }

    @Test
    public void test5270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5270");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { ' ', (byte) -1 };
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray36, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, (-1), (int) ' ', (int) (byte) 10, intArray36, false);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (int) 'a', 100, (int) (byte) 1, intArray56, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, 10, (int) (short) 0, (int) (short) -1, intArray36, true);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, 0);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, 10);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) (byte) 1);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, 4);
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (int) (short) 1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
    }

    @Test
    public void test5271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5271");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 1);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (short) 1);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) 'a');
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray36, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray44, false);
        int int50 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray36, (int) ' ', (int) (short) -1, (int) (short) 1);
        int int52 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, (int) '#');
        int int56 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray36, (int) (short) -1, 100, 10);
        int int60 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray36, 4, (int) ' ', (int) (byte) 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (-1), 1, (int) (byte) 0, intArray36, true);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray36, 0, (int) (byte) 100, 1);
        int int70 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray36, (int) ' ', (int) '#', (int) (short) 1);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) 'a');
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, 0);
        int int78 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray72, (int) (short) -1, (int) '4', (int) (short) 0);
        int int82 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray72, (int) (byte) 100, (int) (short) 100, (int) 'a');
        int int86 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray72, (int) (byte) 10, (int) (byte) 1, (-1));
        java.lang.Class<?> wildcardClass87 = intArray72.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test5272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5272");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 10);
        int[] intArray24 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) (byte) 0, (int) (short) 100, (int) (byte) -1, intArray24, false);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) 'a');
        int int32 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray28, (int) (short) 10, 100, 2);
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, 1);
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (short) 0);
        java.lang.Class<?> wildcardClass37 = intArray34.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test5273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5273");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray19 = new int[] { '#' };
        int int21 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (short) -1, 1, 2, intArray19, true);
        int[] intArray25 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 10);
        int[] intArray27 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 100);
        int int29 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray27, (int) (short) 10);
        int int31 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray27, 0);
        int[] intArray33 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray27, (int) '4');
        // The following exception was thrown during execution in test generation
        try {
            int int37 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray33, 2, 0, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1]");
    }

    @Test
    public void test5274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5274");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 1);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (short) 1);
        int int28 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) 'a');
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, 0);
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) ' ');
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (short) 1);
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (short) 100);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 0);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (short) 100);
        int int42 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, (int) (byte) 0);
        java.lang.Class<?> wildcardClass43 = intArray38.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2 + "'", int42 == 2);
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test5275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5275");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) 'a', 100, (int) (byte) 1, intArray38, false);
        int[] intArray50 = new int[] { ' ', (byte) -1 };
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        int[] intArray64 = new int[] { (-1), 100 };
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray58, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray66, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray50, (-1), (int) ' ', (int) (byte) 10, intArray66, false);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, 0);
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (int) ' ');
        int int78 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray74, 0, 2, (int) (short) -1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray38, (int) (byte) 10, (int) ' ', (int) (short) -1, intArray74, false);
        int int82 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, (int) (byte) 0);
        int[] intArray84 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 100);
        int[] intArray86 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray84, (int) (byte) 0);
        int int88 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray84, (-1));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 2 + "'", int82 == 2);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 2 + "'", int88 == 2);
    }

    @Test
    public void test5276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5276");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 100);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 1);
        int int32 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray2, (int) (short) 0, (int) 'a', 2);
        int int36 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray2, 10, 100, (int) (short) 1);
        int int38 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray2, (int) (short) 10);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) ' ');
        int int42 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray40, (int) '#');
        java.lang.Class<?> wildcardClass43 = intArray40.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2 + "'", int42 == 2);
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test5277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5277");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray22 = new int[] { ' ', (byte) -1 };
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray22, (-1), (int) ' ', (int) (byte) 10, intArray38, false);
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray50, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray58, false);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray38, (int) 'a', 100, (int) (byte) 1, intArray58, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray12, (int) (short) 100, (int) 'a', (int) (short) 0, intArray38, true);
        int int68 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray12, (int) '4');
        int int72 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray12, 4, 0, (int) (short) 0);
        java.lang.Class<?> wildcardClass73 = intArray12.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2 + "'", int68 == 2);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test5278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5278");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (byte) 0);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray4, 2, 0, (int) (byte) -1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        int[] intArray24 = new int[] { (-1), 100 };
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray26, false);
        int[] intArray34 = new int[] { ' ', (byte) -1 };
        int[] intArray40 = new int[] { (-1), 100 };
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) (byte) 1);
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray42, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray50, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray34, (-1), (int) ' ', (int) (byte) 10, intArray50, false);
        int[] intArray60 = new int[] { (-1), 100 };
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) (byte) 1);
        int[] intArray68 = new int[] { (-1), 100 };
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray62, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray70, false);
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray50, (int) 'a', 100, (int) (byte) 1, intArray70, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, 10, (int) (short) 0, (int) (short) -1, intArray50, true);
        int int80 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray50, 0);
        int[] intArray82 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, 10);
        int[] intArray84 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray82, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, (int) (short) 1, 0, 0, intArray84, false);
        int int88 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray4, (-1));
        int int90 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray4, (int) (byte) 0);
        int[] intArray92 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (byte) -1);
        java.lang.Class<?> wildcardClass93 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2 + "'", int80 == 2);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 2 + "'", int88 == 2);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 2 + "'", int90 == 2);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[0, 1]");
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test5279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5279");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray19 = new int[] { '#' };
        int int21 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (short) -1, 1, 2, intArray19, true);
        int[] intArray25 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 10);
        int[] intArray27 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 100);
        int int31 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray19, (-1), 0, (int) (short) -1);
        int[] intArray33 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, (int) (byte) -1);
        int int35 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray33, (int) (short) -1);
        int[] intArray39 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray33, 1, (int) (short) 1, (int) '#', intArray39, true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
    }

    @Test
    public void test5280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5280");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { ' ', (byte) -1 };
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray36, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, (-1), (int) ' ', (int) (byte) 10, intArray36, false);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (int) 'a', 100, (int) (byte) 1, intArray56, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, 10, (int) (short) 0, (int) (short) -1, intArray36, true);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, 0);
        int int70 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray36, 10, 10, (int) (short) 1);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            int int76 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray72, (int) (short) 10, (int) (short) 100, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[0, 1]");
    }

    @Test
    public void test5281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5281");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 1, (int) (byte) 1, (int) (short) -1, intArray32, false);
        int int40 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray32, 10, 100, (int) '#');
        int int42 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray32, (int) (byte) 0);
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) ' ');
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (short) 100);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray32, 1, 10, (int) (byte) 0, intArray54, true);
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, 1);
        int int60 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray32, (int) '4');
        int int64 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray32, (int) (byte) -1, (int) (byte) 0, (-1));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[1, 1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
    }

    @Test
    public void test5282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5282");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int int22 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (int) (byte) -1, 0, (int) (short) 0);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (-1));
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '#');
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) '#');
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray26, (int) (byte) 100);
        java.lang.Class<?> wildcardClass31 = intArray26.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test5283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5283");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { ' ', (byte) -1 };
        int[] intArray38 = new int[] { (-1), 100 };
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 1);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray40, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray48, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, (-1), (int) ' ', (int) (byte) 10, intArray48, false);
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, 100);
        int int56 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray32, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray24, 10, (int) 'a', (-1), intArray32, true);
        int int60 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray32, (int) ' ');
        int int62 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray32, (int) '4');
        int int64 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray32, (int) (byte) -1);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray32, (int) '#');
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2 + "'", int60 == 2);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2 + "'", int62 == 2);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
    }

    @Test
    public void test5284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5284");
        int[] intArray2 = new int[] { 1, 'a' };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) ' ');
        int int16 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray12, (int) (short) 1, (-1), (int) (byte) 0);
        int[] intArray20 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray12, 2, (int) '4', (int) (short) 0, intArray20, true);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray12, (int) (short) -1, (int) ' ', (int) (byte) 1);
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray12, 0, (int) 'a', 2, intArray32, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray2, (int) '4', 10, 1, intArray32, true);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) ' ');
        int int42 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray40, 100);
        java.lang.Class<?> wildcardClass43 = intArray40.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[1, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2 + "'", int42 == 2);
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test5285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5285");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 100);
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray26, (-1), 2, (int) (byte) -1);
        int[] intArray34 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, (int) (short) 1, (int) (byte) 100, (int) (byte) -1, intArray34, false);
        int int38 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray26, (int) (short) 1);
        int int40 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray26, 10);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) ' ');
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) (byte) 0);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray62, 0, 1, (-1));
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray26, 100, (int) ' ', 0, intArray62, false);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, (int) (byte) 1);
        int int74 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray70, (int) (byte) 1, 0, (int) (byte) 1);
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, 10);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2 + "'", int40 == 2);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2 + "'", int74 == 2);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
    }

    @Test
    public void test5286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5286");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray19 = new int[] { '#' };
        int int21 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (short) -1, 1, 2, intArray19, true);
        int[] intArray25 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 10);
        int[] intArray27 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 0);
        int[] intArray33 = new int[] { ' ', (byte) -1 };
        int[] intArray39 = new int[] { (-1), 100 };
        int[] intArray41 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray39, (int) (byte) 1);
        int[] intArray47 = new int[] { (-1), 100 };
        int[] intArray49 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray47, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray41, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray49, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray33, (-1), (int) ' ', (int) (byte) 10, intArray49, false);
        int[] intArray59 = new int[] { (-1), 100 };
        int[] intArray61 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray59, (int) (byte) 1);
        int[] intArray67 = new int[] { (-1), 100 };
        int[] intArray69 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray67, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray61, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray69, false);
        int[] intArray73 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray69, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray49, (int) 'a', 100, (int) (byte) 1, intArray69, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray27, (int) (short) 0, (int) (byte) 1, (int) (short) 1, intArray49, true);
        int[] intArray79 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray27, (int) '#');
        int int81 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray79, (int) (byte) 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 2 + "'", int81 == 2);
    }

    @Test
    public void test5287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5287");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 1);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (short) 1);
        int int28 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) 'a');
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, 0);
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) ' ');
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (short) 1);
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 10);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, 4);
        int[] intArray44 = new int[] { (-1), 100 };
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) (byte) 1);
        int[] intArray52 = new int[] { (-1), 100 };
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray46, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray54, false);
        int[] intArray61 = new int[] { '#' };
        int int63 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray61, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray46, (int) (short) -1, 1, 2, intArray61, true);
        int[] intArray67 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray61, 10);
        int[] intArray69 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray61, 0);
        int int71 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray61, (int) 'a');
        int[] intArray73 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray61, (int) '#');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray34, 0, (int) (byte) 100, 0, intArray73, false);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[35]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[0, 0]");
    }

    @Test
    public void test5288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5288");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 10);
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (short) 100);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 0);
        int int28 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray24, (int) (short) -1, 4, (-1));
        int int32 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray24, (int) (short) 0, (int) (short) 1, 0);
        int int34 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, 2);
        java.lang.Class<?> wildcardClass35 = intArray24.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test5289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5289");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray19 = new int[] { '#' };
        int int21 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (short) -1, 1, 2, intArray19, true);
        int[] intArray25 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 10);
        int[] intArray27 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 0);
        int[] intArray33 = new int[] { ' ', (byte) -1 };
        int[] intArray39 = new int[] { (-1), 100 };
        int[] intArray41 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray39, (int) (byte) 1);
        int[] intArray47 = new int[] { (-1), 100 };
        int[] intArray49 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray47, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray41, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray49, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray33, (-1), (int) ' ', (int) (byte) 10, intArray49, false);
        int[] intArray59 = new int[] { (-1), 100 };
        int[] intArray61 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray59, (int) (byte) 1);
        int[] intArray67 = new int[] { (-1), 100 };
        int[] intArray69 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray67, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray61, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray69, false);
        int[] intArray73 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray69, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray49, (int) 'a', 100, (int) (byte) 1, intArray69, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray27, (int) (short) 0, (int) (byte) 1, (int) (short) 1, intArray49, true);
        int int79 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray27, (int) (byte) -1);
        int int81 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray27, (int) (byte) -1);
        int[] intArray83 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray27, 1);
        int int85 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray83, (int) (short) 1);
        int[] intArray87 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray83, (int) (short) 0);
        int int91 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray83, (int) (byte) 0, (int) ' ', (int) (short) 1);
        java.lang.Class<?> wildcardClass92 = intArray83.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 2 + "'", int79 == 2);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 2 + "'", int81 == 2);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 2 + "'", int85 == 2);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test5290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5290");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 10);
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) ' ');
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) ' ');
        int int36 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray32, (int) (short) 1, (-1), (int) (byte) 0);
        int[] intArray40 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, 2, (int) '4', (int) (short) 0, intArray40, true);
        int int44 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray32, (int) '4');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray22, 0, 1, (int) (short) -1, intArray32, true);
        int int50 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray22, 4, (int) (byte) -1, (int) (short) 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2 + "'", int44 == 2);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
    }

    @Test
    public void test5291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5291");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) 'a', 100, (int) (byte) 1, intArray38, false);
        int int46 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, (int) '4');
        int int48 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, 0);
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 10);
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) 'a');
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
    }

    @Test
    public void test5292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5292");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 1);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (short) 1);
        int int28 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) 'a');
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 10);
        java.lang.Class<?> wildcardClass31 = intArray30.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test5293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5293");
        int[] intArray0 = null;
        int int4 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray0, (int) (short) -1, (int) (byte) 100, (int) (byte) 10);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test5294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5294");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, 10);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) 'a');
        int int12 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, 0);
        int int14 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) (byte) 100);
        int[] intArray20 = new int[] { (-1), 100 };
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 1);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray22, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray30, false);
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray30, (int) 'a');
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) ' ');
        int int40 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray36, (int) (byte) -1, 0, (int) (short) 0);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (-1));
        int int44 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, (int) (short) 1);
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) '#');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray8, (int) (short) 1, (int) (byte) 0, (-1), intArray46, false);
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 100);
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, 4);
        java.lang.Class<?> wildcardClass53 = intArray46.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2 + "'", int44 == 2);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test5295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5295");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 100);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 1);
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray2, 0);
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) '4');
        int int36 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray2, 0, (int) '#', 10);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 10);
        int int40 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray2, (-1));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
    }

    @Test
    public void test5296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5296");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, 10);
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (int) (short) 1);
        int int12 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray10, 10);
        int[] intArray14 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (short) 100);
        int int16 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray14, (int) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            int int20 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray14, (int) (short) -1, (int) (byte) -1, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
    }

    @Test
    public void test5297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5297");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { ' ', (byte) -1 };
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray36, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, (-1), (int) ' ', (int) (byte) 10, intArray36, false);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (int) 'a', 100, (int) (byte) 1, intArray56, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, 10, (int) (short) 0, (int) (short) -1, intArray36, true);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, 0);
        int int70 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray36, 10, 10, (int) (short) 1);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (short) -1);
        int int74 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, (-1));
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (short) 10);
        int int80 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray76, 2, (int) 'a', (-1));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2 + "'", int74 == 2);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
    }

    @Test
    public void test5298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5298");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { ' ', (byte) -1 };
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray36, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, (-1), (int) ' ', (int) (byte) 10, intArray36, false);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (int) 'a', 100, (int) (byte) 1, intArray56, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, 10, (int) (short) 0, (int) (short) -1, intArray36, true);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, 0);
        int[] intArray72 = new int[] { (-1), 100 };
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (int) (byte) 1);
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray74, (int) (short) 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, 2, 10, (int) (short) 1, intArray74, false);
        int int80 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, (int) (short) 0);
        int int84 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray36, (-1), (int) (short) 10, (int) (byte) -1);
        int[] intArray86 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) ' ');
        int int88 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray86, (int) 'a');
        java.lang.Class<?> wildcardClass89 = intArray86.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2 + "'", int80 == 2);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 2 + "'", int88 == 2);
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test5299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5299");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 1, (int) (byte) 1, (int) (short) -1, intArray32, false);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 10);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) 'a');
        java.lang.Class<?> wildcardClass41 = intArray40.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test5300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5300");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) ' ');
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, 2);
        int[] intArray14 = new int[] { (-1), 100 };
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray14, (int) (byte) 1);
        int[] intArray22 = new int[] { (-1), 100 };
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray16, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray24, false);
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        int[] intArray40 = new int[] { (-1), 100 };
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray34, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray42, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray16, (int) (byte) 10, (int) '4', 10, intArray42, true);
        int int48 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray16, 0);
        int int52 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray16, (int) (byte) 0, (-1), 1);
        int int54 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray16, (int) '4');
        int int58 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray16, 4, (int) (short) 10, 4);
        int int60 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray16, (int) (short) 0);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, 2);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray8, 0, (int) 'a', (int) (short) 10, intArray16, false);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2 + "'", int54 == 2);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2 + "'", int60 == 2);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
    }

    @Test
    public void test5301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5301");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) ' ');
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 10);
        int[] intArray14 = new int[] { ' ', (byte) -1 };
        int[] intArray20 = new int[] { (-1), 100 };
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 1);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray22, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray30, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray14, (-1), (int) ' ', (int) (byte) 10, intArray30, false);
        int[] intArray40 = new int[] { (-1), 100 };
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) (byte) 1);
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray42, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray50, false);
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray30, (int) 'a', 100, (int) (byte) 1, intArray50, false);
        int int58 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray50, (int) '4');
        int int60 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray50, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, 0, (int) (short) -1, 0, intArray50, false);
        int int64 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray2, 10);
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) (byte) 10);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) (byte) -1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2 + "'", int58 == 2);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2 + "'", int60 == 2);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[1, 1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[0, 1]");
    }

    @Test
    public void test5302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5302");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) '#');
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) (short) 0);
        int int12 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) ' ');
        java.lang.Class<?> wildcardClass13 = intArray8.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test5303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5303");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int int22 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, 1, (int) (byte) 100, (-1));
        int[] intArray28 = new int[] { ' ', (byte) -1 };
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray36, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray44, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray28, (-1), (int) ' ', (int) (byte) 10, intArray44, false);
        int int50 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray44, (int) (short) 1);
        int int52 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray44, (int) '#');
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, 2);
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, 4);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, (-1), (int) (byte) 10, 4, intArray44, true);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) 'a');
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
    }

    @Test
    public void test5304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5304");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray22 = new int[] { ' ', (byte) -1 };
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray22, (-1), (int) ' ', (int) (byte) 10, intArray38, false);
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray50, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray58, false);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray38, (int) 'a', 100, (int) (byte) 1, intArray58, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray12, (int) (short) 100, (int) 'a', (int) (short) 0, intArray38, true);
        int int68 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, 2);
        int int72 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray38, (int) (byte) 0, (int) (byte) 1, (-1));
        int int76 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray38, (int) (byte) 10, (int) '4', (int) (byte) -1);
        int int80 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray38, 4, (int) ' ', 1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2 + "'", int68 == 2);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
    }

    @Test
    public void test5305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5305");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, 10);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) 'a');
        int int12 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, 0);
        int int14 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) (byte) 100);
        int[] intArray20 = new int[] { (-1), 100 };
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 1);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray22, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray30, false);
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray30, (int) 'a');
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) ' ');
        int int40 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray36, (int) (byte) -1, 0, (int) (short) 0);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (-1));
        int int44 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, (int) (short) 1);
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) '#');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray8, (int) (short) 1, (int) (byte) 0, (-1), intArray46, false);
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 100);
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, 4);
        int int54 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray46, (int) 'a');
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2 + "'", int44 == 2);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2 + "'", int54 == 2);
    }

    @Test
    public void test5306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5306");
        int[] intArray0 = null;
        int[] intArray6 = new int[] { (-1), 100 };
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (int) (byte) 1);
        int[] intArray14 = new int[] { (-1), 100 };
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray14, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray8, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray16, false);
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray0, 10, (int) (short) 1, (int) (short) 0, intArray22, false);
        int int28 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray22, 0, (int) '4', (int) (short) 10);
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, (-1));
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray30, 0);
        int int34 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray30, (int) (short) 100);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
    }

    @Test
    public void test5307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5307");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 10);
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) ' ');
        int[] intArray28 = new int[] { ' ', (byte) -1 };
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray36, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray44, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray28, (-1), (int) ' ', (int) (byte) 10, intArray44, false);
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray22, 100, (int) (short) 100, (-1), intArray50, true);
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, (int) (byte) -1);
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, (int) ' ');
        java.lang.Class<?> wildcardClass57 = intArray56.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test5308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5308");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) '4');
        int int20 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) (byte) -1);
        int int22 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (-1));
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (-1), (int) '#', 4);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) -1);
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, 2);
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray30, (-1));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[0, 1]");
    }

    @Test
    public void test5309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5309");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 1, (int) (byte) 1, (int) (short) -1, intArray32, false);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 10);
        int int40 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, (int) ' ');
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, 0);
        int int44 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, (-1));
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, 1);
        int int48 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, (int) '#');
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (short) 10);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, 10);
        int int62 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray60, (int) 'a');
        int int64 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray60, 0);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray60, (int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray38, (int) ' ', (int) 'a', (int) (byte) 100, intArray60, false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 98 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2 + "'", int40 == 2);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2 + "'", int44 == 2);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2 + "'", int62 == 2);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2 + "'", int64 == 2);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
    }

    @Test
    public void test5310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5310");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 100);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 1);
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) '4');
        int[] intArray36 = new int[] { ' ', (byte) -1 };
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        int[] intArray50 = new int[] { (-1), 100 };
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray44, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray52, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (-1), (int) ' ', (int) (byte) 10, intArray52, false);
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) (byte) 1, (int) (byte) 0, intArray52, true);
        int int62 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray52, (int) (short) 1);
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (-1));
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray52, (int) (short) 0);
        java.lang.Class<?> wildcardClass67 = intArray52.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2 + "'", int62 == 2);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(wildcardClass67);
    }

    @Test
    public void test5311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5311");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (-1));
        int int22 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray20, 0);
        int int24 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray20, 100);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
    }

    @Test
    public void test5312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5312");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray19 = new int[] { '#' };
        int int21 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (short) -1, 1, 2, intArray19, true);
        int[] intArray25 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 10);
        // The following exception was thrown during execution in test generation
        try {
            int int29 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray19, (int) (short) 100, (int) (byte) -1, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1]");
    }

    @Test
    public void test5313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5313");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { ' ', (byte) -1 };
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray36, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, (-1), (int) ' ', (int) (byte) 10, intArray36, false);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (int) 'a', 100, (int) (byte) 1, intArray56, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, 10, (int) (short) 0, (int) (short) -1, intArray36, true);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, 0);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, 10);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 100);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 0);
        int int76 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, (int) (byte) 0);
        int int78 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, 100);
        int[] intArray80 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, 100);
        int int84 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray36, 2, (int) (short) 10, (int) (short) -1);
        int int86 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, (int) (byte) -1);
        int int90 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray36, 0, (int) (short) 0, 1);
        java.lang.Class<?> wildcardClass91 = intArray36.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2 + "'", int76 == 2);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 2 + "'", int78 == 2);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 2 + "'", int86 == 2);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 2 + "'", int90 == 2);
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test5314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5314");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 1);
        int[] intArray30 = new int[] { ' ', (byte) -1 };
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        int[] intArray44 = new int[] { (-1), 100 };
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray38, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray46, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray30, (-1), (int) ' ', (int) (byte) 10, intArray46, false);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        int[] intArray64 = new int[] { (-1), 100 };
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray58, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray66, false);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray46, (int) 'a', 100, (int) (byte) 1, intArray66, false);
        int int74 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray66, (int) '4');
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) (byte) 10, (int) '#', 0, intArray66, false);
        int[] intArray80 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) (short) 1);
        int int84 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray80, (int) '4', 100, (-1));
        int int86 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray80, (int) (short) 0);
        int int90 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray80, (int) 'a', (int) (byte) 10, (int) (short) 1);
        java.lang.Class<?> wildcardClass91 = intArray80.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2 + "'", int74 == 2);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 2 + "'", int86 == 2);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test5315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5315");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int int22 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (int) (byte) -1, 0, (int) (short) 0);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (-1));
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) (byte) 100);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (short) 10);
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) -1);
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (short) 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
    }

    @Test
    public void test5316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5316");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 1);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (short) 1);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) 'a');
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, 10);
        int int32 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray30, 100);
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray30, 4);
        int int36 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray34, 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
    }

    @Test
    public void test5317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5317");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { ' ', (byte) -1 };
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray36, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, (-1), (int) ' ', (int) (byte) 10, intArray36, false);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (int) 'a', 100, (int) (byte) 1, intArray56, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, 10, (int) (short) 0, (int) (short) -1, intArray36, true);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, 0);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, 10);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 100);
        int int72 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray70, (int) (byte) 0);
        int int74 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray70, 0);
        int int76 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray70, (int) '4');
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) (byte) 1);
        int[] intArray80 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) (short) 10);
        int int82 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray80, 3);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 2 + "'", int72 == 2);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2 + "'", int74 == 2);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2 + "'", int76 == 2);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 2 + "'", int82 == 2);
    }

    @Test
    public void test5318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5318");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray22 = new int[] { ' ', (byte) -1 };
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray22, (-1), (int) ' ', (int) (byte) 10, intArray38, false);
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray50, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray58, false);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray38, (int) 'a', 100, (int) (byte) 1, intArray58, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray12, (int) (short) 100, (int) 'a', (int) (short) 0, intArray38, true);
        int int68 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, (int) (byte) 0);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (short) -1);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, 0);
        int int74 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray70, (-1));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2 + "'", int68 == 2);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
    }

    @Test
    public void test5319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5319");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 1);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (short) 1);
        int int28 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) 'a');
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, 0);
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) ' ');
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (short) 1);
        int int36 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray34, (int) (byte) -1);
        int int40 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray34, 3, (int) '4', 1);
        int int42 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray34, 2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2 + "'", int42 == 2);
    }

    @Test
    public void test5320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5320");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int int6 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray2, (int) (byte) 100);
        int[] intArray12 = new int[] { (-1), 100 };
        int[] intArray14 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) (byte) 1);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int int20 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray16, (int) (short) 1, (-1), (int) (byte) 0);
        int int24 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray16, 10, (int) 'a', (int) (short) 10);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) '#');
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        int[] intArray40 = new int[] { (-1), 100 };
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray34, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray42, false);
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) ' ');
        int[] intArray52 = new int[] { (-1), 100 };
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) (byte) 1);
        int[] intArray60 = new int[] { (-1), 100 };
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray54, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray62, false);
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, (int) 'a');
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) ' ');
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) (byte) 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray46, (int) (byte) 1, (int) 'a', 0, intArray68, true);
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) (short) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray26, (int) 'a', (int) (byte) 1, (int) (byte) 0, intArray74, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (int) '4', 100, (int) (short) 10, intArray26, true);
        int[] intArray80 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1]");
    }

    @Test
    public void test5321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5321");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray19 = new int[] { '#' };
        int int21 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (short) -1, 1, 2, intArray19, true);
        int[] intArray25 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 10);
        int int29 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray25, 1, (int) (short) 1, (int) (byte) -1);
        int[] intArray31 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray25, (int) (short) 1);
        java.lang.Class<?> wildcardClass32 = intArray31.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test5322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5322");
        int[] intArray0 = null;
        int int4 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray0, 0, (int) (byte) 1, 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test5323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5323");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 100);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 1);
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) '4');
        int[] intArray36 = new int[] { ' ', (byte) -1 };
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        int[] intArray50 = new int[] { (-1), 100 };
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray44, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray52, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (-1), (int) ' ', (int) (byte) 10, intArray52, false);
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) (byte) 1, (int) (byte) 0, intArray52, true);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
    }

    @Test
    public void test5324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5324");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray2, (int) (short) -1);
        int[] intArray32 = new int[] { ' ', (byte) -1 };
        int[] intArray38 = new int[] { (-1), 100 };
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 1);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray40, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray48, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, (-1), (int) ' ', (int) (byte) 10, intArray48, false);
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, 100);
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 100);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray2, (int) (short) 10, 0, (int) (short) 0, intArray56, false);
        int[] intArray64 = new int[] { (-1), 100 };
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) (byte) 1);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) (short) 10);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, 10);
        int int72 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray70, (int) 'a');
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) (short) 100);
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) (byte) -1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray2, 0, 10, 1, intArray70, true);
        int int80 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray70, (int) (byte) 100);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 2 + "'", int72 == 2);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2 + "'", int80 == 2);
    }

    @Test
    public void test5325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5325");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, 10);
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (int) (short) 1);
        int int12 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray10, 10);
        int[] intArray18 = new int[] { ' ', (byte) -1 };
        int[] intArray24 = new int[] { (-1), 100 };
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 1);
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray26, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray34, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (-1), (int) ' ', (int) (byte) 10, intArray34, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray10, 0, (int) 'a', 4, intArray34, false);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, 2);
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray50, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray58, false);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) ' ');
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, (int) (byte) 0);
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) (byte) 1);
        int int70 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray64, (int) ' ', 10, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray34, 2, (int) (byte) 100, 4, intArray64, true);
        int int74 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray34, 10);
        int int78 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray34, (int) (byte) -1, (int) (byte) 100, (int) 'a');
        int int82 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray34, (int) (byte) 0, (int) (short) 100, (int) (byte) 10);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2 + "'", int74 == 2);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
    }

    @Test
    public void test5326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5326");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int int22 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (int) (byte) -1, 0, (int) (short) 0);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (-1));
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) (short) 1);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) '#');
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) '#');
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray30, (int) ' ');
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
    }

    @Test
    public void test5327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5327");
        int[] intArray1 = new int[] { 10 };
        int[] intArray3 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray1, (int) '4');
        int[] intArray8 = new int[] { '#' };
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) (short) 0);
        int int12 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) (byte) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray3, 10, (int) (byte) 1, (int) (short) 0, intArray8, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, 1);
        int int18 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) 'a');
        int int20 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, 2);
        int int22 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) (short) 0);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, 10);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, 4);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[10]");
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[35]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
    }

    @Test
    public void test5328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5328");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) ' ');
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (short) 100);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray2, 1);
        int int14 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray2, (-1), 1, 2);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 0);
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 10);
        int[] intArray24 = new int[] { (-1), 100 };
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 1);
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray26, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray34, false);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) 'a');
        int[] intArray44 = new int[] { ' ', (byte) -1 };
        int[] intArray50 = new int[] { (-1), 100 };
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) (byte) 1);
        int[] intArray58 = new int[] { (-1), 100 };
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray52, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray60, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray44, (-1), (int) ' ', (int) (byte) 10, intArray60, false);
        int[] intArray70 = new int[] { (-1), 100 };
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) (byte) 1);
        int[] intArray78 = new int[] { (-1), 100 };
        int[] intArray80 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray78, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray72, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray80, false);
        int[] intArray84 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray80, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray60, (int) 'a', 100, (int) (byte) 1, intArray80, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray34, (int) (short) 100, (int) 'a', (int) (short) 0, intArray60, true);
        int[] intArray90 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (-1));
        int int92 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray90, (int) '4');
        int[] intArray94 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray90, (int) (byte) 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray2, 0, (int) (byte) 100, (int) (byte) 1, intArray90, false);
        int int98 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray90, 0);
        java.lang.Class<?> wildcardClass99 = intArray90.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[1, 1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 2 + "'", int92 == 2);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 1 + "'", int98 == 1);
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test5329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5329");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int int22 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (int) (byte) -1, 0, (int) (short) 0);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (-1));
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '#');
        int int28 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray26, 0);
        int[] intArray34 = new int[] { ' ', (byte) -1 };
        int[] intArray40 = new int[] { (-1), 100 };
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) (byte) 1);
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray42, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray50, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray34, (-1), (int) ' ', (int) (byte) 10, intArray50, false);
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, 100);
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 100);
        int int62 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray58, (int) (short) 10, (-1), (int) (short) 1);
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, 100);
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) ' ');
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) (byte) 1);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) (byte) 1);
        int int74 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray70, (int) (short) 100, (int) ' ', 0);
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray26, 0, (int) (byte) 10, 4, intArray76, false);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2 + "'", int62 == 2);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
    }

    @Test
    public void test5330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5330");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 0);
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 1);
        int int24 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (int) ' ', 10, 0);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (short) 10);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) '4');
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, 3);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        int[] intArray44 = new int[] { (-1), 100 };
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray38, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray46, false);
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) 'a');
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) (short) 100);
        int int54 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray50, (int) (short) 100);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray28, 2, (int) (short) 1, 0, intArray50, false);
        java.lang.Class<?> wildcardClass57 = intArray28.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2 + "'", int54 == 2);
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test5331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5331");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 0);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 10);
        int int28 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray26, 0);
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (short) 100);
        int int34 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray30, (-1), (int) 'a', 0);
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray30, (int) '4');
        int int38 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, (int) ' ');
        int[] intArray44 = new int[] { (-1), 100 };
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) (byte) 1);
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (short) 10);
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) -1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray36, (int) (short) 100, (int) ' ', 0, intArray50, true);
        int int54 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray50, 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
    }

    @Test
    public void test5332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5332");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) 'a', 100, (int) (byte) 1, intArray38, false);
        int int46 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, (int) '4');
        int int50 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray38, (int) ' ', (int) (byte) 1, 0);
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, 100);
        int int54 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, 1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2 + "'", int54 == 2);
    }

    @Test
    public void test5333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5333");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, 10);
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (int) (short) 1);
        int int12 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray10, 10);
        int[] intArray18 = new int[] { ' ', (byte) -1 };
        int[] intArray24 = new int[] { (-1), 100 };
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 1);
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray26, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray34, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (-1), (int) ' ', (int) (byte) 10, intArray34, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray10, 0, (int) 'a', 4, intArray34, false);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, 2);
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, 0);
        int int46 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray42, 10);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
    }

    @Test
    public void test5334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5334");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray27 = new int[] { (short) 100, (short) 0, 100, (byte) -1, 10 };
        int int31 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray27, 1, (int) (byte) 100, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, 100, (int) '#', (int) (short) 10, intArray27, false);
        int int35 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, 0);
        int[] intArray41 = new int[] { ' ', (byte) -1 };
        int[] intArray47 = new int[] { (-1), 100 };
        int[] intArray49 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray47, (int) (byte) 1);
        int[] intArray55 = new int[] { (-1), 100 };
        int[] intArray57 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray55, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray49, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray57, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray41, (-1), (int) ' ', (int) (byte) 10, intArray57, false);
        int[] intArray63 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray57, 1);
        int int65 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray63, (int) (short) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, (int) (byte) 1, (-1), 0, intArray63, false);
        int[] intArray69 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray63, (int) (short) 1);
        int int71 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray63, (int) (byte) 0);
        int[] intArray73 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray63, (int) '#');
        int[] intArray75 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray63, (int) (byte) 100);
        int[] intArray77 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray75, (int) (short) 0);
        int int79 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray77, (int) (short) 1);
        java.lang.Class<?> wildcardClass80 = intArray77.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[100, 0, 100, -1, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2 + "'", int65 == 2);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2 + "'", int71 == 2);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 2 + "'", int79 == 2);
        org.junit.Assert.assertNotNull(wildcardClass80);
    }

    @Test
    public void test5335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5335");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray2, (int) (short) -1);
        int int28 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray2, 2);
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray2, 0);
        int int32 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray2, 4);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
    }

    @Test
    public void test5336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5336");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray19 = new int[] { '#' };
        int int21 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (short) -1, 1, 2, intArray19, true);
        int[] intArray25 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 10);
        int[] intArray27 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 0);
        int[] intArray29 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, (int) '#');
        int[] intArray31 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray29, (int) (byte) 100);
        int int35 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray29, 1, (int) (short) 100, 10);
        int[] intArray37 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray29, (int) 'a');
        int int39 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray29, (int) (byte) 100);
        int int41 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray29, (int) (short) 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[0, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2 + "'", int39 == 2);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2 + "'", int41 == 2);
    }

    @Test
    public void test5337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5337");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { (-1), 100 };
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 1);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray22, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray30, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) 10, (int) '4', 10, intArray30, true);
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, 2);
        int int40 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray4, (int) (short) 1, (int) (short) 100, (int) (byte) -1);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, 4);
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) 'a');
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, 100);
        int[] intArray52 = new int[] { (-1), 100 };
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) (byte) 1);
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) ' ');
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, 2);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray46, (int) (short) 10, (int) ' ', (int) (short) 10, intArray58, false);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
    }

    @Test
    public void test5338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5338");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray19 = new int[] { '#' };
        int int21 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (short) -1, 1, 2, intArray19, true);
        int[] intArray25 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 10);
        int[] intArray27 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 0);
        int[] intArray33 = new int[] { ' ', (byte) -1 };
        int[] intArray39 = new int[] { (-1), 100 };
        int[] intArray41 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray39, (int) (byte) 1);
        int[] intArray47 = new int[] { (-1), 100 };
        int[] intArray49 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray47, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray41, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray49, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray33, (-1), (int) ' ', (int) (byte) 10, intArray49, false);
        int[] intArray59 = new int[] { (-1), 100 };
        int[] intArray61 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray59, (int) (byte) 1);
        int[] intArray67 = new int[] { (-1), 100 };
        int[] intArray69 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray67, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray61, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray69, false);
        int[] intArray73 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray69, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray49, (int) 'a', 100, (int) (byte) 1, intArray69, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray27, (int) (short) 0, (int) (byte) 1, (int) (short) 1, intArray49, true);
        int int79 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray27, (int) (byte) -1);
        int[] intArray81 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray27, 1);
        int[] intArray83 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray81, (int) (short) -1);
        int[] intArray85 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray81, (int) (short) 100);
        int[] intArray87 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray85, (int) '4');
        java.lang.Class<?> wildcardClass88 = intArray87.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 2 + "'", int79 == 2);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test5339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5339");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray2, 2);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (short) 10);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
    }

    @Test
    public void test5340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5340");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 100);
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray26, (-1), 2, (int) (byte) -1);
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) '4');
        int int36 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray32, (int) (byte) 0, 4, (int) (short) 0);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 0);
        int int40 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray32, (int) (short) 100);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2 + "'", int40 == 2);
    }

    @Test
    public void test5341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5341");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { ' ', (byte) -1 };
        int[] intArray38 = new int[] { (-1), 100 };
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 1);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray40, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray48, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, (-1), (int) ' ', (int) (byte) 10, intArray48, false);
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, 100);
        int int56 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray32, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray24, 10, (int) 'a', (-1), intArray32, true);
        int int60 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) '#');
        int[] intArray66 = new int[] { (-1), 100 };
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) (byte) 1);
        int[] intArray74 = new int[] { (-1), 100 };
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray74, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray68, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray76, false);
        int[] intArray80 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray76, (int) ' ');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray24, (int) (byte) 100, 100, 0, intArray80, false);
        int int86 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray24, (int) ' ', (int) (byte) 1, (int) (short) -1);
        int[] intArray88 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (short) 10);
        int int90 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            int int94 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray24, (int) (byte) -1, 2, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2 + "'", int60 == 2);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 2 + "'", int90 == 2);
    }

    @Test
    public void test5342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5342");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray24, 0, (int) (byte) 100, 0);
        int int32 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) '#');
        int[] intArray36 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray24, (int) (byte) 1, (int) (short) 100, (int) (byte) 1, intArray36, false);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
    }

    @Test
    public void test5343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5343");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 0);
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 1);
        int int24 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (int) ' ', 10, 0);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (short) 10);
        int int28 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, 100);
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) 'a');
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) ' ');
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (short) 100);
        int int44 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, 1);
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, 1);
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) '4');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) (short) 100, 1, 1, intArray46, true);
        int int52 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray46, (int) (byte) 10);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[1, 1]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
    }

    @Test
    public void test5344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5344");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray27 = new int[] { (short) 100, (short) 0, 100, (byte) -1, 10 };
        int int31 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray27, 1, (int) (byte) 100, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, 100, (int) '#', (int) (short) 10, intArray27, false);
        int int35 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray27, 10);
        int[] intArray37 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray27, (int) (byte) 1);
        int[] intArray43 = new int[] { (-1), 100 };
        int[] intArray45 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray43, (int) (byte) 1);
        int[] intArray47 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray45, (int) (short) 10);
        int int49 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray45, 2);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray27, (int) '4', (int) (byte) 1, 0, intArray45, false);
        int[] intArray53 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray45, (int) (short) 10);
        int int55 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray45, (int) (short) 0);
        int[] intArray57 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray45, (int) (short) 100);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[100, 0, 100, -1, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2 + "'", int49 == 2);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 2 + "'", int55 == 2);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1]");
    }

    @Test
    public void test5345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5345");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 0);
        int[] intArray24 = new int[] { (-1), 100 };
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 1);
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray26, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray34, false);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) 'a');
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) ' ');
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (-1));
        int int44 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray42, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) ' ', (int) 'a', 1, intArray42, false);
        int[] intArray52 = new int[] { (-1), 100 };
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) (byte) 1);
        int[] intArray60 = new int[] { (-1), 100 };
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray54, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray62, false);
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, (int) ' ');
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, (int) '4');
        int int72 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray68, 0, 10, (-1));
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray42, (int) (byte) 1, (int) (byte) 0, (-1), intArray68, false);
        int int78 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray42, 2, (int) ' ', 4);
        int[] intArray80 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) '4');
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1]");
    }

    @Test
    public void test5346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5346");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 0);
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 1);
        int int24 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (int) ' ', 10, 0);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (short) 10);
        int[] intArray32 = new int[] { ' ', (byte) -1 };
        int[] intArray38 = new int[] { (-1), 100 };
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 1);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray40, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray48, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, (-1), (int) ' ', (int) (byte) 10, intArray48, false);
        int[] intArray58 = new int[] { (-1), 100 };
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) (byte) 1);
        int[] intArray66 = new int[] { (-1), 100 };
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray60, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray68, false);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray48, (int) 'a', 100, (int) (byte) 1, intArray68, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, (int) (byte) -1, (int) (byte) 100, (int) (short) 10, intArray68, false);
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) (byte) -1);
        int int80 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray68, (int) 'a');
        int int84 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray68, 2, (-1), 0);
        int int88 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray68, 0, (int) (short) 10, 4);
        // The following exception was thrown during execution in test generation
        try {
            int int92 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray68, 100, 1, 2);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2 + "'", int80 == 2);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
    }

    @Test
    public void test5347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5347");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 1, (int) (byte) 1, (int) (short) -1, intArray32, false);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 10);
        int int40 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, (int) 'a');
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 100);
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, 100);
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, 1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2 + "'", int40 == 2);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
    }

    @Test
    public void test5348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5348");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { (-1), 100 };
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 1);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray22, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray30, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) 10, (int) '4', 10, intArray30, true);
        int[] intArray40 = new int[] { ' ', (byte) -1 };
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray40, (-1), (int) ' ', (int) (byte) 10, intArray56, false);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, 0);
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, (int) ' ');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, 2, (int) 'a', 4, intArray62, true);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, (int) 'a');
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, 0);
        java.lang.Class<?> wildcardClass71 = intArray68.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test5349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5349");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 0);
        int int22 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, 0, 1, (-1));
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (int) (byte) 10, (int) (short) 1, 0);
        int int28 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, 0);
        // The following exception was thrown during execution in test generation
        try {
            int int32 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (int) 'a', 0, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
    }

    @Test
    public void test5350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5350");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 1, (int) (byte) 1, (int) (short) -1, intArray32, false);
        int int40 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray32, 0, (int) (short) 100, (int) '4');
        int int44 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray32, (int) (short) 100, (int) 'a', (int) (byte) 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
    }

    @Test
    public void test5351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5351");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray22 = new int[] { ' ', (byte) -1 };
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray22, (-1), (int) ' ', (int) (byte) 10, intArray38, false);
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray50, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray58, false);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray38, (int) 'a', 100, (int) (byte) 1, intArray58, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray12, (int) (short) 100, (int) 'a', (int) (short) 0, intArray38, true);
        int int68 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, (int) (byte) 0);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (short) -1);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, 0);
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) 'a');
        int int76 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray70, (int) (short) 1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2 + "'", int68 == 2);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[0, 0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2 + "'", int76 == 2);
    }

    @Test
    public void test5352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5352");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { (-1), 100 };
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 1);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray22, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray30, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) 10, (int) '4', 10, intArray30, true);
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, 2);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) 'a');
        int[] intArray44 = new int[] { (-1), 100 };
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) (byte) 1);
        int[] intArray52 = new int[] { (-1), 100 };
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray46, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray54, false);
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) ' ');
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) (byte) 0);
        int int64 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray60, 0, 1, (-1));
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray60, (int) '4');
        int int68 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray60, (int) (short) 100);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (int) (byte) 0, (int) (short) 100, (int) (short) 0, intArray60, false);
        int int74 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray60, 3, 1, (int) (short) 1);
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) (byte) -1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2 + "'", int68 == 2);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2 + "'", int74 == 2);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[0, 1]");
    }

    @Test
    public void test5353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5353");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { (-1), 100 };
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 1);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray22, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray30, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) 10, (int) '4', 10, intArray30, true);
        int int36 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray4, 0);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (byte) 100);
        int int42 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray38, (int) (byte) 0, 100, (int) (short) 1);
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (short) -1);
        int[] intArray50 = new int[] { ' ', (byte) -1 };
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        int[] intArray64 = new int[] { (-1), 100 };
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray58, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray66, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray50, (-1), (int) ' ', (int) (byte) 10, intArray66, false);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, 100);
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) (byte) 100);
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, 1);
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) '4');
        int[] intArray80 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray78, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray44, (int) (short) 10, (int) '4', 1, intArray78, false);
        int int86 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray44, (int) (byte) 0, 1, (int) (short) -1);
        int[] intArray88 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, 3);
        int[] intArray90 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) (byte) 0);
        int[] intArray92 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray90, 1);
        int int94 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray92, (int) (byte) 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[0, 0]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 2 + "'", int94 == 2);
    }

    @Test
    public void test5354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5354");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 10);
        int[] intArray24 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) (byte) 0, (int) (short) 100, (int) (byte) -1, intArray24, false);
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, 1, (int) (byte) -1, (int) (short) 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
    }

    @Test
    public void test5355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5355");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) ' ');
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 10);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray2, (int) 'a');
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        int[] intArray24 = new int[] { (-1), 100 };
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray26, false);
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) 'a');
        int[] intArray36 = new int[] { ' ', (byte) -1 };
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        int[] intArray50 = new int[] { (-1), 100 };
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray44, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray52, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (-1), (int) ' ', (int) (byte) 10, intArray52, false);
        int[] intArray62 = new int[] { (-1), 100 };
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, (int) (byte) 1);
        int[] intArray70 = new int[] { (-1), 100 };
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray64, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray72, false);
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray52, (int) 'a', 100, (int) (byte) 1, intArray72, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray26, (int) (short) 100, (int) 'a', (int) (short) 0, intArray52, true);
        int[] intArray82 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (-1));
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray2, 4, (int) (byte) -1, 0, intArray26, true);
        int[] intArray86 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, 4);
        int int88 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray86, (-1));
        int[] intArray90 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray86, 2);
        int[] intArray92 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray90, (int) ' ');
        java.lang.Class<?> wildcardClass93 = intArray92.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 2 + "'", int88 == 2);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test5356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5356");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray22 = new int[] { ' ', (byte) -1 };
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray22, (-1), (int) ' ', (int) (byte) 10, intArray38, false);
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray50, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray58, false);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray38, (int) 'a', 100, (int) (byte) 1, intArray58, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray12, (int) (short) 100, (int) 'a', (int) (short) 0, intArray38, true);
        int int68 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, 2);
        int int72 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray38, (int) (byte) 0, (int) (byte) 1, (-1));
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (short) 1);
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray74, (int) (byte) 10);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2 + "'", int68 == 2);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
    }

    @Test
    public void test5357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5357");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 10);
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray36, false);
        int[] intArray43 = new int[] { '#' };
        int int45 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray43, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (short) -1, 1, 2, intArray43, true);
        int[] intArray49 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray43, 10);
        int[] intArray51 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray43, 100);
        int int53 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray51, (int) (short) 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, (int) (byte) 1, (int) (short) 10, (int) (byte) 1, intArray51, false);
        int int59 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray20, (int) (byte) 1, (int) (short) 100, (int) '#');
        int int61 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray20, (int) (short) -1);
        int[] intArray67 = new int[] { (-1), 100 };
        int[] intArray69 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray67, (int) (byte) 1);
        int[] intArray71 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray67, (int) ' ');
        int[] intArray73 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray67, (int) (short) 100);
        int int75 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray73, 100);
        int[] intArray77 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray73, (int) '#');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray20, (int) 'a', (int) 'a', (int) (byte) 0, intArray77, true);
        int int83 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray20, 0, (int) (byte) 0, 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[35]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2 + "'", int53 == 2);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2 + "'", int61 == 2);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[1, 1]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 2 + "'", int75 == 2);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
    }

    @Test
    public void test5358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5358");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) '4');
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 2);
        int int24 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (int) '#', (int) (short) -1, 1);
        int[] intArray30 = new int[] { (-1), 100 };
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray30, (int) (byte) 1);
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray30, (int) ' ');
        int int38 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray34, (int) (short) 1, (-1), (int) (byte) 0);
        int[] intArray42 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray34, 2, (int) '4', (int) (short) 0, intArray42, true);
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) (short) 1, (int) 'a', (int) (short) -1, intArray34, true);
        int int52 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (int) (short) 0, (int) '#', (int) (byte) 1);
        int[] intArray58 = new int[] { ' ', (byte) -1 };
        int[] intArray64 = new int[] { (-1), 100 };
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) (byte) 1);
        int[] intArray72 = new int[] { (-1), 100 };
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray66, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray74, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray58, (-1), (int) ' ', (int) (byte) 10, intArray74, false);
        int[] intArray80 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray74, 1);
        int int82 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray80, (int) (short) 1);
        int int84 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray80, (int) 'a');
        int int86 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray80, 0);
        int[] intArray88 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray80, (int) ' ');
        int[] intArray90 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray80, (int) (short) 1);
        int int92 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray90, (int) (byte) -1);
        int[] intArray94 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray90, (int) (byte) 1);
        int[] intArray96 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray90, 3);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, (int) (short) 0, (int) (short) -1, (int) (byte) 100, intArray96, true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 2 + "'", int82 == 2);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 2 + "'", int84 == 2);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 2 + "'", int86 == 2);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 2 + "'", int92 == 2);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[-1, -1]");
    }

    @Test
    public void test5359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5359");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 0);
        int int22 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, 0, 1, (-1));
        int int24 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) '4');
        int int28 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (int) (byte) -1, (int) (short) 100, (int) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            int int32 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, 2, 2, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
    }

    @Test
    public void test5360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5360");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) '4');
        int int20 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) (byte) -1);
        int int24 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (int) '#', (-1), (int) (byte) 0);
        int[] intArray32 = new int[] { (byte) -1, 2, (short) 1, '#' };
        int int34 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray32, (int) '4');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, (-1), 4, 2, intArray32, true);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 100);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 4);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 2, 1, 35]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 4 + "'", int34 == 4);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
    }

    @Test
    public void test5361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5361");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 100);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 1);
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) '4');
        int int32 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray2, 4);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
    }

    @Test
    public void test5362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5362");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int int8 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, 0);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, 4);
        int[] intArray16 = new int[] { ' ', (byte) -1 };
        int[] intArray22 = new int[] { (-1), 100 };
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, (int) (byte) 1);
        int[] intArray30 = new int[] { (-1), 100 };
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray30, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray24, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray32, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray16, (-1), (int) ' ', (int) (byte) 10, intArray32, false);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, 100);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 100);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, 1);
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) '4');
        int[] intArray50 = new int[] { ' ', (byte) -1 };
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        int[] intArray64 = new int[] { (-1), 100 };
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray58, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray66, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray50, (-1), (int) ' ', (int) (byte) 10, intArray66, false);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray16, (-1), (int) (byte) 1, (int) (byte) 0, intArray66, true);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray6, (int) '#', (int) (short) -1, 0, intArray16, false);
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 100);
        int int80 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray16, (int) '4');
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2 + "'", int80 == 2);
    }

    @Test
    public void test5363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5363");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) '#');
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, 4);
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, 100);
        int[] intArray14 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) (byte) 10);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray14, (int) (short) 10);
        int[] intArray25 = new int[] { (short) 100, (short) 0, 100, (byte) -1, 10 };
        int int29 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray25, 1, (int) (byte) 100, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray14, (int) (byte) 1, (int) ' ', 3, intArray25, false);
        int[] intArray37 = new int[] { (-1), 100 };
        int[] intArray39 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray37, (int) (byte) 1);
        int[] intArray45 = new int[] { (-1), 100 };
        int[] intArray47 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray45, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray39, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray47, false);
        int[] intArray51 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray47, (int) ' ');
        int[] intArray53 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray51, (int) (byte) 0);
        int[] intArray55 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray53, (int) (byte) 1);
        int int59 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray53, (int) ' ', 10, 0);
        int[] intArray61 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray53, (int) (short) 10);
        int int63 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray53, 100);
        int int65 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray53, (int) 'a');
        int[] intArray71 = new int[] { (-1), 100 };
        int[] intArray73 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray71, (int) (byte) 1);
        int[] intArray75 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray71, (int) ' ');
        int[] intArray77 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray71, (int) (short) 100);
        int int79 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray71, 1);
        int[] intArray81 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray71, 1);
        int[] intArray83 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray81, (int) '4');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray53, (int) (short) 100, 1, 1, intArray81, true);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray14, (int) (byte) 100, (int) (byte) 100, 100, intArray81, true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[100, 0, 100, -1, 10]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 2 + "'", int63 == 2);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2 + "'", int65 == 2);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[1, 1]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, -1]");
    }

    @Test
    public void test5364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5364");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 1, (int) (byte) 1, (int) (short) -1, intArray32, false);
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        int[] intArray50 = new int[] { (-1), 100 };
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray44, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray52, false);
        int[] intArray59 = new int[] { '#' };
        int int61 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray59, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray44, (int) (short) -1, 1, 2, intArray59, true);
        int[] intArray65 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray59, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, (int) (short) 100, 0, 1, intArray65, false);
        int int71 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray32, 100, (int) '#', (int) (byte) 1);
        int[] intArray73 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 10);
        int int75 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray32, (int) '4');
        int int77 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray32, (int) (byte) -1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[35]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 1]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
    }

    @Test
    public void test5365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5365");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray19 = new int[] { '#' };
        int int21 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (short) -1, 1, 2, intArray19, true);
        int[] intArray25 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 10);
        int[] intArray27 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 0);
        int[] intArray33 = new int[] { ' ', (byte) -1 };
        int[] intArray39 = new int[] { (-1), 100 };
        int[] intArray41 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray39, (int) (byte) 1);
        int[] intArray47 = new int[] { (-1), 100 };
        int[] intArray49 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray47, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray41, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray49, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray33, (-1), (int) ' ', (int) (byte) 10, intArray49, false);
        int[] intArray59 = new int[] { (-1), 100 };
        int[] intArray61 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray59, (int) (byte) 1);
        int[] intArray67 = new int[] { (-1), 100 };
        int[] intArray69 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray67, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray61, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray69, false);
        int[] intArray73 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray69, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray49, (int) 'a', 100, (int) (byte) 1, intArray69, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray27, (int) (short) 0, (int) (byte) 1, (int) (short) 1, intArray49, true);
        int int79 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray27, (int) (short) -1);
        int int83 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray27, (int) (byte) 10, (int) '4', (int) (short) 10);
        int[] intArray85 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray27, (int) 'a');
        int int87 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray27, (int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            int int91 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray27, 0, (int) '4', (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 2 + "'", int79 == 2);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 2 + "'", int87 == 2);
    }

    @Test
    public void test5366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5366");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) ' ');
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray6, (int) (short) 1, (-1), (int) (byte) 0);
        int[] intArray14 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray6, 2, (int) '4', (int) (short) 0, intArray14, true);
        int int20 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray6, (int) (short) -1, (int) ' ', (int) (byte) 1);
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (int) '#');
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, (int) (byte) 100);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray22, 2);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, (-1));
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray28, (int) ' ');
        int int34 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray28, (int) (short) 0, (int) (byte) -1, 2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
    }

    @Test
    public void test5367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5367");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray19 = new int[] { '#' };
        int int21 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (short) -1, 1, 2, intArray19, true);
        int[] intArray25 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 10);
        int[] intArray27 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 0);
        int[] intArray33 = new int[] { ' ', (byte) -1 };
        int[] intArray39 = new int[] { (-1), 100 };
        int[] intArray41 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray39, (int) (byte) 1);
        int[] intArray47 = new int[] { (-1), 100 };
        int[] intArray49 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray47, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray41, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray49, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray33, (-1), (int) ' ', (int) (byte) 10, intArray49, false);
        int[] intArray59 = new int[] { (-1), 100 };
        int[] intArray61 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray59, (int) (byte) 1);
        int[] intArray67 = new int[] { (-1), 100 };
        int[] intArray69 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray67, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray61, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray69, false);
        int[] intArray73 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray69, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray49, (int) 'a', 100, (int) (byte) 1, intArray69, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray27, (int) (short) 0, (int) (byte) 1, (int) (short) 1, intArray49, true);
        int[] intArray79 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray27, (int) 'a');
        int int81 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray27, 1);
        java.lang.Class<?> wildcardClass82 = intArray27.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 2 + "'", int81 == 2);
        org.junit.Assert.assertNotNull(wildcardClass82);
    }

    @Test
    public void test5368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5368");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray27 = new int[] { (short) 100, (short) 0, 100, (byte) -1, 10 };
        int int31 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray27, 1, (int) (byte) 100, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, 100, (int) '#', (int) (short) 10, intArray27, false);
        int int35 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, 0);
        int[] intArray41 = new int[] { (-1), 100 };
        int[] intArray43 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray41, (int) (byte) 1);
        int[] intArray49 = new int[] { (-1), 100 };
        int[] intArray51 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray49, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray43, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray51, false);
        int[] intArray55 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray51, (int) ' ');
        int[] intArray57 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray55, (int) (byte) 0);
        int[] intArray59 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray57, (int) (byte) 1);
        int int63 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray57, (int) ' ', 10, 0);
        int[] intArray65 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray57, (int) (short) 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, 0, (int) (short) 100, (int) '#', intArray65, false);
        int[] intArray69 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) '4');
        int[] intArray73 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, (int) (byte) 0, (int) (byte) 100, (int) '4', intArray73, true);
        int int79 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (int) (byte) 0, (int) (short) 0, (int) (short) -1);
        int int81 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) (short) 100);
        int int83 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) (short) 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[100, 0, 100, -1, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 2 + "'", int81 == 2);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 2 + "'", int83 == 2);
    }

    @Test
    public void test5369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5369");
        int[] intArray0 = null;
        int[] intArray4 = null;
        int[] intArray10 = new int[] { ' ', (byte) -1 };
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        int[] intArray24 = new int[] { (-1), 100 };
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray26, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray10, (-1), (int) ' ', (int) (byte) 10, intArray26, false);
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, 100);
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) '4');
        int[] intArray40 = new int[] { ' ', (byte) -1 };
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray40, (-1), (int) ' ', (int) (byte) 10, intArray56, false);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, 100);
        int int64 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray40, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, 10, (int) 'a', (-1), intArray40, true);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, (int) ' ', (int) (byte) 1, (int) (short) -1, intArray40, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray0, (int) (short) 0, (int) (short) 1, (int) (short) -1, intArray40, true);
        int int74 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray40, 10, (int) (short) 100, 1);
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) (byte) 10);
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray76, (int) (short) -1);
        int int80 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray76, 1);
        int int82 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray76, (int) (byte) -1);
        int[] intArray84 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray76, (int) (short) 1);
        int[] intArray86 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray84, (int) (byte) 1);
        int[] intArray88 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray86, 0);
        int int92 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray88, (int) (byte) 0, 4, (-1));
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2 + "'", int80 == 2);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 2 + "'", int82 == 2);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
    }

    @Test
    public void test5370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5370");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int int22 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (int) (byte) -1, 0, (int) (short) 0);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (-1));
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) (byte) 100);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) '4');
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (short) 10);
        int[] intArray36 = new int[] { ' ', (byte) -1 };
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        int[] intArray50 = new int[] { (-1), 100 };
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray44, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray52, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (-1), (int) ' ', (int) (byte) 10, intArray52, false);
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, 0);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) ' ');
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) (byte) 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, 0, (int) '#', 0, intArray60, false);
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) (short) 10);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, 0);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) (byte) 1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
    }

    @Test
    public void test5371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5371");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 1);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (short) 1);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) 'a');
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, 10);
        int int34 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray28, (int) (short) 100, (int) (short) 0, 0);
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, 0);
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) ' ');
        int int50 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray46, (int) (short) 1, (-1), (int) (byte) 0);
        int[] intArray54 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray46, 2, (int) '4', (int) (short) 0, intArray54, true);
        int int60 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray46, (int) (short) -1, (int) ' ', (int) (byte) 1);
        int int62 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray46, (int) (short) 10);
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (short) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray36, 2, (int) ' ', (int) (byte) 0, intArray46, true);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (short) 1);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) (short) 1);
        int int74 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray70, (-1), (int) (byte) 100, 0);
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) (byte) 0);
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray76, 1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2 + "'", int62 == 2);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1]");
    }

    @Test
    public void test5372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5372");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) ' ');
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (short) 100);
        int[] intArray14 = new int[] { (-1), 100 };
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray14, (int) (byte) 1);
        int[] intArray22 = new int[] { (-1), 100 };
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray16, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray24, false);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) ' ');
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 0);
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) '#');
        int[] intArray38 = new int[] { (-1), 100 };
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 1);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray40, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray48, false);
        int[] intArray55 = new int[] { '#' };
        int int57 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray55, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray40, (int) (short) -1, 1, 2, intArray55, true);
        int[] intArray61 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray55, 10);
        int[] intArray63 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray55, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray28, (int) (byte) 0, (int) (short) 10, (int) (byte) 1, intArray63, false);
        int[] intArray67 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray8, (int) '4', (int) (byte) 1, (int) (short) 0, intArray67, false);
        int int73 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray8, 0, (int) '4', (int) (byte) 0);
        int[] intArray75 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, 1);
        int int77 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) '#');
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[1, 1]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[35]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 2 + "'", int77 == 2);
    }

    @Test
    public void test5373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5373");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) 'a', 100, (int) (byte) 1, intArray38, false);
        int[] intArray50 = new int[] { ' ', (byte) -1 };
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        int[] intArray64 = new int[] { (-1), 100 };
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray58, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray66, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray50, (-1), (int) ' ', (int) (byte) 10, intArray66, false);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, 0);
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (int) ' ');
        int int78 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray74, 0, 2, (int) (short) -1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray38, (int) (byte) 10, (int) ' ', (int) (short) -1, intArray74, false);
        int int82 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, (int) (byte) 0);
        int[] intArray84 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 100);
        int[] intArray86 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (-1));
        int int88 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray86, (int) (short) 100);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 2 + "'", int82 == 2);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 2 + "'", int88 == 2);
    }

    @Test
    public void test5374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5374");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (byte) 0);
        int int8 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray4, 0);
        int[] intArray14 = new int[] { (-1), 100 };
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray14, (int) (byte) 1);
        int[] intArray22 = new int[] { (-1), 100 };
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray16, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray24, false);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) 'a');
        int[] intArray34 = new int[] { ' ', (byte) -1 };
        int[] intArray40 = new int[] { (-1), 100 };
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) (byte) 1);
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray42, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray50, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray34, (-1), (int) ' ', (int) (byte) 10, intArray50, false);
        int[] intArray60 = new int[] { (-1), 100 };
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) (byte) 1);
        int[] intArray68 = new int[] { (-1), 100 };
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray62, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray70, false);
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray50, (int) 'a', 100, (int) (byte) 1, intArray70, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray24, (int) (short) 100, (int) 'a', (int) (short) 0, intArray50, true);
        int int80 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray50, (int) (byte) 0);
        int[] intArray82 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) (short) -1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, (int) ' ', (int) (byte) 10, (-1), intArray82, true);
        int int86 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray82, 0);
        int[] intArray88 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray82, (int) (short) 0);
        int[] intArray90 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray82, (int) (short) 100);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2 + "'", int80 == 2);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 1 + "'", int86 == 1);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[0, 0]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1]");
    }

    @Test
    public void test5375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5375");
        int[] intArray0 = null;
        int[] intArray4 = null;
        int[] intArray10 = new int[] { ' ', (byte) -1 };
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        int[] intArray24 = new int[] { (-1), 100 };
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray26, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray10, (-1), (int) ' ', (int) (byte) 10, intArray26, false);
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, 100);
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) '4');
        int[] intArray40 = new int[] { ' ', (byte) -1 };
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray40, (-1), (int) ' ', (int) (byte) 10, intArray56, false);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, 100);
        int int64 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray40, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, 10, (int) 'a', (-1), intArray40, true);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, (int) ' ', (int) (byte) 1, (int) (short) -1, intArray40, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray0, (int) (short) 0, (int) (short) 1, (int) (short) -1, intArray40, true);
        int int74 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray40, 10, (int) (short) 100, 1);
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) '4');
        int int80 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray76, 2, (int) (byte) 100, (int) (short) 0);
        java.lang.Class<?> wildcardClass81 = intArray76.getClass();
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test5376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5376");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int int18 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray4, (int) ' ', (int) (short) -1, (int) (short) 1);
        int int20 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray4, (int) '#');
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, 10);
        int int24 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray4, 2);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (byte) 10);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (short) -1);
        int[] intArray34 = new int[] { ' ', (byte) -1 };
        int[] intArray40 = new int[] { (-1), 100 };
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) (byte) 1);
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray42, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray50, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray34, (-1), (int) ' ', (int) (byte) 10, intArray50, false);
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, 100);
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) '4');
        int[] intArray64 = new int[] { (-1), 100 };
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray58, 1, (int) (byte) 1, (int) (short) -1, intArray64, false);
        int int72 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray64, 0, (int) (short) 100, (int) '4');
        int int74 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray64, 2);
        int[] intArray79 = new int[] { 10 };
        int[] intArray81 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray79, (int) '4');
        int[] intArray86 = new int[] { '#' };
        int int88 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray86, (int) (short) 0);
        int int90 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray86, (int) (byte) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray81, 10, (int) (byte) 1, (int) (short) 0, intArray86, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray64, 0, 10, 1, intArray81, true);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, (int) '4', (int) '4', (int) '4', intArray81, true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 52 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[10]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[35]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
    }

    @Test
    public void test5377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5377");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { ' ', (byte) -1 };
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray36, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, (-1), (int) ' ', (int) (byte) 10, intArray36, false);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, 100);
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 100);
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray12, (int) '#', (int) (short) 10, 0, intArray20, false);
        int int50 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray12, (int) (short) 10);
        int int54 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray12, (int) ' ', (int) 'a', (int) (byte) 10);
        java.lang.Class<?> wildcardClass55 = intArray12.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test5378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5378");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) ' ');
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (short) 100);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray2, 1);
        int int14 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray2, (-1), 1, 2);
        int[] intArray20 = new int[] { (-1), 100 };
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 1);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray22, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray30, false);
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray30, (int) ' ');
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 0);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) '#');
        int[] intArray44 = new int[] { (-1), 100 };
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) (byte) 1);
        int[] intArray52 = new int[] { (-1), 100 };
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray46, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray54, false);
        int[] intArray61 = new int[] { '#' };
        int int63 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray61, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray46, (int) (short) -1, 1, 2, intArray61, true);
        int[] intArray67 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray61, 10);
        int[] intArray69 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray61, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray34, (int) (byte) 0, (int) (short) 10, (int) (byte) 1, intArray69, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (int) (byte) 10, (int) '#', (int) (short) 10, intArray34, true);
        int[] intArray75 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, 10);
        int[] intArray77 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        int[] intArray81 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray34, (int) (byte) 10, 10, 4, intArray81, false);
        int int87 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray34, (int) (short) 10, (int) (byte) 1, 1);
        // The following exception was thrown during execution in test generation
        try {
            int int91 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray34, 0, 0, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[1, 1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[35]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 2 + "'", int87 == 2);
    }

    @Test
    public void test5379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5379");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) ' ');
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (short) 100);
        int[] intArray14 = new int[] { ' ', (byte) -1 };
        int[] intArray20 = new int[] { (-1), 100 };
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 1);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray22, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray30, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray14, (-1), (int) ' ', (int) (byte) 10, intArray30, false);
        int[] intArray40 = new int[] { (-1), 100 };
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) (byte) 1);
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray42, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray50, false);
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray30, (int) 'a', 100, (int) (byte) 1, intArray50, false);
        int int58 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray50, (int) '4');
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) 'a');
        int[] intArray66 = new int[] { ' ', (byte) -1 };
        int[] intArray72 = new int[] { (-1), 100 };
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (int) (byte) 1);
        int[] intArray80 = new int[] { (-1), 100 };
        int[] intArray82 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray80, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray74, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray82, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray66, (-1), (int) ' ', (int) (byte) 10, intArray82, false);
        int[] intArray88 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, 100);
        int[] intArray90 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray88, (int) '4');
        int int92 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray90, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray60, (int) (short) 1, (int) ' ', 2, intArray90, false);
        int[] intArray96 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray90, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray8, (int) (short) 100, (int) (short) 0, (-1), intArray90, false);
        java.lang.Class<?> wildcardClass99 = intArray8.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[1, 1]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2 + "'", int58 == 2);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 2 + "'", int92 == 2);
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test5380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5380");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) ' ');
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (short) 100);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, 100);
        int int12 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, 0);
        int int14 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) 'a');
        int int18 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray8, (int) (byte) 10, 10, 4);
        int[] intArray24 = new int[] { (-1), 100 };
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 1);
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray26, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray34, false);
        int[] intArray42 = new int[] { ' ', (byte) -1 };
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray50, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray58, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray42, (-1), (int) ' ', (int) (byte) 10, intArray58, false);
        int[] intArray68 = new int[] { (-1), 100 };
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) (byte) 1);
        int[] intArray76 = new int[] { (-1), 100 };
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray76, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray70, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray78, false);
        int[] intArray82 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray78, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray58, (int) 'a', 100, (int) (byte) 1, intArray78, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 10, (int) (short) 0, (int) (short) -1, intArray58, true);
        int int88 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray58, 0);
        int[] intArray90 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, 10);
        int[] intArray92 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) (byte) 100);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray8, 0, 100, 4, intArray58, false);
        int int96 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) ' ');
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[1, 1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 2 + "'", int88 == 2);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 2 + "'", int96 == 2);
    }

    @Test
    public void test5381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5381");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int int22 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (int) (byte) -1, 0, (int) (short) 0);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (-1));
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) (short) 1);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 3);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) ' ');
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (short) 100);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (short) 10);
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray50, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray58, false);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) 'a');
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, (int) ' ');
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) (byte) 10);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) (byte) 1);
        int int70 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray66, (-1));
        int int74 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray66, 10, (int) (short) 10, 4);
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) ' ');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray34, (int) (byte) 0, (int) (short) 1, (-1), intArray66, true);
        int int80 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray66, (int) (byte) 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, (int) (short) -1, (int) (short) 10, (int) (byte) 0, intArray66, true);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[1, 1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2 + "'", int70 == 2);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2 + "'", int80 == 2);
    }

    @Test
    public void test5382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5382");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 0);
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) '#');
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, 0);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, (int) (byte) 10);
        java.lang.Class<?> wildcardClass25 = intArray24.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test5383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5383");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int int18 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray16, (int) ' ');
        int[] intArray24 = new int[] { (-1), 100 };
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 1);
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray26, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray34, false);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) 'a');
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) ' ');
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (-1));
        int int46 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray38, (int) (short) 0, (int) (byte) 0, 1);
        int int48 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, (int) (byte) 10);
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) '4');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray16, (int) 'a', (int) ' ', 1, intArray50, false);
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) (byte) -1);
        java.lang.Class<?> wildcardClass55 = intArray50.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[0, 1]");
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test5384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5384");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) ' ');
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (short) 100);
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (short) 10);
        int int12 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray10, (int) 'a');
        int[] intArray18 = new int[] { ' ', (byte) -1 };
        int[] intArray24 = new int[] { (-1), 100 };
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 1);
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray26, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray34, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (-1), (int) ' ', (int) (byte) 10, intArray34, false);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 100);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 100);
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 1);
        int int46 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, 0);
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) '4');
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (short) 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray10, (-1), (int) 'a', (-1), intArray48, false);
        int int56 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray48, (int) (byte) 100, 2, (int) (byte) 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[1, 1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
    }

    @Test
    public void test5385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5385");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 1, (int) (byte) 1, (int) (short) -1, intArray32, false);
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        int[] intArray50 = new int[] { (-1), 100 };
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray44, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray52, false);
        int[] intArray59 = new int[] { '#' };
        int int61 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray59, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray44, (int) (short) -1, 1, 2, intArray59, true);
        int[] intArray65 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray59, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, (int) (short) 100, 0, 1, intArray65, false);
        int[] intArray69 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 100);
        int int71 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray69, 10);
        int int73 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray69, (int) (byte) 100);
        int[] intArray75 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray69, (int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            int int79 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray69, (int) (short) 10, 3, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[35]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[1, 1]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2 + "'", int71 == 2);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 2 + "'", int73 == 2);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1]");
    }

    @Test
    public void test5386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5386");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray22 = new int[] { (-1), 100 };
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, (int) (byte) 1);
        int[] intArray30 = new int[] { (-1), 100 };
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray30, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray24, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray32, false);
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) 'a');
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) ' ');
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray16, (int) (byte) 1, (int) 'a', 0, intArray38, true);
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (short) 10);
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, 0);
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 10);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
    }

    @Test
    public void test5387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5387");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, 0);
        int int20 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) '#');
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (short) -1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[0, 1]");
    }

    @Test
    public void test5388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5388");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 0);
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            int int24 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray20, (int) (byte) 0, (int) '#', (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
    }

    @Test
    public void test5389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5389");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 100);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 1);
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) '4');
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        int[] intArray44 = new int[] { (-1), 100 };
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray38, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray46, false);
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) ' ');
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        int[] intArray64 = new int[] { (-1), 100 };
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray58, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray66, false);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) 'a');
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) ' ');
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (int) (byte) 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray50, (int) (byte) 1, (int) 'a', 0, intArray72, true);
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, 100);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray2, 1, 2, (int) (short) 1, intArray78, true);
        int int82 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray78, (int) (byte) 1);
        int int84 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray78, (int) ' ');
        java.lang.Class<?> wildcardClass85 = intArray78.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 2 + "'", int82 == 2);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 2 + "'", int84 == 2);
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test5390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5390");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 0);
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 1);
        int int24 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (int) ' ', 10, 0);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (short) 10);
        int[] intArray32 = new int[] { ' ', (byte) -1 };
        int[] intArray38 = new int[] { (-1), 100 };
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 1);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray40, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray48, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, (-1), (int) ' ', (int) (byte) 10, intArray48, false);
        int[] intArray58 = new int[] { (-1), 100 };
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) (byte) 1);
        int[] intArray66 = new int[] { (-1), 100 };
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray60, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray68, false);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray48, (int) 'a', 100, (int) (byte) 1, intArray68, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, (int) (byte) -1, (int) (byte) 100, (int) (short) 10, intArray68, false);
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) (byte) 1);
        int[] intArray80 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray78, 100);
        int[] intArray82 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray78, (int) (short) 1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1]");
    }

    @Test
    public void test5391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5391");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int int8 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, 0);
        int int12 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray6, 10, (int) ' ', 10);
        int[] intArray17 = new int[] { '#' };
        int int19 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray17, (int) (short) 0);
        int[] intArray23 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray17, 100, 0, (int) (short) -1, intArray23, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray6, (int) (short) -1, (int) (short) 1, (-1), intArray17, true);
        int[] intArray29 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (int) (short) 1);
        int[] intArray35 = new int[] { ' ', (byte) -1 };
        int[] intArray41 = new int[] { (-1), 100 };
        int[] intArray43 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray41, (int) (byte) 1);
        int[] intArray49 = new int[] { (-1), 100 };
        int[] intArray51 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray49, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray43, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray51, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray35, (-1), (int) ' ', (int) (byte) 10, intArray51, false);
        int[] intArray57 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray35, 100);
        int[] intArray59 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray35, (int) (byte) 100);
        int int63 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray59, (int) (short) 10, (-1), (int) (short) 1);
        int[] intArray65 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray59, 100);
        int[] intArray67 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray59, (int) ' ');
        int[] intArray69 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray67, (int) (byte) 1);
        int[] intArray71 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray69, 4);
        int[] intArray77 = new int[] { (-1), 100 };
        int[] intArray79 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray77, (int) (byte) 1);
        int[] intArray81 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray77, (int) ' ');
        int[] intArray83 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray77, (int) (short) 100);
        int int85 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray77, 1);
        int int87 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray77, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray69, 2, (int) (short) 10, 4, intArray77, true);
        int[] intArray93 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray69, (int) (byte) -1, (int) '4', 10, intArray93, true);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray6, (int) (short) -1, 100, (int) (byte) 10, intArray69, false);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[35]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 2 + "'", int63 == 2);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[1, 1]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1 + "'", int87 == 1);
    }

    @Test
    public void test5392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5392");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { ' ', (byte) -1 };
        int[] intArray38 = new int[] { (-1), 100 };
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 1);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray40, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray48, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, (-1), (int) ' ', (int) (byte) 10, intArray48, false);
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, 100);
        int int56 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray32, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray24, 10, (int) 'a', (-1), intArray32, true);
        int int60 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) '#');
        int int62 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) ' ');
        int int64 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (byte) 0);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (short) 100);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '#');
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) (short) 1);
        int int74 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray68, (int) (short) 10, 1, (int) (short) -1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2 + "'", int60 == 2);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2 + "'", int62 == 2);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2 + "'", int64 == 2);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
    }

    @Test
    public void test5393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5393");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { ' ', (byte) -1 };
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray36, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, (-1), (int) ' ', (int) (byte) 10, intArray36, false);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (int) 'a', 100, (int) (byte) 1, intArray56, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, 10, (int) (short) 0, (int) (short) -1, intArray36, true);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, 0);
        int[] intArray72 = new int[] { (-1), 100 };
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (int) (byte) 1);
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray74, (int) (short) 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, 2, 10, (int) (short) 1, intArray74, false);
        int int80 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, (int) (short) 0);
        int int84 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray36, (-1), (int) (short) 10, (int) (byte) -1);
        int[] intArray86 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) ' ');
        int[] intArray88 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, 100);
        int int90 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray88, 1);
        java.lang.Class<?> wildcardClass91 = intArray88.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2 + "'", int80 == 2);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 2 + "'", int90 == 2);
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test5394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5394");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 0);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 10);
        int int28 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray26, 0);
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray26, (int) (byte) 100);
        int int34 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray26, (int) ' ', (int) '#', (int) (byte) 10);
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, 2);
        int int38 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray26, (-1));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
    }

    @Test
    public void test5395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5395");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 0);
        int int28 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray24, 0, 100, 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray36, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray44, false);
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) 'a');
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) ' ');
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) (byte) 10);
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) (short) 100);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray24, (int) (byte) 1, (int) ' ', 2, intArray54, true);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
    }

    @Test
    public void test5396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5396");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 0);
        int int22 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, 100, (int) (byte) 100, 10);
        int int24 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) (byte) 10);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (-1));
        int int28 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) (short) 1);
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) '4');
        java.lang.Class<?> wildcardClass31 = intArray30.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test5397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5397");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { (-1), 100 };
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 1);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray22, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray30, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) 10, (int) '4', 10, intArray30, true);
        int int36 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray4, 0);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (byte) 100);
        int int42 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray38, (int) (byte) 0, 100, (int) (short) 1);
        int int44 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, (int) (byte) -1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2 + "'", int44 == 2);
    }

    @Test
    public void test5398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5398");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int int8 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, 0);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, (int) (short) -1);
        int int12 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, (int) '#');
        int[] intArray18 = new int[] { (-1), 100 };
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 1);
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray20, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray28, false);
        int[] intArray35 = new int[] { '#' };
        int int37 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray35, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray20, (int) (short) -1, 1, 2, intArray35, true);
        int[] intArray41 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray35, 10);
        int[] intArray43 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray35, 100);
        int int45 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray43, (int) (short) 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray6, (int) (short) 10, (int) (short) 1, 1, intArray43, false);
        int[] intArray49 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray43, (int) '4');
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[35]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1]");
    }

    @Test
    public void test5399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5399");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 0);
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 1);
        int int24 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (int) ' ', 10, 0);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (short) 10);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (short) -1);
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray28, (int) (byte) 1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
    }

    @Test
    public void test5400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5400");
        int[] intArray0 = null;
        int[] intArray6 = new int[] { (-1), 100 };
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (int) (byte) 1);
        int[] intArray14 = new int[] { (-1), 100 };
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray14, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray8, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray16, false);
        int[] intArray24 = new int[] { (-1), 100 };
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 1);
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray26, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray34, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray8, (int) (byte) 10, (int) '4', 10, intArray34, true);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, 2);
        int int44 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray8, (int) (short) 1, (int) (short) 100, (int) (byte) -1);
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, 100);
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (-1));
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray0, 0, (int) (byte) 1, (int) (short) 0, intArray8, true);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray0, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[0, 1]");
    }

    @Test
    public void test5401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5401");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { (-1), 100 };
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 1);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray22, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray30, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) 10, (int) '4', 10, intArray30, true);
        int int36 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray30, (int) (short) -1);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray30, 100);
        int int42 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray30, 1, (int) (byte) 0, (int) (short) 0);
        int int44 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray30, 0);
        java.lang.Class<?> wildcardClass45 = intArray30.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2 + "'", int44 == 2);
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test5402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5402");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { (-1), 100 };
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 1);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray22, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray30, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) 10, (int) '4', 10, intArray30, true);
        int int36 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray4, (int) (byte) -1);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, 4);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, 0);
        int int42 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray40, (int) (short) -1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2 + "'", int42 == 2);
    }

    @Test
    public void test5403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5403");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 1, (int) (byte) 1, (int) (short) -1, intArray32, false);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 10);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 1);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, (int) (byte) 10, (int) (short) 1, 1, intArray46, false);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        int[] intArray64 = new int[] { (-1), 100 };
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray58, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray66, false);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) 'a');
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) ' ');
        int int76 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray72, (int) (byte) -1, 0, (int) (short) 0);
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (-1));
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray32, (int) '4', 1, (int) (short) 0, intArray78, false);
        int int82 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray32, 1);
        int[] intArray84 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) 'a');
        int int88 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray32, (int) (short) 0, (int) (short) 10, (int) (byte) 0);
        int int90 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray32, 3);
        // The following exception was thrown during execution in test generation
        try {
            int int94 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray32, (int) (byte) 10, 10, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 1 + "'", int90 == 1);
    }

    @Test
    public void test5404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5404");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 0);
        int[] intArray24 = new int[] { (-1), 100 };
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 1);
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray26, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray34, false);
        int[] intArray41 = new int[] { '#' };
        int int43 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray41, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray26, (int) (short) -1, 1, 2, intArray41, true);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) (short) -1, 0, (int) (short) 0, intArray41, true);
        int[] intArray53 = new int[] { (-1), 100 };
        int[] intArray55 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray53, (int) (byte) 1);
        int[] intArray61 = new int[] { (-1), 100 };
        int[] intArray63 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray61, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray55, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray63, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) (short) 100, 0, (int) (byte) -1, intArray55, false);
        int[] intArray69 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray55, (int) (byte) -1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[0]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[0, 1]");
    }

    @Test
    public void test5405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5405");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, 10);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) 'a');
        int int12 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, 0);
        int[] intArray18 = new int[] { ' ', (byte) -1 };
        int[] intArray24 = new int[] { (-1), 100 };
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 1);
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray26, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray34, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (-1), (int) ' ', (int) (byte) 10, intArray34, false);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 100);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) '4');
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray42, 1, (int) (byte) 1, (int) (short) -1, intArray48, false);
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (short) 10);
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (short) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray8, (int) (short) 100, (int) (short) 1, 0, intArray56, false);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (short) -1);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, 0);
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) 'a');
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) 'a');
        int int70 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray60, (int) (byte) -1, (int) ' ', (int) (byte) 10);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[0, 0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
    }

    @Test
    public void test5406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5406");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, 10);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) 'a');
        int int12 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, 0);
        int[] intArray18 = new int[] { ' ', (byte) -1 };
        int[] intArray24 = new int[] { (-1), 100 };
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 1);
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray26, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray34, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (-1), (int) ' ', (int) (byte) 10, intArray34, false);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 100);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) '4');
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray42, 1, (int) (byte) 1, (int) (short) -1, intArray48, false);
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (short) 10);
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (short) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray8, (int) (short) 100, (int) (short) 1, 0, intArray56, false);
        int[] intArray64 = new int[] { ' ', (byte) -1 };
        int[] intArray70 = new int[] { (-1), 100 };
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) (byte) 1);
        int[] intArray78 = new int[] { (-1), 100 };
        int[] intArray80 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray78, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray72, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray80, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray64, (-1), (int) ' ', (int) (byte) 10, intArray80, false);
        int[] intArray86 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, 100);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray8, (int) ' ', (int) 'a', (int) (byte) 1, intArray86, true);
        int[] intArray90 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (short) 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1]");
    }

    @Test
    public void test5407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5407");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 1, (int) (byte) 1, (int) (short) -1, intArray32, false);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 10);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) 'a');
        int[] intArray46 = new int[] { ' ', (byte) -1 };
        int[] intArray52 = new int[] { (-1), 100 };
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) (byte) 1);
        int[] intArray60 = new int[] { (-1), 100 };
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray54, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray62, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray46, (-1), (int) ' ', (int) (byte) 10, intArray62, false);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, 1);
        int int70 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray68, (int) (short) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray40, 0, (int) ' ', (int) (short) -1, intArray68, false);
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (-1));
        int int78 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray74, 0, (int) (short) 0, 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2 + "'", int70 == 2);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
    }

    @Test
    public void test5408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5408");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 10);
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) ' ');
        int int24 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray20, (int) 'a');
        int[] intArray30 = new int[] { (-1), 100 };
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray30, (int) (byte) 1);
        int[] intArray38 = new int[] { (-1), 100 };
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray32, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray40, false);
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) 'a');
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) ' ');
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 10);
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (short) 100);
        int[] intArray56 = new int[] { ' ', (byte) -1 };
        int[] intArray62 = new int[] { (-1), 100 };
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, (int) (byte) 1);
        int[] intArray70 = new int[] { (-1), 100 };
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray64, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray72, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray56, (-1), (int) ' ', (int) (byte) 10, intArray72, false);
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, 100);
        int[] intArray80 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 100);
        int int84 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray80, (-1), 2, (int) (byte) -1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray46, 0, 2, 0, intArray80, false);
        int int90 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray46, (-1), (-1), 0);
        int[] intArray92 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) -1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, (-1), 4, (int) (byte) 1, intArray46, true);
        // The following exception was thrown during execution in test generation
        try {
            int int98 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray20, 0, (int) (byte) 10, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 1 + "'", int90 == 1);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[0, 1]");
    }

    @Test
    public void test5409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5409");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) 'a', 100, (int) (byte) 1, intArray38, false);
        int int46 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, (int) '4');
        int int48 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, 0);
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 10);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        int[] intArray64 = new int[] { (-1), 100 };
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray58, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray66, false);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) ' ');
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) '4');
        int int74 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray72, (int) (byte) -1);
        int int78 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray72, (int) '#', (-1), (int) (byte) 0);
        int[] intArray86 = new int[] { (byte) -1, 2, (short) 1, '#' };
        int int88 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray86, (int) '4');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray72, (-1), 4, 2, intArray86, true);
        int int92 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray72, 4);
        int[] intArray94 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, 3);
        int[] intArray96 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, 100);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray38, (int) (short) 100, 1, 3, intArray72, false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 2 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2 + "'", int74 == 2);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, 2, 1, 35]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 4 + "'", int88 == 4);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 2 + "'", int92 == 2);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[-1, -1]");
    }

    @Test
    public void test5410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5410");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) ' ');
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (short) 100);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray2, 1);
        int int14 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray2, (-1), 1, 2);
        int[] intArray20 = new int[] { (-1), 100 };
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 1);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray22, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray30, false);
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray30, (int) ' ');
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 0);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) '#');
        int[] intArray44 = new int[] { (-1), 100 };
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) (byte) 1);
        int[] intArray52 = new int[] { (-1), 100 };
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray46, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray54, false);
        int[] intArray61 = new int[] { '#' };
        int int63 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray61, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray46, (int) (short) -1, 1, 2, intArray61, true);
        int[] intArray67 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray61, 10);
        int[] intArray69 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray61, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray34, (int) (byte) 0, (int) (short) 10, (int) (byte) 1, intArray69, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (int) (byte) 10, (int) '#', (int) (short) 10, intArray34, true);
        int[] intArray75 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, 10);
        int[] intArray77 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        int[] intArray81 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray34, (int) (byte) 10, 10, 4, intArray81, false);
        int[] intArray85 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (short) -1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[1, 1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[35]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[0, 1]");
    }

    @Test
    public void test5411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5411");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, 10);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) 'a');
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (short) 100);
        int int14 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray12, (int) (short) 0);
        int int16 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray12, (int) (byte) 0);
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray24 = new int[] { ' ', (byte) -1 };
        int[] intArray30 = new int[] { (-1), 100 };
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray30, (int) (byte) 1);
        int[] intArray38 = new int[] { (-1), 100 };
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray32, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray40, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray24, (-1), (int) ' ', (int) (byte) 10, intArray40, false);
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, 100);
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 100);
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, 1);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        int[] intArray64 = new int[] { (-1), 100 };
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray58, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray66, false);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) ' ');
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) (byte) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray50, 4, (int) (byte) 10, (int) (byte) 1, intArray70, false);
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, 0);
        int int78 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray76, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) (short) 0, (int) (short) 10, 0, intArray76, true);
        int[] intArray82 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray76, 10);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 2 + "'", int78 == 2);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1]");
    }

    @Test
    public void test5412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5412");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 100);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 1);
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) '4');
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        int[] intArray44 = new int[] { (-1), 100 };
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray38, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray46, false);
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) 'a');
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) ' ');
        int int56 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray52, (int) (byte) -1, 0, (int) (short) 0);
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (-1));
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) '#');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray30, (int) (short) 100, (int) '#', (int) (short) 1, intArray58, false);
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) '4');
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) (byte) -1);
        int int68 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray66, (int) (short) 0);
        java.lang.Class<?> wildcardClass69 = intArray66.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test5413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5413");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray22 = new int[] { ' ', (byte) -1 };
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray22, (-1), (int) ' ', (int) (byte) 10, intArray38, false);
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray50, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray58, false);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray38, (int) 'a', 100, (int) (byte) 1, intArray58, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray12, (int) (short) 100, (int) 'a', (int) (short) 0, intArray38, true);
        int int68 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, (int) (byte) 0);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (short) -1);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (short) 10);
        int int74 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, (int) (byte) 0);
        java.lang.Class<?> wildcardClass75 = intArray38.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2 + "'", int68 == 2);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2 + "'", int74 == 2);
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test5414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5414");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) '#');
        int[] intArray14 = new int[] { ' ', (byte) -1 };
        int[] intArray20 = new int[] { (-1), 100 };
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 1);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray22, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray30, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray14, (-1), (int) ' ', (int) (byte) 10, intArray30, false);
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray14, 100);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) '4');
        int[] intArray44 = new int[] { (-1), 100 };
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray38, 1, (int) (byte) 1, (int) (short) -1, intArray44, false);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        int[] intArray62 = new int[] { (-1), 100 };
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray56, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray64, false);
        int[] intArray71 = new int[] { '#' };
        int int73 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray71, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray56, (int) (short) -1, 1, 2, intArray71, true);
        int[] intArray77 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray71, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray44, (int) (short) 100, 0, 1, intArray77, false);
        int[] intArray81 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) (byte) 100);
        int int85 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray44, (int) '#', (int) (short) 100, (-1));
        int[] intArray87 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) (short) 100);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray8, (-1), 2, 0, intArray44, true);
        int int91 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray44, 0);
        int[] intArray93 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, 1);
        int[] intArray95 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) (short) 100);
        int int97 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray95, (int) (short) 1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[35]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[1, 1]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[1, 1]");
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 1 + "'", int91 == 1);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[1, 1]");
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 2 + "'", int97 == 2);
    }

    @Test
    public void test5415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5415");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) ' ');
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray6, (int) (short) 1, (-1), (int) (byte) 0);
        int int14 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray6, 10, (int) 'a', (int) (short) 10);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (int) '#');
        int[] intArray22 = new int[] { ' ', (byte) -1 };
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray22, (-1), (int) ' ', (int) (byte) 10, intArray38, false);
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, 100);
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, (int) (byte) 100);
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, 1);
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, (int) '4');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray6, (-1), 1, (-1), intArray22, true);
        int int56 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray6, (int) ' ', (int) 'a', (int) '4');
        int[] intArray60 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray6, (int) (short) 0, (int) 'a', (int) (byte) 0, intArray60, false);
        // The following exception was thrown during execution in test generation
        try {
            int int64 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray60, 4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
    }

    @Test
    public void test5416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5416");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int int22 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (int) (byte) -1, 0, (int) (short) 0);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (-1));
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) (byte) 100);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) '4');
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (short) 10);
        int[] intArray36 = new int[] { ' ', (byte) -1 };
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        int[] intArray50 = new int[] { (-1), 100 };
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray44, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray52, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (-1), (int) ' ', (int) (byte) 10, intArray52, false);
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, 0);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) ' ');
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) (byte) 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, 0, (int) '#', 0, intArray60, false);
        // The following exception was thrown during execution in test generation
        try {
            int int68 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray60, (int) (short) 1, 0, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
    }

    @Test
    public void test5417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5417");
        int[] intArray0 = null;
        int[] intArray6 = new int[] { ' ', (byte) -1 };
        int[] intArray12 = new int[] { (-1), 100 };
        int[] intArray14 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) (byte) 1);
        int[] intArray20 = new int[] { (-1), 100 };
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray14, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray22, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray6, (-1), (int) ' ', (int) (byte) 10, intArray22, false);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, 100);
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) '4');
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray30, 1, (int) (byte) 1, (int) (short) -1, intArray36, false);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (short) 10);
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) 'a');
        int[] intArray50 = new int[] { ' ', (byte) -1 };
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        int[] intArray64 = new int[] { (-1), 100 };
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray58, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray66, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray50, (-1), (int) ' ', (int) (byte) 10, intArray66, false);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, 1);
        int int74 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray72, (int) (short) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray44, 0, (int) ' ', (int) (short) -1, intArray72, false);
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, 2);
        int int82 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray72, (int) '#', (int) '#', 0);
        int[] intArray84 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, 2);
        int[] intArray86 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (int) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray0, (-1), 0, 10, intArray72, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot load from int array because \"nums\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2 + "'", int74 == 2);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[0, 1]");
    }

    @Test
    public void test5418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5418");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) '4');
        int int20 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) (byte) -1);
        int int22 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (-1));
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (-1), (int) '#', 4);
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (int) (short) 0, (int) '#', (int) (byte) 1);
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 0);
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, 2);
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, 0);
        int int38 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray34, (int) '4');
        int[] intArray44 = new int[] { ' ', (byte) -1 };
        int[] intArray50 = new int[] { (-1), 100 };
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) (byte) 1);
        int[] intArray58 = new int[] { (-1), 100 };
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray52, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray60, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray44, (-1), (int) ' ', (int) (byte) 10, intArray60, false);
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, 1);
        int[] intArray72 = new int[] { (-1), 100 };
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (int) (byte) 1);
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray74, (int) (short) 10);
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray76, 10);
        int int80 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray78, (int) 'a');
        int int82 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray78, 0);
        int[] intArray84 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray78, (int) (short) 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray66, (int) (byte) 1, (int) (short) 100, (-1), intArray78, false);
        int int88 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray66, (int) (byte) 100);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray34, 3, (int) '4', (int) (short) -1, intArray66, true);
        java.lang.Class<?> wildcardClass91 = intArray34.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2 + "'", int80 == 2);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 2 + "'", int82 == 2);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 2 + "'", int88 == 2);
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test5419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5419");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 100);
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray26, (int) (short) 10, (-1), (int) (short) 1);
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, 100);
        int int34 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray32, (int) (short) 10);
        int int36 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray32, 0);
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) (short) 10);
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) '#');
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        int[] intArray62 = new int[] { (-1), 100 };
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray56, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray64, false);
        int int70 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray56, (int) ' ', (int) (short) -1, (int) (short) 1);
        int int72 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray56, (int) '#');
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray48, (int) ' ', (int) (short) 100, 0, intArray56, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, (int) (byte) 0, 4, 0, intArray48, true);
        int int82 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray32, (int) (byte) 10, (int) (short) 1, (int) (short) 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2 + "'", int70 == 2);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 2 + "'", int72 == 2);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
    }

    @Test
    public void test5420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5420");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { ' ', (byte) -1 };
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray36, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, (-1), (int) ' ', (int) (byte) 10, intArray36, false);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (int) 'a', 100, (int) (byte) 1, intArray56, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, 10, (int) (short) 0, (int) (short) -1, intArray36, true);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, 0);
        int[] intArray72 = new int[] { (-1), 100 };
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (int) (byte) 1);
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray74, (int) (short) 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, 2, 10, (int) (short) 1, intArray74, false);
        int[] intArray84 = new int[] { (-1), 100 };
        int[] intArray86 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray84, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray74, (int) '4', 1, (-1), intArray86, false);
        int[] intArray90 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray86, 0);
        int[] intArray92 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray90, 3);
        java.lang.Class<?> wildcardClass93 = intArray92.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test5421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5421");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 10);
        int[] intArray24 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) (byte) 0, (int) (short) 100, (int) (byte) -1, intArray24, false);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) 'a');
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) '#');
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, 100);
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 10);
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) (short) 10);
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) '#');
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, 4);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, (int) '4', 2, 100, intArray50, false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 51 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
    }

    @Test
    public void test5422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5422");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { (-1), 100 };
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 1);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray22, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray30, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) 10, (int) '4', 10, intArray30, true);
        int int36 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray4, (int) (byte) 10);
        int int40 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray4, 1, (int) 'a', (int) (byte) 1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
    }

    @Test
    public void test5423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5423");
        int[] intArray1 = new int[] { 10 };
        int[] intArray3 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray1, (int) '4');
        int[] intArray9 = new int[] { ' ', (byte) -1 };
        int[] intArray15 = new int[] { (-1), 100 };
        int[] intArray17 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray15, (int) (byte) 1);
        int[] intArray23 = new int[] { (-1), 100 };
        int[] intArray25 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray23, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray17, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray25, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray9, (-1), (int) ' ', (int) (byte) 10, intArray25, false);
        int[] intArray31 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray25, 0);
        int int33 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray31, (int) (byte) 0);
        int int35 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray31, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray1, (int) '#', (int) (byte) 1, (int) (byte) -1, intArray31, false);
        int[] intArray39 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray31, (int) (byte) 0);
        int[] intArray45 = new int[] { (-1), 100 };
        int[] intArray47 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray45, (int) (byte) 1);
        int[] intArray49 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray47, (int) (short) 10);
        int[] intArray51 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray49, 10);
        int[] intArray53 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray49, (int) (short) 1);
        int int55 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray53, 2);
        int int57 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray53, 2);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray31, (int) (short) 0, 2, (int) (short) 1, intArray53, true);
        int[] intArray61 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray53, (int) (byte) -1);
        int int63 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray61, (int) '4');
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[10]");
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 2 + "'", int55 == 2);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2 + "'", int57 == 2);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 2 + "'", int63 == 2);
    }

    @Test
    public void test5424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5424");
        int[] intArray0 = null;
        int int4 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray0, (int) (byte) -1, (int) ' ', (int) (short) 1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test5425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5425");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 100);
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray26, (int) (short) 10, (-1), (int) (short) 1);
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, 100);
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) ' ');
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        int[] intArray42 = new int[] { ' ', (byte) -1 };
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray50, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray58, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray42, (-1), (int) ' ', (int) (byte) 10, intArray58, false);
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, 100);
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 100);
        int int70 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray66, (int) (short) -1, (int) (byte) -1, (int) (short) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray34, 4, (int) (short) 0, 0, intArray66, true);
        int int76 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray66, 4, 100, (-1));
        int int78 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray66, (int) (byte) -1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2 + "'", int70 == 2);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 2 + "'", int78 == 2);
    }

    @Test
    public void test5426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5426");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) '#');
        int[] intArray12 = new int[] { (-1), 100 };
        int[] intArray14 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) (byte) 1);
        int[] intArray20 = new int[] { (-1), 100 };
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray14, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray22, false);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, (int) ' ');
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, 0);
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray26, (int) '4');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray6, (int) (byte) -1, (int) '#', 2, intArray26, true);
        // The following exception was thrown during execution in test generation
        try {
            int int36 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray6, 2, (int) (byte) 1, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
    }

    @Test
    public void test5427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5427");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 0);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 4);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, 0);
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray26, (int) (byte) -1);
        java.lang.Class<?> wildcardClass31 = intArray26.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test5428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5428");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 10);
        int[] intArray24 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) (byte) 0, (int) (short) 100, (int) (byte) -1, intArray24, false);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) 'a');
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) '#');
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, 100);
        int[] intArray38 = new int[] { (-1), 100 };
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 1);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) (short) 10);
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) '#');
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, 4);
        int int48 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray44, 2);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, 2, (int) (short) 100, (int) (short) 0, intArray44, false);
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 0);
        int int54 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray28, (int) (byte) 1);
        int[] intArray60 = new int[] { ' ', (byte) -1 };
        int[] intArray66 = new int[] { (-1), 100 };
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) (byte) 1);
        int[] intArray74 = new int[] { (-1), 100 };
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray74, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray68, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray76, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray60, (-1), (int) ' ', (int) (byte) 10, intArray76, false);
        int[] intArray82 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, 100);
        int[] intArray84 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) (byte) 100);
        int int88 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray84, (int) (short) 10, (-1), (int) (short) 1);
        int[] intArray90 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray84, 100);
        int[] intArray92 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray84, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (short) 100, (int) (byte) 100, (int) (byte) 10, intArray92, true);
        int int96 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray92, (int) '4');
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2 + "'", int54 == 2);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 2 + "'", int88 == 2);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 2 + "'", int96 == 2);
    }

    @Test
    public void test5429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5429");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 100);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 1);
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) '4');
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        int[] intArray44 = new int[] { (-1), 100 };
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray38, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray46, false);
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) 'a');
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) ' ');
        int int56 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray52, (int) (byte) -1, 0, (int) (short) 0);
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (-1));
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) '#');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray30, (int) (short) 100, (int) '#', (int) (short) 1, intArray58, false);
        int int64 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray58, (int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            int int68 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray58, 4, (int) (short) 1, 3);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
    }

    @Test
    public void test5430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5430");
        int[] intArray0 = null;
        int[] intArray6 = new int[] { (-1), 100 };
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (int) (byte) 1);
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (int) ' ');
        int int14 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray10, (int) (short) 1, (-1), (int) (byte) 0);
        int int18 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray10, 10, (int) 'a', (int) (short) 10);
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) '#');
        int[] intArray26 = new int[] { ' ', (byte) -1 };
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        int[] intArray40 = new int[] { (-1), 100 };
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray34, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray42, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, (-1), (int) ' ', (int) (byte) 10, intArray42, false);
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, 100);
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 100);
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, 1);
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) '4');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray10, (-1), 1, (-1), intArray26, true);
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) 'a');
        int int62 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray58, 0, (int) (byte) 100, (int) (short) 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray0, (int) (short) 100, (int) '4', (int) (byte) 1, intArray58, true);
        int[] intArray70 = new int[] { (-1), 100 };
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) (byte) 1);
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) ' ');
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) (short) 100);
        int int78 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray70, 1);
        int[] intArray80 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, 1);
        int[] intArray84 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray70, 0, (int) (short) -1, (int) (byte) 0, intArray84, true);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray0, (int) (byte) 100, (int) (byte) 1, (int) (short) 1, intArray84, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[1, 1]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1]");
    }

    @Test
    public void test5431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5431");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 1);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (short) 1);
        int int28 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) 'a');
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, 0);
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) ' ');
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (short) 1);
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int int38 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, 0);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, 10);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (short) 1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
    }

    @Test
    public void test5432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5432");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) ' ');
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray6, (int) (short) 1, (-1), (int) (byte) 0);
        int[] intArray14 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray6, 2, (int) '4', (int) (short) 0, intArray14, true);
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, 0);
        int int20 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, 4);
        java.lang.Class<?> wildcardClass21 = intArray18.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test5433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5433");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int int18 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray4, (int) ' ', (int) (short) -1, (int) (short) 1);
        int[] intArray24 = new int[] { ' ', (byte) -1 };
        int[] intArray30 = new int[] { (-1), 100 };
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray30, (int) (byte) 1);
        int[] intArray38 = new int[] { (-1), 100 };
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray32, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray40, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray24, (-1), (int) ' ', (int) (byte) 10, intArray40, false);
        int[] intArray50 = new int[] { (-1), 100 };
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) (byte) 1);
        int[] intArray58 = new int[] { (-1), 100 };
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray52, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray60, false);
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray40, (int) 'a', 100, (int) (byte) 1, intArray60, false);
        int int68 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray60, (int) '4');
        int int72 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray60, (int) ' ', (int) (byte) 1, 0);
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, 100);
        int int76 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray74, 2);
        int int78 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray74, (int) (short) -1);
        int[] intArray80 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray74, (int) (short) -1);
        int int82 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray80, 100);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, (int) '4', 3, (int) '#', intArray80, true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 19 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2 + "'", int68 == 2);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2 + "'", int76 == 2);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 2 + "'", int78 == 2);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 2 + "'", int82 == 2);
    }

    @Test
    public void test5434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5434");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) ' ');
        int[] intArray11 = new int[] { 10 };
        int[] intArray13 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray11, (int) '4');
        int[] intArray18 = new int[] { '#' };
        int int20 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) (short) 0);
        int int22 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) (byte) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray13, 10, (int) (byte) 1, (int) (short) 0, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray6, (int) (byte) 1, 0, (-1), intArray13, true);
        int[] intArray32 = new int[] { ' ', (byte) -1 };
        int[] intArray38 = new int[] { (-1), 100 };
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 1);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray40, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray48, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, (-1), (int) ' ', (int) (byte) 10, intArray48, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray13, (int) (byte) -1, (int) (short) 100, 4, intArray32, true);
        int int56 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray32, 4);
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) ' ');
        int int62 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray58, 0, (int) (short) 10, (int) (short) 1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[10]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[35]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
    }

    @Test
    public void test5435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5435");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, 0);
        int[] intArray24 = new int[] { (-1), 100 };
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 1);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (short) 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, 4, 2, (int) (byte) 0, intArray26, false);
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, 3);
        int int34 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray32, (int) (byte) 1);
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (-1));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[0, 1]");
    }

    @Test
    public void test5436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5436");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int int8 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, 0);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, (int) (short) -1);
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (int) (byte) 0);
        int[] intArray18 = new int[] { ' ', (byte) -1 };
        int[] intArray24 = new int[] { (-1), 100 };
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 1);
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray26, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray34, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (-1), (int) ' ', (int) (byte) 10, intArray34, false);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, 1);
        int int42 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray40, (int) (short) 1);
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) 'a');
        int int46 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray40, 10);
        int int48 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray40, (int) (short) 100);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray12, (int) (short) 10, 1, (int) (short) -1, intArray40, true);
        int int54 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray40, 10, 1, (int) (byte) 0);
        java.lang.Class<?> wildcardClass55 = intArray40.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2 + "'", int42 == 2);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test5437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5437");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 100);
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray26, (int) (short) -1, (int) (byte) -1, (int) (short) 1);
        int int34 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray26, (int) (short) 100, (int) '#', 3);
        int int36 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray26, (int) (byte) 100);
        int int40 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray26, 0, (int) (short) 100, 2);
        int int42 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray26, 2);
        int int46 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray26, 1, 10, 4);
        int int48 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray26, 100);
        int int50 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray26, (int) '4');
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2 + "'", int42 == 2);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
    }

    @Test
    public void test5438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5438");
        int[] intArray1 = new int[] { 10 };
        int[] intArray3 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray1, (int) '4');
        int[] intArray8 = new int[] { '#' };
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) (short) 0);
        int int12 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) (byte) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray3, 10, (int) (byte) 1, (int) (short) 0, intArray8, false);
        int[] intArray19 = new int[] { 10 };
        int[] intArray21 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, (int) '4');
        int[] intArray26 = new int[] { '#' };
        int int28 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray26, (int) (short) 0);
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray26, (int) (byte) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray21, 10, (int) (byte) 1, (int) (short) 0, intArray26, false);
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray3, 0, 0, 1, intArray34, false);
        int int38 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray3, (int) ' ');
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray3, (int) ' ');
        int int44 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray40, (int) '4', (int) '4', 1);
        // The following exception was thrown during execution in test generation
        try {
            int int48 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray40, (int) '#', (int) '#', 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[10]");
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[35]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[10]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[35]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
    }

    @Test
    public void test5439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5439");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { (-1), 100 };
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 1);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray22, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray30, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) 10, (int) '4', 10, intArray30, true);
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, 2);
        int int40 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray4, (int) (short) 1, (int) (short) 100, (int) (byte) -1);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, 100);
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (-1));
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) ' ');
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, 2);
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (short) 100);
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) 'a');
        java.lang.Class<?> wildcardClass53 = intArray46.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test5440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5440");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int int22 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, 1, (int) (byte) 100, (-1));
        int[] intArray28 = new int[] { ' ', (byte) -1 };
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray36, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray44, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray28, (-1), (int) ' ', (int) (byte) 10, intArray44, false);
        int int50 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray44, (int) (short) 1);
        int int52 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray44, (int) '#');
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, 2);
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, 4);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, (-1), (int) (byte) 10, 4, intArray44, true);
        int int60 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray44, 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2 + "'", int60 == 2);
    }

    @Test
    public void test5441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5441");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray22 = new int[] { (-1), 100 };
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, (int) (byte) 1);
        int[] intArray30 = new int[] { (-1), 100 };
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray30, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray24, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray32, false);
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) 'a');
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) ' ');
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray16, (int) (byte) 1, (int) 'a', 0, intArray38, true);
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, 100);
        int[] intArray50 = new int[] { (-1), 100 };
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) (byte) 1);
        int[] intArray58 = new int[] { (-1), 100 };
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray52, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray60, false);
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) ' ');
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, 0);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) ' ');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray16, (int) (byte) 10, 10, 4, intArray64, false);
        java.lang.Class<?> wildcardClass71 = intArray64.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test5442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5442");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray27 = new int[] { (short) 100, (short) 0, 100, (byte) -1, 10 };
        int int31 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray27, 1, (int) (byte) 100, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, 100, (int) '#', (int) (short) 10, intArray27, false);
        int int35 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray27, 10);
        int[] intArray37 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray27, (int) (byte) 1);
        int[] intArray43 = new int[] { ' ', (byte) -1 };
        int[] intArray49 = new int[] { (-1), 100 };
        int[] intArray51 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray49, (int) (byte) 1);
        int[] intArray57 = new int[] { (-1), 100 };
        int[] intArray59 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray57, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray51, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray59, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray43, (-1), (int) ' ', (int) (byte) 10, intArray59, false);
        int[] intArray65 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray59, 0);
        int[] intArray67 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray65, (int) (byte) 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray37, (int) (byte) 100, 0, (int) (short) 0, intArray67, false);
        int[] intArray75 = new int[] { (-1), 100 };
        int[] intArray77 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray75, (int) (byte) 1);
        int[] intArray79 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray77, (int) (short) 10);
        int int81 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray79, 0);
        int int83 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray79, (int) (short) -1);
        int int85 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray79, (int) '#');
        int int89 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray79, (int) (short) 0, (int) (byte) 100, (int) '4');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray67, (int) (short) 10, 3, (int) (byte) -1, intArray79, false);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[100, 0, 100, -1, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 2 + "'", int81 == 2);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 2 + "'", int83 == 2);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 2 + "'", int85 == 2);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
    }

    @Test
    public void test5443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5443");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 0);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 10);
        int int28 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray26, 0);
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (short) 100);
        int int34 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray30, (-1), (int) 'a', 0);
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray30, (int) '4');
        int int38 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, (int) ' ');
        int[] intArray44 = new int[] { (-1), 100 };
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) (byte) 1);
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (short) 10);
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) -1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray36, (int) (short) 100, (int) ' ', 0, intArray50, true);
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) ' ');
        int int58 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray54, (int) (byte) 1, (int) '#', 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
    }

    @Test
    public void test5444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5444");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 10);
        int int24 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray20, (int) (byte) 100, 100, 10);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray20, (int) (byte) 0);
        int int28 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray20, (int) ' ');
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray20, (int) (short) 10);
        int int32 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray20, (int) (short) 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
    }

    @Test
    public void test5445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5445");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 10);
        int[] intArray24 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) (byte) 0, (int) (short) 100, (int) (byte) -1, intArray24, false);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) 'a');
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) '#');
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, 100);
        int[] intArray38 = new int[] { (-1), 100 };
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 1);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) ' ');
        int int46 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray42, (int) (short) 1, (-1), (int) (byte) 0);
        int[] intArray50 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray42, 2, (int) '4', (int) (short) 0, intArray50, true);
        int int56 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray42, (int) (short) -1, (int) ' ', (int) (byte) 1);
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) '#');
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) (byte) 100);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray32, (int) 'a', (int) 'a', (int) (byte) 1, intArray58, true);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray32, (int) '#', (int) (byte) -1, 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
    }

    @Test
    public void test5446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5446");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, 10);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) 'a');
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (short) 100);
        int int14 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray12, (int) (short) 0);
        int int16 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray12, (int) (byte) 0);
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) (byte) 100);
        int int24 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray20, (int) (short) 0, (int) '4', 1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
    }

    @Test
    public void test5447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5447");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int int24 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) (short) 1);
        int[] intArray30 = new int[] { (-1), 100 };
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray30, (int) (byte) 1);
        int[] intArray38 = new int[] { (-1), 100 };
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray32, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray40, false);
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) 'a');
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) ' ');
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 10);
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, (int) 'a', (int) (short) 10, (int) (byte) 0, intArray48, false);
        int int54 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray48, (int) (byte) -1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2 + "'", int54 == 2);
    }

    @Test
    public void test5448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5448");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 0);
        int int22 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, 100, (int) (byte) 100, 10);
        int[] intArray28 = new int[] { ' ', (byte) -1 };
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray36, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray44, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray28, (-1), (int) ' ', (int) (byte) 10, intArray44, false);
        int int50 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray44, (int) (short) 1);
        int int52 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray44, (int) '#');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (-1), 100, 0, intArray44, false);
        int int56 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, 0);
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 10);
        java.lang.Class<?> wildcardClass59 = intArray58.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2 + "'", int56 == 2);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test5449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5449");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { ' ', (byte) -1 };
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray36, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, (-1), (int) ' ', (int) (byte) 10, intArray36, false);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (int) 'a', 100, (int) (byte) 1, intArray56, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, 10, (int) (short) 0, (int) (short) -1, intArray36, true);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, 0);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, 1);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, 2);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) -1);
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) '4');
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
    }

    @Test
    public void test5450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5450");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray6, (int) '4', 0, (int) (byte) 0);
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, 0);
        int int16 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray6, (int) (byte) 10, (int) '4', (int) (byte) -1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test5451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5451");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 1);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (short) 1);
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        int[] intArray40 = new int[] { (-1), 100 };
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray34, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray42, false);
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) 'a');
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (short) 100);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray24, (int) '#', (int) 'a', (int) '#', intArray48, false);
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, 0);
        int int56 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray48, (int) (short) 0, 1, (int) (short) -1);
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
    }

    @Test
    public void test5452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5452");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 1);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (short) 1);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) 'a');
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, 10);
        int int34 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray28, (int) (short) 100, (int) (short) 0, 0);
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, 0);
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) ' ');
        int int50 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray46, (int) (short) 1, (-1), (int) (byte) 0);
        int[] intArray54 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray46, 2, (int) '4', (int) (short) 0, intArray54, true);
        int int60 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray46, (int) (short) -1, (int) ' ', (int) (byte) 1);
        int int62 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray46, (int) (short) 10);
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (short) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray36, 2, (int) ' ', (int) (byte) 0, intArray46, true);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (short) 1);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) (short) 1);
        int int74 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray70, (-1), (int) (byte) 100, 0);
        int int78 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray70, 10, 10, 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2 + "'", int62 == 2);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
    }

    @Test
    public void test5453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5453");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) ' ');
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (short) 100);
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (short) 10);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        int[] intArray24 = new int[] { (-1), 100 };
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray26, false);
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) 'a');
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray30, (int) ' ');
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 10);
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        int int38 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray34, (-1));
        int int42 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray34, 10, (int) (short) 10, 4);
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) ' ');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (int) (byte) 0, (int) (short) 1, (-1), intArray34, true);
        int[] intArray52 = new int[] { (-1), 100 };
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) (byte) 1);
        int[] intArray60 = new int[] { (-1), 100 };
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray54, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray62, false);
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, (int) 'a');
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) ' ');
        int int72 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray68, (int) (byte) -1, 0, (int) (short) 0);
        int int74 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray68, (int) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, 3, 0, 100, intArray68, false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 50 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[1, 1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2 + "'", int74 == 2);
    }

    @Test
    public void test5454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5454");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 1, (int) (byte) 1, (int) (short) -1, intArray32, false);
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        int[] intArray50 = new int[] { (-1), 100 };
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray44, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray52, false);
        int[] intArray59 = new int[] { '#' };
        int int61 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray59, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray44, (int) (short) -1, 1, 2, intArray59, true);
        int[] intArray65 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray59, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, (int) (short) 100, 0, 1, intArray65, false);
        int[] intArray69 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 100);
        int int73 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray32, (int) '#', (int) (short) 100, (-1));
        int[] intArray75 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 100);
        int int79 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray75, (int) (short) 10, 1, (int) (short) 0);
        int[] intArray81 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray75, 2);
        int int83 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray81, (int) (short) 1);
        int int85 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray81, 2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[35]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[1, 1]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[1, 1]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 2 + "'", int83 == 2);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 2 + "'", int85 == 2);
    }

    @Test
    public void test5455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5455");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int int18 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray12, 0);
        int[] intArray24 = new int[] { (-1), 100 };
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 1);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) ' ');
        int int32 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray28, (int) (short) 1, (-1), (int) (byte) 0);
        int[] intArray36 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray28, 2, (int) '4', (int) (short) 0, intArray36, true);
        int int42 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray28, (int) (short) -1, (int) ' ', (int) (byte) 1);
        int int44 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray28, (int) (short) 10);
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (short) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray12, 2, 0, 0, intArray28, false);
        int int50 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray12, (int) (byte) -1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2 + "'", int44 == 2);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
    }

    @Test
    public void test5456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5456");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray27 = new int[] { (short) 100, (short) 0, 100, (byte) -1, 10 };
        int int31 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray27, 1, (int) (byte) 100, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, 100, (int) '#', (int) (short) 10, intArray27, false);
        int int35 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, 0);
        int[] intArray41 = new int[] { ' ', (byte) -1 };
        int[] intArray47 = new int[] { (-1), 100 };
        int[] intArray49 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray47, (int) (byte) 1);
        int[] intArray55 = new int[] { (-1), 100 };
        int[] intArray57 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray55, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray49, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray57, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray41, (-1), (int) ' ', (int) (byte) 10, intArray57, false);
        int[] intArray63 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray57, 1);
        int int65 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray63, (int) (short) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, (int) (byte) 1, (-1), 0, intArray63, false);
        int[] intArray69 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray63, (int) (short) 1);
        int int71 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray63, (int) (byte) 0);
        int[] intArray73 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray63, (int) '#');
        int[] intArray75 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray63, (int) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            int int79 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray63, (int) (short) 1, 4, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[100, 0, 100, -1, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2 + "'", int65 == 2);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2 + "'", int71 == 2);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[0, 1]");
    }

    @Test
    public void test5457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5457");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) ' ');
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (short) 100);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, 100);
        int int12 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, 0);
        int int14 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, 2);
        int[] intArray20 = new int[] { (-1), 100 };
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 1);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) ' ');
        int int28 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray24, (int) (short) 1, (-1), (int) (byte) 0);
        int int32 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray24, 10, (int) 'a', (int) (short) 10);
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '#');
        int[] intArray40 = new int[] { ' ', (byte) -1 };
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray40, (-1), (int) ' ', (int) (byte) 10, intArray56, false);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, 100);
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) (byte) 100);
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, 1);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) '4');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray24, (-1), 1, (-1), intArray40, true);
        int int74 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray24, (int) ' ', (int) 'a', (int) '4');
        int[] intArray78 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray24, (int) (short) 0, (int) 'a', (int) (byte) 0, intArray78, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray8, (int) ' ', (int) (short) 100, (int) '#', intArray78, false);
        // The following exception was thrown during execution in test generation
        try {
            int int84 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray78, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[1, 1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
    }

    @Test
    public void test5458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5458");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray27 = new int[] { (short) 100, (short) 0, 100, (byte) -1, 10 };
        int int31 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray27, 1, (int) (byte) 100, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, 100, (int) '#', (int) (short) 10, intArray27, false);
        int int35 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, 0);
        int[] intArray41 = new int[] { ' ', (byte) -1 };
        int[] intArray47 = new int[] { (-1), 100 };
        int[] intArray49 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray47, (int) (byte) 1);
        int[] intArray55 = new int[] { (-1), 100 };
        int[] intArray57 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray55, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray49, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray57, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray41, (-1), (int) ' ', (int) (byte) 10, intArray57, false);
        int[] intArray63 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray57, 1);
        int int65 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray63, (int) (short) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, (int) (byte) 1, (-1), 0, intArray63, false);
        int[] intArray73 = new int[] { (-1), 100 };
        int[] intArray75 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray73, (int) (byte) 1);
        int[] intArray77 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray73, (int) ' ');
        int int81 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray77, (int) (short) 1, (-1), (int) (byte) 0);
        int int85 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray77, 10, (int) 'a', (int) (short) 10);
        int int87 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray77, (int) (short) -1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) (short) -1, 0, (-1), intArray77, true);
        int int91 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray77, (int) '#');
        // The following exception was thrown during execution in test generation
        try {
            int int95 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray77, 4, 0, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[100, 0, 100, -1, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2 + "'", int65 == 2);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 2 + "'", int87 == 2);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 2 + "'", int91 == 2);
    }

    @Test
    public void test5459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5459");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) ' ');
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray6, (int) (short) 1, (-1), (int) (byte) 0);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        int[] intArray24 = new int[] { (-1), 100 };
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray26, false);
        int[] intArray33 = new int[] { '#' };
        int int35 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray33, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, (int) (short) -1, 1, 2, intArray33, true);
        int[] intArray39 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray33, 10);
        int[] intArray41 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray33, 0);
        int[] intArray43 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray33, (int) '#');
        int[] intArray49 = new int[] { (-1), 100 };
        int[] intArray51 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray49, (int) (byte) 1);
        int[] intArray57 = new int[] { (-1), 100 };
        int[] intArray59 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray57, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray51, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray59, false);
        int[] intArray66 = new int[] { '#' };
        int int68 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray66, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray51, (int) (short) -1, 1, 2, intArray66, true);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, 10);
        int int76 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray72, 1, (int) (short) 1, (int) (byte) -1);
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (int) ' ');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray33, (int) (short) 100, 0, (int) (byte) -1, intArray78, true);
        int int82 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray33, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray6, (int) (byte) 10, (int) (byte) 100, (int) (byte) -1, intArray33, false);
        int[] intArray86 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (int) (short) 100);
        int int88 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[35]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[0, 0]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[35]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 2 + "'", int88 == 2);
    }

    @Test
    public void test5460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5460");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { ' ', (byte) -1 };
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray36, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, (-1), (int) ' ', (int) (byte) 10, intArray36, false);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, 100);
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 100);
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray12, (int) '#', (int) (short) 10, 0, intArray20, false);
        int int50 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray20, 0);
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (short) 10);
        int int54 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray20, (int) '4');
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 0);
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            int int62 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray20, 100, 0, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2 + "'", int54 == 2);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
    }

    @Test
    public void test5461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5461");
        int[] intArray1 = new int[] { 10 };
        int[] intArray3 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray1, (int) '4');
        int[] intArray8 = new int[] { '#' };
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) (short) 0);
        int int12 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) (byte) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray3, 10, (int) (byte) 1, (int) (short) 0, intArray8, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, 1);
        int int18 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) 'a');
        int int20 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, 2);
        int int22 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) (short) 0);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, 10);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (short) 10);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) ' ');
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[10]");
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[35]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
    }

    @Test
    public void test5462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5462");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int int8 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, 0);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, (int) (short) -1);
        int int12 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, (int) '#');
        int int16 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray6, (int) (byte) 1, 0, (int) (byte) 1);
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (int) 'a');
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) '4');
        int[] intArray26 = new int[] { ' ', (byte) -1 };
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        int[] intArray40 = new int[] { (-1), 100 };
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray34, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray42, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, (-1), (int) ' ', (int) (byte) 10, intArray42, false);
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, 100);
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 100);
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, 1);
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) '4');
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, 0);
        int int60 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray56, (int) (short) 100, (int) (byte) 0, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, 1, (int) (byte) 1, (int) (byte) 1, intArray56, true);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2 + "'", int60 == 2);
    }

    @Test
    public void test5463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5463");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int int6 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray2, (int) (byte) 100);
        int int8 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray2, 0);
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (short) 100);
        java.lang.Class<?> wildcardClass11 = intArray10.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[1, 1]");
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test5464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5464");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 0);
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 1);
        int int24 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (int) ' ', 10, 0);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (short) 10);
        int[] intArray32 = new int[] { ' ', (byte) -1 };
        int[] intArray38 = new int[] { (-1), 100 };
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 1);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray40, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray48, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, (-1), (int) ' ', (int) (byte) 10, intArray48, false);
        int[] intArray58 = new int[] { (-1), 100 };
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) (byte) 1);
        int[] intArray66 = new int[] { (-1), 100 };
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray60, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray68, false);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray48, (int) 'a', 100, (int) (byte) 1, intArray68, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, (int) (byte) -1, (int) (byte) 100, (int) (short) 10, intArray68, false);
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) (byte) -1);
        int int80 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray68, (-1));
        int int84 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray68, (int) 'a', (int) (byte) 100, (int) (short) -1);
        int[] intArray86 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, 10);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2 + "'", int80 == 2);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1]");
    }

    @Test
    public void test5465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5465");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int int22 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (int) (byte) -1, 0, (int) (short) 0);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (-1));
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) (byte) 100);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (short) 10);
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, 100);
        int int32 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray28, (int) (byte) 1);
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 10);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
    }

    @Test
    public void test5466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5466");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 0);
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) '#');
        int int22 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray16, (int) ' ');
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, 4);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, 3);
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray16, (int) (byte) 1, (int) ' ', 2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
    }

    @Test
    public void test5467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5467");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray19 = new int[] { '#' };
        int int21 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (short) -1, 1, 2, intArray19, true);
        int[] intArray25 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 10);
        int int29 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray25, 1, (int) (short) 1, (int) (byte) -1);
        int[] intArray31 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray25, (int) (byte) 100);
        int[] intArray37 = new int[] { ' ', (byte) -1 };
        int[] intArray43 = new int[] { (-1), 100 };
        int[] intArray45 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray43, (int) (byte) 1);
        int[] intArray51 = new int[] { (-1), 100 };
        int[] intArray53 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray51, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray45, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray53, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray37, (-1), (int) ' ', (int) (byte) 10, intArray53, false);
        int[] intArray63 = new int[] { (-1), 100 };
        int[] intArray65 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray63, (int) (byte) 1);
        int[] intArray71 = new int[] { (-1), 100 };
        int[] intArray73 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray71, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray65, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray73, false);
        int[] intArray77 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray73, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray53, (int) 'a', 100, (int) (byte) 1, intArray73, false);
        int int81 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray73, (int) '4');
        int int85 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray73, (int) ' ', (int) (byte) 1, 0);
        int int87 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray73, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray31, (int) (short) 0, (int) (byte) 10, (int) (short) 1, intArray73, false);
        int[] intArray91 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray73, (int) 'a');
        int int93 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray91, (int) ' ');
        int int95 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray91, (-1));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 2 + "'", int81 == 2);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 2 + "'", int87 == 2);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 2 + "'", int93 == 2);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 2 + "'", int95 == 2);
    }

    @Test
    public void test5468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5468");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int int6 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray2, (int) (byte) 100);
        int int8 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray2, 0);
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (short) 100);
        int[] intArray16 = new int[] { ' ', (byte) -1 };
        int[] intArray22 = new int[] { (-1), 100 };
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, (int) (byte) 1);
        int[] intArray30 = new int[] { (-1), 100 };
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray30, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray24, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray32, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray16, (-1), (int) ' ', (int) (byte) 10, intArray32, false);
        int int40 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray16, 4, 3, (int) (short) -1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray10, 3, (int) 'a', (int) (byte) 1, intArray16, true);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[1, 1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
    }

    @Test
    public void test5469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5469");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 100);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 1);
        int int32 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray2, (int) (byte) 10, (int) '4', (int) '#');
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (short) -1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
    }

    @Test
    public void test5470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5470");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { (-1), 100 };
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 1);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray22, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray30, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) 10, (int) '4', 10, intArray30, true);
        int int36 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray4, (int) (byte) -1);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, 4);
        int[] intArray44 = new int[] { ' ', (byte) -1 };
        int[] intArray50 = new int[] { (-1), 100 };
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) (byte) 1);
        int[] intArray58 = new int[] { (-1), 100 };
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray52, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray60, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray44, (-1), (int) ' ', (int) (byte) 10, intArray60, false);
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, 100);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) (byte) 100);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, 1);
        int int74 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray44, (int) (short) 0, (int) 'a', 2);
        int int78 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray44, 10, 100, (int) (short) 1);
        int int80 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray44, (int) (short) 0);
        int[] intArray82 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) (short) 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray38, 10, (int) (short) 100, (int) '#', intArray82, false);
        int[] intArray88 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray38, (-1), (int) ' ', (int) (short) 0, intArray88, false);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1]");
    }

    @Test
    public void test5471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5471");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int int8 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, 0);
        int int12 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray6, 10, (int) ' ', 10);
        int[] intArray17 = new int[] { '#' };
        int int19 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray17, (int) (short) 0);
        int[] intArray23 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray17, 100, 0, (int) (short) -1, intArray23, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray6, (int) (short) -1, (int) (short) 1, (-1), intArray17, true);
        int[] intArray29 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (int) (short) -1);
        int[] intArray31 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (int) (byte) 10);
        int[] intArray33 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray31, (int) (short) -1);
        int[] intArray35 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray31, (int) (short) 100);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[35]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, -1]");
    }

    @Test
    public void test5472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5472");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) 'a', 100, (int) (byte) 1, intArray38, false);
        int int46 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, (int) (short) 1);
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (short) 100);
        int int50 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray48, (int) (byte) 1);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) (short) 10);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, 10);
        int int64 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray62, (int) 'a');
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, (int) (short) 100);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, (int) (byte) -1);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, 1);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) 100, 1, (int) (short) 10, intArray72, false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2 + "'", int64 == 2);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[1, 1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
    }

    @Test
    public void test5473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5473");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 1, (int) (byte) 1, (int) (short) -1, intArray32, false);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 10);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 1);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, (int) (byte) 10, (int) (short) 1, 1, intArray46, false);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        int[] intArray64 = new int[] { (-1), 100 };
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray58, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray66, false);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) 'a');
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) ' ');
        int int76 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray72, (int) (byte) -1, 0, (int) (short) 0);
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (-1));
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray32, (int) '4', 1, (int) (short) 0, intArray78, false);
        int int82 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray32, 1);
        int[] intArray84 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) 'a');
        int[] intArray88 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, (int) (short) 10, 0, (int) (byte) 100, intArray88, false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 50 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1]");
    }

    @Test
    public void test5474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5474");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 1);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (short) 1);
        int int28 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) 'a');
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, 0);
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) ' ');
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (short) 1);
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 10);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, 4);
        int int40 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray34, (int) ' ');
        int[] intArray46 = new int[] { ' ', (byte) -1 };
        int[] intArray52 = new int[] { (-1), 100 };
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) (byte) 1);
        int[] intArray60 = new int[] { (-1), 100 };
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray54, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray62, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray46, (-1), (int) ' ', (int) (byte) 10, intArray62, false);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, 100);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 100);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, 1);
        int int74 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray72, (int) (short) 0);
        int int76 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray72, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray34, 100, 3, 0, intArray72, false);
        int int80 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray72, 2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2 + "'", int40 == 2);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2 + "'", int74 == 2);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2 + "'", int76 == 2);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2 + "'", int80 == 2);
    }

    @Test
    public void test5475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5475");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray27 = new int[] { (short) 100, (short) 0, 100, (byte) -1, 10 };
        int int31 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray27, 1, (int) (byte) 100, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, 100, (int) '#', (int) (short) 10, intArray27, false);
        int[] intArray35 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (short) 1);
        int int37 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) (byte) 10);
        int int39 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) '#');
        int int43 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, 1, 100, 10);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[100, 0, 100, -1, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2 + "'", int37 == 2);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2 + "'", int39 == 2);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
    }

    @Test
    public void test5476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5476");
        int[] intArray1 = new int[] { '#' };
        int int3 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray1, (int) (short) 0);
        int int5 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray1, (int) (byte) 0);
        int[] intArray11 = new int[] { ' ', (byte) -1 };
        int[] intArray17 = new int[] { (-1), 100 };
        int[] intArray19 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray17, (int) (byte) 1);
        int[] intArray25 = new int[] { (-1), 100 };
        int[] intArray27 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray25, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray19, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray27, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray11, (-1), (int) ' ', (int) (byte) 10, intArray27, false);
        int[] intArray33 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray27, 0);
        int int35 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray33, (int) (byte) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray1, 10, 0, (int) (byte) 0, intArray33, true);
        int[] intArray39 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray1, (int) (short) -1);
        int int43 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray1, (-1), (int) 'a', 0);
        int[] intArray45 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray1, (int) (byte) 0);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[35]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1]");
    }

    @Test
    public void test5477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5477");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 1, (int) (byte) 1, (int) (short) -1, intArray32, false);
        int int38 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray32, 1);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) ' ');
        int[] intArray46 = new int[] { ' ', (byte) -1 };
        int[] intArray52 = new int[] { (-1), 100 };
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) (byte) 1);
        int[] intArray60 = new int[] { (-1), 100 };
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray54, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray62, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray46, (-1), (int) ' ', (int) (byte) 10, intArray62, false);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, 100);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 100);
        int int74 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray70, (int) (short) 10, (-1), (int) (short) 1);
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, 100);
        int int78 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray76, (int) (short) 10);
        int int80 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray76, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray40, 2, (int) '#', (int) (short) 0, intArray76, false);
        int[] intArray84 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, 100);
        int int86 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray40, (int) (byte) 100);
        int int90 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray40, (int) (short) 1, 2, 1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2 + "'", int74 == 2);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 2 + "'", int78 == 2);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2 + "'", int80 == 2);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 2 + "'", int86 == 2);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
    }

    @Test
    public void test5478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5478");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray22 = new int[] { ' ', (byte) -1 };
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray22, (-1), (int) ' ', (int) (byte) 10, intArray38, false);
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray50, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray58, false);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray38, (int) 'a', 100, (int) (byte) 1, intArray58, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray12, (int) (short) 100, (int) 'a', (int) (short) 0, intArray38, true);
        int int68 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, (int) (byte) 0);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (short) -1);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (short) 10);
        java.lang.Class<?> wildcardClass73 = intArray38.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2 + "'", int68 == 2);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test5479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5479");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 10);
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray36, false);
        int[] intArray44 = new int[] { (-1), 100 };
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) (byte) 1);
        int[] intArray52 = new int[] { (-1), 100 };
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray46, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray54, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (byte) 10, (int) '4', 10, intArray54, true);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (-1), (int) (short) 100, (int) '#', intArray54, false);
        int[] intArray66 = new int[] { (-1), 100 };
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) (byte) 1);
        int[] intArray74 = new int[] { (-1), 100 };
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray74, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray68, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray76, false);
        int[] intArray80 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray76, (int) 'a');
        int[] intArray82 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray80, (int) ' ');
        int[] intArray84 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray80, (-1));
        int int86 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray80, (int) (byte) -1);
        int[] intArray88 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray80, (int) 'a');
        int[] intArray90 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray88, 4);
        int[] intArray92 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray90, (int) (byte) 100);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray54, (int) (byte) 10, (int) '#', 2, intArray92, false);
        // The following exception was thrown during execution in test generation
        try {
            int int98 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray54, (-1), 10, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 2 + "'", int86 == 2);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1]");
    }

    @Test
    public void test5480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5480");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 0);
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 1);
        int int24 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (int) ' ', 10, 0);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (short) 10);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) '4');
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray36, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray44, false);
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) ' ');
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 0);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        int[] intArray64 = new int[] { (-1), 100 };
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray58, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray66, false);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) 'a');
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) ' ');
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (-1));
        int int76 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray74, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray50, (int) ' ', (int) 'a', 1, intArray74, false);
        int int80 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray50, (int) '#');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray26, (-1), 1, 0, intArray50, true);
        int int84 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray50, (-1));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2 + "'", int80 == 2);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 2 + "'", int84 == 2);
    }

    @Test
    public void test5481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5481");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 1);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (short) 1);
        int int28 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) 'a');
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, 0);
        int int34 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray24, (int) 'a', 0, (int) (short) 0);
        int[] intArray38 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray24, (int) (short) 100, (int) (byte) 10, (int) (byte) 0, intArray38, true);
        int int44 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray38, (int) 'a', (int) (byte) 10, (-1));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
    }

    @Test
    public void test5482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5482");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) '#');
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, 4);
        int int12 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, 2);
        int[] intArray18 = new int[] { (-1), 100 };
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 1);
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray20, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray28, false);
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) ' ');
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray8, (int) '#', (int) (short) 10, 0, intArray28, true);
        int int38 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) (short) 1);
        java.lang.Class<?> wildcardClass39 = intArray8.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test5483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5483");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int int24 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) (short) 1);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) (byte) -1);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) 'a');
        int int32 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray28, (int) (short) 0, 1, (int) (byte) 0);
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) '#');
        // The following exception was thrown during execution in test generation
        try {
            int int38 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray28, 1, 4, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
    }

    @Test
    public void test5484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5484");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 0);
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 1);
        int int24 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (int) ' ', 10, 0);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (short) 10);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) '4');
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray36, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray44, false);
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) ' ');
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 0);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        int[] intArray64 = new int[] { (-1), 100 };
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray58, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray66, false);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) 'a');
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) ' ');
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (-1));
        int int76 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray74, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray50, (int) ' ', (int) 'a', 1, intArray74, false);
        int int80 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray50, (int) '#');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray26, (-1), 1, 0, intArray50, true);
        int int84 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray50, 2);
        int int86 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray50, (int) (short) 10);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2 + "'", int80 == 2);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 2 + "'", int84 == 2);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 2 + "'", int86 == 2);
    }

    @Test
    public void test5485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5485");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        int[] intArray40 = new int[] { (-1), 100 };
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray34, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray42, false);
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) ' ');
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 0);
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        int int54 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray48, (int) ' ', 10, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray24, (int) (short) 10, (int) (short) 0, (int) (short) 1, intArray48, true);
        int[] intArray62 = new int[] { (-1), 100 };
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, (int) (byte) 1);
        int[] intArray70 = new int[] { (-1), 100 };
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray64, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray72, false);
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (int) ' ');
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (int) '4');
        int int80 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray78, (int) (byte) -1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray48, 100, (int) (short) 0, (int) (byte) 1, intArray78, false);
        int int84 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray78, (-1));
        int[] intArray88 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray78, (int) (short) 0, (int) (short) 10, 2, intArray88, false);
        int[] intArray92 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray78, (int) 'a');
        int[] intArray96 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray78, 0, (int) (short) 0, (int) ' ', intArray96, true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2 + "'", int80 == 2);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 2 + "'", int84 == 2);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1]");
    }

    @Test
    public void test5486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5486");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int int6 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray2, (int) (byte) 100);
        int int8 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray2, 0);
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (short) 100);
        int[] intArray16 = new int[] { ' ', (byte) -1 };
        int[] intArray22 = new int[] { (-1), 100 };
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, (int) (byte) 1);
        int[] intArray30 = new int[] { (-1), 100 };
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray30, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray24, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray32, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray16, (-1), (int) ' ', (int) (byte) 10, intArray32, false);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, 100);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 100);
        int int44 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray40, (int) (short) 10, (-1), (int) (short) 1);
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, 100);
        int int48 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray46, (int) (short) 10);
        int int50 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray46, 0);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) (short) 10);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) '#');
        int[] intArray68 = new int[] { (-1), 100 };
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) (byte) 1);
        int[] intArray76 = new int[] { (-1), 100 };
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray76, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray70, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray78, false);
        int int84 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray70, (int) ' ', (int) (short) -1, (int) (short) 1);
        int int86 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray70, (int) '#');
        int[] intArray88 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray62, (int) ' ', (int) (short) 100, 0, intArray70, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray46, (int) (byte) 0, 4, 0, intArray62, true);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray2, 0, (int) (short) 0, (int) (byte) -1, intArray46, false);
        // The following exception was thrown during execution in test generation
        try {
            int int98 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray46, (-1), 3, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[1, 1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2 + "'", int44 == 2);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 2 + "'", int84 == 2);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 2 + "'", int86 == 2);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1]");
    }

    @Test
    public void test5487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5487");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 1, (int) (byte) 1, (int) (short) -1, intArray32, false);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 10);
        int int40 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, (int) ' ');
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, 0);
        int int44 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, (-1));
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, 1);
        int int48 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, (int) '#');
        int int50 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, 10);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2 + "'", int40 == 2);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2 + "'", int44 == 2);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
    }

    @Test
    public void test5488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5488");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) ' ');
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 10);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray2, (int) 'a');
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        int[] intArray24 = new int[] { (-1), 100 };
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray26, false);
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) 'a');
        int[] intArray36 = new int[] { ' ', (byte) -1 };
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        int[] intArray50 = new int[] { (-1), 100 };
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray44, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray52, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (-1), (int) ' ', (int) (byte) 10, intArray52, false);
        int[] intArray62 = new int[] { (-1), 100 };
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, (int) (byte) 1);
        int[] intArray70 = new int[] { (-1), 100 };
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray64, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray72, false);
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray52, (int) 'a', 100, (int) (byte) 1, intArray72, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray26, (int) (short) 100, (int) 'a', (int) (short) 0, intArray52, true);
        int[] intArray82 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (-1));
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray2, 4, (int) (byte) -1, 0, intArray26, true);
        int int86 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray26, (int) (short) 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 2 + "'", int86 == 2);
    }

    @Test
    public void test5489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5489");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray19 = new int[] { '#' };
        int int21 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (short) -1, 1, 2, intArray19, true);
        int[] intArray25 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 10);
        int int29 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray25, 1, (int) (short) 1, (int) (byte) -1);
        int[] intArray31 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray25, (int) (short) 1);
        int int33 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray25, 10);
        int[] intArray39 = new int[] { (-1), 100 };
        int[] intArray41 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray39, (int) (byte) 1);
        int[] intArray47 = new int[] { (-1), 100 };
        int[] intArray49 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray47, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray41, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray49, false);
        int[] intArray56 = new int[] { '#' };
        int int58 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray56, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray41, (int) (short) -1, 1, 2, intArray56, true);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, 10);
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, 100);
        int int68 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray56, (-1), 0, (int) (short) -1);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) -1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray25, 1, 2, (int) (short) 0, intArray70, false);
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray25, (int) ' ');
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray25, (int) 'a');
        int[] intArray80 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray25, 2, (int) '4', 0, intArray80, true);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[35]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
    }

    @Test
    public void test5490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5490");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int int8 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, 0);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, 2);
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (-1));
        int int14 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, (int) (byte) 100);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (int) (byte) -1);
        int[] intArray22 = new int[] { (-1), 100 };
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, (int) (byte) 1);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (short) 10);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, 10);
        int[] intArray32 = null;
        int[] intArray38 = new int[] { (-1), 100 };
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 1);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray40, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray48, false);
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) ' ');
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) (byte) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, 10, (int) (short) 1, (int) (short) 0, intArray54, false);
        int int60 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray54, 0, (int) '4', (int) (short) 10);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (-1));
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, (-1), (int) (short) -1, (int) (byte) 0, intArray54, true);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray6, (int) (byte) 1, (int) '4', 100, intArray26, true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[0, -1]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[0, 1]");
    }

    @Test
    public void test5491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5491");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 100);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray36, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray44, false);
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) ' ');
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 0);
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (int) (byte) 100, (int) '#', (int) (short) 0, intArray52, true);
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, 4);
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) (short) 100);
        int int60 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray58, (int) (short) -1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2 + "'", int60 == 2);
    }

    @Test
    public void test5492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5492");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray22 = new int[] { ' ', (byte) -1 };
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray22, (-1), (int) ' ', (int) (byte) 10, intArray38, false);
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray50, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray58, false);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray38, (int) 'a', 100, (int) (byte) 1, intArray58, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray12, (int) (short) 100, (int) 'a', (int) (short) 0, intArray38, true);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (-1));
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) (short) 100);
        int int74 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray12, (int) (short) 100, (int) 'a', (int) (short) -1);
        int int78 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray12, 100, 1, (int) (byte) 1);
        int int80 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray12, (int) '#');
        int int82 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray12, 1);
        int[] intArray84 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) (byte) 1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 2 + "'", int78 == 2);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2 + "'", int80 == 2);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 2 + "'", int82 == 2);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1]");
    }

    @Test
    public void test5493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5493");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int int8 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, 0);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, 4);
        int int14 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray6, (int) (short) 0, (int) (short) 10, (int) (short) 1);
        int int18 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray6, (int) (short) 100, (int) ' ', 4);
        int[] intArray23 = new int[] { 10 };
        int[] intArray25 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray23, (int) '4');
        int[] intArray27 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray23, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray6, (int) ' ', (int) 'a', (int) '#', intArray27, true);
        int[] intArray31 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (int) (byte) 1);
        int[] intArray37 = new int[] { (-1), 100 };
        int[] intArray39 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray37, (int) (byte) 1);
        int[] intArray41 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray37, (int) ' ');
        int int45 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray41, (int) (short) 1, (-1), (int) (byte) 0);
        int[] intArray49 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray41, 2, (int) '4', (int) (short) 0, intArray49, true);
        int int55 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray41, (int) (short) -1, (int) ' ', (int) (byte) 1);
        int[] intArray61 = new int[] { (-1), 100 };
        int[] intArray63 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray61, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray41, 0, (int) 'a', 2, intArray61, false);
        int int67 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray41, (int) (byte) 1);
        int int71 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray41, (int) (short) -1, (int) (byte) 10, 1);
        int[] intArray73 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray41, (int) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray6, (int) ' ', 2, (int) (short) 100, intArray73, true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 51 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[10]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 2 + "'", int67 == 2);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[0, 1]");
    }

    @Test
    public void test5494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5494");
        int[] intArray2 = new int[] { 1, 'a' };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) ' ');
        int int16 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray12, (int) (short) 1, (-1), (int) (byte) 0);
        int[] intArray20 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray12, 2, (int) '4', (int) (short) 0, intArray20, true);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray12, (int) (short) -1, (int) ' ', (int) (byte) 1);
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray12, 0, (int) 'a', 2, intArray32, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray2, (int) '4', 10, 1, intArray32, true);
        int[] intArray44 = new int[] { (-1), 100 };
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) (byte) 1);
        int[] intArray52 = new int[] { (-1), 100 };
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray46, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray54, false);
        int int60 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray46, (int) ' ', (int) (short) -1, (int) (short) 1);
        int int62 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray46, (int) '#');
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray46, (int) (short) -1, 100, 10);
        int int70 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray46, 4, (int) ' ', (int) (byte) 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, (int) (short) 100, (int) (byte) 10, (int) (byte) -1, intArray46, true);
        int int76 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray32, (int) (short) 1, (int) (short) 0, (int) (short) 0);
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, 100);
        int int80 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray78, (int) '#');
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[1, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2 + "'", int60 == 2);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2 + "'", int62 == 2);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[1, 1]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2 + "'", int80 == 2);
    }

    @Test
    public void test5495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5495");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 1);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (short) 1);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) 'a');
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (-1));
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (short) 10);
        int int34 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray28, (int) (byte) -1);
        int int36 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray28, (int) (short) 0);
        java.lang.Class<?> wildcardClass37 = intArray28.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test5496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5496");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 1);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (short) 1);
        int int28 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) 'a');
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, 0);
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) ' ');
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (short) 1);
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 10);
        int int40 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray34, (int) (short) 1, 100, (int) (byte) -1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
    }

    @Test
    public void test5497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5497");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 1, (int) (byte) 1, (int) (short) -1, intArray32, false);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 10);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 1);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, (int) (byte) 10, (int) (short) 1, 1, intArray46, false);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        int[] intArray64 = new int[] { (-1), 100 };
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray58, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray66, false);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) 'a');
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) ' ');
        int int76 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray72, (int) (byte) -1, 0, (int) (short) 0);
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (-1));
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray32, (int) '4', 1, (int) (short) 0, intArray78, false);
        int int82 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray32, 1);
        int[] intArray84 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) 'a');
        int int86 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray84, 3);
        int[] intArray88 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray84, (int) ' ');
        int[] intArray90 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray84, 0);
        java.lang.Class<?> wildcardClass91 = intArray84.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 2 + "'", int86 == 2);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test5498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5498");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, 10);
        int[] intArray12 = null;
        int[] intArray18 = new int[] { (-1), 100 };
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 1);
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray20, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray28, false);
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) ' ');
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray12, 10, (int) (short) 1, (int) (short) 0, intArray34, false);
        int int40 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray34, 0, (int) '4', (int) (short) 10);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (-1));
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray6, (-1), (int) (short) -1, (int) (byte) 0, intArray34, true);
        int int46 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray34, (int) (short) 100);
        java.lang.Class<?> wildcardClass47 = intArray34.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[0, -1]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertNotNull(wildcardClass47);
    }

    @Test
    public void test5499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5499");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray19 = new int[] { '#' };
        int int21 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (short) -1, 1, 2, intArray19, true);
        int[] intArray25 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) '#');
        // The following exception was thrown during execution in test generation
        try {
            int int29 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray25, 4, 2, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1]");
    }

    @Test
    public void test5500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5500");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 10);
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (short) 100);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) ' ');
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, 10);
        int int36 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray28, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray22, 0, (int) (byte) 0, (int) (byte) 0, intArray28, true);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
    }
}


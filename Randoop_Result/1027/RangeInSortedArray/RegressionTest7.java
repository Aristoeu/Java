package RangeInSortedArray;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest7 {

    public static boolean debug = false;

    @Test
    public void test3501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3501");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        int[] intArray40 = new int[] { (-1), 100 };
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray34, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray42, false);
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) ' ');
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 0);
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        int int54 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray48, (int) ' ', 10, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray24, (int) (short) 10, (int) (short) 0, (int) (short) 1, intArray48, true);
        int[] intArray62 = new int[] { (-1), 100 };
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, (int) (byte) 1);
        int[] intArray70 = new int[] { (-1), 100 };
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray64, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray72, false);
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (int) ' ');
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (int) '4');
        int int80 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray78, (int) (byte) -1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray48, 100, (int) (short) 0, (int) (byte) 1, intArray78, false);
        int[] intArray86 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) 100, (int) (short) 0, (int) (byte) 0, intArray86, true);
        java.lang.Class<?> wildcardClass89 = intArray48.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2 + "'", int80 == 2);
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test3502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3502");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) ' ');
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 10);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray2, (int) 'a');
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        int[] intArray24 = new int[] { (-1), 100 };
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray26, false);
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) 'a');
        int[] intArray36 = new int[] { ' ', (byte) -1 };
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        int[] intArray50 = new int[] { (-1), 100 };
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray44, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray52, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (-1), (int) ' ', (int) (byte) 10, intArray52, false);
        int[] intArray62 = new int[] { (-1), 100 };
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, (int) (byte) 1);
        int[] intArray70 = new int[] { (-1), 100 };
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray64, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray72, false);
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray52, (int) 'a', 100, (int) (byte) 1, intArray72, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray26, (int) (short) 100, (int) 'a', (int) (short) 0, intArray52, true);
        int[] intArray82 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (-1));
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray2, 4, (int) (byte) -1, 0, intArray26, true);
        int[] intArray86 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (short) -1);
        int int88 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray26, 1);
        int int92 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray26, 0, (int) (byte) 100, (int) (byte) 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 2 + "'", int88 == 2);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
    }

    @Test
    public void test3503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3503");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) ' ');
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (short) 100);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray2, 1);
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 1);
        int[] intArray14 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) '4');
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray14, 2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[1, 1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
    }

    @Test
    public void test3504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3504");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 0);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (byte) 0);
        int int28 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, 0);
        int int32 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray24, 3, 100, (int) (byte) -1);
        int[] intArray36 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray24, 100, (-1), 100, intArray36, true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 49 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
    }

    @Test
    public void test3505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3505");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 100);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 1);
        int int32 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray2, (int) (byte) 1, 0, (int) (byte) 0);
        int int36 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray2, (int) (byte) 0, (int) '4', (int) (byte) 1);
        int int38 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray2, (int) ' ');
        int[] intArray44 = new int[] { (-1), 100 };
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) (byte) 1);
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (short) 10);
        int int50 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray48, 0);
        int int52 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray48, 4);
        int int56 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray48, (int) (short) 0, (int) (short) 10, (int) (short) 1);
        int int60 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray48, (int) (short) 100, (int) ' ', 4);
        int[] intArray65 = new int[] { 10 };
        int[] intArray67 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray65, (int) '4');
        int[] intArray69 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray65, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) ' ', (int) 'a', (int) '#', intArray69, true);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (int) (byte) 100, (int) (short) 10, (int) (byte) 1, intArray69, false);
        int int75 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray2, (int) (short) 1);
        int int77 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray2, (-1));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[10]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
    }

    @Test
    public void test3506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3506");
        int[] intArray0 = null;
        int[] intArray6 = new int[] { ' ', (byte) -1 };
        int[] intArray12 = new int[] { (-1), 100 };
        int[] intArray14 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) (byte) 1);
        int[] intArray20 = new int[] { (-1), 100 };
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray14, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray22, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray6, (-1), (int) ' ', (int) (byte) 10, intArray22, false);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, 100);
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) '4');
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray30, 1, (int) (byte) 1, (int) (short) -1, intArray36, false);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (short) 10);
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (short) 1);
        int[] intArray50 = new int[] { (-1), 100 };
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (int) (byte) 10, (int) (short) 1, 1, intArray50, false);
        int[] intArray60 = new int[] { (-1), 100 };
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) (byte) 1);
        int[] intArray68 = new int[] { (-1), 100 };
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray62, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray70, false);
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) 'a');
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray74, (int) ' ');
        int int80 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray76, (int) (byte) -1, 0, (int) (short) 0);
        int[] intArray82 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray76, (-1));
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray36, (int) '4', 1, (int) (short) 0, intArray82, false);
        int[] intArray86 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (short) 100);
        int[] intArray88 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) '#');
        int int92 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray36, (int) '#', (int) (short) -1, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray0, (-1), (int) 'a', 10, intArray36, false);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[1, 1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 1 + "'", int92 == 1);
    }

    @Test
    public void test3507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3507");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 1);
        int[] intArray30 = new int[] { ' ', (byte) -1 };
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        int[] intArray44 = new int[] { (-1), 100 };
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray38, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray46, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray30, (-1), (int) ' ', (int) (byte) 10, intArray46, false);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        int[] intArray64 = new int[] { (-1), 100 };
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray58, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray66, false);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray46, (int) 'a', 100, (int) (byte) 1, intArray66, false);
        int int74 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray66, (int) '4');
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) (byte) 10, (int) '#', 0, intArray66, false);
        int int82 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (int) (byte) 100, (int) (short) 10, (int) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            int int86 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (int) (byte) 0, (-1), (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2 + "'", int74 == 2);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
    }

    @Test
    public void test3508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3508");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) ' ');
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (short) 100);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray2, (int) (byte) 10);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (short) 100);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (short) 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (int) (short) -1, (int) (byte) -1, (int) (byte) 0, intArray16, true);
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        int[] intArray40 = new int[] { (-1), 100 };
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray34, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray42, false);
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) 'a');
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) ' ');
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 10);
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (int) (byte) 10, 1, (int) (short) 1, intArray52, false);
        int[] intArray60 = new int[] { (-1), 100 };
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) (byte) 1);
        int[] intArray68 = new int[] { (-1), 100 };
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray62, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray70, false);
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) 'a');
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray74, (int) (short) 100);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray52, (-1), (int) '4', 4, intArray76, true);
        java.lang.Class<?> wildcardClass79 = intArray52.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[1, 1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[0, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1, 1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test3509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3509");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) '4');
        int int20 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) (byte) -1);
        int int22 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (-1));
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (-1), (int) '#', 4);
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (int) (short) 0, (int) '#', (int) (byte) 1);
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 0);
        int[] intArray38 = new int[] { ' ', (byte) -1 };
        int[] intArray44 = new int[] { (-1), 100 };
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) (byte) 1);
        int[] intArray52 = new int[] { (-1), 100 };
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray46, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray54, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray38, (-1), (int) ' ', (int) (byte) 10, intArray54, false);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, 100);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) '4');
        int[] intArray68 = new int[] { (-1), 100 };
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray62, 1, (int) (byte) 1, (int) (short) -1, intArray68, false);
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) (short) 10);
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) (short) 1);
        int[] intArray82 = new int[] { (-1), 100 };
        int[] intArray84 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray82, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray68, (int) (byte) 10, (int) (short) 1, 1, intArray82, false);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, 2, (int) (byte) 1, (int) '#', intArray68, true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 18 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1]");
    }

    @Test
    public void test3510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3510");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 10);
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 1);
        java.lang.Class<?> wildcardClass23 = intArray20.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test3511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3511");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { ' ', (byte) -1 };
        int[] intArray38 = new int[] { (-1), 100 };
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 1);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray40, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray48, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, (-1), (int) ' ', (int) (byte) 10, intArray48, false);
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, 100);
        int int56 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray32, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray24, 10, (int) 'a', (-1), intArray32, true);
        int int60 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) '#');
        int int62 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) ' ');
        int int64 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (byte) 0);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (byte) -1);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (-1));
        // The following exception was thrown during execution in test generation
        try {
            int int72 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray24, (int) (short) -1, (-1), 2);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2 + "'", int60 == 2);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2 + "'", int62 == 2);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2 + "'", int64 == 2);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[0, 1]");
    }

    @Test
    public void test3512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3512");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int int18 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray4, (int) ' ', (int) (short) -1, (int) (short) 1);
        int int20 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray4, (int) '#');
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, 10);
        int int24 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray4, 2);
        int[] intArray30 = new int[] { ' ', (byte) -1 };
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        int[] intArray44 = new int[] { (-1), 100 };
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray38, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray46, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray30, (-1), (int) ' ', (int) (byte) 10, intArray46, false);
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, 1);
        int int54 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray52, (int) (short) 1);
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) 'a');
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, 10);
        int[] intArray63 = new int[] { '#' };
        int int65 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray63, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray56, 4, (int) '#', 1, intArray63, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, (int) (short) 100, (int) '#', 0, intArray56, false);
        int[] intArray71 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 100);
        int int73 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray56, 4);
        int int75 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray56, 0);
        int int77 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray56, 4);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2 + "'", int54 == 2);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[35]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 2 + "'", int73 == 2);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 2 + "'", int75 == 2);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 2 + "'", int77 == 2);
    }

    @Test
    public void test3513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3513");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 1, (int) (byte) 1, (int) (short) -1, intArray32, false);
        int int40 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray32, 10, 100, (int) '#');
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 0);
        java.lang.Class<?> wildcardClass43 = intArray32.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test3514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3514");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray2, 2);
        java.lang.Class<?> wildcardClass27 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test3515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3515");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) 'a', 100, (int) (byte) 1, intArray38, false);
        int int46 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, (int) '4');
        int int50 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray38, (int) ' ', (int) (byte) 1, 0);
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, 100);
        int int54 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray52, 2);
        int int56 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray52, (int) (short) -1);
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) '#');
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) (byte) 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2 + "'", int54 == 2);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2 + "'", int56 == 2);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
    }

    @Test
    public void test3516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3516");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 1, (int) (byte) 1, (int) (short) -1, intArray32, false);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 10);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) 'a');
        int[] intArray46 = new int[] { ' ', (byte) -1 };
        int[] intArray52 = new int[] { (-1), 100 };
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) (byte) 1);
        int[] intArray60 = new int[] { (-1), 100 };
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray54, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray62, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray46, (-1), (int) ' ', (int) (byte) 10, intArray62, false);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, 1);
        int int70 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray68, (int) (short) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray40, 0, (int) ' ', (int) (short) -1, intArray68, false);
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) (short) 10);
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) '4');
        int[] intArray82 = new int[] { (-1), 100 };
        int[] intArray84 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray82, (int) (byte) 1);
        int[] intArray86 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray82, (int) ' ');
        int[] intArray88 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray82, (int) (short) 100);
        int int90 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray82, 1);
        int[] intArray92 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray82, 1);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray76, (int) (short) 1, (int) (short) 1, (int) (short) 10, intArray82, false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 5 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2 + "'", int70 == 2);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[1, 1]");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 1 + "'", int90 == 1);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1]");
    }

    @Test
    public void test3517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3517");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 0);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 10);
        int int28 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray26, 0);
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray26, (int) (byte) 100);
        int int34 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray26, (int) ' ', (int) '#', (int) (byte) 10);
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, 2);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) ' ');
        int[] intArray42 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray36, (int) '#', (int) (short) 100, (int) (short) 10, intArray42, true);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
    }

    @Test
    public void test3518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3518");
        int[] intArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int2 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray0, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test3519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3519");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) 'a', 100, (int) (byte) 1, intArray38, false);
        int[] intArray50 = new int[] { ' ', (byte) -1 };
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        int[] intArray64 = new int[] { (-1), 100 };
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray58, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray66, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray50, (-1), (int) ' ', (int) (byte) 10, intArray66, false);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, 0);
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (int) ' ');
        int int78 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray74, 0, 2, (int) (short) -1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray38, (int) (byte) 10, (int) ' ', (int) (short) -1, intArray74, false);
        int int82 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, (int) (byte) 0);
        int int84 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, (int) ' ');
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 2 + "'", int82 == 2);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 2 + "'", int84 == 2);
    }

    @Test
    public void test3520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3520");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        // The following exception was thrown during execution in test generation
        try {
            int int26 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, 3, 3, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
    }

    @Test
    public void test3521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3521");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 0);
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) '#');
        int int22 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray16, (int) ' ');
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, 4);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (short) 100);
        int int28 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray26, 0);
        java.lang.Class<?> wildcardClass29 = intArray26.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test3522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3522");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, 10);
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (int) (short) 1);
        int int12 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray10, 10);
        int[] intArray14 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (short) 100);
        int int18 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray14, 0, (int) 'a', 4);
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray14, (int) (byte) -1);
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray14, (int) 'a');
        int[] intArray28 = new int[] { ' ', (byte) -1 };
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray36, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray44, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray28, (-1), (int) ' ', (int) (byte) 10, intArray44, false);
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, 1);
        int int52 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray50, (int) (short) 1);
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) 'a');
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (-1));
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (short) 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray14, (-1), 0, (int) (short) -1, intArray58, true);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray14, (int) (byte) -1);
        java.lang.Class<?> wildcardClass63 = intArray14.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[0, 1]");
        org.junit.Assert.assertNotNull(wildcardClass63);
    }

    @Test
    public void test3523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3523");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, 10);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) 'a');
        int int12 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, 0);
        int int14 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) (byte) 100);
        int int16 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, 4);
        int int18 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) (short) -1);
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, 1);
        int[] intArray26 = new int[] { ' ', (byte) -1 };
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        int[] intArray40 = new int[] { (-1), 100 };
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray34, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray42, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, (-1), (int) ' ', (int) (byte) 10, intArray42, false);
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, 1);
        int int50 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray48, (int) (short) 1);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        int[] intArray64 = new int[] { (-1), 100 };
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray58, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray66, false);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) 'a');
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) (short) 100);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) '#', (int) 'a', (int) '#', intArray72, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray8, 0, 0, (-1), intArray48, false);
        int[] intArray82 = new int[] { (-1), 100 };
        int[] intArray84 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray82, (int) (byte) 1);
        int[] intArray86 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray84, (int) (short) 10);
        int int88 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray84, 2);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray8, (-1), (int) (byte) 100, 4, intArray84, true);
        int int92 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) (short) 10);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 2 + "'", int88 == 2);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 2 + "'", int92 == 2);
    }

    @Test
    public void test3524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3524");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 1);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (short) 1);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) 'a');
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, 10);
        int int32 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray28, (int) '4');
        java.lang.Class<?> wildcardClass33 = intArray28.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test3525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3525");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int int8 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, 0);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, 2);
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, 1);
        int[] intArray18 = new int[] { ' ', (byte) -1 };
        int[] intArray24 = new int[] { (-1), 100 };
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 1);
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray26, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray34, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (-1), (int) ' ', (int) (byte) 10, intArray34, false);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 100);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) '4');
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray42, 1, (int) (byte) 1, (int) (short) -1, intArray48, false);
        int[] intArray58 = new int[] { (-1), 100 };
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) (byte) 1);
        int[] intArray66 = new int[] { (-1), 100 };
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray60, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray68, false);
        int[] intArray75 = new int[] { '#' };
        int int77 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray75, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray60, (int) (short) -1, 1, 2, intArray75, true);
        int[] intArray81 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray75, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray48, (int) (short) 100, 0, 1, intArray81, false);
        int[] intArray85 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 100);
        int int89 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray48, (int) '#', (int) (short) 100, (-1));
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray6, (int) (byte) -1, (int) '4', (int) (byte) 1, intArray48, true);
        int int95 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray6, (int) '#', 2, 0);
        int[] intArray97 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (int) (short) 100);
        java.lang.Class<?> wildcardClass98 = intArray6.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[35]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 1]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[1, 1]");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 0 + "'", int95 == 0);
        org.junit.Assert.assertNotNull(intArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray97), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test3526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3526");
        int[] intArray0 = null;
        int[] intArray6 = new int[] { ' ', (byte) -1 };
        int[] intArray12 = new int[] { (-1), 100 };
        int[] intArray14 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) (byte) 1);
        int[] intArray20 = new int[] { (-1), 100 };
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray14, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray22, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray6, (-1), (int) ' ', (int) (byte) 10, intArray22, false);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, 1);
        int[] intArray34 = new int[] { ' ', (byte) -1 };
        int[] intArray40 = new int[] { (-1), 100 };
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) (byte) 1);
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray42, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray50, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray34, (-1), (int) ' ', (int) (byte) 10, intArray50, false);
        int[] intArray60 = new int[] { (-1), 100 };
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) (byte) 1);
        int[] intArray68 = new int[] { (-1), 100 };
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray62, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray70, false);
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray50, (int) 'a', 100, (int) (byte) 1, intArray70, false);
        int int78 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray70, (int) '4');
        int[] intArray80 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray22, (int) (byte) 10, (int) '#', 0, intArray70, false);
        int int84 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray22, (int) (byte) 1);
        int int88 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray22, 4, (int) (short) 10, (int) (byte) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray0, 10, 10, 3, intArray22, false);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray92 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray0, 4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 2 + "'", int78 == 2);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 2 + "'", int84 == 2);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
    }

    @Test
    public void test3527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3527");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 1, (int) (byte) 1, (int) (short) -1, intArray32, false);
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        int[] intArray50 = new int[] { (-1), 100 };
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray44, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray52, false);
        int[] intArray59 = new int[] { '#' };
        int int61 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray59, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray44, (int) (short) -1, 1, 2, intArray59, true);
        int[] intArray65 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray59, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, (int) (short) 100, 0, 1, intArray65, false);
        int[] intArray69 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 100);
        int int71 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray32, 1);
        int[] intArray73 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) '#');
        int int77 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray73, (int) (byte) 100, (int) (short) 100, (int) ' ');
        int int81 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray73, (int) (short) 0, (int) 'a', 2);
        int int85 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray73, (int) (byte) 1, (int) (short) 0, (int) (short) 0);
        int int87 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray73, (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            int int91 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray73, (-1), 0, 3);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[35]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[1, 1]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 2 + "'", int87 == 2);
    }

    @Test
    public void test3528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3528");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int int8 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, 0);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, 4);
        int[] intArray16 = new int[] { ' ', (byte) -1 };
        int[] intArray22 = new int[] { (-1), 100 };
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, (int) (byte) 1);
        int[] intArray30 = new int[] { (-1), 100 };
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray30, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray24, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray32, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray16, (-1), (int) ' ', (int) (byte) 10, intArray32, false);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, 100);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 100);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, 1);
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) '4');
        int[] intArray50 = new int[] { ' ', (byte) -1 };
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        int[] intArray64 = new int[] { (-1), 100 };
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray58, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray66, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray50, (-1), (int) ' ', (int) (byte) 10, intArray66, false);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray16, (-1), (int) (byte) 1, (int) (byte) 0, intArray66, true);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray6, (int) '#', (int) (short) -1, 0, intArray16, false);
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 100);
        int[] intArray80 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, 4);
        int[] intArray82 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray80, (int) (byte) 100);
        int int84 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray80, (int) (short) 10);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 2 + "'", int84 == 2);
    }

    @Test
    public void test3529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3529");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 100);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 1);
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 0);
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray30, (int) '#');
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray30, (int) 'a');
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
    }

    @Test
    public void test3530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3530");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray19 = new int[] { '#' };
        int int21 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (short) -1, 1, 2, intArray19, true);
        int[] intArray25 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 10);
        int[] intArray27 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 0);
        int[] intArray29 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, (int) '#');
        int[] intArray35 = new int[] { (-1), 100 };
        int[] intArray37 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray35, (int) (byte) 1);
        int[] intArray43 = new int[] { (-1), 100 };
        int[] intArray45 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray43, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray37, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray45, false);
        int[] intArray49 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray45, (int) ' ');
        int[] intArray51 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray49, (int) (byte) 0);
        int[] intArray53 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray49, (int) '#');
        int[] intArray59 = new int[] { ' ', (byte) -1 };
        int[] intArray65 = new int[] { (-1), 100 };
        int[] intArray67 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray65, (int) (byte) 1);
        int[] intArray73 = new int[] { (-1), 100 };
        int[] intArray75 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray73, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray67, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray75, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray59, (-1), (int) ' ', (int) (byte) 10, intArray75, false);
        int[] intArray81 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray59, 100);
        int[] intArray83 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray59, (int) (byte) 100);
        int int87 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray83, (int) (short) 10, (-1), (int) (short) 1);
        int[] intArray89 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray83, 100);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray49, 1, (int) (short) -1, (int) (short) 1, intArray83, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray19, 0, 0, (int) (short) 1, intArray83, false);
        // The following exception was thrown during execution in test generation
        try {
            int int97 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray19, (int) (byte) 0, 4, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[0, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 2 + "'", int87 == 2);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, -1]");
    }

    @Test
    public void test3531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3531");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) ' ');
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray6, (int) (short) 1, (-1), (int) (byte) 0);
        int int14 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray6, 10, (int) 'a', (int) (short) 10);
        int int16 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, (int) (short) -1);
        int[] intArray22 = new int[] { (-1), 100 };
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, (int) (byte) 1);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, (int) ' ');
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, (int) (short) 100);
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray28, 100);
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) '#');
        int int34 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray32, 4);
        int int36 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray32, 4);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray6, (int) (short) 100, (int) (short) 100, 4, intArray32, false);
        int int42 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray32, 1, 3, (int) (byte) 1);
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 1);
        int[] intArray50 = new int[] { (-1), 100 };
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) (byte) 1);
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) ' ');
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) (short) 100);
        int int58 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray56, 100);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, (int) (short) 10, (int) (byte) -1, (int) 'a', intArray56, false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 48 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1, 1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[1, 1]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2 + "'", int58 == 2);
    }

    @Test
    public void test3532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3532");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, 10);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) 'a');
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (short) 100);
        int[] intArray14 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) -1);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray14, 1);
        java.lang.Class<?> wildcardClass17 = intArray16.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 1]");
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test3533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3533");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 1, (int) (byte) 1, (int) (short) -1, intArray32, false);
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        int[] intArray50 = new int[] { (-1), 100 };
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray44, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray52, false);
        int[] intArray59 = new int[] { '#' };
        int int61 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray59, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray44, (int) (short) -1, 1, 2, intArray59, true);
        int[] intArray65 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray59, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, (int) (short) 100, 0, 1, intArray65, false);
        int[] intArray69 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 100);
        int int71 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray32, 1);
        int[] intArray73 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) '#');
        int int77 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray73, (int) (byte) 100, (int) (short) 100, (int) ' ');
        int int81 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray73, (int) (short) 0, (int) 'a', 2);
        int int83 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray73, (int) '4');
        int[] intArray85 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray73, 4);
        int int89 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray73, 3, (int) (byte) -1, 1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[35]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[1, 1]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 2 + "'", int83 == 2);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 2 + "'", int89 == 2);
    }

    @Test
    public void test3534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3534");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { ' ', (byte) -1 };
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray36, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, (-1), (int) ' ', (int) (byte) 10, intArray36, false);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (int) 'a', 100, (int) (byte) 1, intArray56, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, 10, (int) (short) 0, (int) (short) -1, intArray36, true);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, 0);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, 10);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 100);
        int int74 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray70, (int) (byte) 0, (int) ' ', 0);
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) (short) 1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
    }

    @Test
    public void test3535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3535");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 1);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (short) 1);
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        int[] intArray40 = new int[] { (-1), 100 };
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray34, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray42, false);
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) 'a');
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (short) 100);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray24, (int) '#', (int) 'a', (int) '#', intArray48, false);
        int int52 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray48, (int) (short) 10);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
    }

    @Test
    public void test3536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3536");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int int18 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray12, (int) 'a', 0, 0);
        int int20 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray12, 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
    }

    @Test
    public void test3537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3537");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) 'a', 100, (int) (byte) 1, intArray38, false);
        int int46 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, (int) '4');
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) 'a');
        int int50 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray48, (int) (short) -1);
        int int52 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray48, (int) (byte) 100);
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 0);
        int int56 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray48, 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2 + "'", int56 == 2);
    }

    @Test
    public void test3538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3538");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int int8 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, 0);
        int int12 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray6, 10, (int) ' ', 10);
        int[] intArray17 = new int[] { '#' };
        int int19 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray17, (int) (short) 0);
        int[] intArray23 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray17, 100, 0, (int) (short) -1, intArray23, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray6, (int) (short) -1, (int) (short) 1, (-1), intArray17, true);
        int[] intArray29 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (int) (short) 1);
        int int31 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, 4);
        int int35 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray6, (-1), (int) ' ', 10);
        // The following exception was thrown during execution in test generation
        try {
            int int39 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray6, (-1), (int) (byte) 10, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[35]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
    }

    @Test
    public void test3539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3539");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 0);
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) '#');
        int int22 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray16, (int) ' ');
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) ' ');
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 0);
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) (byte) 1);
        int int50 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray44, (int) ' ', 10, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray16, (int) (short) 100, (int) (short) 0, (int) (byte) 1, intArray44, false);
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, 10);
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, 0);
        java.lang.Class<?> wildcardClass57 = intArray56.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test3540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3540");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int int18 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray16, 0);
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) 'a');
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, 1);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
    }

    @Test
    public void test3541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3541");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 1, (int) (byte) 1, (int) (short) -1, intArray32, false);
        int int38 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray32, 1);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) ' ');
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) 'a');
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) ' ');
        int[] intArray71 = new int[] { (short) 100, (short) 0, 100, (byte) -1, 10 };
        int int75 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray71, 1, (int) (byte) 100, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray62, 100, (int) '#', (int) (short) 10, intArray71, false);
        int int79 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray71, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray40, (int) (short) 10, (int) '4', (int) ' ', intArray71, false);
        int int85 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray40, (int) (byte) 100, (int) ' ', (int) (byte) 1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[100, 0, 100, -1, 10]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
    }

    @Test
    public void test3542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3542");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 1);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (short) 1);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) 'a');
        java.lang.Class<?> wildcardClass29 = intArray24.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test3543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3543");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray19 = new int[] { '#' };
        int int21 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (short) -1, 1, 2, intArray19, true);
        int[] intArray25 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 10);
        int[] intArray27 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 1);
        java.lang.Class<?> wildcardClass28 = intArray19.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test3544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3544");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray2, (int) (short) -1);
        int int28 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray2, 2);
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 4);
        int[] intArray36 = new int[] { ' ', (byte) -1 };
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        int[] intArray50 = new int[] { (-1), 100 };
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray44, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray52, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (-1), (int) ' ', (int) (byte) 10, intArray52, false);
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, 100);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 100);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, 1);
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) '4');
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, 0);
        int int70 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray66, (int) (short) 100, (int) (byte) 0, (int) (byte) 1);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) (short) -1);
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, 0);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray2, (int) (byte) 1, (int) (short) 0, 100, intArray66, true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2 + "'", int70 == 2);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
    }

    @Test
    public void test3545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3545");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 100);
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray26, (int) (short) 10, (-1), (int) (short) 1);
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, 100);
        int int36 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray32, (-1), (int) '4', (int) (byte) 1);
        int int38 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray32, 1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
    }

    @Test
    public void test3546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3546");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 0);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (byte) 0);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) 'a');
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray36, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray44, false);
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) ' ');
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 0);
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) '#');
        int[] intArray58 = new int[] { (-1), 100 };
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) (byte) 1);
        int[] intArray66 = new int[] { (-1), 100 };
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray60, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray68, false);
        int[] intArray75 = new int[] { '#' };
        int int77 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray75, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray60, (int) (short) -1, 1, 2, intArray75, true);
        int[] intArray81 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray75, 10);
        int[] intArray83 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray75, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray48, (int) (byte) 0, (int) (short) 10, (int) (byte) 1, intArray83, false);
        int[] intArray87 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray83, (int) (short) 100);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray28, (int) '#', (int) 'a', 2, intArray87, false);
        int int91 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray87, (int) (short) 0);
        int int93 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray87, (int) (short) 100);
        java.lang.Class<?> wildcardClass94 = intArray87.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[35]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 2 + "'", int91 == 2);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 2 + "'", int93 == 2);
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test3547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3547");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) ' ');
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (short) 100);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray2, 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        int[] intArray24 = new int[] { (-1), 100 };
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray26, false);
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) 'a');
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray30, (int) ' ');
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 10);
        int[] intArray38 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, (int) (byte) 0, (int) (short) 100, (int) (byte) -1, intArray38, false);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) 'a');
        int int44 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray32, 10);
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray2, (int) '4', 100, (int) (short) 100, intArray32, true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[1, 1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2 + "'", int44 == 2);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
    }

    @Test
    public void test3548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3548");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) '#');
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, 4);
        int[] intArray16 = new int[] { ' ', (byte) -1 };
        int[] intArray22 = new int[] { (-1), 100 };
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, (int) (byte) 1);
        int[] intArray30 = new int[] { (-1), 100 };
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray30, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray24, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray32, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray16, (-1), (int) ' ', (int) (byte) 10, intArray32, false);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, 1);
        int int40 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, (int) (short) 1);
        int int42 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, (int) 'a');
        int int44 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, 0);
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) ' ');
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (short) 1);
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (short) 100);
        int int52 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray50, (int) ' ');
        int int56 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray50, 100, 1, (int) (short) -1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray10, (int) (short) 0, 1, 0, intArray50, false);
        java.lang.Class<?> wildcardClass59 = intArray10.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2 + "'", int40 == 2);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2 + "'", int42 == 2);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2 + "'", int44 == 2);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test3549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3549");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, 10);
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (int) (short) 1);
        int int12 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray10, 10);
        int[] intArray18 = new int[] { ' ', (byte) -1 };
        int[] intArray24 = new int[] { (-1), 100 };
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 1);
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray26, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray34, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (-1), (int) ' ', (int) (byte) 10, intArray34, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray10, 0, (int) 'a', 4, intArray34, false);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, 2);
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray50, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray58, false);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) ' ');
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, (int) (byte) 0);
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) (byte) 1);
        int int70 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray64, (int) ' ', 10, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray34, 2, (int) (byte) 100, 4, intArray64, true);
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, 4);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
    }

    @Test
    public void test3550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3550");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray27 = new int[] { (short) 100, (short) 0, 100, (byte) -1, 10 };
        int int31 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray27, 1, (int) (byte) 100, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, 100, (int) '#', (int) (short) 10, intArray27, false);
        int[] intArray35 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (short) 1);
        int[] intArray41 = new int[] { ' ', (byte) -1 };
        int[] intArray47 = new int[] { (-1), 100 };
        int[] intArray49 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray47, (int) (byte) 1);
        int[] intArray55 = new int[] { (-1), 100 };
        int[] intArray57 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray55, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray49, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray57, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray41, (-1), (int) ' ', (int) (byte) 10, intArray57, false);
        int[] intArray63 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray41, 100);
        int[] intArray65 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray63, (int) '4');
        int[] intArray71 = new int[] { (-1), 100 };
        int[] intArray73 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray71, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray65, 1, (int) (byte) 1, (int) (short) -1, intArray71, false);
        int[] intArray77 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray71, (int) (short) 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray35, 1, (int) (short) 1, 0, intArray71, false);
        int[] intArray81 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray71, (-1));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[100, 0, 100, -1, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[0, 0]");
    }

    @Test
    public void test3551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3551");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray19 = new int[] { '#' };
        int int21 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (short) -1, 1, 2, intArray19, true);
        int[] intArray25 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 10);
        int int29 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray25, 1, (int) (short) 1, (int) (byte) -1);
        int[] intArray31 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray25, (int) (byte) 100);
        int[] intArray37 = new int[] { ' ', (byte) -1 };
        int[] intArray43 = new int[] { (-1), 100 };
        int[] intArray45 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray43, (int) (byte) 1);
        int[] intArray51 = new int[] { (-1), 100 };
        int[] intArray53 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray51, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray45, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray53, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray37, (-1), (int) ' ', (int) (byte) 10, intArray53, false);
        int[] intArray63 = new int[] { (-1), 100 };
        int[] intArray65 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray63, (int) (byte) 1);
        int[] intArray71 = new int[] { (-1), 100 };
        int[] intArray73 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray71, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray65, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray73, false);
        int[] intArray77 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray73, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray53, (int) 'a', 100, (int) (byte) 1, intArray73, false);
        int int81 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray73, (int) (short) 1);
        int int83 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray73, (int) (byte) 1);
        int int85 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray73, 4);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray25, 4, (int) (byte) 100, (int) '4', intArray73, false);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 2 + "'", int81 == 2);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 2 + "'", int83 == 2);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 2 + "'", int85 == 2);
    }

    @Test
    public void test3552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3552");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 0);
        int[] intArray24 = new int[] { (-1), 100 };
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 1);
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray26, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray34, false);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) 'a');
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) ' ');
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (-1));
        int int44 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray42, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) ' ', (int) 'a', 1, intArray42, false);
        int[] intArray52 = new int[] { (-1), 100 };
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) (byte) 1);
        int[] intArray60 = new int[] { (-1), 100 };
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray54, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray62, false);
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, (int) ' ');
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, (int) '4');
        int int72 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray68, 0, 10, (-1));
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray42, (int) (byte) 1, (int) (byte) 0, (-1), intArray68, false);
        int int76 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray42, (int) 'a');
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, 1);
        int[] intArray84 = new int[] { (-1), 100 };
        int[] intArray86 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray84, (int) (byte) 1);
        int[] intArray88 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray86, (int) (short) 10);
        int[] intArray90 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray88, (int) (byte) -1);
        int int92 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray90, (int) (short) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray78, (int) (short) 100, (int) (short) 100, (int) (byte) -1, intArray90, true);
        int[] intArray96 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray78, (int) '#');
        java.lang.Class<?> wildcardClass97 = intArray78.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2 + "'", int76 == 2);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[1, 1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 2 + "'", int92 == 2);
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test3553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3553");
        int[] intArray0 = null;
        int[] intArray5 = new int[] { 10 };
        int[] intArray7 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray5, (int) '4');
        int[] intArray12 = new int[] { '#' };
        int int14 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray12, (int) (short) 0);
        int int16 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray12, (int) (byte) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray7, 10, (int) (byte) 1, (int) (short) 0, intArray12, false);
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) (short) 0);
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) '#');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray0, (-1), (int) (byte) 100, (int) 'a', intArray12, true);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray12, (int) '4');
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[10]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[35]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
    }

    @Test
    public void test3554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3554");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { ' ', (byte) -1 };
        int[] intArray38 = new int[] { (-1), 100 };
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 1);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray40, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray48, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, (-1), (int) ' ', (int) (byte) 10, intArray48, false);
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, 100);
        int int56 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray32, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray24, 10, (int) 'a', (-1), intArray32, true);
        int int60 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) '#');
        int int62 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) ' ');
        int int64 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (byte) 0);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (byte) -1);
        int int70 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray24, 10, (int) (short) 100, (int) (byte) 10);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2 + "'", int60 == 2);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2 + "'", int62 == 2);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2 + "'", int64 == 2);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
    }

    @Test
    public void test3555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3555");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (short) 100);
        int int22 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (int) (byte) 100, (int) (short) 100, 1);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) '4');
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
    }

    @Test
    public void test3556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3556");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) '4');
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 2);
        int[] intArray26 = new int[] { ' ', (byte) -1 };
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        int[] intArray40 = new int[] { (-1), 100 };
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray34, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray42, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, (-1), (int) ' ', (int) (byte) 10, intArray42, false);
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, 1);
        int int50 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray48, (int) (short) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, (int) (byte) 10, (int) '#', (int) ' ', intArray48, false);
        int int54 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray48, (int) (byte) 10);
        int int56 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray48, (int) (byte) -1);
        int int60 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray48, 0, (int) (byte) 100, (int) 'a');
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, 1);
        int int64 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray48, (int) '4');
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2 + "'", int54 == 2);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2 + "'", int56 == 2);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2 + "'", int64 == 2);
    }

    @Test
    public void test3557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3557");
        int[] intArray1 = new int[] { 10 };
        int[] intArray3 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray1, (int) '4');
        int[] intArray5 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray1, (int) 'a');
        int int9 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray5, 1, 10, 0);
        int[] intArray15 = new int[] { ' ', (byte) -1 };
        int[] intArray21 = new int[] { (-1), 100 };
        int[] intArray23 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray21, (int) (byte) 1);
        int[] intArray29 = new int[] { (-1), 100 };
        int[] intArray31 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray29, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray23, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray31, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray15, (-1), (int) ' ', (int) (byte) 10, intArray31, false);
        int[] intArray37 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray15, 100);
        int[] intArray39 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray15, (int) (byte) 100);
        int[] intArray41 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray15, 1);
        int int43 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray15, 0);
        int[] intArray49 = new int[] { ' ', (byte) -1 };
        int[] intArray55 = new int[] { (-1), 100 };
        int[] intArray57 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray55, (int) (byte) 1);
        int[] intArray63 = new int[] { (-1), 100 };
        int[] intArray65 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray63, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray57, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray65, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray49, (-1), (int) ' ', (int) (byte) 10, intArray65, false);
        int[] intArray71 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray49, 100);
        int[] intArray73 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray49, (int) (byte) 100);
        int int77 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray73, (int) (short) 10, (-1), (int) (short) 1);
        int[] intArray79 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray73, 100);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray15, 0, 1, 0, intArray79, false);
        int[] intArray83 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray79, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray5, (int) (short) 0, 10, (int) (short) 1, intArray83, true);
        // The following exception was thrown during execution in test generation
        try {
            int int89 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray5, (int) (byte) 0, 1, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[10]");
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 2 + "'", int77 == 2);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, -1]");
    }

    @Test
    public void test3558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3558");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (int) (byte) -1);
        int[] intArray12 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray8, (-1), (int) (short) 1, (int) (byte) -1, intArray12, true);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) '#');
        int[] intArray22 = new int[] { (-1), 100 };
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, (int) (byte) 1);
        int[] intArray30 = new int[] { (-1), 100 };
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray30, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray24, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray32, false);
        int[] intArray40 = new int[] { ' ', (byte) -1 };
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray40, (-1), (int) ' ', (int) (byte) 10, intArray56, false);
        int[] intArray66 = new int[] { (-1), 100 };
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) (byte) 1);
        int[] intArray74 = new int[] { (-1), 100 };
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray74, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray68, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray76, false);
        int[] intArray80 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray76, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray56, (int) 'a', 100, (int) (byte) 1, intArray76, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray24, 10, (int) (short) 0, (int) (short) -1, intArray56, true);
        int int86 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray56, 0);
        int[] intArray88 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray16, (int) (byte) 100, (int) 'a', 2, intArray88, false);
        int int92 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray88, 0);
        int[] intArray94 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray88, (int) (short) 100);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 2 + "'", int86 == 2);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 2 + "'", int92 == 2);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, -1]");
    }

    @Test
    public void test3559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3559");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { ' ', (byte) -1 };
        int[] intArray38 = new int[] { (-1), 100 };
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 1);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray40, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray48, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, (-1), (int) ' ', (int) (byte) 10, intArray48, false);
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, 100);
        int int56 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray32, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray24, 10, (int) 'a', (-1), intArray32, true);
        int int60 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) '#');
        int int62 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) ' ');
        int int64 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (byte) 0);
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, 2);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) (short) -1);
        int int72 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray68, (int) (short) 10, (int) '#', 1);
        java.lang.Class<?> wildcardClass73 = intArray68.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2 + "'", int60 == 2);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2 + "'", int62 == 2);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2 + "'", int64 == 2);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test3560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3560");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray19 = new int[] { '#' };
        int int21 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (short) -1, 1, 2, intArray19, true);
        int[] intArray25 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 10);
        int int29 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray25, 1, (int) (short) 1, (int) (byte) -1);
        int[] intArray31 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray25, (int) (short) 1);
        int int33 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray25, 10);
        int int37 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray25, (int) (byte) 0, 0, 1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2 + "'", int37 == 2);
    }

    @Test
    public void test3561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3561");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int int24 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) (short) 1);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) '#');
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 2);
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 4);
        int int32 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray30, 100);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
    }

    @Test
    public void test3562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3562");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 1);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (short) 1);
        int int28 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) 'a');
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, 0);
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) ' ');
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (short) 1);
        int int36 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray34, (int) '4');
        int int40 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray34, (int) (short) 10, (int) (byte) 1, (int) (short) 0);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, 10);
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray50, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray58, false);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) 'a');
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, (int) ' ');
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) (byte) 10);
        int[] intArray70 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray64, (int) (byte) 0, (int) (short) 100, (int) (byte) -1, intArray70, false);
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) 'a');
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray74, (int) '#');
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray74, 100);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray42, (int) (short) 0, (int) (byte) -1, 1, intArray78, true);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1]");
    }

    @Test
    public void test3563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3563");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 100);
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray26, (int) (short) 10, (-1), (int) (short) 1);
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, 100);
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (short) 0);
        java.lang.Class<?> wildcardClass35 = intArray26.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test3564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3564");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 0);
        int[] intArray24 = new int[] { (-1), 100 };
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 1);
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray26, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray34, false);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) 'a');
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) ' ');
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (-1));
        int int44 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray42, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) ' ', (int) 'a', 1, intArray42, false);
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) 'a');
        int int50 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray48, (int) (byte) 100);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) (short) 10);
        int int62 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray60, 0);
        int int64 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray60, 4);
        int int68 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray60, (int) (short) 0, (int) (short) 10, (int) (short) 1);
        int int72 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray60, (int) (short) 100, (int) ' ', 4);
        int[] intArray77 = new int[] { 10 };
        int[] intArray79 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray77, (int) '4');
        int[] intArray81 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray77, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray60, (int) ' ', (int) 'a', (int) '#', intArray81, true);
        int[] intArray85 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray81, 2);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, 1, 0, (-1), intArray81, true);
        int int91 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray81, (int) ' ', (int) '4', (int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            int int95 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray81, (int) (short) 1, (int) (short) 10, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2 + "'", int62 == 2);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2 + "'", int64 == 2);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[10]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
    }

    @Test
    public void test3565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3565");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray19 = new int[] { '#' };
        int int21 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (short) -1, 1, 2, intArray19, true);
        int[] intArray25 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 10);
        int int29 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray25, 1, (int) (short) 1, (int) (byte) -1);
        int[] intArray31 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray25, (int) (byte) 100);
        int[] intArray37 = new int[] { ' ', (byte) -1 };
        int[] intArray43 = new int[] { (-1), 100 };
        int[] intArray45 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray43, (int) (byte) 1);
        int[] intArray51 = new int[] { (-1), 100 };
        int[] intArray53 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray51, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray45, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray53, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray37, (-1), (int) ' ', (int) (byte) 10, intArray53, false);
        int[] intArray63 = new int[] { (-1), 100 };
        int[] intArray65 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray63, (int) (byte) 1);
        int[] intArray71 = new int[] { (-1), 100 };
        int[] intArray73 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray71, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray65, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray73, false);
        int[] intArray77 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray73, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray53, (int) 'a', 100, (int) (byte) 1, intArray73, false);
        int int81 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray73, (int) '4');
        int int85 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray73, (int) ' ', (int) (byte) 1, 0);
        int int87 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray73, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray31, (int) (short) 0, (int) (byte) 10, (int) (short) 1, intArray73, false);
        int int91 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray31, (int) 'a');
        int[] intArray93 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray31, (int) '4');
        int int95 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray31, 0);
        int[] intArray97 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray31, (int) (byte) 0);
        int int99 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray31, (-1));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 2 + "'", int81 == 2);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 2 + "'", int87 == 2);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 2 + "'", int91 == 2);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 2 + "'", int95 == 2);
        org.junit.Assert.assertNotNull(intArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray97), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + 2 + "'", int99 == 2);
    }

    @Test
    public void test3566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3566");
        int[] intArray1 = new int[] { 10 };
        int[] intArray3 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray1, (int) '4');
        int[] intArray8 = new int[] { '#' };
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) (short) 0);
        int int12 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) (byte) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray3, 10, (int) (byte) 1, (int) (short) 0, intArray8, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (short) 0);
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) '#');
        int int20 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, 1);
        java.lang.Class<?> wildcardClass21 = intArray8.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[10]");
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[35]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test3567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3567");
        int[] intArray1 = new int[] { '#' };
        int int3 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray1, (int) (short) 0);
        int[] intArray7 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray1, 100, 0, (int) (short) -1, intArray7, false);
        int[] intArray11 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray1, (int) (byte) -1);
        int[] intArray17 = new int[] { ' ', (byte) -1 };
        int[] intArray23 = new int[] { (-1), 100 };
        int[] intArray25 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray23, (int) (byte) 1);
        int[] intArray31 = new int[] { (-1), 100 };
        int[] intArray33 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray31, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray25, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray33, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray17, (-1), (int) ' ', (int) (byte) 10, intArray33, false);
        int[] intArray39 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray33, 1);
        int int41 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray39, (int) (short) 1);
        int[] intArray43 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray39, (int) 'a');
        int[] intArray49 = new int[] { (-1), 100 };
        int[] intArray51 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray49, (int) (byte) 1);
        int[] intArray57 = new int[] { (-1), 100 };
        int[] intArray59 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray57, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray51, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray59, false);
        int int65 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray51, (int) ' ', (int) (short) -1, (int) (short) 1);
        int int67 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray51, (int) '#');
        int int71 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray51, (int) (short) -1, 100, 10);
        int int75 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray51, 4, (int) ' ', (int) (byte) 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray43, (-1), 1, (int) (byte) 0, intArray51, true);
        int[] intArray79 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray51, 0);
        int int81 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray51, (int) (byte) 10);
        int[] intArray83 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray51, 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray11, (int) '4', (int) (byte) 100, (int) (short) 0, intArray83, true);
        int[] intArray87 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray11, 100);
        int int91 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray11, (int) (short) 1, (int) (short) 10, (-1));
        int int93 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray11, (int) (short) 10);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[35]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2 + "'", int41 == 2);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2 + "'", int65 == 2);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 2 + "'", int67 == 2);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 2 + "'", int81 == 2);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 2 + "'", int93 == 2);
    }

    @Test
    public void test3568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3568");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) ' ');
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray6, (int) (short) 1, (-1), (int) (byte) 0);
        int int14 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray6, 10, (int) 'a', (int) (short) 10);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (int) '#');
        int int18 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray16, (int) (byte) 1);
        int[] intArray24 = new int[] { ' ', (byte) -1 };
        int[] intArray30 = new int[] { (-1), 100 };
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray30, (int) (byte) 1);
        int[] intArray38 = new int[] { (-1), 100 };
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray32, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray40, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray24, (-1), (int) ' ', (int) (byte) 10, intArray40, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray16, (int) (byte) 1, (int) (short) 10, (-1), intArray24, true);
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, 0);
        java.lang.Class<?> wildcardClass49 = intArray48.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass49);
    }

    @Test
    public void test3569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3569");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 100);
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray26, (int) (short) 10, (-1), (int) (short) 1);
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, 100);
        int int36 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray32, (-1), (int) '4', (int) (byte) 1);
        int int40 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray32, (-1), (int) '4', 1);
        int int42 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray32, (int) '4');
        int[] intArray48 = new int[] { ' ', (byte) -1 };
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        int[] intArray62 = new int[] { (-1), 100 };
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray56, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray64, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray48, (-1), (int) ' ', (int) (byte) 10, intArray64, false);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, 1);
        int int72 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray70, (int) (short) 1);
        int int74 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray70, (int) 'a');
        int int76 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray70, 0);
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) ' ');
        int[] intArray80 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) (short) 1);
        int[] intArray82 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray80, (int) (byte) 10);
        int[] intArray84 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray82, (int) (byte) 100);
        int[] intArray86 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray82, 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, (int) (byte) -1, 2, 0, intArray86, true);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2 + "'", int42 == 2);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 2 + "'", int72 == 2);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2 + "'", int74 == 2);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2 + "'", int76 == 2);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1]");
    }

    @Test
    public void test3570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3570");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { ' ', (byte) -1 };
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray36, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, (-1), (int) ' ', (int) (byte) 10, intArray36, false);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (int) 'a', 100, (int) (byte) 1, intArray56, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, 10, (int) (short) 0, (int) (short) -1, intArray36, true);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, 0);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, 1);
        // The following exception was thrown during execution in test generation
        try {
            int int72 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray68, 4, (int) 'a', (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
    }

    @Test
    public void test3571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3571");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray22 = new int[] { (-1), 100 };
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, (int) (byte) 1);
        int[] intArray30 = new int[] { (-1), 100 };
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray30, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray24, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray32, false);
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) 'a');
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) ' ');
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray16, (int) (byte) 1, (int) 'a', 0, intArray38, true);
        int int44 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray16, (int) ' ');
        int int48 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray16, (int) ' ', (int) (byte) 100, (int) (byte) 10);
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int int52 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray16, 3);
        java.lang.Class<?> wildcardClass53 = intArray16.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2 + "'", int44 == 2);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test3572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3572");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (int) (byte) -1);
        int[] intArray12 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray8, (-1), (int) (short) 1, (int) (byte) -1, intArray12, true);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) '#');
        // The following exception was thrown during execution in test generation
        try {
            int int20 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray16, (int) (byte) -1, (-1), 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
    }

    @Test
    public void test3573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3573");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) ' ');
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (short) 100);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, 100);
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) '#');
        int int14 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray12, 4);
        int int16 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray12, 4);
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, 4);
        int int22 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (int) '4', 100, (int) (byte) 10);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[1, 1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
    }

    @Test
    public void test3574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3574");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 0);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 10);
        int int28 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray26, 0);
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray26, (int) (byte) 100);
        int int34 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray26, (int) ' ', (int) '#', (int) (byte) 10);
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, 2);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) ' ');
        java.lang.Class<?> wildcardClass39 = intArray38.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test3575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3575");
        int[] intArray0 = null;
        int[] intArray4 = null;
        int[] intArray10 = new int[] { ' ', (byte) -1 };
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        int[] intArray24 = new int[] { (-1), 100 };
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray26, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray10, (-1), (int) ' ', (int) (byte) 10, intArray26, false);
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, 100);
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) '4');
        int[] intArray40 = new int[] { ' ', (byte) -1 };
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray40, (-1), (int) ' ', (int) (byte) 10, intArray56, false);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, 100);
        int int64 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray40, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, 10, (int) 'a', (-1), intArray40, true);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, (int) ' ', (int) (byte) 1, (int) (short) -1, intArray40, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray0, (int) (short) 0, (int) (short) 1, (int) (short) -1, intArray40, true);
        int int74 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray40, 10, (int) (short) 100, 1);
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) (byte) 10);
        int int78 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray76, (int) (short) 1);
        int int82 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray76, (int) (short) 100, (int) (byte) 1, (int) (short) 0);
        int int84 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray76, 1);
        int int86 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray76, 0);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 2 + "'", int78 == 2);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 2 + "'", int84 == 2);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 2 + "'", int86 == 2);
    }

    @Test
    public void test3576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3576");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 100);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) 'a');
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, 1);
        int int34 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray30, (int) (byte) 0, 0, 0);
        int[] intArray39 = new int[] { 10 };
        int[] intArray41 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray39, (int) '4');
        int[] intArray46 = new int[] { '#' };
        int int48 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray46, (int) (short) 0);
        int int50 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray46, (int) (byte) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray41, 10, (int) (byte) 1, (int) (short) 0, intArray46, false);
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, 100, (int) (short) 100, 0, intArray46, true);
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, 4);
        int int60 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray58, (int) (byte) 10);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) (byte) 10);
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (-1));
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray64, 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[35]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2 + "'", int60 == 2);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
    }

    @Test
    public void test3577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3577");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 0);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (byte) 0);
        int int28 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, 0);
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (short) 0);
        int int34 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray24, 3, (int) (short) 100, 3);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
    }

    @Test
    public void test3578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3578");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int int18 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray4, (int) ' ', (int) (short) -1, (int) (short) 1);
        int int20 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray4, (int) '#');
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, 10);
        int int24 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray4, 2);
        int[] intArray30 = new int[] { ' ', (byte) -1 };
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        int[] intArray44 = new int[] { (-1), 100 };
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray38, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray46, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray30, (-1), (int) ' ', (int) (byte) 10, intArray46, false);
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, 1);
        int int54 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray52, (int) (short) 1);
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) 'a');
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, 10);
        int[] intArray63 = new int[] { '#' };
        int int65 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray63, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray56, 4, (int) '#', 1, intArray63, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, (int) (short) 100, (int) '#', 0, intArray56, false);
        int[] intArray71 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 100);
        int[] intArray73 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, 100);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2 + "'", int54 == 2);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[35]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1]");
    }

    @Test
    public void test3579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3579");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) ' ');
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (short) 100);
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (short) 10);
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (short) 0);
        int[] intArray14 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) (byte) -1);
        int int16 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray12, 2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[1, 1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
    }

    @Test
    public void test3580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3580");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 0);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 10);
        int int28 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray26, 0);
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (short) 100);
        int int34 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray30, (-1), (int) 'a', 0);
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray30, (int) (short) 1);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray30, 0);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray30, 0);
        int int42 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray30, (int) (byte) 1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2 + "'", int42 == 2);
    }

    @Test
    public void test3581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3581");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 1);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (short) 1);
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        int[] intArray40 = new int[] { (-1), 100 };
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray34, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray42, false);
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) 'a');
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (short) 100);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray24, (int) '#', (int) 'a', (int) '#', intArray48, false);
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (-1));
        int int54 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray52, (int) (short) 0);
        int[] intArray60 = new int[] { (-1), 100 };
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) (byte) 1);
        int[] intArray68 = new int[] { (-1), 100 };
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray62, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray70, false);
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) 'a');
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray74, (int) ' ');
        int int80 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray76, (int) (byte) -1, 0, (int) (short) 0);
        int[] intArray82 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray76, (-1));
        int int84 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray76, (int) (byte) 100);
        int[] intArray86 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray76, (int) '4');
        int[] intArray88 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray86, (int) (short) 10);
        int[] intArray90 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray88, 0);
        int[] intArray92 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray90, (int) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray52, (int) (short) 0, 3, (int) '4', intArray92, true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 2 + "'", int84 == 2);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[0, 1]");
    }

    @Test
    public void test3582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3582");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int int8 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, 0);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, 4);
        int[] intArray16 = new int[] { ' ', (byte) -1 };
        int[] intArray22 = new int[] { (-1), 100 };
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, (int) (byte) 1);
        int[] intArray30 = new int[] { (-1), 100 };
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray30, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray24, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray32, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray16, (-1), (int) ' ', (int) (byte) 10, intArray32, false);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, 100);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 100);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, 1);
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) '4');
        int[] intArray50 = new int[] { ' ', (byte) -1 };
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        int[] intArray64 = new int[] { (-1), 100 };
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray58, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray66, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray50, (-1), (int) ' ', (int) (byte) 10, intArray66, false);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray16, (-1), (int) (byte) 1, (int) (byte) 0, intArray66, true);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray6, (int) '#', (int) (short) -1, 0, intArray16, false);
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (short) -1);
        int[] intArray80 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) -1);
        int[] intArray82 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (short) 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1]");
    }

    @Test
    public void test3583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3583");
        int[] intArray0 = null;
        int[] intArray4 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray0, 0, (int) (short) 10, 0, intArray4, true);
    }

    @Test
    public void test3584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3584");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int int18 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray16, 0);
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) 'a');
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, 1);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, (int) (byte) 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
    }

    @Test
    public void test3585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3585");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 0);
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) '#');
        int int22 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray16, (int) ' ');
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) ' ');
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 0);
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) (byte) 1);
        int int50 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray44, (int) ' ', 10, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray16, (int) (short) 100, (int) (short) 0, (int) (byte) 1, intArray44, false);
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, 2);
        int[] intArray60 = new int[] { ' ', (byte) -1 };
        int[] intArray66 = new int[] { (-1), 100 };
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) (byte) 1);
        int[] intArray74 = new int[] { (-1), 100 };
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray74, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray68, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray76, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray60, (-1), (int) ' ', (int) (byte) 10, intArray76, false);
        int[] intArray82 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray76, 0);
        int[] intArray84 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray82, (int) ' ');
        int[] intArray86 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray84, (int) (byte) 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray16, (int) (byte) 1, (int) (short) 1, (int) (byte) 1, intArray84, true);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1]");
    }

    @Test
    public void test3586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3586");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) ' ');
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (short) 100);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray2, (int) (byte) 10);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (short) 100);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (short) 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (int) (short) -1, (int) (byte) -1, (int) (byte) 0, intArray16, true);
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        int[] intArray40 = new int[] { (-1), 100 };
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray34, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray42, false);
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) 'a');
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) ' ');
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 10);
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (int) (byte) 10, 1, (int) (short) 1, intArray52, false);
        int int56 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray2, 4);
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 0);
        java.lang.Class<?> wildcardClass59 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[1, 1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[0, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1, 1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test3587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3587");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 1, (int) (byte) 1, (int) (short) -1, intArray32, false);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 10);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 1);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, (int) (byte) 10, (int) (short) 1, 1, intArray46, false);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        int[] intArray64 = new int[] { (-1), 100 };
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray58, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray66, false);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) 'a');
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) ' ');
        int int76 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray72, (int) (byte) -1, 0, (int) (short) 0);
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (-1));
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray32, (int) '4', 1, (int) (short) 0, intArray78, false);
        int[] intArray82 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        int int84 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray82, (-1));
        int[] intArray86 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray82, 0);
        int int90 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray82, 4, (int) (short) 10, 2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 2 + "'", int84 == 2);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
    }

    @Test
    public void test3588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3588");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray19 = new int[] { '#' };
        int int21 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (short) -1, 1, 2, intArray19, true);
        int[] intArray25 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 10);
        int[] intArray27 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, (int) (short) 10);
        int[] intArray33 = new int[] { (-1), 100 };
        int[] intArray35 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray33, (int) (byte) 1);
        int[] intArray37 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray33, (int) ' ');
        int int41 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray37, (int) (short) 1, (-1), (int) (byte) 0);
        int[] intArray45 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray37, 2, (int) '4', (int) (short) 0, intArray45, true);
        int[] intArray49 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray37, 0);
        int[] intArray55 = new int[] { (-1), 100 };
        int[] intArray57 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray55, (int) (byte) 1);
        int[] intArray63 = new int[] { (-1), 100 };
        int[] intArray65 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray63, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray57, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray65, false);
        int[] intArray72 = new int[] { '#' };
        int int74 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray72, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray57, (int) (short) -1, 1, 2, intArray72, true);
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, 10);
        int[] intArray80 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (int) 'a');
        int int82 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray72, (int) ' ');
        int[] intArray84 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, 1);
        int int86 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray84, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray37, (int) (byte) 10, (int) (short) 100, 0, intArray84, true);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray27, (-1), (int) (short) 1, (int) ' ', intArray84, true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 16 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[35]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 2 + "'", int86 == 2);
    }

    @Test
    public void test3589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3589");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { ' ', (byte) -1 };
        int[] intArray38 = new int[] { (-1), 100 };
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 1);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray40, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray48, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, (-1), (int) ' ', (int) (byte) 10, intArray48, false);
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, 100);
        int int56 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray32, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray24, 10, (int) 'a', (-1), intArray32, true);
        int int60 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) '#');
        int[] intArray66 = new int[] { (-1), 100 };
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) (byte) 1);
        int[] intArray74 = new int[] { (-1), 100 };
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray74, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray68, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray76, false);
        int[] intArray80 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray76, (int) ' ');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray24, (int) (byte) 100, 100, 0, intArray80, false);
        int int84 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray80, (int) (short) -1);
        int[] intArray86 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray80, 0);
        int int88 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray86, (int) (short) 10);
        int int92 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray86, (int) (byte) 100, 10, (int) (short) 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2 + "'", int60 == 2);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 2 + "'", int84 == 2);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 2 + "'", int88 == 2);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
    }

    @Test
    public void test3590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3590");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) 'a', 100, (int) (byte) 1, intArray38, false);
        int int46 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, (int) '4');
        int int50 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray38, (int) ' ', (int) (byte) 1, 0);
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, 100);
        int int54 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray52, 2);
        int int56 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray52, (int) (short) -1);
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) (short) -1);
        int int60 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray58, 100);
        // The following exception was thrown during execution in test generation
        try {
            int int64 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray58, 0, 0, 4);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2 + "'", int54 == 2);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2 + "'", int56 == 2);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2 + "'", int60 == 2);
    }

    @Test
    public void test3591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3591");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 100);
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray26, (int) (short) 10, (-1), (int) (short) 1);
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, 100);
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) ' ');
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, 4);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, 10);
        java.lang.Class<?> wildcardClass41 = intArray40.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test3592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3592");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) '4');
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 2);
        int[] intArray26 = new int[] { ' ', (byte) -1 };
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        int[] intArray40 = new int[] { (-1), 100 };
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray34, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray42, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, (-1), (int) ' ', (int) (byte) 10, intArray42, false);
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, 1);
        int int50 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray48, (int) (short) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, (int) (byte) 10, (int) '#', (int) ' ', intArray48, false);
        int[] intArray58 = new int[] { (-1), 100 };
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) (byte) 1);
        int[] intArray66 = new int[] { (-1), 100 };
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray60, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray68, false);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) ' ');
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (int) (byte) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, 2, (-1), intArray72, true);
        int int78 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray48, (int) (byte) 1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 2 + "'", int78 == 2);
    }

    @Test
    public void test3593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3593");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int int8 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, 0);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, 2);
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (-1));
        int int14 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, (int) (byte) 100);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (int) (byte) -1);
        java.lang.Class<?> wildcardClass17 = intArray16.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[0, 1]");
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test3594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3594");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, 10);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) 'a');
        int int12 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, 0);
        int[] intArray14 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (short) 10);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, 2);
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (short) 0);
        java.lang.Class<?> wildcardClass19 = intArray8.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test3595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3595");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { ' ', (byte) -1 };
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray36, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, (-1), (int) ' ', (int) (byte) 10, intArray36, false);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (int) 'a', 100, (int) (byte) 1, intArray56, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, 10, (int) (short) 0, (int) (short) -1, intArray36, true);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, 0);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, 10);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 100);
        int int74 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray70, (int) (byte) 0, (int) ' ', 0);
        int int78 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray70, 3, (int) (byte) 1, (int) (short) 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
    }

    @Test
    public void test3596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3596");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int int8 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, 0);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, (int) (short) -1);
        int[] intArray16 = new int[] { ' ', (byte) -1 };
        int[] intArray22 = new int[] { (-1), 100 };
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, (int) (byte) 1);
        int[] intArray30 = new int[] { (-1), 100 };
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray30, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray24, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray32, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray16, (-1), (int) ' ', (int) (byte) 10, intArray32, false);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, 100);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) '4');
        int[] intArray46 = new int[] { ' ', (byte) -1 };
        int[] intArray52 = new int[] { (-1), 100 };
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) (byte) 1);
        int[] intArray60 = new int[] { (-1), 100 };
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray54, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray62, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray46, (-1), (int) ' ', (int) (byte) 10, intArray62, false);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, 100);
        int int70 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray46, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray38, 10, (int) 'a', (-1), intArray46, true);
        int int74 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray46, (int) ' ');
        int int76 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray46, (int) '4');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray6, (int) (short) 0, (int) (short) 10, (int) (byte) 0, intArray46, false);
        int int82 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray46, (int) (short) 1, 4, (-1));
        int[] intArray84 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            int int88 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray84, 10, 1, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2 + "'", int74 == 2);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2 + "'", int76 == 2);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1]");
    }

    @Test
    public void test3597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3597");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 0);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 10);
        int int28 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray26, 0);
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (short) 100);
        int int34 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray30, (-1), (int) 'a', 0);
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray30, (int) (short) 1);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 0);
        int[] intArray44 = new int[] { (-1), 100 };
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) (byte) 1);
        int[] intArray52 = new int[] { (-1), 100 };
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray46, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray54, false);
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) ' ');
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) '4');
        int int64 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray54, (int) (byte) 100, (int) '4', (int) (byte) 10);
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, 3);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray38, (int) (short) 10, (int) (short) 1, (int) 'a', intArray66, false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
    }

    @Test
    public void test3598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3598");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { ' ', (byte) -1 };
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray36, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, (-1), (int) ' ', (int) (byte) 10, intArray36, false);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, 100);
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 100);
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray12, (int) '#', (int) (short) 10, 0, intArray20, false);
        int int50 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray20, 0);
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (short) 10);
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, 3);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
    }

    @Test
    public void test3599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3599");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) 'a', 100, (int) (byte) 1, intArray38, false);
        int int46 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, (int) '4');
        int int50 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray38, (int) ' ', (int) (byte) 1, 0);
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, 100);
        int int54 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray52, 2);
        int int56 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray52, (int) (short) -1);
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) '#');
        java.lang.Class<?> wildcardClass59 = intArray52.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2 + "'", int54 == 2);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2 + "'", int56 == 2);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test3600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3600");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 100);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 1);
        int int32 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray2, (int) (short) 0, (int) 'a', 2);
        int int36 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray2, 10, 100, (int) (short) 1);
        int int38 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray2, (int) (short) 10);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) ' ');
        int int42 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray40, (int) '#');
        int int44 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray40, (int) (short) 1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2 + "'", int42 == 2);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2 + "'", int44 == 2);
    }

    @Test
    public void test3601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3601");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 1, (int) (byte) 1, (int) (short) -1, intArray32, false);
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        int[] intArray50 = new int[] { (-1), 100 };
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray44, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray52, false);
        int[] intArray59 = new int[] { '#' };
        int int61 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray59, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray44, (int) (short) -1, 1, 2, intArray59, true);
        int[] intArray65 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray59, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, (int) (short) 100, 0, 1, intArray65, false);
        int[] intArray69 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 100);
        int int71 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray32, 1);
        int[] intArray73 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 100);
        int int75 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray32, (int) 'a');
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[35]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[1, 1]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[1, 1]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
    }

    @Test
    public void test3602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3602");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 1, (int) (byte) 1, (int) (short) -1, intArray32, false);
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        int[] intArray50 = new int[] { (-1), 100 };
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray44, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray52, false);
        int[] intArray59 = new int[] { '#' };
        int int61 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray59, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray44, (int) (short) -1, 1, 2, intArray59, true);
        int[] intArray65 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray59, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, (int) (short) 100, 0, 1, intArray65, false);
        int[] intArray71 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray65, (int) (byte) 0, (int) (byte) 10, (int) (short) -1, intArray71, true);
        int[] intArray75 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray65, (int) ' ');
        int int77 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray75, (int) (byte) 0);
        int int79 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray75, (int) '#');
        java.lang.Class<?> wildcardClass80 = intArray75.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[35]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 1]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 2 + "'", int77 == 2);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 2 + "'", int79 == 2);
        org.junit.Assert.assertNotNull(wildcardClass80);
    }

    @Test
    public void test3603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3603");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray19 = new int[] { '#' };
        int int21 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (short) -1, 1, 2, intArray19, true);
        int[] intArray25 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 10);
        int[] intArray27 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 0);
        int[] intArray33 = new int[] { ' ', (byte) -1 };
        int[] intArray39 = new int[] { (-1), 100 };
        int[] intArray41 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray39, (int) (byte) 1);
        int[] intArray47 = new int[] { (-1), 100 };
        int[] intArray49 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray47, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray41, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray49, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray33, (-1), (int) ' ', (int) (byte) 10, intArray49, false);
        int[] intArray59 = new int[] { (-1), 100 };
        int[] intArray61 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray59, (int) (byte) 1);
        int[] intArray67 = new int[] { (-1), 100 };
        int[] intArray69 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray67, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray61, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray69, false);
        int[] intArray73 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray69, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray49, (int) 'a', 100, (int) (byte) 1, intArray69, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray27, (int) (short) 0, (int) (byte) 1, (int) (short) 1, intArray49, true);
        int[] intArray79 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray27, (int) 'a');
        int int81 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray27, (int) (short) -1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 2 + "'", int81 == 2);
    }

    @Test
    public void test3604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3604");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int int28 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray2, 0, (int) (byte) 10, (int) (byte) -1);
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray2, 10);
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) -1);
        int int34 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray2, (int) (short) 10);
        int[] intArray40 = new int[] { (-1), 100 };
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) (byte) 1);
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray42, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray50, false);
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) 'a');
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) ' ');
        int[] intArray65 = new int[] { (short) 100, (short) 0, 100, (byte) -1, 10 };
        int int69 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray65, 1, (int) (byte) 100, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray56, 100, (int) '#', (int) (short) 10, intArray65, false);
        int int73 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray56, 0);
        int[] intArray75 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) 'a');
        int[] intArray77 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray75, 2);
        int[] intArray79 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray75, (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray2, 2, (int) (byte) 10, (int) 'a', intArray79, true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[100, 0, 100, -1, 10]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 2 + "'", int73 == 2);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1]");
    }

    @Test
    public void test3605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3605");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 1);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (short) 1);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) 'a');
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (-1));
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray30, 2);
        int int36 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray32, 3, 1, 0);
        int[] intArray42 = new int[] { ' ', (byte) -1 };
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray50, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray58, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray42, (-1), (int) ' ', (int) (byte) 10, intArray58, false);
        int[] intArray68 = new int[] { (-1), 100 };
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) (byte) 1);
        int[] intArray76 = new int[] { (-1), 100 };
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray76, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray70, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray78, false);
        int[] intArray82 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray78, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray58, (int) 'a', 100, (int) (byte) 1, intArray78, false);
        int int86 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray78, (int) (short) 1);
        int[] intArray88 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray78, (int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, 0, 1, (int) (byte) 10, intArray88, true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 5 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 2 + "'", int86 == 2);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1]");
    }

    @Test
    public void test3606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3606");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 10);
        int[] intArray24 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) (byte) 0, (int) (short) 100, (int) (byte) -1, intArray24, false);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) 'a');
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) '#');
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, 100);
        int[] intArray38 = new int[] { (-1), 100 };
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 1);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) ' ');
        int int46 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray42, (int) (short) 1, (-1), (int) (byte) 0);
        int[] intArray50 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray42, 2, (int) '4', (int) (short) 0, intArray50, true);
        int int56 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray42, (int) (short) -1, (int) ' ', (int) (byte) 1);
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) '#');
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) (byte) 100);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray32, (int) 'a', (int) 'a', (int) (byte) 1, intArray58, true);
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, 2);
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, 0);
        // The following exception was thrown during execution in test generation
        try {
            int int70 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray66, (int) (short) 1, (int) (short) 1, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
    }

    @Test
    public void test3607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3607");
        int[] intArray0 = null;
        int[] intArray6 = new int[] { (-1), 100 };
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (int) (byte) 1);
        int[] intArray14 = new int[] { (-1), 100 };
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray14, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray8, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray16, false);
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray0, 10, (int) (short) 1, (int) (short) 0, intArray22, false);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray22, 100);
        int[] intArray32 = new int[] { ' ', (byte) -1 };
        int[] intArray38 = new int[] { (-1), 100 };
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 1);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray40, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray48, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, (-1), (int) ' ', (int) (byte) 10, intArray48, false);
        int[] intArray58 = new int[] { (-1), 100 };
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) (byte) 1);
        int[] intArray66 = new int[] { (-1), 100 };
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray60, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray68, false);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray48, (int) 'a', 100, (int) (byte) 1, intArray68, false);
        int int76 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray68, (int) '4');
        int int80 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray68, (int) ' ', (int) (byte) 1, 0);
        int int82 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray68, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray22, (-1), (int) (byte) -1, 0, intArray68, false);
        int int86 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray68, (int) (byte) -1);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2 + "'", int76 == 2);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 2 + "'", int82 == 2);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 2 + "'", int86 == 2);
    }

    @Test
    public void test3608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3608");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 1, (int) (byte) 1, (int) (short) -1, intArray32, false);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 10);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 1);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, (int) (byte) 10, (int) (short) 1, 1, intArray46, false);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        int[] intArray64 = new int[] { (-1), 100 };
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray58, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray66, false);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) 'a');
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) ' ');
        int int76 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray72, (int) (byte) -1, 0, (int) (short) 0);
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (-1));
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray32, (int) '4', 1, (int) (short) 0, intArray78, false);
        int[] intArray82 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 100);
        int[] intArray84 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray82, (int) (byte) 0);
        int int86 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray84, 0);
        // The following exception was thrown during execution in test generation
        try {
            int int90 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray84, 3, (int) (short) -1, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[1, 1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 2 + "'", int86 == 2);
    }

    @Test
    public void test3609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3609");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) ' ');
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (short) 100);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray2, 1);
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) -1);
        int[] intArray18 = new int[] { ' ', (byte) -1 };
        int[] intArray24 = new int[] { (-1), 100 };
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 1);
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray26, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray34, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (-1), (int) ' ', (int) (byte) 10, intArray34, false);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 100);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) '4');
        int[] intArray48 = new int[] { ' ', (byte) -1 };
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        int[] intArray62 = new int[] { (-1), 100 };
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray56, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray64, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray48, (-1), (int) ' ', (int) (byte) 10, intArray64, false);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, 100);
        int int72 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray48, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray40, 10, (int) 'a', (-1), intArray48, true);
        int int76 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray40, (int) '#');
        int int78 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray40, (int) ' ');
        int int80 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray40, (int) (byte) 0);
        int int82 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray40, (int) (byte) -1);
        int[] intArray84 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray12, (int) (byte) 1, 2, (int) (byte) 0, intArray84, true);
        java.lang.Class<?> wildcardClass87 = intArray84.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[1, 1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[0, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2 + "'", int76 == 2);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 2 + "'", int78 == 2);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2 + "'", int80 == 2);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 2 + "'", int82 == 2);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test3610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3610");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, 10);
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (int) (short) 1);
        int int12 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray10, 10);
        int[] intArray18 = new int[] { ' ', (byte) -1 };
        int[] intArray24 = new int[] { (-1), 100 };
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 1);
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray26, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray34, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (-1), (int) ' ', (int) (byte) 10, intArray34, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray10, 0, (int) 'a', 4, intArray34, false);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, 2);
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray50, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray58, false);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) ' ');
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, (int) (byte) 0);
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) (byte) 1);
        int int70 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray64, (int) ' ', 10, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray34, 2, (int) (byte) 100, 4, intArray64, true);
        int int74 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray34, 10);
        int int76 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray34, (int) (byte) 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2 + "'", int74 == 2);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2 + "'", int76 == 2);
    }

    @Test
    public void test3611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3611");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { ' ', (byte) -1 };
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray36, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, (-1), (int) ' ', (int) (byte) 10, intArray36, false);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (int) 'a', 100, (int) (byte) 1, intArray56, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, 10, (int) (short) 0, (int) (short) -1, intArray36, true);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, 0);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, 10);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 100);
        int int72 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray70, (int) (byte) 0);
        int int74 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray70, 0);
        int int76 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray70, (int) '4');
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) (byte) 1);
        int[] intArray80 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) (short) 10);
        int[] intArray82 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (-1));
        int[] intArray86 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray70, (int) (byte) 1, (int) 'a', (int) (byte) 0, intArray86, false);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 2 + "'", int72 == 2);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2 + "'", int74 == 2);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2 + "'", int76 == 2);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[0, 1]");
    }

    @Test
    public void test3612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3612");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) ' ');
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (short) 100);
        int int12 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray8, (int) (byte) 100, (int) '#', 4);
        // The following exception was thrown during execution in test generation
        try {
            int int16 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray8, 10, (int) (byte) 1, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[1, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test3613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3613");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray30 = new int[] { ' ', (byte) -1 };
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        int[] intArray44 = new int[] { (-1), 100 };
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray38, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray46, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray30, (-1), (int) ' ', (int) (byte) 10, intArray46, false);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        int[] intArray64 = new int[] { (-1), 100 };
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray58, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray66, false);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray46, (int) 'a', 100, (int) (byte) 1, intArray66, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), 10, (-1), intArray46, true);
        int int76 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray2, (int) (byte) -1);
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 0);
        java.lang.Class<?> wildcardClass79 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test3614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3614");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 1, (int) (byte) 1, (int) (short) -1, intArray32, false);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 10);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) 'a');
        int[] intArray46 = new int[] { ' ', (byte) -1 };
        int[] intArray52 = new int[] { (-1), 100 };
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) (byte) 1);
        int[] intArray60 = new int[] { (-1), 100 };
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray54, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray62, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray46, (-1), (int) ' ', (int) (byte) 10, intArray62, false);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, 1);
        int int70 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray68, (int) (short) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray40, 0, (int) ' ', (int) (short) -1, intArray68, false);
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) (short) 10);
        int int76 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray74, (int) (byte) 10);
        int int78 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray74, 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2 + "'", int70 == 2);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2 + "'", int76 == 2);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 2 + "'", int78 == 2);
    }

    @Test
    public void test3615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3615");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 0);
        int[] intArray24 = new int[] { (-1), 100 };
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 1);
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray26, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray34, false);
        int[] intArray41 = new int[] { '#' };
        int int43 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray41, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray26, (int) (short) -1, 1, 2, intArray41, true);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) (short) -1, 0, (int) (short) 0, intArray41, true);
        int[] intArray49 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray41, (int) (byte) 100);
        int int53 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray49, (int) ' ', (int) (short) 1, (int) (short) 1);
        int[] intArray55 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray49, (int) (byte) -1);
        int int57 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray55, (int) (byte) 100);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[0]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2 + "'", int53 == 2);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2 + "'", int57 == 2);
    }

    @Test
    public void test3616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3616");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) 'a', 100, (int) (byte) 1, intArray38, false);
        int int46 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, (int) '4');
        int int50 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray38, (int) ' ', (int) (byte) 1, 0);
        int int52 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, 0);
        int int54 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, 100);
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (short) 1);
        int int58 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, (int) (short) -1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2 + "'", int54 == 2);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2 + "'", int58 == 2);
    }

    @Test
    public void test3617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3617");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray2, 10);
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray2, 0, (int) (byte) 0, 1);
        java.lang.Class<?> wildcardClass31 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test3618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3618");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray19 = new int[] { '#' };
        int int21 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (short) -1, 1, 2, intArray19, true);
        int[] intArray25 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 10);
        int[] intArray27 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 0);
        int[] intArray33 = new int[] { ' ', (byte) -1 };
        int[] intArray39 = new int[] { (-1), 100 };
        int[] intArray41 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray39, (int) (byte) 1);
        int[] intArray47 = new int[] { (-1), 100 };
        int[] intArray49 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray47, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray41, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray49, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray33, (-1), (int) ' ', (int) (byte) 10, intArray49, false);
        int[] intArray59 = new int[] { (-1), 100 };
        int[] intArray61 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray59, (int) (byte) 1);
        int[] intArray67 = new int[] { (-1), 100 };
        int[] intArray69 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray67, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray61, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray69, false);
        int[] intArray73 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray69, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray49, (int) 'a', 100, (int) (byte) 1, intArray69, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray27, (int) (short) 0, (int) (byte) 1, (int) (short) 1, intArray49, true);
        int int79 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray27, (int) (byte) -1);
        int int81 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray27, (int) (byte) -1);
        int[] intArray83 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray27, 1);
        int[] intArray85 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray83, 0);
        int int87 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray85, (int) '4');
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 2 + "'", int79 == 2);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 2 + "'", int81 == 2);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 2 + "'", int87 == 2);
    }

    @Test
    public void test3619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3619");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 10);
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) ' ');
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (short) 10);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
    }

    @Test
    public void test3620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3620");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 10);
        int[] intArray24 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) (byte) 0, (int) (short) 100, (int) (byte) -1, intArray24, false);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) 'a');
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) '#');
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, 100);
        java.lang.Class<?> wildcardClass33 = intArray32.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test3621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3621");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray19 = new int[] { '#' };
        int int21 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (short) -1, 1, 2, intArray19, true);
        int[] intArray25 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 10);
        int int27 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) -1);
        int[] intArray29 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 1);
        int int33 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray19, (int) (short) 10, (int) (short) 0, (int) (byte) 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
    }

    @Test
    public void test3622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3622");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray19 = new int[] { '#' };
        int int21 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (short) -1, 1, 2, intArray19, true);
        int[] intArray25 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 10);
        int[] intArray27 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 100);
        int[] intArray33 = new int[] { ' ', (byte) -1 };
        int[] intArray39 = new int[] { (-1), 100 };
        int[] intArray41 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray39, (int) (byte) 1);
        int[] intArray47 = new int[] { (-1), 100 };
        int[] intArray49 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray47, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray41, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray49, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray33, (-1), (int) ' ', (int) (byte) 10, intArray49, false);
        int[] intArray55 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray33, 100);
        int[] intArray57 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray55, (int) '4');
        int int61 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray55, 0, (int) (byte) 100, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray27, (int) (byte) 0, (-1), 1, intArray55, false);
        int[] intArray65 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray27, 1);
        int[] intArray67 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray27, (int) '#');
        int int69 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray27, (int) (short) -1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 2 + "'", int69 == 2);
    }

    @Test
    public void test3623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3623");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { ' ', (byte) -1 };
        int[] intArray38 = new int[] { (-1), 100 };
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 1);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray40, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray48, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, (-1), (int) ' ', (int) (byte) 10, intArray48, false);
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, 100);
        int int56 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray32, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray24, 10, (int) 'a', (-1), intArray32, true);
        int int60 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) '#');
        int[] intArray66 = new int[] { (-1), 100 };
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) (byte) 1);
        int[] intArray74 = new int[] { (-1), 100 };
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray74, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray68, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray76, false);
        int[] intArray80 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray76, (int) ' ');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray24, (int) (byte) 100, 100, 0, intArray80, false);
        int int84 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray80, (int) (short) -1);
        int[] intArray86 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray80, 0);
        // The following exception was thrown during execution in test generation
        try {
            int int90 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray86, (int) (short) 10, (int) ' ', (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2 + "'", int60 == 2);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 2 + "'", int84 == 2);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1]");
    }

    @Test
    public void test3624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3624");
        int[] intArray4 = new int[] { (byte) -1, 2, (short) 1, '#' };
        int int6 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray4, (int) '4');
        int int8 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray4, 10);
        int[] intArray14 = new int[] { ' ', (byte) -1 };
        int[] intArray20 = new int[] { (-1), 100 };
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 1);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray22, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray30, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray14, (-1), (int) ' ', (int) (byte) 10, intArray30, false);
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray14, 100);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) '4');
        int[] intArray44 = new int[] { (-1), 100 };
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray38, 1, (int) (byte) 1, (int) (short) -1, intArray44, false);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        int[] intArray62 = new int[] { (-1), 100 };
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray56, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray64, false);
        int[] intArray71 = new int[] { '#' };
        int int73 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray71, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray56, (int) (short) -1, 1, 2, intArray71, true);
        int[] intArray77 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray71, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray44, (int) (short) 100, 0, 1, intArray77, false);
        int[] intArray81 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) (byte) 100);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, 4, (int) (short) 10, 3, intArray81, true);
        int int85 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray4, (int) (short) 10);
        int int87 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray4, (int) (short) 1);
        int[] intArray89 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) '4');
        int int91 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray4, (int) (byte) 0);
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, 2, 1, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[35]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[1, 1]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 3 + "'", int85 == 3);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1 + "'", int87 == 1);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 1 + "'", int91 == 1);
    }

    @Test
    public void test3625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3625");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int int8 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, 0);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, (int) (short) -1);
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (int) (byte) 0);
        int[] intArray18 = new int[] { ' ', (byte) -1 };
        int[] intArray24 = new int[] { (-1), 100 };
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 1);
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray26, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray34, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (-1), (int) ' ', (int) (byte) 10, intArray34, false);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, 1);
        int int42 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray40, (int) (short) 1);
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) 'a');
        int int46 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray40, 10);
        int int48 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray40, (int) (short) 100);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray12, (int) (short) 10, 1, (int) (short) -1, intArray40, true);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        int[] intArray64 = new int[] { (-1), 100 };
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray58, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray66, false);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) 'a');
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) ' ');
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (int) (byte) 10);
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (int) (short) 100);
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray12, (int) (byte) 100, (int) '#', (int) (byte) 10, intArray78, false);
        int int82 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray78, 0);
        int[] intArray84 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray78, 3);
        int[] intArray86 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray84, (int) (byte) 10);
        java.lang.Class<?> wildcardClass87 = intArray84.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2 + "'", int42 == 2);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 2 + "'", int82 == 2);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test3626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3626");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray19 = new int[] { '#' };
        int int21 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (short) -1, 1, 2, intArray19, true);
        int[] intArray25 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 10);
        int[] intArray27 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 0);
        int[] intArray33 = new int[] { ' ', (byte) -1 };
        int[] intArray39 = new int[] { (-1), 100 };
        int[] intArray41 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray39, (int) (byte) 1);
        int[] intArray47 = new int[] { (-1), 100 };
        int[] intArray49 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray47, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray41, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray49, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray33, (-1), (int) ' ', (int) (byte) 10, intArray49, false);
        int[] intArray59 = new int[] { (-1), 100 };
        int[] intArray61 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray59, (int) (byte) 1);
        int[] intArray67 = new int[] { (-1), 100 };
        int[] intArray69 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray67, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray61, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray69, false);
        int[] intArray73 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray69, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray49, (int) 'a', 100, (int) (byte) 1, intArray69, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray27, (int) (short) 0, (int) (byte) 1, (int) (short) 1, intArray49, true);
        int[] intArray79 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray27, (int) 'a');
        int[] intArray81 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray79, 100);
        int int83 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray81, (int) ' ');
        int[] intArray85 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray81, 4);
        java.lang.Class<?> wildcardClass86 = intArray85.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 2 + "'", int83 == 2);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test3627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3627");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray22 = new int[] { (-1), 100 };
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, (int) (byte) 1);
        int[] intArray30 = new int[] { (-1), 100 };
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray30, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray24, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray32, false);
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) 'a');
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) ' ');
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray16, (int) (byte) 1, (int) 'a', 0, intArray38, true);
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            int int48 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray38, (int) (byte) 1, 3, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
    }

    @Test
    public void test3628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3628");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 0);
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) '#');
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray36, false);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) 'a');
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) ' ');
        int int46 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray42, (int) (byte) -1, 0, (int) (short) 0);
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (-1));
        int int50 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray42, (int) (short) 1);
        int int52 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray42, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, (int) ' ', (int) (short) 1, (int) (short) 1, intArray42, false);
        // The following exception was thrown during execution in test generation
        try {
            int int58 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray42, (int) (short) -1, (-1), (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
    }

    @Test
    public void test3629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3629");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, 0);
        java.lang.Class<?> wildcardClass19 = intArray12.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test3630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3630");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray22 = new int[] { ' ', (byte) -1 };
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray22, (-1), (int) ' ', (int) (byte) 10, intArray38, false);
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray50, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray58, false);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray38, (int) 'a', 100, (int) (byte) 1, intArray58, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray12, (int) (short) 100, (int) 'a', (int) (short) 0, intArray38, true);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (-1));
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) (short) 100);
        int int74 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray12, (int) (short) 100, (int) 'a', (int) (short) -1);
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) '4');
        int int78 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray76, (int) 'a');
        int[] intArray80 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray76, (int) (short) 10);
        int[] intArray82 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray80, (int) (byte) 10);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 2 + "'", int78 == 2);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1]");
    }

    @Test
    public void test3631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3631");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray19 = new int[] { '#' };
        int int21 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (short) -1, 1, 2, intArray19, true);
        int[] intArray25 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 10);
        int[] intArray27 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 100);
        int[] intArray33 = new int[] { ' ', (byte) -1 };
        int[] intArray39 = new int[] { (-1), 100 };
        int[] intArray41 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray39, (int) (byte) 1);
        int[] intArray47 = new int[] { (-1), 100 };
        int[] intArray49 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray47, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray41, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray49, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray33, (-1), (int) ' ', (int) (byte) 10, intArray49, false);
        int[] intArray55 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray33, 100);
        int[] intArray57 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray55, (int) '4');
        int int61 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray55, 0, (int) (byte) 100, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray27, (int) (byte) 0, (-1), 1, intArray55, false);
        int int65 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray55, (int) (byte) -1);
        int[] intArray67 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray55, 0);
        java.lang.Class<?> wildcardClass68 = intArray55.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2 + "'", int65 == 2);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass68);
    }

    @Test
    public void test3632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3632");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) '4');
        int int20 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) (byte) -1);
        int int22 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (-1));
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (-1), (int) '#', 4);
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (int) (short) 0, (int) '#', (int) (byte) 1);
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 0);
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, 2);
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, 0);
        int int38 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray34, (int) '4');
        int[] intArray44 = new int[] { ' ', (byte) -1 };
        int[] intArray50 = new int[] { (-1), 100 };
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) (byte) 1);
        int[] intArray58 = new int[] { (-1), 100 };
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray52, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray60, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray44, (-1), (int) ' ', (int) (byte) 10, intArray60, false);
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, 1);
        int[] intArray72 = new int[] { (-1), 100 };
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (int) (byte) 1);
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray74, (int) (short) 10);
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray76, 10);
        int int80 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray78, (int) 'a');
        int int82 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray78, 0);
        int[] intArray84 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray78, (int) (short) 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray66, (int) (byte) 1, (int) (short) 100, (-1), intArray78, false);
        int int88 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray66, (int) (byte) 100);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray34, 3, (int) '4', (int) (short) -1, intArray66, true);
        // The following exception was thrown during execution in test generation
        try {
            int int94 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray66, (int) (byte) -1, (int) (byte) -1, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2 + "'", int80 == 2);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 2 + "'", int82 == 2);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 2 + "'", int88 == 2);
    }

    @Test
    public void test3633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3633");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, 10);
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (int) (short) 1);
        int int12 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray10, 10);
        int[] intArray18 = new int[] { ' ', (byte) -1 };
        int[] intArray24 = new int[] { (-1), 100 };
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 1);
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray26, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray34, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (-1), (int) ' ', (int) (byte) 10, intArray34, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray10, 0, (int) 'a', 4, intArray34, false);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, 2);
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray50, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray58, false);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) ' ');
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, (int) (byte) 0);
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) (byte) 1);
        int int70 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray64, (int) ' ', 10, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray34, 2, (int) (byte) 100, 4, intArray64, true);
        int int74 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray34, 10);
        java.lang.Class<?> wildcardClass75 = intArray34.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2 + "'", int74 == 2);
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test3634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3634");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (byte) 0);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray4, 2, 0, (int) (byte) -1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        int[] intArray24 = new int[] { (-1), 100 };
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray26, false);
        int[] intArray34 = new int[] { ' ', (byte) -1 };
        int[] intArray40 = new int[] { (-1), 100 };
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) (byte) 1);
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray42, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray50, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray34, (-1), (int) ' ', (int) (byte) 10, intArray50, false);
        int[] intArray60 = new int[] { (-1), 100 };
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) (byte) 1);
        int[] intArray68 = new int[] { (-1), 100 };
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray62, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray70, false);
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray50, (int) 'a', 100, (int) (byte) 1, intArray70, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, 10, (int) (short) 0, (int) (short) -1, intArray50, true);
        int int80 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray50, 0);
        int[] intArray82 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, 10);
        int[] intArray84 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray82, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, (int) (short) 1, 0, 0, intArray84, false);
        int int88 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray4, (-1));
        int[] intArray90 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (byte) -1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2 + "'", int80 == 2);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 2 + "'", int88 == 2);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[0, 1]");
    }

    @Test
    public void test3635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3635");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 10);
        int int22 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray20, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            int int26 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray20, 4, (int) '4', (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
    }

    @Test
    public void test3636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3636");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray24 = new int[] { ' ', (byte) -1 };
        int[] intArray30 = new int[] { (-1), 100 };
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray30, (int) (byte) 1);
        int[] intArray38 = new int[] { (-1), 100 };
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray32, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray40, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray24, (-1), (int) ' ', (int) (byte) 10, intArray40, false);
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, 1);
        int int48 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray46, (int) (short) 1);
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) 'a');
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, 10);
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) '4');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray16, (int) 'a', (int) '#', (int) (short) 10, intArray52, false);
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, 10);
        java.lang.Class<?> wildcardClass59 = intArray52.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test3637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3637");
        int[] intArray0 = null;
        int[] intArray6 = new int[] { 1, 'a' };
        int[] intArray12 = new int[] { (-1), 100 };
        int[] intArray14 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) (byte) 1);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int int20 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray16, (int) (short) 1, (-1), (int) (byte) 0);
        int[] intArray24 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray16, 2, (int) '4', (int) (short) 0, intArray24, true);
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray16, (int) (short) -1, (int) ' ', (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray16, 0, (int) 'a', 2, intArray36, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray6, (int) '4', 10, 1, intArray36, true);
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray0, (-1), (int) (short) 1, (int) '4', intArray44, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot load from int array because \"nums\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 97]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[0, 0]");
    }

    @Test
    public void test3638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3638");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 1, (int) (byte) 1, (int) (short) -1, intArray32, false);
        int int38 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray32, 1);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) ' ');
        int int44 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray32, (int) (byte) 0, 10, (-1));
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 10);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
    }

    @Test
    public void test3639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3639");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray19 = new int[] { '#' };
        int int21 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (short) -1, 1, 2, intArray19, true);
        int int27 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray19, (int) 'a', (int) 'a', (int) '#');
        int[] intArray33 = new int[] { (-1), 100 };
        int[] intArray35 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray33, (int) (byte) 1);
        int[] intArray41 = new int[] { (-1), 100 };
        int[] intArray43 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray41, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray35, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray43, false);
        int[] intArray50 = new int[] { '#' };
        int int52 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray50, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray35, (int) (short) -1, 1, 2, intArray50, true);
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, 10);
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, 100);
        int int60 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray58, (int) (short) 10);
        int int62 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray58, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray19, 100, (int) (byte) 0, (int) (short) 0, intArray58, true);
        int int68 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray19, 10, (int) 'a', (int) (short) 1);
        int int70 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[35]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2 + "'", int60 == 2);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2 + "'", int62 == 2);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
    }

    @Test
    public void test3640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3640");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, 10);
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (int) (short) 1);
        int int12 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray10, 10);
        int[] intArray18 = new int[] { ' ', (byte) -1 };
        int[] intArray24 = new int[] { (-1), 100 };
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 1);
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray26, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray34, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (-1), (int) ' ', (int) (byte) 10, intArray34, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray10, 0, (int) 'a', 4, intArray34, false);
        int int44 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray34, 0, 4, 0);
        // The following exception was thrown during execution in test generation
        try {
            int int48 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray34, 10, 1, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
    }

    @Test
    public void test3641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3641");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray19 = new int[] { '#' };
        int int21 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (short) -1, 1, 2, intArray19, true);
        int[] intArray25 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 10);
        int[] intArray27 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 0);
        int[] intArray33 = new int[] { ' ', (byte) -1 };
        int[] intArray39 = new int[] { (-1), 100 };
        int[] intArray41 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray39, (int) (byte) 1);
        int[] intArray47 = new int[] { (-1), 100 };
        int[] intArray49 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray47, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray41, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray49, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray33, (-1), (int) ' ', (int) (byte) 10, intArray49, false);
        int[] intArray59 = new int[] { (-1), 100 };
        int[] intArray61 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray59, (int) (byte) 1);
        int[] intArray67 = new int[] { (-1), 100 };
        int[] intArray69 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray67, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray61, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray69, false);
        int[] intArray73 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray69, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray49, (int) 'a', 100, (int) (byte) 1, intArray69, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray27, (int) (short) 0, (int) (byte) 1, (int) (short) 1, intArray49, true);
        int int79 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray27, (int) (byte) -1);
        int[] intArray81 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray27, 1);
        int int83 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray27, (int) ' ');
        int[] intArray85 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray27, (int) (byte) 100);
        java.lang.Class<?> wildcardClass86 = intArray85.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 2 + "'", int79 == 2);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 2 + "'", int83 == 2);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test3642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3642");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) ' ');
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (short) 100);
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (short) 10);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        int[] intArray24 = new int[] { (-1), 100 };
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray26, false);
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) ' ');
        int int32 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray26, 0);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (int) (byte) -1, 2, 100, intArray26, true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 51 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[1, 1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
    }

    @Test
    public void test3643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3643");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 100);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 1);
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) '4');
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        int[] intArray44 = new int[] { (-1), 100 };
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray38, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray46, false);
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) ' ');
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) '4');
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, 2);
        int[] intArray60 = new int[] { ' ', (byte) -1 };
        int[] intArray66 = new int[] { (-1), 100 };
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) (byte) 1);
        int[] intArray74 = new int[] { (-1), 100 };
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray74, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray68, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray76, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray60, (-1), (int) ' ', (int) (byte) 10, intArray76, false);
        int[] intArray82 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray76, 1);
        int int84 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray82, (int) (short) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray54, (int) (byte) 10, (int) '#', (int) ' ', intArray82, false);
        int int88 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray54, (int) (short) -1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (int) (short) 10, (int) (byte) 0, (int) (short) -1, intArray54, true);
        int int92 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray2, (int) (short) 100);
        int[] intArray94 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) 'a');
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 2 + "'", int84 == 2);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 2 + "'", int88 == 2);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 2 + "'", int92 == 2);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, -1]");
    }

    @Test
    public void test3644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3644");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 1, (int) (byte) 1, (int) (short) -1, intArray32, false);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 10);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 1);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) 'a');
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray50, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray58, false);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) 'a');
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, (int) ' ');
        int int68 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray64, (int) (byte) -1, 0, (int) (short) 0);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (-1));
        int int72 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray64, (int) (byte) 100);
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) (short) 10);
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray74, 100);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray40, (-1), (int) '4', (int) (byte) 10, intArray76, false);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 2 + "'", int72 == 2);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
    }

    @Test
    public void test3645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3645");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 1, (int) (byte) 1, (int) (short) -1, intArray32, false);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 10);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) 'a');
        int[] intArray46 = new int[] { ' ', (byte) -1 };
        int[] intArray52 = new int[] { (-1), 100 };
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) (byte) 1);
        int[] intArray60 = new int[] { (-1), 100 };
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray54, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray62, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray46, (-1), (int) ' ', (int) (byte) 10, intArray62, false);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, 1);
        int int70 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray68, (int) (short) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray40, 0, (int) ' ', (int) (short) -1, intArray68, false);
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) (byte) 0);
        int int76 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray74, 10);
        int int78 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray74, (int) (short) 0);
        int[] intArray80 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray74, (int) (short) 10);
        int[] intArray82 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray80, (int) (short) 100);
        int int84 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray82, (int) ' ');
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2 + "'", int70 == 2);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2 + "'", int76 == 2);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 2 + "'", int78 == 2);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 2 + "'", int84 == 2);
    }

    @Test
    public void test3646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3646");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 10);
        int[] intArray24 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) (byte) 0, (int) (short) 100, (int) (byte) -1, intArray24, false);
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (short) 10);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, 10);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (short) 1);
        int int42 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray40, 10);
        int[] intArray48 = new int[] { ' ', (byte) -1 };
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        int[] intArray62 = new int[] { (-1), 100 };
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray56, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray64, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray48, (-1), (int) ' ', (int) (byte) 10, intArray64, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray40, 0, (int) 'a', 4, intArray64, false);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, 2);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) (byte) 0, (int) '4', (int) (byte) 1, intArray64, true);
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, 0);
        java.lang.Class<?> wildcardClass77 = intArray76.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2 + "'", int42 == 2);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test3647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3647");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 0);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) ' ');
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 10);
        int[] intArray34 = new int[] { ' ', (byte) -1 };
        int[] intArray40 = new int[] { (-1), 100 };
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) (byte) 1);
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray42, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray50, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray34, (-1), (int) ' ', (int) (byte) 10, intArray50, false);
        int[] intArray60 = new int[] { (-1), 100 };
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) (byte) 1);
        int[] intArray68 = new int[] { (-1), 100 };
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray62, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray70, false);
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray50, (int) 'a', 100, (int) (byte) 1, intArray70, false);
        int int78 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray70, (int) '4');
        int int82 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray70, (int) ' ', (int) (byte) 1, 0);
        int int84 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray70, 0);
        int int86 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray70, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, (int) '4', 100, (int) '4', intArray70, false);
        int int90 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray26, 100);
        // The following exception was thrown during execution in test generation
        try {
            int int94 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray26, (int) (byte) 10, (int) (short) 0, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 2 + "'", int78 == 2);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 2 + "'", int84 == 2);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 2 + "'", int86 == 2);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 2 + "'", int90 == 2);
    }

    @Test
    public void test3648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3648");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray19 = new int[] { '#' };
        int int21 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (short) -1, 1, 2, intArray19, true);
        int[] intArray25 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 10);
        int[] intArray27 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 0);
        int[] intArray33 = new int[] { ' ', (byte) -1 };
        int[] intArray39 = new int[] { (-1), 100 };
        int[] intArray41 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray39, (int) (byte) 1);
        int[] intArray47 = new int[] { (-1), 100 };
        int[] intArray49 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray47, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray41, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray49, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray33, (-1), (int) ' ', (int) (byte) 10, intArray49, false);
        int[] intArray59 = new int[] { (-1), 100 };
        int[] intArray61 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray59, (int) (byte) 1);
        int[] intArray67 = new int[] { (-1), 100 };
        int[] intArray69 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray67, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray61, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray69, false);
        int[] intArray73 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray69, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray49, (int) 'a', 100, (int) (byte) 1, intArray69, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray27, (int) (short) 0, (int) (byte) 1, (int) (short) 1, intArray49, true);
        int[] intArray79 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray27, (int) 'a');
        int[] intArray81 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray79, 100);
        int int83 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray81, (int) ' ');
        int[] intArray85 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray81, 4);
        int int87 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray81, (int) (byte) -1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 2 + "'", int83 == 2);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 2 + "'", int87 == 2);
    }

    @Test
    public void test3649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3649");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray27 = new int[] { (short) 100, (short) 0, 100, (byte) -1, 10 };
        int int31 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray27, 1, (int) (byte) 100, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, 100, (int) '#', (int) (short) 10, intArray27, false);
        int int35 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray27, 10);
        int[] intArray37 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray27, (int) (byte) 1);
        int[] intArray43 = new int[] { (-1), 100 };
        int[] intArray45 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray43, (int) (byte) 1);
        int[] intArray47 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray45, (int) (short) 10);
        int int49 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray45, 2);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray27, (int) '4', (int) (byte) 1, 0, intArray45, false);
        int[] intArray53 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray45, (int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            int int57 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray45, 100, (int) (byte) 1, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[100, 0, 100, -1, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2 + "'", int49 == 2);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, -1]");
    }

    @Test
    public void test3650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3650");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int int24 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) (short) 1);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) (byte) -1);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) 'a');
        java.lang.Class<?> wildcardClass29 = intArray18.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test3651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3651");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 0);
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 1);
        int int24 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (int) ' ', 10, 0);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (short) 10);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) '4');
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (short) 100);
        java.lang.Class<?> wildcardClass31 = intArray26.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test3652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3652");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { (-1), 100 };
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 1);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray22, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray30, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) 10, (int) '4', 10, intArray30, true);
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, 2);
        int int40 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray4, (int) (short) 1, (int) (short) 100, (int) (byte) -1);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, 4);
        int[] intArray48 = new int[] { ' ', (byte) -1 };
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        int[] intArray62 = new int[] { (-1), 100 };
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray56, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray64, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray48, (-1), (int) ' ', (int) (byte) 10, intArray64, false);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, 100);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) '4');
        int[] intArray78 = new int[] { (-1), 100 };
        int[] intArray80 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray78, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray72, 1, (int) (byte) 1, (int) (short) -1, intArray78, false);
        int[] intArray84 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray78, (int) (short) 10);
        int[] intArray86 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray78, (int) (short) 1);
        int[] intArray92 = new int[] { (-1), 100 };
        int[] intArray94 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray92, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray78, (int) (byte) 10, (int) (short) 1, 1, intArray92, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray42, (int) (byte) -1, (int) '4', (int) (byte) -1, intArray78, false);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, -1]");
    }

    @Test
    public void test3653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3653");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 1, (int) (byte) 1, (int) (short) -1, intArray32, false);
        int int40 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray32, 10, 100, (int) '#');
        int int42 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray32, (int) (byte) 0);
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) ' ');
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (short) 100);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray32, 1, 10, (int) (byte) 0, intArray54, true);
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, 0);
        int int62 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray32, 0, (int) (byte) 10, (int) (short) 0);
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (-1));
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, 100);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[1, 1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[0, 0]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
    }

    @Test
    public void test3654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3654");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { ' ', (byte) -1 };
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray36, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, (-1), (int) ' ', (int) (byte) 10, intArray36, false);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (int) 'a', 100, (int) (byte) 1, intArray56, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, 10, (int) (short) 0, (int) (short) -1, intArray36, true);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, 0);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, 10);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 100);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            int int78 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray36, (int) (short) 0, 0, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
    }

    @Test
    public void test3655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3655");
        int[] intArray1 = new int[] { 10 };
        int[] intArray3 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray1, (int) '4');
        int[] intArray8 = new int[] { '#' };
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) (short) 0);
        int int12 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) (byte) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray3, 10, (int) (byte) 1, (int) (short) 0, intArray8, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (short) 0);
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) '#');
        int[] intArray24 = new int[] { (-1), 100 };
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 1);
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray26, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray34, false);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) ' ');
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 0);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) '#');
        int int44 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, (int) ' ');
        int[] intArray50 = new int[] { (-1), 100 };
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) (byte) 1);
        int[] intArray58 = new int[] { (-1), 100 };
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray52, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray60, false);
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) ' ');
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) (byte) 0);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) (byte) 1);
        int int72 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray66, (int) ' ', 10, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray38, (int) (short) 100, (int) (short) 0, (int) (byte) 1, intArray66, false);
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, (int) '4', 2, (int) (byte) 1, intArray38, false);
        int int80 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, (int) ' ');
        java.lang.Class<?> wildcardClass81 = intArray38.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[10]");
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[35]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[0, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2 + "'", int44 == 2);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2 + "'", int80 == 2);
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test3656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3656");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 1);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (short) 1);
        int int28 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) 'a');
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) 'a');
        int int34 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray24, (int) (short) 100, 10, 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
    }

    @Test
    public void test3657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3657");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray27 = new int[] { (short) 100, (short) 0, 100, (byte) -1, 10 };
        int int31 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray27, 1, (int) (byte) 100, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, 100, (int) '#', (int) (short) 10, intArray27, false);
        int int35 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, 0);
        int[] intArray37 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (short) 1);
        int[] intArray43 = new int[] { (-1), 100 };
        int[] intArray45 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray43, (int) (byte) 1);
        int[] intArray51 = new int[] { (-1), 100 };
        int[] intArray53 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray51, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray45, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray53, false);
        int[] intArray60 = new int[] { '#' };
        int int62 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray60, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray45, (int) (short) -1, 1, 2, intArray60, true);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, (int) (short) 10, 2, (int) (byte) 1, intArray45, true);
        java.lang.Class<?> wildcardClass67 = intArray45.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[100, 0, 100, -1, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[35]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(wildcardClass67);
    }

    @Test
    public void test3658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3658");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 100);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 1);
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) '4');
        int int32 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray2, (int) (byte) 1);
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 100);
        java.lang.Class<?> wildcardClass35 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test3659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3659");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) ' ');
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray6, (int) (short) 1, (-1), (int) (byte) 0);
        int[] intArray14 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray6, 2, (int) '4', (int) (short) 0, intArray14, true);
        int int20 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray6, (int) (short) -1, (int) ' ', (int) (byte) 1);
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (int) '#');
        int int24 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, (int) (short) 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (int) '4');
        int int28 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, 1);
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (int) ' ');
        java.lang.Class<?> wildcardClass31 = intArray6.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test3660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3660");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray19 = new int[] { '#' };
        int int21 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (short) -1, 1, 2, intArray19, true);
        int[] intArray25 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 10);
        int[] intArray27 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 0);
        int[] intArray33 = new int[] { ' ', (byte) -1 };
        int[] intArray39 = new int[] { (-1), 100 };
        int[] intArray41 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray39, (int) (byte) 1);
        int[] intArray47 = new int[] { (-1), 100 };
        int[] intArray49 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray47, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray41, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray49, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray33, (-1), (int) ' ', (int) (byte) 10, intArray49, false);
        int[] intArray59 = new int[] { (-1), 100 };
        int[] intArray61 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray59, (int) (byte) 1);
        int[] intArray67 = new int[] { (-1), 100 };
        int[] intArray69 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray67, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray61, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray69, false);
        int[] intArray73 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray69, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray49, (int) 'a', 100, (int) (byte) 1, intArray69, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray27, (int) (short) 0, (int) (byte) 1, (int) (short) 1, intArray49, true);
        int int79 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray27, (int) (byte) -1);
        int[] intArray81 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray27, 1);
        int int85 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray81, (int) (byte) 10, 1, (int) (byte) 1);
        int int89 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray81, 1, (int) '4', 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 2 + "'", int79 == 2);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 2 + "'", int85 == 2);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
    }

    @Test
    public void test3661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3661");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) '4');
        int int20 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) (byte) -1);
        int int24 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (int) '#', (-1), (int) (byte) 0);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
    }

    @Test
    public void test3662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3662");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) ' ');
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray6, (int) (short) 1, (-1), (int) (byte) 0);
        int int14 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray6, 10, (int) 'a', (int) (short) 10);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (int) '#');
        int int18 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray16, (int) (byte) 1);
        int[] intArray24 = new int[] { ' ', (byte) -1 };
        int[] intArray30 = new int[] { (-1), 100 };
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray30, (int) (byte) 1);
        int[] intArray38 = new int[] { (-1), 100 };
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray32, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray40, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray24, (-1), (int) ' ', (int) (byte) 10, intArray40, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray16, (int) (byte) 1, (int) (short) 10, (-1), intArray24, true);
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, 0);
        int int52 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray16, 1, (int) (byte) 100, (int) (byte) -1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
    }

    @Test
    public void test3663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3663");
        int[] intArray0 = null;
        int[] intArray6 = new int[] { (-1), 100 };
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (int) (byte) 1);
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (short) 10);
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, 10);
        int[] intArray14 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (short) 1);
        int int16 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray14, 10);
        int[] intArray22 = new int[] { ' ', (byte) -1 };
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray22, (-1), (int) ' ', (int) (byte) 10, intArray38, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray14, 0, (int) 'a', 4, intArray38, false);
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, 2);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray0, (int) ' ', (int) (short) 10, 2, intArray38, false);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
    }

    @Test
    public void test3664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3664");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) 'a', 100, (int) (byte) 1, intArray38, false);
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (short) 100);
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (-1));
        int int50 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray48, 10);
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, 0);
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (short) -1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[0, 0]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
    }

    @Test
    public void test3665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3665");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 0);
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 1);
        int int24 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (int) ' ', 10, 0);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (short) 10);
        int[] intArray32 = new int[] { ' ', (byte) -1 };
        int[] intArray38 = new int[] { (-1), 100 };
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 1);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray40, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray48, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, (-1), (int) ' ', (int) (byte) 10, intArray48, false);
        int[] intArray58 = new int[] { (-1), 100 };
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) (byte) 1);
        int[] intArray66 = new int[] { (-1), 100 };
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray60, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray68, false);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray48, (int) 'a', 100, (int) (byte) 1, intArray68, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, (int) (byte) -1, (int) (byte) 100, (int) (short) 10, intArray68, false);
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) (byte) -1);
        int int82 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray68, (int) 'a', 0, 0);
        java.lang.Class<?> wildcardClass83 = intArray68.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test3666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3666");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { ' ', (byte) -1 };
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray36, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, (-1), (int) ' ', (int) (byte) 10, intArray36, false);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, 100);
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 100);
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray12, (int) '#', (int) (short) 10, 0, intArray20, false);
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, 4);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        int[] intArray64 = new int[] { (-1), 100 };
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray58, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray66, false);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) 'a');
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) ' ');
        int int76 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray72, (int) (byte) -1, 0, (int) (short) 0);
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (-1));
        int int80 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray72, (int) (short) 1);
        int int82 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray72, 0);
        int int84 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray72, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray50, 100, (int) '4', 0, intArray72, false);
        int[] intArray88 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (int) (byte) 10);
        int[] intArray90 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, 0);
        int int92 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray90, 2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2 + "'", int80 == 2);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 2 + "'", int82 == 2);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 2 + "'", int84 == 2);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 2 + "'", int92 == 2);
    }

    @Test
    public void test3667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3667");
        int[] intArray0 = null;
        int[] intArray6 = new int[] { (-1), 100 };
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (int) (byte) 1);
        int[] intArray14 = new int[] { (-1), 100 };
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray14, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray8, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray16, false);
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) '4');
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, 2);
        int[] intArray30 = new int[] { ' ', (byte) -1 };
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        int[] intArray44 = new int[] { (-1), 100 };
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray38, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray46, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray30, (-1), (int) ' ', (int) (byte) 10, intArray46, false);
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, 1);
        int int54 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray52, (int) (short) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray24, (int) (byte) 10, (int) '#', (int) ' ', intArray52, false);
        int int58 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray52, (int) (byte) 10);
        int int62 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray52, (int) (short) 10, (int) 'a', (int) ' ');
        int int64 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray52, (int) '4');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray0, (int) (byte) 100, (int) (byte) 100, (int) (short) 0, intArray52, false);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2 + "'", int54 == 2);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2 + "'", int58 == 2);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2 + "'", int64 == 2);
    }

    @Test
    public void test3668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3668");
        int[] intArray0 = null;
        int[] intArray6 = new int[] { (-1), 100 };
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (int) (byte) 1);
        int[] intArray14 = new int[] { (-1), 100 };
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray14, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray8, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray16, false);
        int int22 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray8, (int) ' ', (int) (short) -1, (int) (short) 1);
        int int24 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) '#');
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, 10);
        int int28 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, 2);
        int[] intArray34 = new int[] { ' ', (byte) -1 };
        int[] intArray40 = new int[] { (-1), 100 };
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) (byte) 1);
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray42, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray50, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray34, (-1), (int) ' ', (int) (byte) 10, intArray50, false);
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, 1);
        int int58 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray56, (int) (short) 1);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) 'a');
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, 10);
        int[] intArray67 = new int[] { '#' };
        int int69 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray67, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray60, 4, (int) '#', 1, intArray67, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray8, (int) (short) 100, (int) '#', 0, intArray60, false);
        int[] intArray75 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) (byte) 100);
        int[] intArray77 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray75, 0);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray0, (int) (byte) 1, 4, (int) (short) 10, intArray75, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2 + "'", int58 == 2);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[35]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1]");
    }

    @Test
    public void test3669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3669");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (byte) 0);
        int[] intArray12 = new int[] { (-1), 100 };
        int[] intArray14 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) (byte) 1);
        int[] intArray20 = new int[] { (-1), 100 };
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray14, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray22, false);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, (int) 'a');
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) ' ');
        int int32 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray28, (int) (byte) -1, 0, (int) (short) 0);
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (-1));
        int int36 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray28, (int) (short) 1);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) '#');
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) '#');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray6, (int) ' ', (int) (short) 10, (int) (byte) -1, intArray40, false);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
    }

    @Test
    public void test3670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3670");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) ' ');
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray6, (int) (short) 1, (-1), (int) (byte) 0);
        int int14 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray6, 4, 10, 0);
        int[] intArray20 = new int[] { (-1), 100 };
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 1);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray22, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray30, false);
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray30, (int) 'a');
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) ' ');
        int[] intArray45 = new int[] { (short) 100, (short) 0, 100, (byte) -1, 10 };
        int int49 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray45, 1, (int) (byte) 100, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray36, 100, (int) '#', (int) (short) 10, intArray45, false);
        int[] intArray53 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (short) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray6, (int) (byte) 10, (int) (byte) 10, 4, intArray36, true);
        int int57 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, (int) (short) 10);
        int int59 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, (int) (short) 100);
        int[] intArray65 = new int[] { (-1), 100 };
        int[] intArray67 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray65, (int) (byte) 1);
        int[] intArray69 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray67, (int) (short) 10);
        int[] intArray71 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray69, 10);
        int int73 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray71, (int) 'a');
        int[] intArray75 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray71, (int) (short) 100);
        int int77 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray75, (int) (short) 0);
        int int79 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray75, (int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray6, (int) (short) 0, 0, 4, intArray75, true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 2 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[100, 0, 100, -1, 10]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2 + "'", int57 == 2);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2 + "'", int59 == 2);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 2 + "'", int73 == 2);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 2 + "'", int77 == 2);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 2 + "'", int79 == 2);
    }

    @Test
    public void test3671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3671");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 1, (int) (byte) 1, (int) (short) -1, intArray32, false);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 10);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) 'a');
        int[] intArray46 = new int[] { ' ', (byte) -1 };
        int[] intArray52 = new int[] { (-1), 100 };
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) (byte) 1);
        int[] intArray60 = new int[] { (-1), 100 };
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray54, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray62, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray46, (-1), (int) ' ', (int) (byte) 10, intArray62, false);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, 1);
        int int70 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray68, (int) (short) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray40, 0, (int) ' ', (int) (short) -1, intArray68, false);
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) (byte) 0);
        java.lang.Class<?> wildcardClass75 = intArray68.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2 + "'", int70 == 2);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test3672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3672");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, 10);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) 'a');
        int int12 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, 0);
        int int14 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) (byte) 100);
        int int16 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, 4);
        int int18 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) (short) -1);
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, 1);
        java.lang.Class<?> wildcardClass21 = intArray20.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test3673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3673");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 10);
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 1);
        int int24 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray20, (-1));
        int int28 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray20, 10, (int) (short) 10, 4);
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) ' ');
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        int[] intArray44 = new int[] { (-1), 100 };
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray38, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray46, false);
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) ' ');
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) '4');
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, 2);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray20, 0, (int) (byte) 100, (int) (short) 1, intArray52, true);
        int int60 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray52, (int) '4', 1, (int) (byte) 1);
        int int62 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray52, (int) '#');
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, 3);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray64, 3);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2 + "'", int60 == 2);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2 + "'", int62 == 2);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
    }

    @Test
    public void test3674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3674");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray27 = new int[] { (short) 100, (short) 0, 100, (byte) -1, 10 };
        int int31 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray27, 1, (int) (byte) 100, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, 100, (int) '#', (int) (short) 10, intArray27, false);
        int int35 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, 0);
        int[] intArray37 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) 'a');
        int[] intArray39 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray37, 2);
        int[] intArray41 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray37, 4);
        int[] intArray45 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray37, 2, (int) '#', (int) (byte) 10, intArray45, false);
        java.lang.Class<?> wildcardClass48 = intArray37.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[100, 0, 100, -1, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass48);
    }

    @Test
    public void test3675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3675");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { ' ', (byte) -1 };
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray36, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, (-1), (int) ' ', (int) (byte) 10, intArray36, false);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (int) 'a', 100, (int) (byte) 1, intArray56, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, 10, (int) (short) 0, (int) (short) -1, intArray36, true);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, 0);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, 10);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 100);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 0);
        int int76 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, (int) (byte) 0);
        int int78 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, 100);
        int[] intArray80 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, 100);
        int[] intArray82 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray80, (int) (short) -1);
        int[] intArray84 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray82, (int) (short) 10);
        int int88 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray82, 2, (int) '4', (int) (byte) 10);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2 + "'", int76 == 2);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 2 + "'", int78 == 2);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
    }

    @Test
    public void test3676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3676");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) ' ');
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray6, (int) (short) 1, (-1), (int) (byte) 0);
        int[] intArray14 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray6, 2, (int) '4', (int) (short) 0, intArray14, true);
        int int20 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray6, (int) (short) -1, (int) ' ', (int) (byte) 1);
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray36, false);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) 'a');
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) ' ');
        int int46 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray42, 1, (int) (byte) 100, (-1));
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray6, (int) (byte) 1, 2, (int) (short) -1, intArray42, false);
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (int) ' ');
        int int52 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray50, (int) '#');
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
    }

    @Test
    public void test3677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3677");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { ' ', (byte) -1 };
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray36, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, (-1), (int) ' ', (int) (byte) 10, intArray36, false);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (int) 'a', 100, (int) (byte) 1, intArray56, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, 10, (int) (short) 0, (int) (short) -1, intArray36, true);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, 0);
        int[] intArray72 = new int[] { (-1), 100 };
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (int) (byte) 1);
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray74, (int) (short) 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, 2, 10, (int) (short) 1, intArray74, false);
        java.lang.Class<?> wildcardClass79 = intArray74.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test3678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3678");
        int[] intArray1 = new int[] { 10 };
        int[] intArray3 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray1, (int) '4');
        int[] intArray8 = new int[] { '#' };
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) (short) 0);
        int int12 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) (byte) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray3, 10, (int) (byte) 1, (int) (short) 0, intArray8, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (short) 0);
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) '#');
        int int20 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) '4');
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[10]");
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[35]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
    }

    @Test
    public void test3679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3679");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 1);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (short) 1);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) 'a');
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, 10);
        int int34 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray28, (int) (short) 100, (int) (short) 0, 0);
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, 0);
        int int38 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray28, (int) (byte) 100);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
    }

    @Test
    public void test3680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3680");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { ' ', (byte) -1 };
        int[] intArray38 = new int[] { (-1), 100 };
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 1);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray40, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray48, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, (-1), (int) ' ', (int) (byte) 10, intArray48, false);
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, 100);
        int int56 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray32, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray24, 10, (int) 'a', (-1), intArray32, true);
        int int60 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) '#');
        int[] intArray66 = new int[] { (-1), 100 };
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) (byte) 1);
        int[] intArray74 = new int[] { (-1), 100 };
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray74, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray68, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray76, false);
        int[] intArray80 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray76, (int) ' ');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray24, (int) (byte) 100, 100, 0, intArray80, false);
        int int84 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (-1));
        int[] intArray86 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (short) 10);
        int int88 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray86, 2);
        int int92 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray86, (int) '4', (int) 'a', (int) (short) 1);
        int int94 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray86, (int) (short) -1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2 + "'", int60 == 2);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 2 + "'", int84 == 2);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 2 + "'", int88 == 2);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 2 + "'", int94 == 2);
    }

    @Test
    public void test3681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3681");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int int8 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, 0);
        int int12 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray6, 10, (int) ' ', 10);
        int int14 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, 100);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
    }

    @Test
    public void test3682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3682");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 1, (int) (byte) 1, (int) (short) -1, intArray32, false);
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        int[] intArray50 = new int[] { (-1), 100 };
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray44, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray52, false);
        int[] intArray59 = new int[] { '#' };
        int int61 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray59, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray44, (int) (short) -1, 1, 2, intArray59, true);
        int[] intArray65 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray59, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, (int) (short) 100, 0, 1, intArray65, false);
        int[] intArray69 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 100);
        int int73 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray32, (int) '#', (int) (short) 100, (-1));
        int[] intArray75 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 100);
        int int79 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray32, (int) (short) 100, (int) 'a', (int) ' ');
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[35]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[1, 1]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[1, 1]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
    }

    @Test
    public void test3683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3683");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray19 = new int[] { '#' };
        int int21 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (short) -1, 1, 2, intArray19, true);
        int[] intArray25 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 10);
        int[] intArray27 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 100);
        int int29 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray27, (int) (short) 10);
        int int31 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray27, 0);
        int[] intArray33 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray27, (int) '4');
        java.lang.Class<?> wildcardClass34 = intArray27.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test3684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3684");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (int) (byte) -1);
        int[] intArray14 = new int[] { ' ', (byte) -1 };
        int[] intArray20 = new int[] { (-1), 100 };
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 1);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray22, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray30, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray14, (-1), (int) ' ', (int) (byte) 10, intArray30, false);
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray14, 100);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) '4');
        int[] intArray44 = new int[] { (-1), 100 };
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray38, 1, (int) (byte) 1, (int) (short) -1, intArray44, false);
        int int52 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray44, 10, 100, (int) '#');
        int int54 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray44, (int) (byte) 0);
        int[] intArray60 = new int[] { (-1), 100 };
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) (byte) 1);
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) ' ');
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) (short) 100);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray44, 1, 10, (int) (byte) 0, intArray66, true);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray8, 10, 4, 2, intArray44, false);
        int int74 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray8, 100, (int) '#', (int) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            int int78 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray8, 1, (-1), (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[1, 1]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
    }

    @Test
    public void test3685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3685");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 1);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (short) 1);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) 'a');
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray36, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray44, false);
        int int50 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray36, (int) ' ', (int) (short) -1, (int) (short) 1);
        int int52 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, (int) '#');
        int int56 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray36, (int) (short) -1, 100, 10);
        int int60 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray36, 4, (int) ' ', (int) (byte) 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (-1), 1, (int) (byte) 0, intArray36, true);
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, 0);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, (int) (byte) 10);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, 1);
        java.lang.Class<?> wildcardClass69 = intArray36.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test3686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3686");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray27 = new int[] { (short) 100, (short) 0, 100, (byte) -1, 10 };
        int int31 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray27, 1, (int) (byte) 100, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, 100, (int) '#', (int) (short) 10, intArray27, false);
        int int35 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, 0);
        int[] intArray41 = new int[] { (-1), 100 };
        int[] intArray43 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray41, (int) (byte) 1);
        int[] intArray49 = new int[] { (-1), 100 };
        int[] intArray51 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray49, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray43, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray51, false);
        int[] intArray55 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray51, (int) ' ');
        int[] intArray57 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray55, (int) (byte) 0);
        int[] intArray59 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray57, (int) (byte) 1);
        int int63 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray57, (int) ' ', 10, 0);
        int[] intArray65 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray57, (int) (short) 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, 0, (int) (short) 100, (int) '#', intArray65, false);
        int[] intArray69 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) '4');
        int[] intArray73 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, (int) (byte) 0, (int) (byte) 100, (int) '4', intArray73, true);
        int int79 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (int) (byte) 0, (int) (short) 0, (int) (short) -1);
        java.lang.Class<?> wildcardClass80 = intArray18.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[100, 0, 100, -1, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(wildcardClass80);
    }

    @Test
    public void test3687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3687");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 0);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) ' ');
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray26, 0, 2, (int) (short) -1);
        int int34 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray26, 1, (int) 'a', (int) (byte) -1);
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, 10);
        int int38 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray26, 4);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
    }

    @Test
    public void test3688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3688");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { (-1), 100 };
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 1);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray22, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray30, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) 10, (int) '4', 10, intArray30, true);
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, 2);
        int int40 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray4, (int) (short) 1, (int) (short) 100, (int) (byte) -1);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, 100);
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (-1));
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) ' ');
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, 2);
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (short) 100);
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) 'a');
        int int56 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray46, 100, 3, 1);
        int int58 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray46, (int) (byte) 10);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2 + "'", int58 == 2);
    }

    @Test
    public void test3689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3689");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray27 = new int[] { (short) 100, (short) 0, 100, (byte) -1, 10 };
        int int31 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray27, 1, (int) (byte) 100, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, 100, (int) '#', (int) (short) 10, intArray27, false);
        int int35 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, 0);
        int[] intArray41 = new int[] { (-1), 100 };
        int[] intArray43 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray41, (int) (byte) 1);
        int[] intArray49 = new int[] { (-1), 100 };
        int[] intArray51 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray49, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray43, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray51, false);
        int[] intArray55 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray51, (int) ' ');
        int[] intArray57 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray55, (int) (byte) 0);
        int[] intArray59 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray57, (int) (byte) 1);
        int int63 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray57, (int) ' ', 10, 0);
        int[] intArray65 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray57, (int) (short) 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, 0, (int) (short) 100, (int) '#', intArray65, false);
        int[] intArray69 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) '4');
        int int71 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray69, (int) (short) 100);
        int int73 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray69, (int) (short) 1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[100, 0, 100, -1, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2 + "'", int71 == 2);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 2 + "'", int73 == 2);
    }

    @Test
    public void test3690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3690");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 100);
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray26, (-1), 2, (int) (byte) -1);
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) '4');
        int int36 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray32, (int) (byte) 0, 4, (int) (short) 0);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 0);
        java.lang.Class<?> wildcardClass39 = intArray38.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test3691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3691");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 100);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) 'a');
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        int[] intArray44 = new int[] { (-1), 100 };
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray38, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray46, false);
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) 'a');
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) ' ');
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) (byte) 10);
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) (short) 100);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray28, (int) (byte) -1, (int) (byte) 10, (-1), intArray56, true);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) '4');
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
    }

    @Test
    public void test3692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3692");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) 'a', 100, (int) (byte) 1, intArray38, false);
        int int46 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, (int) '4');
        int int50 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray38, (int) ' ', (int) (byte) 1, 0);
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, 100);
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, 2);
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) 'a');
        java.lang.Class<?> wildcardClass57 = intArray54.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test3693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3693");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray27 = new int[] { (short) 100, (short) 0, 100, (byte) -1, 10 };
        int int31 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray27, 1, (int) (byte) 100, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, 100, (int) '#', (int) (short) 10, intArray27, false);
        int int37 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray27, (int) (byte) 100, (int) ' ', 10);
        int int41 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray27, 0, (int) (byte) 10, 4);
        int int45 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray27, (int) (byte) -1, (int) (byte) 0, (int) (byte) 1);
        int[] intArray51 = new int[] { ' ', (byte) -1 };
        int[] intArray57 = new int[] { (-1), 100 };
        int[] intArray59 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray57, (int) (byte) 1);
        int[] intArray65 = new int[] { (-1), 100 };
        int[] intArray67 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray65, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray59, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray67, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray51, (-1), (int) ' ', (int) (byte) 10, intArray67, false);
        int[] intArray73 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray51, 100);
        int[] intArray75 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray51, (int) (byte) 100);
        int int79 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray75, (-1), 2, (int) (byte) -1);
        int int83 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray75, (int) ' ', (int) (byte) 100, 4);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray27, 2, 4, 3, intArray75, true);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[100, 0, 100, -1, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
    }

    @Test
    public void test3694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3694");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { (-1), 100 };
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 1);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray22, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray30, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) 10, (int) '4', 10, intArray30, true);
        int int36 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray4, 0);
        int int40 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray4, (int) (byte) 0, (-1), 1);
        int int42 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray4, (int) '4');
        int int46 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray4, 4, (int) (short) 10, 4);
        int int50 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray4, (int) (byte) 10, (int) 'a', 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2 + "'", int40 == 2);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2 + "'", int42 == 2);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
    }

    @Test
    public void test3695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3695");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) ' ');
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray6, (int) (short) 1, (-1), (int) (byte) 0);
        int[] intArray14 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray6, 2, (int) '4', (int) (short) 0, intArray14, true);
        int int20 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray6, (int) (short) -1, (int) ' ', (int) (byte) 1);
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray6, 0, (int) 'a', 2, intArray26, false);
        int int32 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, (int) (byte) 1);
        int int36 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray6, 2, 100, (int) (byte) -1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
    }

    @Test
    public void test3696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3696");
        int[] intArray1 = new int[] { 10 };
        int[] intArray3 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray1, (int) '4');
        int[] intArray8 = new int[] { '#' };
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) (short) 0);
        int int12 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) (byte) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray3, 10, (int) (byte) 1, (int) (short) 0, intArray8, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, 1);
        int int20 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray16, (int) (short) 1, (int) (short) 1, (int) (short) 0);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[10]");
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[35]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    }

    @Test
    public void test3697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3697");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray19 = new int[] { '#' };
        int int21 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (short) -1, 1, 2, intArray19, true);
        int[] intArray25 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 10);
        int[] intArray27 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 0);
        int[] intArray33 = new int[] { ' ', (byte) -1 };
        int[] intArray39 = new int[] { (-1), 100 };
        int[] intArray41 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray39, (int) (byte) 1);
        int[] intArray47 = new int[] { (-1), 100 };
        int[] intArray49 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray47, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray41, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray49, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray33, (-1), (int) ' ', (int) (byte) 10, intArray49, false);
        int[] intArray59 = new int[] { (-1), 100 };
        int[] intArray61 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray59, (int) (byte) 1);
        int[] intArray67 = new int[] { (-1), 100 };
        int[] intArray69 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray67, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray61, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray69, false);
        int[] intArray73 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray69, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray49, (int) 'a', 100, (int) (byte) 1, intArray69, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray27, (int) (short) 0, (int) (byte) 1, (int) (short) 1, intArray49, true);
        int int79 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray27, (int) (byte) -1);
        int[] intArray81 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray27, 1);
        int[] intArray83 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray81, (int) (short) -1);
        int[] intArray85 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray81, (int) (short) 100);
        int[] intArray87 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray85, (int) '4');
        int[] intArray89 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray85, 0);
        java.lang.Class<?> wildcardClass90 = intArray85.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 2 + "'", int79 == 2);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test3698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3698");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 1, (int) (byte) 1, (int) (short) -1, intArray32, false);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 10);
        int int40 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray32, (int) 'a');
        int int44 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray32, 1, (int) (short) 10, 0);
        int int46 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray32, 4);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
    }

    @Test
    public void test3699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3699");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        int[] intArray18 = new int[] { (-1), 100 };
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray12, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray20, false);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray12, (int) (byte) 10, (int) '4', 10, intArray38, true);
        int[] intArray48 = new int[] { ' ', (byte) -1 };
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        int[] intArray62 = new int[] { (-1), 100 };
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray56, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray64, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray48, (-1), (int) ' ', (int) (byte) 10, intArray64, false);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, 0);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) ' ');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray12, 2, (int) 'a', 4, intArray70, true);
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray2, 1, (int) (short) -1, (int) (byte) 1, intArray70, false);
        int[] intArray80 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) (byte) 0);
        int int82 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray80, (int) (short) 10);
        java.lang.Class<?> wildcardClass83 = intArray80.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 2 + "'", int82 == 2);
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test3700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3700");
        int[] intArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int4 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray0, 4, 1, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test3701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3701");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 100);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) 'a');
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (short) 10);
        int int40 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, 0);
        int int42 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, (int) (short) -1);
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 0);
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, 0);
        int int48 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray46, 0);
        int[] intArray52 = null;
        int[] intArray58 = new int[] { (-1), 100 };
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) (byte) 1);
        int[] intArray66 = new int[] { (-1), 100 };
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray60, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray68, false);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) ' ');
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (int) (byte) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray52, 10, (int) (short) 1, (int) (short) 0, intArray74, false);
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray74, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray46, (int) 'a', (int) ' ', 1, intArray78, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (short) 1, (int) (short) 10, (-1), intArray46, false);
        int[] intArray84 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (short) 0);
        int int86 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray84, 0);
        // The following exception was thrown during execution in test generation
        try {
            int int90 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray84, (int) (short) 1, 2, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2 + "'", int40 == 2);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2 + "'", int42 == 2);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 2 + "'", int86 == 2);
    }

    @Test
    public void test3702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3702");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 1);
        int[] intArray30 = new int[] { ' ', (byte) -1 };
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        int[] intArray44 = new int[] { (-1), 100 };
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray38, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray46, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray30, (-1), (int) ' ', (int) (byte) 10, intArray46, false);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        int[] intArray64 = new int[] { (-1), 100 };
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray58, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray66, false);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray46, (int) 'a', 100, (int) (byte) 1, intArray66, false);
        int int74 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray66, (int) '4');
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) (byte) 10, (int) '#', 0, intArray66, false);
        int int82 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (int) (byte) 100, (int) (short) 10, (int) (byte) -1);
        int[] intArray84 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 100);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2 + "'", int74 == 2);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1]");
    }

    @Test
    public void test3703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3703");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 1, (int) (byte) 1, (int) (short) -1, intArray32, false);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 10);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 1);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) 'a');
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, 3);
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) '#');
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
    }

    @Test
    public void test3704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3704");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int int24 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) (short) 1);
        int[] intArray30 = new int[] { (-1), 100 };
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray30, (int) (byte) 1);
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 10);
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, 10);
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        int[] intArray50 = new int[] { (-1), 100 };
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray44, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray52, false);
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) 'a');
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) ' ');
        int int62 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray58, (int) (byte) -1, 0, (int) (short) 0);
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (-1));
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray58, (int) (byte) 100);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray36, (-1), 100, 3, intArray58, true);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) (byte) 100);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) (short) 1, (int) (byte) 10, (int) (short) -1, intArray70, false);
        int int74 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) (short) 1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2 + "'", int74 == 2);
    }

    @Test
    public void test3705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3705");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (short) 100);
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 10);
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray36, false);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) 'a');
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) ' ');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, 100, (int) (short) 100, (int) 'a', intArray40, true);
        int[] intArray50 = new int[] { ' ', (byte) -1 };
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        int[] intArray64 = new int[] { (-1), 100 };
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray58, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray66, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray50, (-1), (int) ' ', (int) (byte) 10, intArray66, false);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, 100);
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) (byte) 100);
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, 1);
        int int78 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray76, (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray40, (int) (byte) -1, (int) (byte) 10, (int) (byte) 100, intArray76, false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 55 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 2 + "'", int78 == 2);
    }

    @Test
    public void test3706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3706");
        int[] intArray0 = null;
        int[] intArray6 = new int[] { (-1), 100 };
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (int) (byte) 1);
        int[] intArray14 = new int[] { (-1), 100 };
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray14, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray8, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray16, false);
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) 'a');
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) ' ');
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, (int) (byte) 10);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray0, 0, (int) (byte) 0, 10, intArray22, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot load from int array because \"nums\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
    }

    @Test
    public void test3707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3707");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { ' ', (byte) -1 };
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray36, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, (-1), (int) ' ', (int) (byte) 10, intArray36, false);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (int) 'a', 100, (int) (byte) 1, intArray56, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, 10, (int) (short) 0, (int) (short) -1, intArray36, true);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, 0);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, 10);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 100);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 0);
        int int76 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, (int) (byte) 0);
        int int78 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, 100);
        int[] intArray80 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, 100);
        int[] intArray82 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray80, (int) (short) -1);
        int[] intArray84 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray80, (int) ' ');
        int[] intArray86 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray84, (int) (short) 0);
        java.lang.Class<?> wildcardClass87 = intArray86.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2 + "'", int76 == 2);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 2 + "'", int78 == 2);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test3708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3708");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray19 = new int[] { '#' };
        int int21 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (short) -1, 1, 2, intArray19, true);
        int[] intArray25 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 10);
        int[] intArray27 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 0);
        int[] intArray33 = new int[] { ' ', (byte) -1 };
        int[] intArray39 = new int[] { (-1), 100 };
        int[] intArray41 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray39, (int) (byte) 1);
        int[] intArray47 = new int[] { (-1), 100 };
        int[] intArray49 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray47, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray41, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray49, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray33, (-1), (int) ' ', (int) (byte) 10, intArray49, false);
        int[] intArray59 = new int[] { (-1), 100 };
        int[] intArray61 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray59, (int) (byte) 1);
        int[] intArray67 = new int[] { (-1), 100 };
        int[] intArray69 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray67, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray61, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray69, false);
        int[] intArray73 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray69, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray49, (int) 'a', 100, (int) (byte) 1, intArray69, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray27, (int) (short) 0, (int) (byte) 1, (int) (short) 1, intArray49, true);
        int int79 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray27, (int) (byte) -1);
        int[] intArray81 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray27, 1);
        int[] intArray83 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray81, (int) (short) -1);
        int[] intArray85 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray81, (int) (short) 100);
        int[] intArray87 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray85, (int) '4');
        int[] intArray89 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray87, 0);
        int[] intArray91 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray89, 0);
        int[] intArray93 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray91, (int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            int int97 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray93, (int) (byte) 100, 100, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 2 + "'", int79 == 2);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, -1]");
    }

    @Test
    public void test3709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3709");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray27 = new int[] { (short) 100, (short) 0, 100, (byte) -1, 10 };
        int int31 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray27, 1, (int) (byte) 100, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, 100, (int) '#', (int) (short) 10, intArray27, false);
        int[] intArray39 = new int[] { ' ', (byte) -1 };
        int[] intArray45 = new int[] { (-1), 100 };
        int[] intArray47 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray45, (int) (byte) 1);
        int[] intArray53 = new int[] { (-1), 100 };
        int[] intArray55 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray53, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray47, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray55, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray39, (-1), (int) ' ', (int) (byte) 10, intArray55, false);
        int[] intArray61 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray55, 0);
        int[] intArray63 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray61, (int) (byte) 10);
        int int65 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray63, 0);
        int[] intArray67 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray63, (int) (short) 100);
        int int69 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray63, (int) (byte) 10);
        int[] intArray71 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray63, (int) '#');
        int[] intArray77 = new int[] { (-1), 100 };
        int[] intArray79 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray77, (int) (byte) 1);
        int[] intArray81 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray77, (int) ' ');
        int int85 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray81, (int) (short) 1, (-1), (int) (byte) 0);
        int int89 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray81, 10, (int) 'a', (int) (short) 10);
        int[] intArray91 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray81, (int) (byte) 100);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray63, (int) 'a', (int) (short) 0, (int) (byte) -1, intArray81, false);
        int[] intArray95 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray63, (-1));
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray27, (int) ' ', (int) '4', (int) (byte) 10, intArray63, false);
        int[] intArray99 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray63, (int) (short) 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[100, 0, 100, -1, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2 + "'", int65 == 2);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 2 + "'", int69 == 2);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray99);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray99), "[-1, -1]");
    }

    @Test
    public void test3710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3710");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray22 = new int[] { ' ', (byte) -1 };
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray22, (-1), (int) ' ', (int) (byte) 10, intArray38, false);
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray50, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray58, false);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray38, (int) 'a', 100, (int) (byte) 1, intArray58, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray12, (int) (short) 100, (int) 'a', (int) (short) 0, intArray38, true);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (-1));
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) (short) 100);
        int int74 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray12, (int) (short) 100, (int) 'a', (int) (short) -1);
        int int76 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray12, 0);
        int int80 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray12, (int) '#', 4, (int) (short) 0);
        int[] intArray82 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        java.lang.Class<?> wildcardClass83 = intArray82.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2 + "'", int76 == 2);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test3711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3711");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int int8 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, 0);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, (int) (short) -1);
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (int) (byte) 0);
        int[] intArray18 = new int[] { ' ', (byte) -1 };
        int[] intArray24 = new int[] { (-1), 100 };
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 1);
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray26, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray34, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (-1), (int) ' ', (int) (byte) 10, intArray34, false);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 100);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) '4');
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray42, 1, (int) (byte) 1, (int) (short) -1, intArray48, false);
        int[] intArray58 = new int[] { (-1), 100 };
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) (byte) 1);
        int[] intArray66 = new int[] { (-1), 100 };
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray60, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray68, false);
        int[] intArray75 = new int[] { '#' };
        int int77 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray75, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray60, (int) (short) -1, 1, 2, intArray75, true);
        int[] intArray81 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray75, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray48, (int) (short) 100, 0, 1, intArray81, false);
        int[] intArray85 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 100);
        int int87 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray48, (-1));
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray6, 0, 0, (int) (byte) 1, intArray48, true);
        int[] intArray91 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) '4');
        int[] intArray93 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray91, (int) (short) 100);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[35]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 1]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[1, 1]");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1 + "'", int87 == 1);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, -1]");
    }

    @Test
    public void test3712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3712");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (short) 100);
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) '4');
        // The following exception was thrown during execution in test generation
        try {
            int int24 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray20, (int) (byte) -1, 0, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
    }

    @Test
    public void test3713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3713");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { (-1), 100 };
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 1);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray22, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray30, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) 10, (int) '4', 10, intArray30, true);
        int int36 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray4, 0);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (byte) 100);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) '4');
        int int42 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray4, 4);
        int int44 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray4, (int) (short) 0);
        java.lang.Class<?> wildcardClass45 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2 + "'", int42 == 2);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2 + "'", int44 == 2);
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test3714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3714");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) '4');
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 2);
        int[] intArray26 = new int[] { ' ', (byte) -1 };
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        int[] intArray40 = new int[] { (-1), 100 };
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray34, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray42, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, (-1), (int) ' ', (int) (byte) 10, intArray42, false);
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, 1);
        int int50 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray48, (int) (short) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, (int) (byte) 10, (int) '#', (int) ' ', intArray48, false);
        int[] intArray58 = new int[] { (-1), 100 };
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) (byte) 1);
        int[] intArray66 = new int[] { (-1), 100 };
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray60, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray68, false);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) ' ');
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (int) (byte) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, 2, (-1), intArray72, true);
        int int80 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray72, 2, (int) ' ', (int) (byte) 0);
        int[] intArray82 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (int) (short) -1);
        java.lang.Class<?> wildcardClass83 = intArray72.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[0, 1]");
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test3715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3715");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) '4');
        int int20 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) (byte) -1);
        int int22 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (-1));
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (-1), (int) '#', 4);
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (int) (short) 0, (int) '#', (int) (byte) 1);
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 0);
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, 2);
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, 0);
        int int38 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray34, (int) '4');
        int int42 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray34, 3, (int) (byte) 100, (int) '#');
        // The following exception was thrown during execution in test generation
        try {
            int int46 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray34, 0, 1, 4);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
    }

    @Test
    public void test3716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3716");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 100);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 1);
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 0);
        int int34 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray28, 1, (int) 'a', 0);
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (short) 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
    }

    @Test
    public void test3717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3717");
        int[] intArray0 = null;
        int[] intArray4 = null;
        int[] intArray10 = new int[] { ' ', (byte) -1 };
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        int[] intArray24 = new int[] { (-1), 100 };
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray26, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray10, (-1), (int) ' ', (int) (byte) 10, intArray26, false);
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, 100);
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) '4');
        int[] intArray40 = new int[] { ' ', (byte) -1 };
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray40, (-1), (int) ' ', (int) (byte) 10, intArray56, false);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, 100);
        int int64 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray40, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, 10, (int) 'a', (-1), intArray40, true);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, (int) ' ', (int) (byte) 1, (int) (short) -1, intArray40, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray0, (int) (short) 0, (int) (short) 1, (int) (short) -1, intArray40, true);
        int int74 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray40, 10, (int) (short) 100, 1);
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) '4');
        int int78 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray76, (int) (short) 10);
        int int82 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray76, (-1), (int) '4', (int) (byte) 1);
        java.lang.Class<?> wildcardClass83 = intArray76.getClass();
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 2 + "'", int78 == 2);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test3718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3718");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 1);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (short) 1);
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        int[] intArray40 = new int[] { (-1), 100 };
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray34, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray42, false);
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) 'a');
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (short) 100);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray24, (int) '#', (int) 'a', (int) '#', intArray48, false);
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) '4');
        int[] intArray56 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray52, 0, (int) '4', 0, intArray56, false);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
    }

    @Test
    public void test3719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3719");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 10);
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 1);
        int int24 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray20, (-1));
        int int28 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray20, 10, (int) (short) 10, 4);
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) ' ');
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        int[] intArray44 = new int[] { (-1), 100 };
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray38, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray46, false);
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) ' ');
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) '4');
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, 2);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray20, 0, (int) (byte) 100, (int) (short) 1, intArray52, true);
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) 'a');
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, 2);
        java.lang.Class<?> wildcardClass61 = intArray58.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass61);
    }

    @Test
    public void test3720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3720");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 1, (int) (byte) 1, (int) (short) -1, intArray32, false);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 10);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 1);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, (int) (byte) 10, (int) (short) 1, 1, intArray46, false);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        int[] intArray64 = new int[] { (-1), 100 };
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray58, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray66, false);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) 'a');
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) ' ');
        int int76 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray72, (int) (byte) -1, 0, (int) (short) 0);
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (-1));
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray32, (int) '4', 1, (int) (short) 0, intArray78, false);
        int int82 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray32, 1);
        int int84 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray32, (int) 'a');
        java.lang.Class<?> wildcardClass85 = intArray32.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1);
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test3721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3721");
        int[] intArray1 = new int[] { 10 };
        int[] intArray3 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray1, (int) '4');
        int[] intArray8 = new int[] { '#' };
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) (short) 0);
        int int12 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) (byte) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray3, 10, (int) (byte) 1, (int) (short) 0, intArray8, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, 1);
        int int20 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray16, (-1), 2, (int) (short) 0);
        int int24 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray16, (int) (byte) 0, 0, 0);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray16, (int) (short) 100);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[10]");
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[35]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
    }

    @Test
    public void test3722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3722");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 10);
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 1);
        int int24 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray20, (-1));
        int int28 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray20, 10, (int) (short) 10, 4);
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) ' ');
        java.lang.Class<?> wildcardClass31 = intArray20.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test3723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3723");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 0);
        java.lang.Class<?> wildcardClass19 = intArray16.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test3724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3724");
        int[] intArray0 = null;
        int[] intArray6 = new int[] { (-1), 100 };
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (int) (byte) 1);
        int[] intArray14 = new int[] { (-1), 100 };
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray14, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray8, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray16, false);
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) '4');
        int int24 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray22, (int) (byte) -1);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray22, (-1));
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray22, (-1), (int) '#', 4);
        int int34 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray22, (int) (short) 0, (int) '#', (int) (byte) 1);
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, (int) (byte) 0);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (short) 1);
        int[] intArray42 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray38, (int) (short) 1, (int) '4', (int) (short) -1, intArray42, true);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray0, 0, 0, (int) (byte) 0, intArray42, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot load from int array because \"nums\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
    }

    @Test
    public void test3725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3725");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 0);
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) '#');
        int int22 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray16, (int) ' ');
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, 4);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (short) 100);
        int[] intArray32 = new int[] { ' ', (byte) -1 };
        int[] intArray38 = new int[] { (-1), 100 };
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 1);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray40, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray48, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, (-1), (int) ' ', (int) (byte) 10, intArray48, false);
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, 100);
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 100);
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, 1);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) (byte) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray26, (int) (byte) 1, (int) (short) 100, 10, intArray60, false);
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (-1));
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray26, (int) ' ');
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
    }

    @Test
    public void test3726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3726");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) '#');
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) (short) 0);
        int int12 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) ' ');
        int[] intArray14 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, 0);
        java.lang.Class<?> wildcardClass15 = intArray14.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test3727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3727");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 0);
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 1);
        int int24 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (int) ' ', 10, 0);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (short) 10);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) '4');
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray26, (int) 'a');
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) ' ');
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (short) 100);
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (short) 10);
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (short) 0);
        int int48 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, (int) '4');
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, (int) 'a', 0, (int) 'a', intArray36, false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 48 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[1, 1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
    }

    @Test
    public void test3728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3728");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int int8 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, 0);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, (int) (short) -1);
        int int12 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, (int) '#');
        int int16 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray6, (int) (byte) 1, 0, (int) (byte) 1);
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (int) 'a');
        int int22 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray6, (int) (byte) 100, (int) (byte) -1, (int) (byte) 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
    }

    @Test
    public void test3729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3729");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int int22 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (int) (byte) -1, 0, (int) (short) 0);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (-1));
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) (byte) 100);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) '4');
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (short) 10);
        int[] intArray36 = new int[] { ' ', (byte) -1 };
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        int[] intArray50 = new int[] { (-1), 100 };
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray44, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray52, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (-1), (int) ' ', (int) (byte) 10, intArray52, false);
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, 0);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) ' ');
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) (byte) 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, 0, (int) '#', 0, intArray60, false);
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) (short) 10);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) (short) 1);
        java.lang.Class<?> wildcardClass69 = intArray68.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test3730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3730");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) ' ');
        int[] intArray11 = new int[] { 10 };
        int[] intArray13 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray11, (int) '4');
        int[] intArray18 = new int[] { '#' };
        int int20 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) (short) 0);
        int int22 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) (byte) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray13, 10, (int) (byte) 1, (int) (short) 0, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray6, (int) (byte) 1, 0, (-1), intArray13, true);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray13, 4);
        int[] intArray33 = new int[] { 10 };
        int[] intArray35 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray33, (int) '4');
        int[] intArray40 = new int[] { '#' };
        int int42 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray40, (int) (short) 0);
        int int44 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray40, (int) (byte) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray35, 10, (int) (byte) 1, (int) (short) 0, intArray40, false);
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, 1);
        int int50 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray40, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) '#', 2, (int) (byte) -1, intArray40, false);
        int int54 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray28, 0);
        java.lang.Class<?> wildcardClass55 = intArray28.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[10]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[35]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[10]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[35]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2 + "'", int54 == 2);
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test3731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3731");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray19 = new int[] { '#' };
        int int21 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (short) -1, 1, 2, intArray19, true);
        int[] intArray25 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 10);
        int[] intArray27 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 0);
        int[] intArray33 = new int[] { ' ', (byte) -1 };
        int[] intArray39 = new int[] { (-1), 100 };
        int[] intArray41 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray39, (int) (byte) 1);
        int[] intArray47 = new int[] { (-1), 100 };
        int[] intArray49 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray47, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray41, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray49, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray33, (-1), (int) ' ', (int) (byte) 10, intArray49, false);
        int[] intArray59 = new int[] { (-1), 100 };
        int[] intArray61 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray59, (int) (byte) 1);
        int[] intArray67 = new int[] { (-1), 100 };
        int[] intArray69 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray67, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray61, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray69, false);
        int[] intArray73 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray69, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray49, (int) 'a', 100, (int) (byte) 1, intArray69, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray27, (int) (short) 0, (int) (byte) 1, (int) (short) 1, intArray49, true);
        int int79 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray27, (int) (byte) -1);
        int int81 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray27, (int) (byte) -1);
        int[] intArray83 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray27, 1);
        int[] intArray85 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray83, 0);
        int[] intArray87 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray83, (int) 'a');
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 2 + "'", int79 == 2);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 2 + "'", int81 == 2);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, -1]");
    }

    @Test
    public void test3732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3732");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) ' ');
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray6, (int) (short) 1, (-1), (int) (byte) 0);
        int int14 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray6, 10, (int) 'a', (int) (short) 10);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (int) '#');
        int[] intArray22 = new int[] { ' ', (byte) -1 };
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray22, (-1), (int) ' ', (int) (byte) 10, intArray38, false);
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, 100);
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, (int) (byte) 100);
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, 1);
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, (int) '4');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray6, (-1), 1, (-1), intArray22, true);
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (int) 'a');
        int int58 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray54, 0, (int) (byte) 100, (int) (short) 10);
        java.lang.Class<?> wildcardClass59 = intArray54.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test3733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3733");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 1, (int) (byte) 1, (int) (short) -1, intArray32, false);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 10);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 1);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, (int) (byte) 10, (int) (short) 1, 1, intArray46, false);
        int int52 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray46, (int) '#');
        int[] intArray57 = new int[] { '#' };
        int int59 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray57, (int) (short) 0);
        int int61 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray57, (int) (byte) 0);
        int[] intArray67 = new int[] { ' ', (byte) -1 };
        int[] intArray73 = new int[] { (-1), 100 };
        int[] intArray75 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray73, (int) (byte) 1);
        int[] intArray81 = new int[] { (-1), 100 };
        int[] intArray83 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray81, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray75, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray83, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray67, (-1), (int) ' ', (int) (byte) 10, intArray83, false);
        int[] intArray89 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray83, 0);
        int int91 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray89, (int) (byte) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray57, 10, 0, (int) (byte) 0, intArray89, true);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray46, 3, (int) ' ', 0, intArray57, false);
        java.lang.Class<?> wildcardClass96 = intArray57.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[35]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 2 + "'", int91 == 2);
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test3734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3734");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray22 = new int[] { (-1), 100 };
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, (int) (byte) 1);
        int[] intArray30 = new int[] { (-1), 100 };
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray30, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray24, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray32, false);
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) 'a');
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) ' ');
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray16, (int) (byte) 1, (int) 'a', 0, intArray38, true);
        int int44 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, (int) (short) 100);
        int int46 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, (int) (short) 0);
        int int48 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, 3);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2 + "'", int44 == 2);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
    }

    @Test
    public void test3735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3735");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, 0);
        int[] intArray24 = new int[] { (-1), 100 };
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 1);
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray26, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray34, false);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) 'a');
        int int40 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, (int) ' ');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) (short) 100, 10, (int) (byte) -1, intArray38, true);
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 100);
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, 4);
        int int48 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray44, (int) ' ');
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2 + "'", int40 == 2);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
    }

    @Test
    public void test3736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3736");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 1, (int) (byte) 1, (int) (short) -1, intArray32, false);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 10);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 1);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, (int) (byte) 10, (int) (short) 1, 1, intArray46, false);
        int int52 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray46, (int) '#');
        int[] intArray57 = new int[] { '#' };
        int int59 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray57, (int) (short) 0);
        int int61 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray57, (int) (byte) 0);
        int[] intArray67 = new int[] { ' ', (byte) -1 };
        int[] intArray73 = new int[] { (-1), 100 };
        int[] intArray75 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray73, (int) (byte) 1);
        int[] intArray81 = new int[] { (-1), 100 };
        int[] intArray83 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray81, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray75, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray83, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray67, (-1), (int) ' ', (int) (byte) 10, intArray83, false);
        int[] intArray89 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray83, 0);
        int int91 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray89, (int) (byte) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray57, 10, 0, (int) (byte) 0, intArray89, true);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray46, 3, (int) ' ', 0, intArray57, false);
        int[] intArray97 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray57, 0);
        java.lang.Class<?> wildcardClass98 = intArray97.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[35]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 2 + "'", int91 == 2);
        org.junit.Assert.assertNotNull(intArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray97), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test3737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3737");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { ' ', (byte) -1 };
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray36, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, (-1), (int) ' ', (int) (byte) 10, intArray36, false);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (int) 'a', 100, (int) (byte) 1, intArray56, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, 10, (int) (short) 0, (int) (short) -1, intArray36, true);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, 0);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, 10);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 100);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            int int76 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray72, (int) (byte) -1, 2, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
    }

    @Test
    public void test3738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3738");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) '4');
        int int20 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) (byte) -1);
        int int22 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (-1));
        java.lang.Class<?> wildcardClass23 = intArray18.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test3739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3739");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray22 = new int[] { ' ', (byte) -1 };
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray22, (-1), (int) ' ', (int) (byte) 10, intArray38, false);
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray50, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray58, false);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray38, (int) 'a', 100, (int) (byte) 1, intArray58, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray12, (int) (short) 100, (int) 'a', (int) (short) 0, intArray38, true);
        int int68 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray12, (int) '4');
        int int72 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray12, 0, (int) (byte) 100, (int) 'a');
        int int76 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray12, 0, 0, (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            int int80 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray12, 0, (int) (short) 1, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2 + "'", int68 == 2);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2 + "'", int76 == 2);
    }

    @Test
    public void test3740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3740");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 1, (int) (byte) 1, (int) (short) -1, intArray32, false);
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        int[] intArray50 = new int[] { (-1), 100 };
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray44, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray52, false);
        int[] intArray59 = new int[] { '#' };
        int int61 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray59, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray44, (int) (short) -1, 1, 2, intArray59, true);
        int[] intArray65 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray59, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, (int) (short) 100, 0, 1, intArray65, false);
        int[] intArray69 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 100);
        int int71 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray32, (-1));
        int[] intArray73 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, 0);
        int[] intArray75 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) -1);
        int[] intArray77 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray75, (int) (byte) 1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[35]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[1, 1]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[0, 0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1]");
    }

    @Test
    public void test3741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3741");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) '4');
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 2);
        int int22 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) '4');
        int[] intArray28 = new int[] { ' ', (byte) -1 };
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray36, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray44, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray28, (-1), (int) ' ', (int) (byte) 10, intArray44, false);
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, 100);
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) '4');
        int[] intArray58 = new int[] { ' ', (byte) -1 };
        int[] intArray64 = new int[] { (-1), 100 };
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) (byte) 1);
        int[] intArray72 = new int[] { (-1), 100 };
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray66, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray74, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray58, (-1), (int) ' ', (int) (byte) 10, intArray74, false);
        int[] intArray80 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, 100);
        int int82 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray58, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray50, 10, (int) 'a', (-1), intArray58, true);
        int int86 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray58, (int) ' ');
        int[] intArray88 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) '4');
        int int90 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray58, 0);
        int[] intArray92 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) (short) -1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, 4, (-1), 0, intArray58, false);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 2 + "'", int86 == 2);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1]");
    }

    @Test
    public void test3742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3742");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray19 = new int[] { '#' };
        int int21 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (short) -1, 1, 2, intArray19, true);
        int[] intArray25 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 10);
        int int27 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) -1);
        int int29 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (byte) -1);
        int[] intArray31 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 1);
        int int33 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray31, (int) (byte) 10);
        int[] intArray39 = new int[] { (-1), 100 };
        int[] intArray41 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray39, (int) (byte) 1);
        int[] intArray47 = new int[] { (-1), 100 };
        int[] intArray49 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray47, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray41, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray49, false);
        int[] intArray53 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray49, (int) 'a');
        int[] intArray55 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray53, (int) ' ');
        int int59 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray55, (int) (byte) -1, 0, (int) (short) 0);
        int[] intArray61 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray55, (-1));
        int int63 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray55, (int) (byte) 100);
        int[] intArray65 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray55, (int) '4');
        int[] intArray67 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray65, (int) (short) 10);
        int[] intArray73 = new int[] { (-1), 100 };
        int[] intArray75 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray73, (int) (byte) 1);
        int[] intArray77 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray75, (int) (short) 10);
        int[] intArray79 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray77, 10);
        int[] intArray81 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray77, (int) (short) 1);
        int int83 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray81, 2);
        int int85 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray81, 2);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray65, (int) ' ', (int) (short) 1, (int) (byte) 1, intArray81, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray31, (int) (short) 0, (int) (byte) 1, (int) (short) 0, intArray65, false);
        int[] intArray91 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray31, (int) (byte) 0);
        int[] intArray93 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray91, 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 2 + "'", int63 == 2);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 2 + "'", int83 == 2);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 2 + "'", int85 == 2);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, -1]");
    }

    @Test
    public void test3743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3743");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 1);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (short) 1);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) 'a');
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, 10);
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray30, (int) '4');
        int[] intArray37 = new int[] { 10 };
        int[] intArray39 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray37, (int) '4');
        int[] intArray44 = new int[] { '#' };
        int int46 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray44, (int) (short) 0);
        int int48 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray44, (int) (byte) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray39, 10, (int) (byte) 1, (int) (short) 0, intArray44, false);
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, 1);
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) (short) 10);
        int int58 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray44, (int) ' ', (int) (short) 100, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray30, (int) (byte) 0, (int) (byte) 1, (int) (short) 1, intArray44, false);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[10]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[35]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
    }

    @Test
    public void test3744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3744");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) 'a', 100, (int) (byte) 1, intArray38, false);
        int int46 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, (int) '4');
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) 'a');
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, 1);
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) (byte) 100);
        int int56 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray52, (int) (short) 0, (int) 'a', (int) (byte) 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
    }

    @Test
    public void test3745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3745");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) ' ');
        int[] intArray11 = new int[] { 10 };
        int[] intArray13 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray11, (int) '4');
        int[] intArray18 = new int[] { '#' };
        int int20 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) (short) 0);
        int int22 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) (byte) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray13, 10, (int) (byte) 1, (int) (short) 0, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray6, (int) (byte) 1, 0, (-1), intArray13, true);
        int[] intArray32 = new int[] { ' ', (byte) -1 };
        int[] intArray38 = new int[] { (-1), 100 };
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 1);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray40, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray48, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, (-1), (int) ' ', (int) (byte) 10, intArray48, false);
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, 100);
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 100);
        int int60 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray56, (int) (short) 10, (-1), (int) (short) 1);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, 100);
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) ' ');
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) (byte) 1);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, 4);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray13, (int) (short) 100, (int) (short) 10, 3, intArray68, true);
        int int74 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray68, (int) (byte) 0, (int) (short) 100, (int) (byte) 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[10]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[35]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2 + "'", int60 == 2);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
    }

    @Test
    public void test3746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3746");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) 'a', 100, (int) (byte) 1, intArray38, false);
        int int46 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, (int) '4');
        int int50 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray38, (int) ' ', (int) (byte) 1, 0);
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, 100);
        int int54 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray52, (int) (byte) 0);
        int int56 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray52, 1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2 + "'", int54 == 2);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2 + "'", int56 == 2);
    }

    @Test
    public void test3747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3747");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (-1));
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray36, false);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) 'a');
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) ' ');
        int[] intArray51 = new int[] { (short) 100, (short) 0, 100, (byte) -1, 10 };
        int int55 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray51, 1, (int) (byte) 100, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray42, 100, (int) '#', (int) (short) 10, intArray51, false);
        int int59 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray42, 0);
        int[] intArray61 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (short) 1);
        int[] intArray67 = new int[] { (-1), 100 };
        int[] intArray69 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray67, (int) (byte) 1);
        int[] intArray75 = new int[] { (-1), 100 };
        int[] intArray77 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray75, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray69, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray77, false);
        int[] intArray84 = new int[] { '#' };
        int int86 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray84, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray69, (int) (short) -1, 1, 2, intArray84, true);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray42, (int) (short) 10, 2, (int) (byte) 1, intArray69, true);
        int int92 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray69, 4);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray20, (int) (byte) -1, (int) '4', (int) (short) 1, intArray69, false);
        int int96 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray69, 100);
        int int98 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray69, 2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[100, 0, 100, -1, 10]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2 + "'", int59 == 2);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[35]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 2 + "'", int92 == 2);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 2 + "'", int96 == 2);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 2 + "'", int98 == 2);
    }

    @Test
    public void test3748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3748");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int int8 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, 0);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, (int) (short) -1);
        int int12 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, (int) '#');
        int int16 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray6, (int) (byte) 1, 0, (int) (byte) 1);
        int int18 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, (int) (short) 1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
    }

    @Test
    public void test3749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3749");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) ' ');
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray6, (int) (short) 1, (-1), (int) (byte) 0);
        int int14 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray6, 10, (int) 'a', (int) (short) 10);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (int) (byte) 100);
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, 0);
        java.lang.Class<?> wildcardClass19 = intArray18.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test3750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3750");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) '4');
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 2);
        int int24 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (int) '#', (int) (short) -1, 1);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) (byte) -1);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 0);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (short) 10);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, 10);
        int int42 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray40, (int) 'a');
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) (short) 100);
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) (short) 0, 0, (int) 'a', intArray40, true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 48 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2 + "'", int42 == 2);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[0, 1]");
    }

    @Test
    public void test3751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3751");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray27 = new int[] { (short) 100, (short) 0, 100, (byte) -1, 10 };
        int int31 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray27, 1, (int) (byte) 100, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, 100, (int) '#', (int) (short) 10, intArray27, false);
        int int35 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, 0);
        int[] intArray41 = new int[] { ' ', (byte) -1 };
        int[] intArray47 = new int[] { (-1), 100 };
        int[] intArray49 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray47, (int) (byte) 1);
        int[] intArray55 = new int[] { (-1), 100 };
        int[] intArray57 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray55, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray49, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray57, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray41, (-1), (int) ' ', (int) (byte) 10, intArray57, false);
        int[] intArray63 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray57, 1);
        int int65 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray63, (int) (short) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, (int) (byte) 1, (-1), 0, intArray63, false);
        int[] intArray73 = new int[] { (-1), 100 };
        int[] intArray75 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray73, (int) (byte) 1);
        int[] intArray77 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray73, (int) ' ');
        int int81 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray77, (int) (short) 1, (-1), (int) (byte) 0);
        int int85 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray77, 10, (int) 'a', (int) (short) 10);
        int int87 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray77, (int) (short) -1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) (short) -1, 0, (-1), intArray77, true);
        int int91 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray77, (int) '#');
        int[] intArray93 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray77, (int) (short) 1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[100, 0, 100, -1, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2 + "'", int65 == 2);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 2 + "'", int87 == 2);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 2 + "'", int91 == 2);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, -1]");
    }

    @Test
    public void test3752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3752");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { ' ', (byte) -1 };
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray36, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, (-1), (int) ' ', (int) (byte) 10, intArray36, false);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (int) 'a', 100, (int) (byte) 1, intArray56, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, 10, (int) (short) 0, (int) (short) -1, intArray36, true);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, 0);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, 10);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 100);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 0);
        int int76 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, (int) (byte) 0);
        int int78 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, 100);
        int[] intArray80 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, 100);
        int int84 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray36, 2, (int) (short) 10, (int) (short) -1);
        int int86 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, (int) (byte) -1);
        java.lang.Class<?> wildcardClass87 = intArray36.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2 + "'", int76 == 2);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 2 + "'", int78 == 2);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 2 + "'", int86 == 2);
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test3753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3753");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, 0);
        int[] intArray24 = new int[] { (-1), 100 };
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 1);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (short) 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, 4, 2, (int) (byte) 0, intArray26, false);
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, 3);
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, 1);
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, 3);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
    }

    @Test
    public void test3754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3754");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) ' ');
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray6, (int) (short) 1, (-1), (int) (byte) 0);
        int[] intArray14 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray6, 2, (int) '4', (int) (short) 0, intArray14, true);
        int int20 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray6, (int) (short) -1, (int) ' ', (int) (byte) 1);
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray6, 0, (int) 'a', 2, intArray26, false);
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, 1);
        int[] intArray38 = new int[] { ' ', (byte) -1 };
        int[] intArray44 = new int[] { (-1), 100 };
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) (byte) 1);
        int[] intArray52 = new int[] { (-1), 100 };
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray46, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray54, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray38, (-1), (int) ' ', (int) (byte) 10, intArray54, false);
        int int60 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray54, (int) (short) 1);
        int int62 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray54, (int) (byte) -1);
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray6, (int) ' ', (int) (short) 0, (int) (byte) 1, intArray54, false);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2 + "'", int60 == 2);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2 + "'", int62 == 2);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
    }

    @Test
    public void test3755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3755");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 0);
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 1);
        int int24 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (int) ' ', 10, 0);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (short) 10);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) '4');
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (short) -1);
        java.lang.Class<?> wildcardClass31 = intArray30.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[0, 1]");
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test3756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3756");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray27 = new int[] { (short) 100, (short) 0, 100, (byte) -1, 10 };
        int int31 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray27, 1, (int) (byte) 100, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, 100, (int) '#', (int) (short) 10, intArray27, false);
        int int35 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, 0);
        int[] intArray37 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) 'a');
        int int39 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, 10);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[100, 0, 100, -1, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2 + "'", int39 == 2);
    }

    @Test
    public void test3757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3757");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 1);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (short) 1);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) 'a');
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, 10);
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray30, (int) '4');
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray30, (int) (byte) 100);
        int[] intArray40 = new int[] { (-1), 100 };
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) (byte) 1);
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray42, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray50, false);
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) ' ');
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 0);
        int[] intArray62 = new int[] { (-1), 100 };
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, (int) (byte) 1);
        int[] intArray70 = new int[] { (-1), 100 };
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray64, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray72, false);
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (int) 'a');
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray76, (int) ' ');
        int[] intArray80 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray76, (-1));
        int int82 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray80, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray56, (int) ' ', (int) 'a', 1, intArray80, false);
        int int86 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray56, (int) (short) 0);
        int int88 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray56, (int) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray34, 3, 1, (int) (byte) 10, intArray56, false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 2 + "'", int86 == 2);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 2 + "'", int88 == 2);
    }

    @Test
    public void test3758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3758");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 1, (int) (byte) 1, (int) (short) -1, intArray32, false);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 10);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 1);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, (int) (byte) 10, (int) (short) 1, 1, intArray46, false);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        int[] intArray64 = new int[] { (-1), 100 };
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray58, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray66, false);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) 'a');
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) ' ');
        int int76 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray72, (int) (byte) -1, 0, (int) (short) 0);
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (-1));
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray32, (int) '4', 1, (int) (short) 0, intArray78, false);
        int int82 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray32, (int) (short) 1);
        int int86 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray32, (int) (byte) 10, 1, (int) (byte) -1);
        int[] intArray88 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, 4);
        int[] intArray90 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray88, (int) (byte) 1);
        int[] intArray94 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray88, 4, 0, (-1), intArray94, true);
        int int98 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray88, (int) (byte) 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 2 + "'", int98 == 2);
    }

    @Test
    public void test3759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3759");
        int[] intArray0 = null;
        int int4 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray0, (int) (short) 1, (int) (short) 1, (int) (byte) 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test3760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3760");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) '4');
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 2);
        int int24 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (int) '#', (int) (short) -1, 1);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, 3);
        java.lang.Class<?> wildcardClass27 = intArray18.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test3761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3761");
        int[] intArray0 = null;
        int[] intArray4 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray0, (-1), (int) (short) 100, (int) (short) -1, intArray4, true);
    }

    @Test
    public void test3762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3762");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { ' ', (byte) -1 };
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray36, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, (-1), (int) ' ', (int) (byte) 10, intArray36, false);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (int) 'a', 100, (int) (byte) 1, intArray56, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, 10, (int) (short) 0, (int) (short) -1, intArray36, true);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, 0);
        int[] intArray72 = new int[] { (-1), 100 };
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (int) (byte) 1);
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray74, (int) (short) 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, 2, 10, (int) (short) 1, intArray74, false);
        int[] intArray80 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 0);
        int[] intArray82 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray80, (int) (short) 100);
        int int84 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray80, 1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 2 + "'", int84 == 2);
    }

    @Test
    public void test3763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3763");
        int[] intArray1 = new int[] { 10 };
        int[] intArray3 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray1, (int) '4');
        int[] intArray8 = new int[] { '#' };
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) (short) 0);
        int int12 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) (byte) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray3, 10, (int) (byte) 1, (int) (short) 0, intArray8, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, 1);
        int[] intArray22 = new int[] { (-1), 100 };
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, (int) (byte) 1);
        int[] intArray30 = new int[] { (-1), 100 };
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray30, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray24, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray32, false);
        int int38 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray24, (int) ' ', (int) (short) -1, (int) (short) 1);
        int int40 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) '#');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray8, (int) '4', (int) (short) 0, (int) (byte) 0, intArray24, true);
        java.lang.Class<?> wildcardClass43 = intArray24.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[10]");
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[35]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2 + "'", int40 == 2);
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test3764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3764");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 1, (int) (byte) 1, (int) (short) -1, intArray32, false);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 10);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) 'a');
        int[] intArray46 = new int[] { ' ', (byte) -1 };
        int[] intArray52 = new int[] { (-1), 100 };
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) (byte) 1);
        int[] intArray60 = new int[] { (-1), 100 };
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray54, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray62, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray46, (-1), (int) ' ', (int) (byte) 10, intArray62, false);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, 1);
        int int70 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray68, (int) (short) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray40, 0, (int) ' ', (int) (short) -1, intArray68, false);
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            int int78 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray68, (int) (short) -1, (int) (short) 1, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2 + "'", int70 == 2);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
    }

    @Test
    public void test3765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3765");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) ' ');
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (short) 100);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray2, 1);
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) -1);
        int[] intArray14 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (short) 0);
        java.lang.Class<?> wildcardClass15 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[1, 1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[0, 0]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test3766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3766");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 100);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 1);
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) '4');
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        int[] intArray44 = new int[] { (-1), 100 };
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray38, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray46, false);
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) 'a');
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) ' ');
        int int56 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray52, (int) (byte) -1, 0, (int) (short) 0);
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (-1));
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) '#');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray30, (int) (short) 100, (int) '#', (int) (short) 1, intArray58, false);
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) '4');
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) (byte) -1);
        int int68 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray66, (int) (short) 0);
        int int72 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray66, 10, 100, 3);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
    }

    @Test
    public void test3767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3767");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 1, (int) (byte) 1, (int) (short) -1, intArray32, false);
        int int40 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray32, 10, 100, (int) '#');
        int int42 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray32, (int) (byte) 0);
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) (short) 10);
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray32, (int) ' ', (int) (short) -1, (int) (byte) 1, intArray52, false);
        int[] intArray62 = new int[] { (-1), 100 };
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, (int) (byte) 1);
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) (short) 10);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) '#');
        int int70 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray64, (int) (byte) 1);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, 0);
        int int74 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray64, (int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, (int) '4', 3, (int) (byte) 10, intArray64, false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 6 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2 + "'", int70 == 2);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2 + "'", int74 == 2);
    }

    @Test
    public void test3768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3768");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { ' ', (byte) -1 };
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray36, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, (-1), (int) ' ', (int) (byte) 10, intArray36, false);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (int) 'a', 100, (int) (byte) 1, intArray56, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, 10, (int) (short) 0, (int) (short) -1, intArray36, true);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, 0);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, 10);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 100);
        int int72 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray70, (int) (byte) 0);
        int int74 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray70, 0);
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) ' ');
        int int80 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray76, 100, 0, (int) (short) 1);
        int[] intArray82 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray76, 4);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 2 + "'", int72 == 2);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2 + "'", int74 == 2);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2 + "'", int80 == 2);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1]");
    }

    @Test
    public void test3769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3769");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (short) 100);
        int int20 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) '4');
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
    }

    @Test
    public void test3770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3770");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int int22 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (int) (byte) -1, 0, (int) (short) 0);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (-1));
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) (byte) 100);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) '4');
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray36, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray44, false);
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) ' ');
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 0);
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) '#');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, (int) (short) 1, (int) (short) 100, 0, intArray48, false);
        int int56 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) ' ');
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2 + "'", int56 == 2);
    }

    @Test
    public void test3771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3771");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 100);
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray26, (-1), 2, (int) (byte) -1);
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) '4');
        int[] intArray38 = new int[] { ' ', (byte) -1 };
        int[] intArray44 = new int[] { (-1), 100 };
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) (byte) 1);
        int[] intArray52 = new int[] { (-1), 100 };
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray46, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray54, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray38, (-1), (int) ' ', (int) (byte) 10, intArray54, false);
        int int60 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray54, (int) (short) 1);
        int[] intArray66 = new int[] { (-1), 100 };
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) (byte) 1);
        int[] intArray74 = new int[] { (-1), 100 };
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray74, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray68, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray76, false);
        int[] intArray80 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray76, (int) 'a');
        int[] intArray82 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray80, (int) ' ');
        int[] intArray84 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray82, (int) (byte) 10);
        int[] intArray86 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray84, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray54, (int) 'a', (int) (short) 10, (int) (byte) 0, intArray84, false);
        int int92 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray84, (int) 'a', (int) (byte) 100, (int) (short) 10);
        int[] intArray94 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray84, (int) (byte) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, (int) (short) 10, 4, (int) (short) -1, intArray94, false);
        int[] intArray98 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, 10);
        java.lang.Class<?> wildcardClass99 = intArray32.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2 + "'", int60 == 2);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray98);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray98), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test3772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3772");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) '4');
        int int22 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (int) ' ', 100, (int) (short) 1);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 3);
        java.lang.Class<?> wildcardClass25 = intArray18.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test3773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3773");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) 'a', 100, (int) (byte) 1, intArray38, false);
        int int46 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, (int) '4');
        int int50 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray38, (int) ' ', (int) (byte) 1, 0);
        int int52 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, 0);
        int int54 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, (int) (short) 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2 + "'", int54 == 2);
    }

    @Test
    public void test3774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3774");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 0);
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 1);
        int int24 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (int) ' ', 10, 0);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 2);
        int int28 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) ' ');
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
    }

    @Test
    public void test3775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3775");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (-1));
        int int24 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray16, (int) (short) 0, (int) (byte) 0, 1);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray16, (int) (byte) 10);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, 4);
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray28, 10);
        int[] intArray36 = new int[] { ' ', (byte) -1 };
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        int[] intArray50 = new int[] { (-1), 100 };
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray44, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray52, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (-1), (int) ' ', (int) (byte) 10, intArray52, false);
        int[] intArray62 = new int[] { (-1), 100 };
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, (int) (byte) 1);
        int[] intArray70 = new int[] { (-1), 100 };
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray64, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray72, false);
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray52, (int) 'a', 100, (int) (byte) 1, intArray72, false);
        int[] intArray80 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (int) (short) 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray28, (int) 'a', (int) '4', 3, intArray72, true);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1]");
    }

    @Test
    public void test3776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3776");
        int[] intArray1 = new int[] { '#' };
        int int3 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray1, (int) (short) 0);
        int[] intArray7 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray1, 100, 0, (int) (short) -1, intArray7, false);
        int[] intArray11 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray1, (int) (byte) -1);
        int[] intArray17 = new int[] { ' ', (byte) -1 };
        int[] intArray23 = new int[] { (-1), 100 };
        int[] intArray25 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray23, (int) (byte) 1);
        int[] intArray31 = new int[] { (-1), 100 };
        int[] intArray33 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray31, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray25, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray33, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray17, (-1), (int) ' ', (int) (byte) 10, intArray33, false);
        int[] intArray39 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray33, 1);
        int int41 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray39, (int) (short) 1);
        int[] intArray43 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray39, (int) 'a');
        int[] intArray49 = new int[] { (-1), 100 };
        int[] intArray51 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray49, (int) (byte) 1);
        int[] intArray57 = new int[] { (-1), 100 };
        int[] intArray59 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray57, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray51, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray59, false);
        int int65 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray51, (int) ' ', (int) (short) -1, (int) (short) 1);
        int int67 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray51, (int) '#');
        int int71 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray51, (int) (short) -1, 100, 10);
        int int75 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray51, 4, (int) ' ', (int) (byte) 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray43, (-1), 1, (int) (byte) 0, intArray51, true);
        int[] intArray79 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray51, 0);
        int int81 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray51, (int) (byte) 10);
        int[] intArray83 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray51, 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray11, (int) '4', (int) (byte) 100, (int) (short) 0, intArray83, true);
        int int87 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray83, (-1));
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[35]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2 + "'", int41 == 2);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2 + "'", int65 == 2);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 2 + "'", int67 == 2);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 2 + "'", int81 == 2);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 2 + "'", int87 == 2);
    }

    @Test
    public void test3777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3777");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray19 = new int[] { '#' };
        int int21 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (short) -1, 1, 2, intArray19, true);
        int[] intArray25 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 10);
        int int27 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) -1);
        int int29 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (byte) -1);
        int[] intArray31 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 3);
        int[] intArray33 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray31, (int) (short) 0);
        int int35 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray31, (int) (byte) 1);
        java.lang.Class<?> wildcardClass36 = intArray31.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test3778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3778");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int int22 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (int) (byte) -1, 0, (int) (short) 0);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (-1));
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) (short) 1);
        int int28 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, 0);
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) (byte) 1);
        int int32 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, 2);
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (short) 1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
    }

    @Test
    public void test3779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3779");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 0);
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) '#');
        int int22 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray16, (int) ' ');
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) ' ');
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 0);
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) (byte) 1);
        int int50 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray44, (int) ' ', 10, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray16, (int) (short) 100, (int) (short) 0, (int) (byte) 1, intArray44, false);
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, 10);
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, 100);
        java.lang.Class<?> wildcardClass57 = intArray56.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test3780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3780");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) ' ');
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 10);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray2, (int) 'a');
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        int[] intArray24 = new int[] { (-1), 100 };
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray26, false);
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) 'a');
        int[] intArray36 = new int[] { ' ', (byte) -1 };
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        int[] intArray50 = new int[] { (-1), 100 };
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray44, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray52, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (-1), (int) ' ', (int) (byte) 10, intArray52, false);
        int[] intArray62 = new int[] { (-1), 100 };
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, (int) (byte) 1);
        int[] intArray70 = new int[] { (-1), 100 };
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray64, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray72, false);
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray52, (int) 'a', 100, (int) (byte) 1, intArray72, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray26, (int) (short) 100, (int) 'a', (int) (short) 0, intArray52, true);
        int[] intArray82 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (-1));
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray2, 4, (int) (byte) -1, 0, intArray26, true);
        int[] intArray86 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, 3);
        int int88 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray86, 100);
        // The following exception was thrown during execution in test generation
        try {
            int int92 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray86, (int) (byte) 10, (int) '#', (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 2 + "'", int88 == 2);
    }

    @Test
    public void test3781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3781");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray19 = new int[] { '#' };
        int int21 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (short) -1, 1, 2, intArray19, true);
        int[] intArray25 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 10);
        int[] intArray27 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 0);
        int[] intArray29 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, (int) '#');
        int[] intArray35 = new int[] { (-1), 100 };
        int[] intArray37 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray35, (int) (byte) 1);
        int[] intArray43 = new int[] { (-1), 100 };
        int[] intArray45 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray43, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray37, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray45, false);
        int[] intArray49 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray45, (int) ' ');
        int[] intArray51 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray49, (int) (byte) 0);
        int[] intArray53 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray49, (int) '#');
        int[] intArray59 = new int[] { ' ', (byte) -1 };
        int[] intArray65 = new int[] { (-1), 100 };
        int[] intArray67 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray65, (int) (byte) 1);
        int[] intArray73 = new int[] { (-1), 100 };
        int[] intArray75 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray73, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray67, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray75, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray59, (-1), (int) ' ', (int) (byte) 10, intArray75, false);
        int[] intArray81 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray59, 100);
        int[] intArray83 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray59, (int) (byte) 100);
        int int87 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray83, (int) (short) 10, (-1), (int) (short) 1);
        int[] intArray89 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray83, 100);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray49, 1, (int) (short) -1, (int) (short) 1, intArray83, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray19, 0, 0, (int) (short) 1, intArray83, false);
        java.lang.Class<?> wildcardClass94 = intArray19.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[0, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 2 + "'", int87 == 2);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test3782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3782");
        int[] intArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int4 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray0, 4, (int) (short) 10, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test3783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3783");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray19 = new int[] { '#' };
        int int21 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (short) -1, 1, 2, intArray19, true);
        int[] intArray25 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 10);
        int[] intArray27 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 0);
        int[] intArray33 = new int[] { ' ', (byte) -1 };
        int[] intArray39 = new int[] { (-1), 100 };
        int[] intArray41 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray39, (int) (byte) 1);
        int[] intArray47 = new int[] { (-1), 100 };
        int[] intArray49 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray47, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray41, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray49, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray33, (-1), (int) ' ', (int) (byte) 10, intArray49, false);
        int[] intArray59 = new int[] { (-1), 100 };
        int[] intArray61 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray59, (int) (byte) 1);
        int[] intArray67 = new int[] { (-1), 100 };
        int[] intArray69 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray67, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray61, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray69, false);
        int[] intArray73 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray69, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray49, (int) 'a', 100, (int) (byte) 1, intArray69, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray27, (int) (short) 0, (int) (byte) 1, (int) (short) 1, intArray49, true);
        int int79 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray27, (int) (byte) -1);
        int[] intArray81 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray27, 1);
        int[] intArray83 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray81, (int) (short) -1);
        int int85 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray83, 10);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 2 + "'", int79 == 2);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 2 + "'", int85 == 2);
    }

    @Test
    public void test3784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3784");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 0);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) ' ');
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray26, 0, 2, (int) (short) -1);
        int int34 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray26, 1, (int) 'a', (int) (byte) -1);
        int int36 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray26, 4);
        int int38 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray26, 1);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) '#');
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
    }

    @Test
    public void test3785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3785");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 10);
        int[] intArray26 = new int[] { ' ', (byte) -1 };
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        int[] intArray40 = new int[] { (-1), 100 };
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray34, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray42, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, (-1), (int) ' ', (int) (byte) 10, intArray42, false);
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, 100);
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) '4');
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray50, 1, (int) (byte) 1, (int) (short) -1, intArray56, false);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (short) 10);
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, (int) (short) 0, (int) '#', (int) (byte) 1, intArray64, true);
        int int70 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (int) (byte) -1, (int) (short) 0, (int) (short) 1);
        int int72 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) (byte) 0);
        int int74 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, 3);
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 0);
        int[] intArray80 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) '#', (int) (byte) 0, (int) (short) 0, intArray80, false);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2 + "'", int70 == 2);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 2 + "'", int72 == 2);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2 + "'", int74 == 2);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
    }

    @Test
    public void test3786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3786");
        int[] intArray1 = new int[] { 10 };
        int[] intArray3 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray1, (int) '4');
        int[] intArray8 = new int[] { '#' };
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) (short) 0);
        int int12 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) (byte) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray3, 10, (int) (byte) 1, (int) (short) 0, intArray8, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (short) 0);
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (short) 10);
        int[] intArray24 = new int[] { (-1), 100 };
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 1);
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray26, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray34, false);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) ' ');
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 0);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) (byte) 1);
        int int46 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray40, (int) ' ', 10, 0);
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) (short) 10);
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) '4');
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, 3);
        int[] intArray58 = new int[] { (-1), 100 };
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) (byte) 1);
        int[] intArray66 = new int[] { (-1), 100 };
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray60, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray68, false);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) 'a');
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (int) (short) 100);
        int int76 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray72, (int) (short) 100);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray50, 2, (int) (short) 1, 0, intArray72, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) (byte) 100, (int) (byte) 1, (int) (short) 1, intArray50, false);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[10]");
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[35]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2 + "'", int76 == 2);
    }

    @Test
    public void test3787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3787");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 0);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (byte) 0);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) 'a');
        java.lang.Class<?> wildcardClass29 = intArray24.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test3788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3788");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 1);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (short) 1);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) 'a');
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, 10);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        int[] intArray44 = new int[] { (-1), 100 };
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray38, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray46, false);
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) 'a');
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) ' ');
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) (byte) 10);
        int[] intArray60 = new int[] { (-1), 100 };
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) (byte) 1);
        int[] intArray68 = new int[] { (-1), 100 };
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray62, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray70, false);
        int[] intArray77 = new int[] { '#' };
        int int79 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray77, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray62, (int) (short) -1, 1, 2, intArray77, true);
        int[] intArray83 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray77, 10);
        int[] intArray85 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray77, 100);
        int int87 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray85, (int) (short) 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray54, (int) (byte) 1, (int) (short) 10, (int) (byte) 1, intArray85, false);
        int int93 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray54, (int) (byte) 1, (int) (short) 100, (int) '#');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray54, true);
        int[] intArray97 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray30, 3);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[35]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 2 + "'", int87 == 2);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
        org.junit.Assert.assertNotNull(intArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray97), "[-1, -1]");
    }

    @Test
    public void test3789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3789");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray19 = new int[] { '#' };
        int int21 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (short) -1, 1, 2, intArray19, true);
        int[] intArray25 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) '#');
        int[] intArray31 = new int[] { (-1), 100 };
        int[] intArray33 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray31, (int) (byte) 1);
        int[] intArray39 = new int[] { (-1), 100 };
        int[] intArray41 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray39, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray33, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray41, false);
        int[] intArray45 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray41, (int) ' ');
        int[] intArray47 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray45, (int) (byte) 0);
        int[] intArray49 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray47, (int) (byte) 1);
        int int53 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray47, (int) ' ', 10, 0);
        int[] intArray55 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray47, (int) (short) 10);
        int[] intArray57 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray55, (int) '4');
        int int59 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray57, (int) (short) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, 0, (int) 'a', (int) (byte) 1, intArray57, true);
        int[] intArray63 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (byte) 1);
        int[] intArray65 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray63, (int) (short) 10);
        int[] intArray67 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray65, (int) '#');
        // The following exception was thrown during execution in test generation
        try {
            int int71 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray67, (int) (byte) 100, (int) (byte) -1, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2 + "'", int59 == 2);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1]");
    }

    @Test
    public void test3790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3790");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray2, 2);
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray2, (int) '#', (int) '#', (int) (byte) -1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        int[] intArray44 = new int[] { (-1), 100 };
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray38, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray46, false);
        int[] intArray53 = new int[] { '#' };
        int int55 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray53, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray38, (int) (short) -1, 1, 2, intArray53, true);
        int[] intArray59 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray53, 10);
        int[] intArray61 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray53, 0);
        int[] intArray63 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray53, (int) '#');
        int[] intArray65 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray63, (int) (byte) 100);
        int int69 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray63, 1, (int) (short) 100, 10);
        int[] intArray71 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray63, (int) 'a');
        int int73 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray71, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray2, 2, 100, (int) (byte) 0, intArray71, false);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[35]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[0, 0]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 2 + "'", int73 == 2);
    }

    @Test
    public void test3791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3791");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 0);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 4);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, 0);
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray26, 10);
        int int34 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray26, (int) '#', (int) (byte) 100, (int) 'a');
        int int36 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray26, 0);
        int int40 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray26, (int) (byte) 0, (int) '4', 3);
        // The following exception was thrown during execution in test generation
        try {
            int int44 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray26, 10, 0, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
    }

    @Test
    public void test3792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3792");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int int24 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) (short) 1);
        int[] intArray30 = new int[] { (-1), 100 };
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray30, (int) (byte) 1);
        int[] intArray38 = new int[] { (-1), 100 };
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray32, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray40, false);
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) 'a');
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) ' ');
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 10);
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, (int) 'a', (int) (short) 10, (int) (byte) 0, intArray48, false);
        int int56 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray48, (int) 'a', (int) (byte) 100, (int) (short) 10);
        int int60 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray48, 0, 0, 1);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) '4');
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2 + "'", int60 == 2);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
    }

    @Test
    public void test3793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3793");
        int[] intArray1 = new int[] { 10 };
        int[] intArray3 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray1, (int) '4');
        int[] intArray8 = new int[] { '#' };
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) (short) 0);
        int int12 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) (byte) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray3, 10, (int) (byte) 1, (int) (short) 0, intArray8, false);
        int[] intArray19 = new int[] { 10 };
        int[] intArray21 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, (int) '4');
        int[] intArray26 = new int[] { '#' };
        int int28 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray26, (int) (short) 0);
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray26, (int) (byte) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray21, 10, (int) (byte) 1, (int) (short) 0, intArray26, false);
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray3, 0, 0, 1, intArray34, false);
        int int38 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray3, (int) ' ');
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray3, (int) ' ');
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) 'a');
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) (short) 100);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray62, (int) (byte) 100, (int) (short) 100, 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray40, (int) (short) 10, 0, 1, intArray62, false);
        int int70 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray62, (int) 'a');
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[10]");
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[35]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[10]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[35]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2 + "'", int70 == 2);
    }

    @Test
    public void test3794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3794");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { ' ', (byte) -1 };
        int[] intArray38 = new int[] { (-1), 100 };
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 1);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray40, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray48, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, (-1), (int) ' ', (int) (byte) 10, intArray48, false);
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, 100);
        int int56 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray32, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray24, 10, (int) 'a', (-1), intArray32, true);
        int int60 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) '#');
        int int62 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) ' ');
        int int64 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (byte) 0);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (byte) -1);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, 0);
        java.lang.Class<?> wildcardClass69 = intArray68.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2 + "'", int60 == 2);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2 + "'", int62 == 2);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2 + "'", int64 == 2);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test3795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3795");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray19 = new int[] { '#' };
        int int21 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (short) -1, 1, 2, intArray19, true);
        int[] intArray25 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 10);
        int[] intArray27 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 0);
        int[] intArray33 = new int[] { ' ', (byte) -1 };
        int[] intArray39 = new int[] { (-1), 100 };
        int[] intArray41 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray39, (int) (byte) 1);
        int[] intArray47 = new int[] { (-1), 100 };
        int[] intArray49 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray47, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray41, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray49, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray33, (-1), (int) ' ', (int) (byte) 10, intArray49, false);
        int[] intArray59 = new int[] { (-1), 100 };
        int[] intArray61 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray59, (int) (byte) 1);
        int[] intArray67 = new int[] { (-1), 100 };
        int[] intArray69 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray67, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray61, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray69, false);
        int[] intArray73 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray69, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray49, (int) 'a', 100, (int) (byte) 1, intArray69, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray27, (int) (short) 0, (int) (byte) 1, (int) (short) 1, intArray49, true);
        int int79 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray27, (int) (byte) -1);
        int[] intArray81 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray27, (int) '4');
        int int83 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray27, (int) (byte) 10);
        int int85 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray27, 10);
        // The following exception was thrown during execution in test generation
        try {
            int int89 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray27, 10, (int) '4', 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 2 + "'", int79 == 2);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 2 + "'", int83 == 2);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 2 + "'", int85 == 2);
    }

    @Test
    public void test3796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3796");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) ' ');
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray6, (int) (short) 1, (-1), (int) (byte) 0);
        int int14 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray6, 10, (int) 'a', (int) (short) 10);
        int int18 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray6, (int) (short) 10, (int) (byte) 10, (-1));
        int int20 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, (int) '4');
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
    }

    @Test
    public void test3797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3797");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { ' ', (byte) -1 };
        int[] intArray38 = new int[] { (-1), 100 };
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 1);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray40, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray48, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, (-1), (int) ' ', (int) (byte) 10, intArray48, false);
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, 100);
        int int56 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray32, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray24, 10, (int) 'a', (-1), intArray32, true);
        int int60 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) '#');
        int[] intArray66 = new int[] { (-1), 100 };
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) (byte) 1);
        int[] intArray74 = new int[] { (-1), 100 };
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray74, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray68, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray76, false);
        int[] intArray80 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray76, (int) ' ');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray24, (int) (byte) 100, 100, 0, intArray80, false);
        int int84 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (-1));
        int[] intArray86 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (short) 10);
        java.lang.Class<?> wildcardClass87 = intArray24.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2 + "'", int60 == 2);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 2 + "'", int84 == 2);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test3798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3798");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 100);
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray26, (-1), 2, (int) (byte) -1);
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (short) 1);
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        java.lang.Class<?> wildcardClass37 = intArray36.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test3799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3799");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { ' ', (byte) -1 };
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray36, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, (-1), (int) ' ', (int) (byte) 10, intArray36, false);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (int) 'a', 100, (int) (byte) 1, intArray56, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, 10, (int) (short) 0, (int) (short) -1, intArray36, true);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, 0);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, 10);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 100);
        int int72 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray70, (int) (byte) 0);
        int int74 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray70, 0);
        int int76 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray70, (int) '4');
        int int78 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray70, (int) '#');
        int[] intArray80 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) 'a');
        int[] intArray84 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray80, (int) (short) -1, (int) (short) 10, (int) (short) 100, intArray84, true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 55 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 2 + "'", int72 == 2);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2 + "'", int74 == 2);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2 + "'", int76 == 2);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 2 + "'", int78 == 2);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1]");
    }

    @Test
    public void test3800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3800");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) ' ');
        int[] intArray11 = new int[] { 10 };
        int[] intArray13 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray11, (int) '4');
        int[] intArray18 = new int[] { '#' };
        int int20 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) (short) 0);
        int int22 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) (byte) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray13, 10, (int) (byte) 1, (int) (short) 0, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray6, (int) (byte) 1, 0, (-1), intArray13, true);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray13, 4);
        int[] intArray33 = new int[] { 10 };
        int[] intArray35 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray33, (int) '4');
        int[] intArray40 = new int[] { '#' };
        int int42 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray40, (int) (short) 0);
        int int44 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray40, (int) (byte) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray35, 10, (int) (byte) 1, (int) (short) 0, intArray40, false);
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, 1);
        int int50 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray40, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) '#', 2, (int) (byte) -1, intArray40, false);
        int int56 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray28, (int) (byte) 10, (-1), (int) (short) 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[10]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[35]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[10]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[35]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
    }

    @Test
    public void test3801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3801");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray19 = new int[] { '#' };
        int int21 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (short) -1, 1, 2, intArray19, true);
        int[] intArray29 = new int[] { ' ', (byte) -1 };
        int[] intArray35 = new int[] { (-1), 100 };
        int[] intArray37 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray35, (int) (byte) 1);
        int[] intArray43 = new int[] { (-1), 100 };
        int[] intArray45 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray43, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray37, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray45, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray29, (-1), (int) ' ', (int) (byte) 10, intArray45, false);
        int[] intArray51 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray29, 100);
        int[] intArray53 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray29, (int) (byte) 100);
        int[] intArray55 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray29, 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) '4', (int) (byte) 10, 1, intArray55, false);
        int[] intArray59 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, 1);
        int[] intArray61 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) ' ');
        java.lang.Class<?> wildcardClass62 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass62);
    }

    @Test
    public void test3802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3802");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray19 = new int[] { '#' };
        int int21 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (short) -1, 1, 2, intArray19, true);
        int[] intArray25 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) '#');
        int[] intArray31 = new int[] { (-1), 100 };
        int[] intArray33 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray31, (int) (byte) 1);
        int[] intArray39 = new int[] { (-1), 100 };
        int[] intArray41 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray39, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray33, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray41, false);
        int[] intArray45 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray41, (int) ' ');
        int[] intArray47 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray45, (int) (byte) 0);
        int[] intArray49 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray47, (int) (byte) 1);
        int int53 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray47, (int) ' ', 10, 0);
        int[] intArray55 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray47, (int) (short) 10);
        int[] intArray57 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray55, (int) '4');
        int int59 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray57, (int) (short) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, 0, (int) 'a', (int) (byte) 1, intArray57, true);
        int[] intArray63 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (byte) 1);
        int[] intArray65 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray63, (int) (short) 10);
        int[] intArray67 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray63, (int) 'a');
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2 + "'", int59 == 2);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1]");
    }

    @Test
    public void test3803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3803");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 100);
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray26, (int) (short) 10, (-1), (int) (short) 1);
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, 100);
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) ' ');
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        int[] intArray42 = new int[] { ' ', (byte) -1 };
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray50, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray58, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray42, (-1), (int) ' ', (int) (byte) 10, intArray58, false);
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, 100);
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 100);
        int int70 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray66, (int) (short) -1, (int) (byte) -1, (int) (short) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray34, 4, (int) (short) 0, 0, intArray66, true);
        int int76 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray66, 4, 100, (-1));
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, 4);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2 + "'", int70 == 2);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1]");
    }

    @Test
    public void test3804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3804");
        int[] intArray1 = new int[] { 10 };
        int[] intArray3 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray1, (int) '4');
        int[] intArray9 = new int[] { ' ', (byte) -1 };
        int[] intArray15 = new int[] { (-1), 100 };
        int[] intArray17 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray15, (int) (byte) 1);
        int[] intArray23 = new int[] { (-1), 100 };
        int[] intArray25 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray23, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray17, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray25, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray9, (-1), (int) ' ', (int) (byte) 10, intArray25, false);
        int[] intArray31 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray25, 0);
        int int33 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray31, (int) (byte) 0);
        int int35 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray31, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray1, (int) '#', (int) (byte) 1, (int) (byte) -1, intArray31, false);
        int int39 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray1, (int) (short) 10);
        int int43 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray1, (-1), (int) ' ', (int) (byte) 10);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[10]");
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
    }

    @Test
    public void test3805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3805");
        int[] intArray1 = new int[] { '#' };
        int int3 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray1, (int) (short) 0);
        int int5 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray1, (int) (byte) 0);
        int[] intArray11 = new int[] { ' ', (byte) -1 };
        int[] intArray17 = new int[] { (-1), 100 };
        int[] intArray19 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray17, (int) (byte) 1);
        int[] intArray25 = new int[] { (-1), 100 };
        int[] intArray27 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray25, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray19, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray27, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray11, (-1), (int) ' ', (int) (byte) 10, intArray27, false);
        int[] intArray33 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray27, 0);
        int int35 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray33, (int) (byte) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray1, 10, 0, (int) (byte) 0, intArray33, true);
        int[] intArray43 = new int[] { (-1), 100 };
        int[] intArray45 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray43, (int) (byte) 1);
        int[] intArray47 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray45, (int) (short) 10);
        int int49 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray47, 0);
        int int51 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray47, 2);
        int[] intArray53 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray47, 1);
        int[] intArray59 = new int[] { ' ', (byte) -1 };
        int[] intArray65 = new int[] { (-1), 100 };
        int[] intArray67 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray65, (int) (byte) 1);
        int[] intArray73 = new int[] { (-1), 100 };
        int[] intArray75 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray73, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray67, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray75, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray59, (-1), (int) ' ', (int) (byte) 10, intArray75, false);
        int[] intArray81 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray59, 100);
        int[] intArray83 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray59, (int) (byte) 100);
        int int85 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray83, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray53, (int) (short) 1, (int) 'a', 3, intArray83, true);
        int int89 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray53, 4);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray1, (int) (byte) 0, (int) (short) 100, (int) (short) -1, intArray53, true);
        int int93 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray53, (int) '#');
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[35]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2 + "'", int49 == 2);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2 + "'", int51 == 2);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 2 + "'", int85 == 2);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 2 + "'", int89 == 2);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 2 + "'", int93 == 2);
    }

    @Test
    public void test3806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3806");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int int22 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (int) (byte) -1, 0, (int) (short) 0);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (-1));
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) (byte) 100);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) '4');
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (short) 10);
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray30, 0);
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) -1);
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) 'a');
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) '#');
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
    }

    @Test
    public void test3807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3807");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 1, (int) (byte) 1, (int) (short) -1, intArray32, false);
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        int[] intArray50 = new int[] { (-1), 100 };
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray44, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray52, false);
        int[] intArray59 = new int[] { '#' };
        int int61 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray59, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray44, (int) (short) -1, 1, 2, intArray59, true);
        int[] intArray65 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray59, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, (int) (short) 100, 0, 1, intArray65, false);
        int[] intArray71 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray65, (int) (byte) 0, (int) (byte) 10, (int) (short) -1, intArray71, true);
        int[] intArray75 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray65, (int) ' ');
        int[] intArray77 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray65, 4);
        int[] intArray79 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray77, (int) (short) 1);
        int int83 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray79, (-1), 0, (int) (short) 1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[35]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 1]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 2 + "'", int83 == 2);
    }

    @Test
    public void test3808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3808");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 0);
        int[] intArray24 = new int[] { (-1), 100 };
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 1);
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray26, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray34, false);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) 'a');
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) ' ');
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (-1));
        int int44 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray42, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) ' ', (int) 'a', 1, intArray42, false);
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            int int52 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray48, 10, (int) (byte) 10, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
    }

    @Test
    public void test3809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3809");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 10);
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (short) 1);
        int int24 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray22, 100);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
    }

    @Test
    public void test3810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3810");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { ' ', (byte) -1 };
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray36, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, (-1), (int) ' ', (int) (byte) 10, intArray36, false);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (int) 'a', 100, (int) (byte) 1, intArray56, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, 10, (int) (short) 0, (int) (short) -1, intArray36, true);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, 0);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, 10);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 100);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 0);
        int int76 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, (int) (byte) 0);
        int int78 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, 100);
        int[] intArray80 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, 100);
        int[] intArray82 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray80, (int) (short) -1);
        int[] intArray84 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray82, (int) (short) 10);
        int[] intArray86 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray82, 0);
        java.lang.Class<?> wildcardClass87 = intArray82.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2 + "'", int76 == 2);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 2 + "'", int78 == 2);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[0, 0]");
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test3811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3811");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray19 = new int[] { '#' };
        int int21 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (short) -1, 1, 2, intArray19, true);
        int int27 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray19, (int) 'a', (int) 'a', (int) '#');
        int[] intArray33 = new int[] { (-1), 100 };
        int[] intArray35 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray33, (int) (byte) 1);
        int[] intArray41 = new int[] { (-1), 100 };
        int[] intArray43 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray41, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray35, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray43, false);
        int[] intArray50 = new int[] { '#' };
        int int52 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray50, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray35, (int) (short) -1, 1, 2, intArray50, true);
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, 10);
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, 100);
        int int60 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray58, (int) (short) 10);
        int int62 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray58, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray19, 100, (int) (byte) 0, (int) (short) 0, intArray58, true);
        // The following exception was thrown during execution in test generation
        try {
            int int68 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray58, (int) (short) 0, 3, 3);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[35]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2 + "'", int60 == 2);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2 + "'", int62 == 2);
    }

    @Test
    public void test3812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3812");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 1);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (short) 1);
        int int28 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) 'a');
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, 0);
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) ' ');
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (short) 1);
        int int36 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray34, (int) (byte) -1);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, 10);
        int int42 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray40, (int) (short) 0);
        int int44 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray40, 3);
        int[] intArray50 = new int[] { (-1), 100 };
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) (byte) 1);
        int[] intArray58 = new int[] { (-1), 100 };
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray52, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray60, false);
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) 'a');
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) ' ');
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) (byte) 10);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) ' ');
        int int74 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray70, (int) (byte) 0, (int) ' ', (int) (byte) 0);
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, 0);
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray76, (int) (byte) 100);
        int[] intArray80 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray78, (int) (short) 10);
        int int84 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray78, 10, 0, 1);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray40, (int) ' ', (int) (byte) -1, (int) '4', intArray78, false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2 + "'", int42 == 2);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2 + "'", int44 == 2);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 2 + "'", int84 == 2);
    }

    @Test
    public void test3813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3813");
        int[] intArray2 = new int[] { 1, 'a' };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) ' ');
        int int16 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray12, (int) (short) 1, (-1), (int) (byte) 0);
        int[] intArray20 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray12, 2, (int) '4', (int) (short) 0, intArray20, true);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray12, (int) (short) -1, (int) ' ', (int) (byte) 1);
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray12, 0, (int) 'a', 2, intArray32, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray2, (int) '4', 10, 1, intArray32, true);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) ' ');
        int int42 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray40, 100);
        int int44 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray40, (int) (byte) 0);
        java.lang.Class<?> wildcardClass45 = intArray40.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[1, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2 + "'", int42 == 2);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2 + "'", int44 == 2);
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test3814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3814");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray19 = new int[] { '#' };
        int int21 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (short) -1, 1, 2, intArray19, true);
        int[] intArray25 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 10);
        int[] intArray27 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, (int) 'a');
        int int29 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) ' ');
        int int33 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray19, (int) (byte) 10, (int) '#', (int) (short) 10);
        int int37 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray19, 4, 10, 1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
    }

    @Test
    public void test3815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3815");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 1, (int) (byte) 1, (int) (short) -1, intArray32, false);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 10);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) 'a');
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        int[] intArray63 = new int[] { '#' };
        int int65 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray63, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (short) -1, 1, 2, intArray63, true);
        int[] intArray69 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray63, 10);
        int[] intArray71 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray63, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, 1, 2, 1, intArray63, true);
        int[] intArray75 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, 1);
        int[] intArray77 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray75, (int) ' ');
        int int79 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray75, (int) (short) 100);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[35]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 2 + "'", int79 == 2);
    }

    @Test
    public void test3816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3816");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, 0);
        java.lang.Class<?> wildcardClass19 = intArray12.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test3817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3817");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 0);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) ' ');
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray26, 0, 2, (int) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            int int34 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray26, (int) '4', (int) (byte) 0, 4);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
    }

    @Test
    public void test3818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3818");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { (-1), 100 };
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 1);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray22, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray30, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) 10, (int) '4', 10, intArray30, true);
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, 2);
        int int40 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray4, (int) (short) 1, (int) (short) 100, (int) (byte) -1);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, 100);
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (-1));
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) ' ');
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, 2);
        java.lang.Class<?> wildcardClass49 = intArray48.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass49);
    }

    @Test
    public void test3819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3819");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (byte) 0);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray6, (int) (byte) 100, (int) ' ', 4);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test3820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3820");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) ' ');
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (short) 100);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray2, (int) (byte) 10);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (short) 100);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (short) 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (int) (short) -1, (int) (byte) -1, (int) (byte) 0, intArray16, true);
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        int[] intArray40 = new int[] { (-1), 100 };
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray34, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray42, false);
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) 'a');
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) ' ');
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 10);
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (int) (byte) 10, 1, (int) (short) 1, intArray52, false);
        int[] intArray60 = new int[] { (-1), 100 };
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) (byte) 1);
        int[] intArray68 = new int[] { (-1), 100 };
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray62, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray70, false);
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) 'a');
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray74, (int) (short) 100);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray52, (-1), (int) '4', 4, intArray76, true);
        int[] intArray80 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) '#');
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[1, 1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[0, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1, 1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1]");
    }

    @Test
    public void test3821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3821");
        int[] intArray0 = null;
        int[] intArray4 = null;
        int[] intArray10 = new int[] { ' ', (byte) -1 };
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        int[] intArray24 = new int[] { (-1), 100 };
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray26, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray10, (-1), (int) ' ', (int) (byte) 10, intArray26, false);
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, 100);
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) '4');
        int[] intArray40 = new int[] { ' ', (byte) -1 };
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray40, (-1), (int) ' ', (int) (byte) 10, intArray56, false);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, 100);
        int int64 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray40, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, 10, (int) 'a', (-1), intArray40, true);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, (int) ' ', (int) (byte) 1, (int) (short) -1, intArray40, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray0, (int) (short) 0, (int) (short) 1, (int) (short) -1, intArray40, true);
        int int74 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray40, 10, (int) (short) 100, 1);
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) '4');
        int int78 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray76, (int) (short) 10);
        int int82 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray76, (int) ' ', 1, 0);
        int int84 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray76, (int) (short) -1);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 2 + "'", int78 == 2);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 2 + "'", int84 == 2);
    }

    @Test
    public void test3822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3822");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) '#');
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, 4);
        int int12 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, 2);
        int int14 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) (short) 100);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, 2);
        int int18 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray16, (int) '4');
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
    }

    @Test
    public void test3823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3823");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 1);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (short) 1);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) 'a');
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (-1));
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray30, 2);
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray30, (int) ' ');
        int int36 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray30, (int) ' ');
        int int38 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray30, 100);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
    }

    @Test
    public void test3824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3824");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 1, (int) (byte) 1, (int) (short) -1, intArray32, false);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 10);
        int int40 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray32, (int) 'a');
        int int44 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray32, 1, (int) (short) 10, 0);
        java.lang.Class<?> wildcardClass45 = intArray32.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test3825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3825");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 0);
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) '#');
        int int22 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray16, (int) ' ');
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) ' ');
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 0);
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) (byte) 1);
        int int50 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray44, (int) ' ', 10, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray16, (int) (short) 100, (int) (short) 0, (int) (byte) 1, intArray44, false);
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, 10);
        int int56 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray54, 3);
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 100);
        int[] intArray64 = new int[] { (-1), 100 };
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) (byte) 1);
        int[] intArray72 = new int[] { (-1), 100 };
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray66, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray74, false);
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray74, (int) ' ');
        int[] intArray80 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray78, (int) (byte) 0);
        int int84 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray80, 100, (int) (byte) 100, 10);
        int int86 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray80, (int) (byte) 10);
        int[] intArray88 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray80, (-1));
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray54, (int) (byte) 0, (int) (short) 1, (int) (short) 1, intArray80, false);
        int int92 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray54, (int) (short) 1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2 + "'", int56 == 2);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 2 + "'", int86 == 2);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 2 + "'", int92 == 2);
    }

    @Test
    public void test3826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3826");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, 10);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) 'a');
        int int12 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, 0);
        int int14 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) (byte) 100);
        int int16 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, 4);
        int int18 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) (short) -1);
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) '4');
        int int22 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) (byte) 0);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) -1);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
    }

    @Test
    public void test3827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3827");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { (-1), 100 };
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 1);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray22, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray30, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) 10, (int) '4', 10, intArray30, true);
        int int36 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray4, (int) (byte) -1);
        int int40 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray4, (-1), (int) (short) 1, (-1));
        int int44 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray4, (-1), 0, 1);
        int int48 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray4, (int) 'a', 4, 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2 + "'", int44 == 2);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
    }

    @Test
    public void test3828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3828");
        int[] intArray0 = null;
        int int4 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray0, (int) '4', (int) '4', (int) (short) 1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test3829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3829");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray19 = new int[] { '#' };
        int int21 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (short) -1, 1, 2, intArray19, true);
        int[] intArray25 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 10);
        int[] intArray27 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 0);
        int[] intArray33 = new int[] { ' ', (byte) -1 };
        int[] intArray39 = new int[] { (-1), 100 };
        int[] intArray41 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray39, (int) (byte) 1);
        int[] intArray47 = new int[] { (-1), 100 };
        int[] intArray49 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray47, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray41, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray49, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray33, (-1), (int) ' ', (int) (byte) 10, intArray49, false);
        int[] intArray59 = new int[] { (-1), 100 };
        int[] intArray61 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray59, (int) (byte) 1);
        int[] intArray67 = new int[] { (-1), 100 };
        int[] intArray69 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray67, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray61, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray69, false);
        int[] intArray73 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray69, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray49, (int) 'a', 100, (int) (byte) 1, intArray69, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray27, (int) (short) 0, (int) (byte) 1, (int) (short) 1, intArray49, true);
        int int79 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray27, (int) (byte) -1);
        int int81 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray27, (int) (byte) -1);
        int[] intArray83 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray27, 1);
        int[] intArray85 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray83, 0);
        int[] intArray87 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray83, (int) (byte) 10);
        int int91 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray83, 3, (int) '4', 1);
        int[] intArray93 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray83, 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 2 + "'", int79 == 2);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 2 + "'", int81 == 2);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, -1]");
    }

    @Test
    public void test3830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3830");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { (-1), 100 };
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 1);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray22, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray30, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) 10, (int) '4', 10, intArray30, true);
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, 2);
        int int40 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray4, (int) (short) 1, (int) (short) 100, (int) (byte) -1);
        int int42 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray4, 3);
        int int46 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray4, (int) ' ', 10, (int) (short) 1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2 + "'", int42 == 2);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
    }

    @Test
    public void test3831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3831");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int int18 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray4, (int) ' ', (int) (short) -1, (int) (short) 1);
        int int22 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray4, 0, (int) (short) 10, 4);
        int[] intArray28 = new int[] { ' ', (byte) -1 };
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray36, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray44, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray28, (-1), (int) ' ', (int) (byte) 10, intArray44, false);
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, 100);
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) '4');
        int[] intArray58 = new int[] { (-1), 100 };
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray52, 1, (int) (byte) 1, (int) (short) -1, intArray58, false);
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) (short) 10);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray64, (int) 'a');
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) (byte) 100);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (short) 100, (int) '#', (int) (byte) 0, intArray64, false);
        java.lang.Class<?> wildcardClass71 = intArray64.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test3832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3832");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray19 = new int[] { '#' };
        int int21 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (short) -1, 1, 2, intArray19, true);
        int[] intArray25 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 10);
        int[] intArray27 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 0);
        int[] intArray29 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, (int) '#');
        int int31 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) '#');
        int int33 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, 3);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
    }

    @Test
    public void test3833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3833");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) ' ');
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (short) 100);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray2, 1);
        int int14 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray2, (-1), 1, 2);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 0);
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 10);
        int[] intArray24 = new int[] { (-1), 100 };
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 1);
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray26, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray34, false);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) 'a');
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) ' ');
        int[] intArray49 = new int[] { (short) 100, (short) 0, 100, (byte) -1, 10 };
        int int53 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray49, 1, (int) (byte) 100, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray40, 100, (int) '#', (int) (short) 10, intArray49, false);
        int[] intArray57 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) (short) 1);
        int int59 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray57, (int) (byte) 100);
        int[] intArray65 = new int[] { (-1), 100 };
        int[] intArray67 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray65, (int) (byte) 1);
        int[] intArray73 = new int[] { (-1), 100 };
        int[] intArray75 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray73, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray67, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray75, false);
        int[] intArray79 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray75, (int) 'a');
        int[] intArray81 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray79, (int) ' ');
        int int85 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray81, (int) (byte) -1, 0, (int) (short) 0);
        int[] intArray87 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray81, (-1));
        int int89 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray81, (int) (short) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray57, 10, (int) 'a', 0, intArray81, true);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, 100, 2, (int) 'a', intArray81, true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 49 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[1, 1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[100, 0, 100, -1, 10]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2 + "'", int59 == 2);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 2 + "'", int89 == 2);
    }

    @Test
    public void test3834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3834");
        int[] intArray1 = new int[] { 10 };
        int[] intArray3 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray1, (int) '4');
        int[] intArray8 = new int[] { '#' };
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) (short) 0);
        int int12 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) (byte) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray3, 10, (int) (byte) 1, (int) (short) 0, intArray8, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (short) 0);
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) '#');
        int int20 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, 1);
        // The following exception was thrown during execution in test generation
        try {
            int int24 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray8, (int) (short) -1, 0, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[10]");
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[35]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    }

    @Test
    public void test3835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3835");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, 10);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) 'a');
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (short) 100);
        int[] intArray14 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) -1);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray14, 1);
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray14, (int) (byte) 10);
        java.lang.Class<?> wildcardClass19 = intArray18.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test3836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3836");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { ' ', (byte) -1 };
        int[] intArray38 = new int[] { (-1), 100 };
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 1);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray40, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray48, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, (-1), (int) ' ', (int) (byte) 10, intArray48, false);
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, 100);
        int int56 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray32, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray24, 10, (int) 'a', (-1), intArray32, true);
        int int60 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) '#');
        int int62 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) ' ');
        int int64 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (byte) 0);
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, 2);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) (short) -1);
        int int72 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray66, (int) (short) 0, (int) (byte) 100, (int) (short) -1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2 + "'", int60 == 2);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2 + "'", int62 == 2);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2 + "'", int64 == 2);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
    }

    @Test
    public void test3837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3837");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { ' ', (byte) -1 };
        int[] intArray38 = new int[] { (-1), 100 };
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 1);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray40, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray48, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, (-1), (int) ' ', (int) (byte) 10, intArray48, false);
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, 100);
        int int56 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray32, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray24, 10, (int) 'a', (-1), intArray32, true);
        int int60 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) '#');
        int[] intArray66 = new int[] { (-1), 100 };
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) (byte) 1);
        int[] intArray74 = new int[] { (-1), 100 };
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray74, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray68, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray76, false);
        int[] intArray80 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray76, (int) ' ');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray24, (int) (byte) 100, 100, 0, intArray80, false);
        int int84 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray80, (int) (short) -1);
        int[] intArray86 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray80, (int) (byte) 10);
        java.lang.Class<?> wildcardClass87 = intArray86.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2 + "'", int60 == 2);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 2 + "'", int84 == 2);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test3838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3838");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { (-1), 100 };
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 1);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray22, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray30, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) 10, (int) '4', 10, intArray30, true);
        int[] intArray40 = new int[] { ' ', (byte) -1 };
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray40, (-1), (int) ' ', (int) (byte) 10, intArray56, false);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, 0);
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, (int) ' ');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, 2, (int) 'a', 4, intArray62, true);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, (int) 'a');
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, 4);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, 4);
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) (byte) 1);
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (-1));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[0, 1]");
    }

    @Test
    public void test3839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3839");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 100);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 1);
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) '4');
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 0);
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 10);
        java.lang.Class<?> wildcardClass35 = intArray32.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test3840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3840");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 1, (int) (byte) 1, (int) (short) -1, intArray32, false);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 10);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 1);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            int int46 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray42, (int) (byte) -1, (int) '4', (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
    }

    @Test
    public void test3841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3841");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) '4');
        int int20 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) (byte) -1);
        int int22 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (-1));
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (-1), (int) '#', 4);
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (int) (short) 0, (int) '#', (int) (byte) 1);
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 0);
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, 2);
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, 0);
        int int38 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray34, (int) '4');
        int int42 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray34, 3, (int) (byte) 100, (int) '#');
        int[] intArray48 = new int[] { ' ', (byte) -1 };
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        int[] intArray62 = new int[] { (-1), 100 };
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray56, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray64, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray48, (-1), (int) ' ', (int) (byte) 10, intArray64, false);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, 100);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 100);
        int int76 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray72, (-1), 2, (int) (byte) -1);
        int int78 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray72, 0);
        int int80 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray72, (int) (short) 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray34, 2, (int) (byte) 10, (-1), intArray72, false);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 2 + "'", int78 == 2);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2 + "'", int80 == 2);
    }

    @Test
    public void test3842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3842");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { ' ', (byte) -1 };
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray36, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, (-1), (int) ' ', (int) (byte) 10, intArray36, false);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (int) 'a', 100, (int) (byte) 1, intArray56, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, 10, (int) (short) 0, (int) (short) -1, intArray36, true);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, 0);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, 10);
        int[] intArray72 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray36, 2, (int) (byte) 10, (int) (byte) -1, intArray72, true);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, 3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
    }

    @Test
    public void test3843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3843");
        int[] intArray1 = new int[] { '#' };
        int int3 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray1, (int) (short) 0);
        int[] intArray9 = new int[] { ' ', (byte) -1 };
        int[] intArray15 = new int[] { (-1), 100 };
        int[] intArray17 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray15, (int) (byte) 1);
        int[] intArray23 = new int[] { (-1), 100 };
        int[] intArray25 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray23, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray17, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray25, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray9, (-1), (int) ' ', (int) (byte) 10, intArray25, false);
        int[] intArray31 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray25, 1);
        int int33 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray31, (int) (short) 1);
        int int35 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray31, (int) 'a');
        int int37 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray31, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray1, (-1), (int) (byte) 0, (int) (byte) 1, intArray31, false);
        int[] intArray41 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray31, (int) (short) 10);
        int[] intArray47 = new int[] { ' ', (byte) -1 };
        int[] intArray53 = new int[] { (-1), 100 };
        int[] intArray55 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray53, (int) (byte) 1);
        int[] intArray61 = new int[] { (-1), 100 };
        int[] intArray63 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray61, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray55, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray63, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray47, (-1), (int) ' ', (int) (byte) 10, intArray63, false);
        int[] intArray69 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray47, 100);
        int[] intArray71 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray47, (int) (byte) 100);
        int[] intArray73 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray71, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray41, (int) (short) 1, (int) (byte) 1, 100, intArray73, true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[35]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2 + "'", int37 == 2);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1]");
    }

    @Test
    public void test3844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3844");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray19 = new int[] { '#' };
        int int21 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (short) -1, 1, 2, intArray19, true);
        int[] intArray25 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 10);
        int[] intArray27 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 100);
        int int31 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray19, (-1), 0, (int) (short) -1);
        int[] intArray33 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, (int) (byte) -1);
        int[] intArray39 = new int[] { (-1), 100 };
        int[] intArray41 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray39, (int) (byte) 1);
        int[] intArray43 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray39, (int) ' ');
        int[] intArray45 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray39, 10);
        int int47 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray39, (int) 'a');
        int[] intArray49 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray39, (int) (byte) 100);
        int int53 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray39, (int) (byte) 1, (int) (byte) 0, 2);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray33, (int) (byte) 10, 4, 10, intArray39, false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 7 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[1, 1]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
    }

    @Test
    public void test3845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3845");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 10);
        int[] intArray24 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) (byte) 0, (int) (short) 100, (int) (byte) -1, intArray24, false);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) 'a');
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, 10);
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 10);
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (-1));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[0, 1]");
    }

    @Test
    public void test3846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3846");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (int) (byte) -1);
        int int12 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray8, (-1), 2, (int) (short) -1);
        int[] intArray18 = new int[] { (-1), 100 };
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 1);
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) ' ');
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray22, (int) (short) 1, (-1), (int) (byte) 0);
        int[] intArray30 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray22, 2, (int) '4', (int) (short) 0, intArray30, true);
        int int36 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray22, (int) (short) -1, (int) ' ', (int) (byte) 1);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, (int) '#');
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 100);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray8, (int) (short) -1, 100, (int) ' ', intArray40, true);
        int int44 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray40, 0);
        int[] intArray50 = new int[] { (-1), 100 };
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) (byte) 1);
        int[] intArray58 = new int[] { (-1), 100 };
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray52, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray60, false);
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) 'a');
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) ' ');
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) (byte) 10);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) (byte) 1);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray40, 100, 100, (int) (byte) -1, intArray72, false);
        int int76 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray40, 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2 + "'", int44 == 2);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2 + "'", int76 == 2);
    }

    @Test
    public void test3847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3847");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 1, (int) (byte) 1, (int) (short) -1, intArray32, false);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 10);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) 'a');
        int int44 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray40, 2, (int) (short) 100, (int) ' ');
        int int46 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray40, 10);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
    }

    @Test
    public void test3848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3848");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray22 = new int[] { ' ', (byte) -1 };
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray22, (-1), (int) ' ', (int) (byte) 10, intArray38, false);
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray50, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray58, false);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray38, (int) 'a', 100, (int) (byte) 1, intArray58, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray12, (int) (short) 100, (int) 'a', (int) (short) 0, intArray38, true);
        int int68 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray12, (int) '4');
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, 10);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) (short) -1);
        int int76 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray70, 100, 0, (int) (byte) 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2 + "'", int68 == 2);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
    }

    @Test
    public void test3849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3849");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { ' ', (byte) -1 };
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray36, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, (-1), (int) ' ', (int) (byte) 10, intArray36, false);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (int) 'a', 100, (int) (byte) 1, intArray56, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, 10, (int) (short) 0, (int) (short) -1, intArray36, true);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, 0);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, 10);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 100);
        int int72 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray70, (int) (byte) 0);
        int int74 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray70, 0);
        int int76 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray70, (int) '4');
        int int78 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray70, (int) '#');
        int[] intArray80 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) 'a');
        int int82 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray80, (int) (short) -1);
        int[] intArray84 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray80, (int) (short) 100);
        java.lang.Class<?> wildcardClass85 = intArray84.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 2 + "'", int72 == 2);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2 + "'", int74 == 2);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2 + "'", int76 == 2);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 2 + "'", int78 == 2);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 2 + "'", int82 == 2);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test3850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3850");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { ' ', (byte) -1 };
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray36, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, (-1), (int) ' ', (int) (byte) 10, intArray36, false);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (int) 'a', 100, (int) (byte) 1, intArray56, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, 10, (int) (short) 0, (int) (short) -1, intArray36, true);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, 0);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, 10);
        int int70 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, (int) (short) -1);
        int int72 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, (-1));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2 + "'", int70 == 2);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 2 + "'", int72 == 2);
    }

    @Test
    public void test3851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3851");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { (-1), 100 };
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 1);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray22, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray30, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) 10, (int) '4', 10, intArray30, true);
        int int36 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray4, (int) (byte) -1);
        int int40 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray4, (-1), (int) (short) 1, (-1));
        int int44 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray4, (-1), 100, (int) (byte) 0);
        int[] intArray48 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, (int) (short) 1, (int) (short) 100, (int) (short) 100, intArray48, false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 100 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
    }

    @Test
    public void test3852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3852");
        int[] intArray1 = new int[] { 10 };
        int[] intArray3 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray1, (int) '4');
        int[] intArray8 = new int[] { '#' };
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) (short) 0);
        int int12 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) (byte) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray3, 10, (int) (byte) 1, (int) (short) 0, intArray8, false);
        int[] intArray19 = new int[] { 10 };
        int[] intArray21 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, (int) '4');
        int[] intArray26 = new int[] { '#' };
        int int28 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray26, (int) (short) 0);
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray26, (int) (byte) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray21, 10, (int) (byte) 1, (int) (short) 0, intArray26, false);
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray3, 0, 0, 1, intArray34, false);
        int int38 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray3, (int) ' ');
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray3, (int) ' ');
        int int42 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray3, (int) (short) -1);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[10]");
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[35]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[10]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[35]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2 + "'", int42 == 2);
    }

    @Test
    public void test3853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3853");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) '4');
        int int20 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) (byte) -1);
        int int22 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (-1));
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (-1), (int) '#', 4);
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (int) (short) 0, (int) '#', (int) (byte) 1);
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 0);
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, 2);
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, 0);
        int int38 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray34, (int) '4');
        int int42 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray34, (int) (short) 100, (int) (byte) 100, 2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
    }

    @Test
    public void test3854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3854");
        int[] intArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int4 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray0, (int) '4', (-1), (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test3855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3855");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 1);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (short) 1);
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        int[] intArray40 = new int[] { (-1), 100 };
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray34, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray42, false);
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) 'a');
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (short) 100);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray24, (int) '#', (int) 'a', (int) '#', intArray48, false);
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, 0);
        int[] intArray58 = new int[] { ' ', (byte) -1 };
        int[] intArray64 = new int[] { (-1), 100 };
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) (byte) 1);
        int[] intArray72 = new int[] { (-1), 100 };
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray66, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray74, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray58, (-1), (int) ' ', (int) (byte) 10, intArray74, false);
        int[] intArray80 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray74, 1);
        int int82 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray80, (int) (short) 1);
        int int84 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray80, (int) 'a');
        int int86 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray80, 0);
        int int90 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray80, (int) 'a', 0, (int) (short) 0);
        int[] intArray94 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray80, (int) (short) 100, (int) (byte) 10, (int) (byte) 0, intArray94, true);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray52, 10, 10, (int) (byte) 1, intArray94, false);
        java.lang.Class<?> wildcardClass99 = intArray52.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 2 + "'", int82 == 2);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 2 + "'", int84 == 2);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 2 + "'", int86 == 2);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 1 + "'", int90 == 1);
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test3856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3856");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 100);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 1);
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) '4');
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        int[] intArray44 = new int[] { (-1), 100 };
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray38, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray46, false);
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) 'a');
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) ' ');
        int int56 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray52, (int) (byte) -1, 0, (int) (short) 0);
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (-1));
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) '#');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray30, (int) (short) 100, (int) '#', (int) (short) 1, intArray58, false);
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) '4');
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) (short) 10);
        int int68 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray64, 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2 + "'", int68 == 2);
    }

    @Test
    public void test3857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3857");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 100);
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray26, (-1), 2, (int) (byte) -1);
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) '4');
        int[] intArray38 = new int[] { (-1), 100 };
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 1);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray40, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray48, false);
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) 'a');
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) ' ');
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (-1));
        int int58 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray52, (int) (byte) -1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray26, 0, (int) (short) 1, 0, intArray52, false);
        java.lang.Class<?> wildcardClass61 = intArray52.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2 + "'", int58 == 2);
        org.junit.Assert.assertNotNull(wildcardClass61);
    }

    @Test
    public void test3858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3858");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (byte) 0);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray4, 2, 0, (int) (byte) -1);
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (byte) -1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[0, 1]");
    }

    @Test
    public void test3859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3859");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (short) 100);
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 10);
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray36, false);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) 'a');
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) ' ');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, 100, (int) (short) 100, (int) 'a', intArray40, true);
        int int48 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray40, (int) (short) 10, 1, (int) (byte) 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
    }

    @Test
    public void test3860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3860");
        int[] intArray0 = null;
        int[] intArray6 = new int[] { (-1), 100 };
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (int) (byte) 1);
        int[] intArray14 = new int[] { (-1), 100 };
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray14, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray8, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray16, false);
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray0, 10, (int) (short) 1, (int) (short) 0, intArray22, false);
        int[] intArray30 = new int[] { (-1), 100 };
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray30, (int) (byte) 1);
        int[] intArray38 = new int[] { (-1), 100 };
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray32, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray40, false);
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) ' ');
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) (byte) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray0, (int) '#', (int) (short) 10, 1, intArray44, false);
        int int50 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray44, 10);
        int int54 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray44, (int) '4', (int) '4', (int) (short) 0);
        int int56 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray44, 100);
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, 4);
        // The following exception was thrown during execution in test generation
        try {
            int int62 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray58, 4, (int) '4', (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2 + "'", int56 == 2);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
    }

    @Test
    public void test3861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3861");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 1);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (short) 1);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) 'a');
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray36, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray44, false);
        int int50 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray36, (int) ' ', (int) (short) -1, (int) (short) 1);
        int int52 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, (int) '#');
        int int56 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray36, (int) (short) -1, 100, 10);
        int int60 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray36, 4, (int) ' ', (int) (byte) 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (-1), 1, (int) (byte) 0, intArray36, true);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray36, 0, (int) (byte) 100, 1);
        int int70 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray36, (int) ' ', (int) '#', (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            int int74 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray36, (int) (byte) 100, (int) (short) -1, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
    }

    @Test
    public void test3862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3862");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 1);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (short) 1);
        int int28 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) 'a');
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, 0);
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) ' ');
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (short) 1);
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (short) 100);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (short) -1);
        int int40 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray34, 2);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (-1));
        java.lang.Class<?> wildcardClass43 = intArray34.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2 + "'", int40 == 2);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[0, 1]");
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test3863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3863");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 100);
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray26, (int) (short) 10, (-1), (int) (short) 1);
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, 100);
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) ' ');
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, 4);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
    }

    @Test
    public void test3864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3864");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) '4');
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 2);
        int[] intArray26 = new int[] { ' ', (byte) -1 };
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        int[] intArray40 = new int[] { (-1), 100 };
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray34, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray42, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, (-1), (int) ' ', (int) (byte) 10, intArray42, false);
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, 1);
        int int50 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray48, (int) (short) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, (int) (byte) 10, (int) '#', (int) ' ', intArray48, false);
        int int54 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray20, (int) (short) -1);
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, 100);
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2 + "'", int54 == 2);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
    }

    @Test
    public void test3865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3865");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, 10);
        int[] intArray14 = new int[] { (-1), 100 };
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray14, (int) (byte) 1);
        int[] intArray22 = new int[] { (-1), 100 };
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray16, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray24, false);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) 'a');
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) ' ');
        int int34 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray30, (int) (byte) -1, 0, (int) (short) 0);
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray30, (-1));
        int int38 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray30, (int) (byte) 100);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray8, (-1), 100, 3, intArray30, true);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray30, (int) (byte) 100);
        int int46 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray42, 3, (int) (byte) 100, 3);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
    }

    @Test
    public void test3866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3866");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { ' ', (byte) -1 };
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray36, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, (-1), (int) ' ', (int) (byte) 10, intArray36, false);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (int) 'a', 100, (int) (byte) 1, intArray56, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, 10, (int) (short) 0, (int) (short) -1, intArray36, true);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, 0);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, 1);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, 2);
        int int72 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, 1);
        java.lang.Class<?> wildcardClass73 = intArray36.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 2 + "'", int72 == 2);
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test3867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3867");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { ' ', (byte) -1 };
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray36, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, (-1), (int) ' ', (int) (byte) 10, intArray36, false);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (int) 'a', 100, (int) (byte) 1, intArray56, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, 10, (int) (short) 0, (int) (short) -1, intArray36, true);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, (int) 'a');
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, 1);
        int int72 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray68, (int) (short) -1, (int) (short) 100, 2);
        int int74 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray68, 4);
        int int78 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray68, (int) (short) -1, 0, (int) (byte) -1);
        int[] intArray80 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, 3);
        java.lang.Class<?> wildcardClass81 = intArray68.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2 + "'", int74 == 2);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test3868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3868");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { ' ', (byte) -1 };
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray36, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, (-1), (int) ' ', (int) (byte) 10, intArray36, false);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (int) 'a', 100, (int) (byte) 1, intArray56, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, 10, (int) (short) 0, (int) (short) -1, intArray36, true);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, 0);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, 10);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 100);
        int int72 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray70, (int) (byte) 0);
        int int74 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray70, 0);
        int int76 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray70, (int) (byte) 100);
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, 2);
        int[] intArray80 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) (short) -1);
        int[] intArray82 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray80, 3);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 2 + "'", int72 == 2);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2 + "'", int74 == 2);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2 + "'", int76 == 2);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1]");
    }

    @Test
    public void test3869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3869");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 1);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (short) 1);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) 'a');
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (-1));
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (short) 10);
        int int34 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray28, (int) (byte) -1);
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) 'a');
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
    }

    @Test
    public void test3870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3870");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { ' ', (byte) -1 };
        int[] intArray38 = new int[] { (-1), 100 };
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 1);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray40, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray48, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, (-1), (int) ' ', (int) (byte) 10, intArray48, false);
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, 100);
        int int56 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray32, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray24, 10, (int) 'a', (-1), intArray32, true);
        int int60 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) '#');
        int int62 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) ' ');
        int int64 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, 4);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2 + "'", int60 == 2);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2 + "'", int62 == 2);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2 + "'", int64 == 2);
    }

    @Test
    public void test3871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3871");
        int[] intArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int4 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray0, (int) (short) 10, (int) (byte) -1, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test3872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3872");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int int8 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, 0);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, 4);
        int int14 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray6, (int) (short) 0, (int) (short) 10, (int) (short) 1);
        int int18 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray6, (int) (short) 100, (int) ' ', 4);
        int[] intArray23 = new int[] { 10 };
        int[] intArray25 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray23, (int) '4');
        int[] intArray27 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray23, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray6, (int) ' ', (int) 'a', (int) '#', intArray27, true);
        int[] intArray31 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray27, 2);
        int int33 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray31, (int) (short) 100);
        int[] intArray35 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray31, 100);
        int[] intArray37 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray35, 3);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[10]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, -1]");
    }

    @Test
    public void test3873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3873");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) '#');
        int[] intArray14 = new int[] { (-1), 100 };
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray14, (int) (byte) 1);
        int[] intArray22 = new int[] { (-1), 100 };
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray16, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray24, false);
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray16, (int) ' ', (int) (short) -1, (int) (short) 1);
        int int32 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray16, (int) '#');
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray8, (int) ' ', (int) (short) 100, 0, intArray16, false);
        int int38 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray16, (int) (short) 100);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
    }

    @Test
    public void test3874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3874");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 100);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 1);
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray2, 0);
        int[] intArray36 = new int[] { ' ', (byte) -1 };
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        int[] intArray50 = new int[] { (-1), 100 };
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray44, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray52, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (-1), (int) ' ', (int) (byte) 10, intArray52, false);
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, 100);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 100);
        int int64 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray60, (int) (short) 10, (-1), (int) (short) 1);
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, 100);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, 0, 1, 0, intArray66, false);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) 'a');
        int int74 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray66, (-1), 100, (int) '4');
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2 + "'", int64 == 2);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
    }

    @Test
    public void test3875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3875");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int int8 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray4, 2);
        int[] intArray14 = new int[] { ' ', (byte) -1 };
        int[] intArray20 = new int[] { (-1), 100 };
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 1);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray22, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray30, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray14, (-1), (int) ' ', (int) (byte) 10, intArray30, false);
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray14, 100);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray14, (int) (byte) 100);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray14, 1);
        int int44 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray14, (int) (byte) 1, 0, (int) (byte) 0);
        int[] intArray50 = new int[] { (-1), 100 };
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) (byte) 1);
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) ' ');
        int[] intArray60 = new int[] { (-1), 100 };
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) (byte) 1);
        int[] intArray68 = new int[] { (-1), 100 };
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray62, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray70, false);
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) ' ');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray50, (int) (short) 0, (int) ' ', 0, intArray74, true);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray14, (int) (byte) 10, (int) (byte) 1, (int) (short) 1, intArray74, true);
        int[] intArray80 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray74, (int) (byte) 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) ' ', (int) '#', (int) (short) 0, intArray74, true);
        int int84 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray74, (-1));
        int int88 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray74, (int) (short) 10, 2, (-1));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 2 + "'", int84 == 2);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
    }

    @Test
    public void test3876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3876");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray22 = new int[] { ' ', (byte) -1 };
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray22, (-1), (int) ' ', (int) (byte) 10, intArray38, false);
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray50, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray58, false);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray38, (int) 'a', 100, (int) (byte) 1, intArray58, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray12, (int) (short) 100, (int) 'a', (int) (short) 0, intArray38, true);
        int int68 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray12, (int) '4');
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, 10);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) (short) -1);
        int int74 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray70, (int) (byte) 10);
        int int76 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray70, 4);
        int int80 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray70, (int) '#', 4, (int) (short) -1);
        int int84 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray70, 1, (int) ' ', 4);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2 + "'", int68 == 2);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2 + "'", int74 == 2);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2 + "'", int76 == 2);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
    }

    @Test
    public void test3877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3877");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 1);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (short) 1);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) 'a');
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray36, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray44, false);
        int int50 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray36, (int) ' ', (int) (short) -1, (int) (short) 1);
        int int52 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, (int) '#');
        int int56 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray36, (int) (short) -1, 100, 10);
        int int60 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray36, 4, (int) ' ', (int) (byte) 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (-1), 1, (int) (byte) 0, intArray36, true);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray36, 0, (int) (byte) 100, 1);
        int int70 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray36, (int) ' ', (int) '#', (int) (short) 1);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) 'a');
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (short) 1);
        int int76 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray74, 3);
        java.lang.Class<?> wildcardClass77 = intArray74.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2 + "'", int76 == 2);
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test3878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3878");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        int[] intArray18 = new int[] { (-1), 100 };
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray12, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray20, false);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray12, (int) (byte) 10, (int) '4', 10, intArray38, true);
        int[] intArray48 = new int[] { ' ', (byte) -1 };
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        int[] intArray62 = new int[] { (-1), 100 };
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray56, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray64, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray48, (-1), (int) ' ', (int) (byte) 10, intArray64, false);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, 0);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) ' ');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray12, 2, (int) 'a', 4, intArray70, true);
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray2, 1, (int) (short) -1, (int) (byte) 1, intArray70, false);
        int int80 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray70, (int) (short) 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2 + "'", int80 == 2);
    }

    @Test
    public void test3879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3879");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 1);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (short) 1);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) 'a');
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (-1));
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        int[] intArray44 = new int[] { (-1), 100 };
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray38, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray46, false);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        int[] intArray62 = new int[] { (-1), 100 };
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray56, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray64, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray38, (int) (byte) 10, (int) '4', 10, intArray64, true);
        int int70 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray30, 100, (int) (byte) 100, (int) (byte) 10, intArray38, true);
        int int74 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, (int) (short) 1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2 + "'", int70 == 2);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2 + "'", int74 == 2);
    }

    @Test
    public void test3880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3880");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) 'a', 100, (int) (byte) 1, intArray38, false);
        int int46 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, (int) '4');
        int int50 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray38, (int) ' ', (int) (byte) 1, 0);
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, 100);
        int int54 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray52, 2);
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, 100);
        java.lang.Class<?> wildcardClass57 = intArray52.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2 + "'", int54 == 2);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test3881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3881");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int int22 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (int) (byte) -1, 0, (int) (short) 0);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (-1));
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) (byte) 100);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (short) 10);
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray28, (int) 'a');
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        int[] intArray44 = new int[] { (-1), 100 };
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray38, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray46, false);
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) 'a');
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) ' ');
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) (byte) 10);
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) (short) 100);
        int int58 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray56, (int) (short) 0);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) -1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray28, 0, 1, (-1), intArray60, false);
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (-1));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2 + "'", int58 == 2);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[0, 1]");
    }

    @Test
    public void test3882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3882");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { ' ', (byte) -1 };
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray36, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, (-1), (int) ' ', (int) (byte) 10, intArray36, false);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (int) 'a', 100, (int) (byte) 1, intArray56, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, 10, (int) (short) 0, (int) (short) -1, intArray36, true);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, 0);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, 1);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, 2);
        int int72 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, (int) 'a');
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (-1));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 2 + "'", int72 == 2);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[0, 1]");
    }

    @Test
    public void test3883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3883");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray2, (int) (short) -1);
        int[] intArray32 = new int[] { ' ', (byte) -1 };
        int[] intArray38 = new int[] { (-1), 100 };
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 1);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray40, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray48, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, (-1), (int) ' ', (int) (byte) 10, intArray48, false);
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, 100);
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) '4');
        int[] intArray62 = new int[] { (-1), 100 };
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray56, 1, (int) (byte) 1, (int) (short) -1, intArray62, false);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, (int) (short) 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray2, (int) (byte) 1, 0, 0, intArray62, false);
        int[] intArray74 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray62, (int) '4', (int) (short) 0, 4, intArray74, false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
    }

    @Test
    public void test3884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3884");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { ' ', (byte) -1 };
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray36, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, (-1), (int) ' ', (int) (byte) 10, intArray36, false);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (int) 'a', 100, (int) (byte) 1, intArray56, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, 10, (int) (short) 0, (int) (short) -1, intArray36, true);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, 0);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, 10);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 100);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 0);
        int int76 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, (int) (byte) 0);
        int int78 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, 100);
        int[] intArray80 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, 100);
        // The following exception was thrown during execution in test generation
        try {
            int int84 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray80, (int) ' ', (int) (byte) 1, 2);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2 + "'", int76 == 2);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 2 + "'", int78 == 2);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1]");
    }

    @Test
    public void test3885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3885");
        int[] intArray0 = null;
        int[] intArray6 = new int[] { ' ', (byte) -1 };
        int[] intArray12 = new int[] { (-1), 100 };
        int[] intArray14 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) (byte) 1);
        int[] intArray20 = new int[] { (-1), 100 };
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray14, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray22, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray6, (-1), (int) ' ', (int) (byte) 10, intArray22, false);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, 100);
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (int) (byte) 100);
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, 1);
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (int) '4');
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, 0);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray0, (int) (short) 10, (int) (short) -1, (int) '#', intArray36, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
    }

    @Test
    public void test3886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3886");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, 10);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) 'a');
        int int12 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, 0);
        int[] intArray18 = new int[] { ' ', (byte) -1 };
        int[] intArray24 = new int[] { (-1), 100 };
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 1);
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray26, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray34, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (-1), (int) ' ', (int) (byte) 10, intArray34, false);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 100);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) '4');
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray42, 1, (int) (byte) 1, (int) (short) -1, intArray48, false);
        int[] intArray58 = new int[] { (-1), 100 };
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) (byte) 1);
        int[] intArray66 = new int[] { (-1), 100 };
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray60, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray68, false);
        int[] intArray75 = new int[] { '#' };
        int int77 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray75, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray60, (int) (short) -1, 1, 2, intArray75, true);
        int[] intArray81 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray75, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray48, (int) (short) 100, 0, 1, intArray81, false);
        int[] intArray87 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray81, (int) (byte) 0, (int) (byte) 10, (int) (short) -1, intArray87, true);
        int[] intArray91 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray81, (int) ' ');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray8, (int) (short) 10, (int) (byte) 100, 0, intArray91, false);
        int[] intArray95 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray91, (int) '#');
        int[] intArray97 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray91, (int) (byte) -1);
        int[] intArray99 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray97, (int) (byte) 1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[35]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 1]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray97), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray99);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray99), "[1, 1]");
    }

    @Test
    public void test3887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3887");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { (-1), 100 };
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 1);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray22, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray30, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) 10, (int) '4', 10, intArray30, true);
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, 2);
        int int40 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray4, (int) '#', (int) (short) 10, (int) (short) -1);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, 2);
        int int44 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray42, (int) 'a');
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (short) 1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2 + "'", int44 == 2);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
    }

    @Test
    public void test3888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3888");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) ' ');
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, 2);
        java.lang.Class<?> wildcardClass9 = intArray6.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test3889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3889");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 100);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 1);
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) '4');
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray30, (int) (byte) 1);
        int int36 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray32, (int) 'a', 4, (int) (byte) 1);
        int int40 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray32, (int) (short) 0, 100, (int) '#');
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) ' ');
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) '4');
        int int64 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray62, (int) (byte) -1);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray62, (-1));
        int int70 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray62, (-1), (int) '#', 4);
        int int74 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray62, (int) (short) 0, (int) '#', (int) (byte) 1);
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, (int) (byte) 0);
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray76, 2);
        int[] intArray80 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray76, (int) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, (int) (byte) -1, (int) (byte) 10, (int) (short) 10, intArray76, false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 10 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2 + "'", int64 == 2);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[0, 1]");
    }

    @Test
    public void test3890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3890");
        int[] intArray1 = new int[] { 10 };
        int[] intArray3 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray1, (int) '4');
        int[] intArray8 = new int[] { '#' };
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) (short) 0);
        int int12 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) (byte) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray3, 10, (int) (byte) 1, (int) (short) 0, intArray8, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, 1);
        int int18 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) 'a');
        int int20 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, 2);
        int int22 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) (short) 0);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, 10);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (short) 10);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, 2);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[10]");
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[35]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
    }

    @Test
    public void test3891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3891");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (short) 100);
        int int20 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray16, (int) (short) 100);
        int[] intArray26 = new int[] { ' ', (byte) -1 };
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        int[] intArray40 = new int[] { (-1), 100 };
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray34, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray42, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, (-1), (int) ' ', (int) (byte) 10, intArray42, false);
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, 100);
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) '4');
        int int52 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray50, 0);
        int[] intArray57 = new int[] { 10 };
        int[] intArray59 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray57, (int) '4');
        int[] intArray64 = new int[] { '#' };
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray64, (int) (short) 0);
        int int68 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray64, (int) (byte) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray59, 10, (int) (byte) 1, (int) (short) 0, intArray64, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray50, (int) (byte) 1, (int) (byte) 0, (int) (short) 1, intArray64, true);
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) (byte) 1);
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray74, (int) (short) 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray16, 0, (int) (byte) 100, 2, intArray74, true);
        int[] intArray80 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray74, (int) (byte) -1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[10]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[35]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[0, 1]");
    }

    @Test
    public void test3892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3892");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { ' ', (byte) -1 };
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray36, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, (-1), (int) ' ', (int) (byte) 10, intArray36, false);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (int) 'a', 100, (int) (byte) 1, intArray56, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, 10, (int) (short) 0, (int) (short) -1, intArray36, true);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, 0);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, 10);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 100);
        int int72 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray70, (int) (byte) 0);
        int int74 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray70, 0);
        int int76 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray70, (int) (byte) 100);
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, 2);
        java.lang.Class<?> wildcardClass79 = intArray78.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 2 + "'", int72 == 2);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2 + "'", int74 == 2);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2 + "'", int76 == 2);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test3893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3893");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) ' ');
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (short) 100);
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (short) 10);
        int int12 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray10, (int) 'a');
        int[] intArray18 = new int[] { ' ', (byte) -1 };
        int[] intArray24 = new int[] { (-1), 100 };
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 1);
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray26, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray34, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (-1), (int) ' ', (int) (byte) 10, intArray34, false);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 100);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 100);
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 1);
        int int46 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, 0);
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) '4');
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (short) 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray10, (-1), (int) 'a', (-1), intArray48, false);
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, 1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[1, 1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
    }

    @Test
    public void test3894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3894");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int int8 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, 0);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, (int) (short) -1);
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (int) (byte) 0);
        int[] intArray18 = new int[] { ' ', (byte) -1 };
        int[] intArray24 = new int[] { (-1), 100 };
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 1);
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray26, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray34, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (-1), (int) ' ', (int) (byte) 10, intArray34, false);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, 1);
        int int42 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray40, (int) (short) 1);
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) 'a');
        int int46 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray40, 10);
        int int48 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray40, (int) (short) 100);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray12, (int) (short) 10, 1, (int) (short) -1, intArray40, true);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        int[] intArray64 = new int[] { (-1), 100 };
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray58, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray66, false);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) 'a');
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) ' ');
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (int) (byte) 10);
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (int) (short) 100);
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray12, (int) (byte) 100, (int) '#', (int) (byte) 10, intArray78, false);
        int int82 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray78, 0);
        int int86 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray78, 100, 4, (int) (byte) 1);
        int[] intArray88 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray78, (int) (short) 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2 + "'", int42 == 2);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 2 + "'", int82 == 2);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1]");
    }

    @Test
    public void test3895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3895");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray19 = new int[] { '#' };
        int int21 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (short) -1, 1, 2, intArray19, true);
        int[] intArray25 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 10);
        int[] intArray27 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 0);
        int[] intArray33 = new int[] { ' ', (byte) -1 };
        int[] intArray39 = new int[] { (-1), 100 };
        int[] intArray41 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray39, (int) (byte) 1);
        int[] intArray47 = new int[] { (-1), 100 };
        int[] intArray49 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray47, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray41, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray49, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray33, (-1), (int) ' ', (int) (byte) 10, intArray49, false);
        int[] intArray59 = new int[] { (-1), 100 };
        int[] intArray61 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray59, (int) (byte) 1);
        int[] intArray67 = new int[] { (-1), 100 };
        int[] intArray69 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray67, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray61, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray69, false);
        int[] intArray73 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray69, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray49, (int) 'a', 100, (int) (byte) 1, intArray69, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray27, (int) (short) 0, (int) (byte) 1, (int) (short) 1, intArray49, true);
        int int79 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray27, (int) (byte) -1);
        int[] intArray81 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray27, 1);
        int[] intArray83 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray81, (int) (short) -1);
        int[] intArray85 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray81, (int) (short) 100);
        int[] intArray87 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray85, (int) '4');
        int[] intArray89 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray87, 0);
        int[] intArray91 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray89, 0);
        int[] intArray93 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray91, (-1));
        // The following exception was thrown during execution in test generation
        try {
            int int97 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray91, (int) ' ', (int) ' ', (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 2 + "'", int79 == 2);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[0, 1]");
    }

    @Test
    public void test3896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3896");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) ' ');
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray6, (int) (short) 1, (-1), (int) (byte) 0);
        int[] intArray14 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray6, 2, (int) '4', (int) (short) 0, intArray14, true);
        int int20 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray6, (int) (short) -1, (int) ' ', (int) (byte) 1);
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray6, 0, (int) 'a', 2, intArray26, false);
        java.lang.Class<?> wildcardClass31 = intArray6.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test3897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3897");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { ' ', (byte) -1 };
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray36, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, (-1), (int) ' ', (int) (byte) 10, intArray36, false);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (int) 'a', 100, (int) (byte) 1, intArray56, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, 10, (int) (short) 0, (int) (short) -1, intArray36, true);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, 0);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, 10);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 100);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 0);
        int int76 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, (int) (byte) 0);
        int int78 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, 100);
        int[] intArray80 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, 100);
        int int84 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray36, 2, (int) (short) 10, (int) (short) -1);
        int int86 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, (int) (byte) -1);
        int[] intArray88 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (short) 0);
        java.lang.Class<?> wildcardClass89 = intArray36.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2 + "'", int76 == 2);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 2 + "'", int78 == 2);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 2 + "'", int86 == 2);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test3898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3898");
        int[] intArray0 = null;
        int[] intArray5 = new int[] { 10 };
        int[] intArray7 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray5, (int) '4');
        int[] intArray12 = new int[] { '#' };
        int int14 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray12, (int) (short) 0);
        int int16 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray12, (int) (byte) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray7, 10, (int) (byte) 1, (int) (short) 0, intArray12, false);
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) (short) 0);
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) '#');
        int[] intArray28 = new int[] { ' ', (byte) -1 };
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray36, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray44, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray28, (-1), (int) ' ', (int) (byte) 10, intArray44, false);
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, 100);
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 100);
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, 1);
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) '4');
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray22, 10, 0, (int) (byte) -1, intArray56, false);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray0, 4, (int) (byte) 0, (int) (short) 0, intArray22, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[10]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[35]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[0, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
    }

    @Test
    public void test3899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3899");
        int[] intArray0 = null;
        int[] intArray6 = new int[] { ' ', (byte) -1 };
        int[] intArray12 = new int[] { (-1), 100 };
        int[] intArray14 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) (byte) 1);
        int[] intArray20 = new int[] { (-1), 100 };
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray14, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray22, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray6, (-1), (int) ' ', (int) (byte) 10, intArray22, false);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, 100);
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) '4');
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray30, 1, (int) (byte) 1, (int) (short) -1, intArray36, false);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        int[] intArray63 = new int[] { '#' };
        int int65 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray63, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (short) -1, 1, 2, intArray63, true);
        int[] intArray69 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray63, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (int) (short) 100, 0, 1, intArray69, false);
        int[] intArray73 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 100);
        int int77 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray36, (int) '#', (int) (short) 100, (-1));
        int[] intArray79 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (short) 100);
        int int81 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray79, (int) (byte) 100);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray0, 1, (int) (byte) 100, (int) (short) 10, intArray79, true);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[35]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[1, 1]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[1, 1]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 2 + "'", int81 == 2);
    }

    @Test
    public void test3900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3900");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) ' ');
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray6, (int) (short) 1, (-1), (int) (byte) 0);
        int int14 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray6, 10, (int) 'a', (int) (short) 10);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (int) '#');
        int[] intArray22 = new int[] { ' ', (byte) -1 };
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray22, (-1), (int) ' ', (int) (byte) 10, intArray38, false);
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, 100);
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, (int) (byte) 100);
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, 1);
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, (int) '4');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray6, (-1), 1, (-1), intArray22, true);
        int int56 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray6, (int) ' ', (int) 'a', (int) '4');
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (int) (short) 100);
        java.lang.Class<?> wildcardClass59 = intArray6.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test3901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3901");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 1, (int) (byte) 1, (int) (short) -1, intArray32, false);
        int int40 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray32, 10, 100, (int) '#');
        int int42 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray32, (int) (byte) 0);
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) ' ');
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (short) 100);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray32, 1, 10, (int) (byte) 0, intArray54, true);
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, 1);
        int int62 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray58, (int) (byte) 0, 0, 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[1, 1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
    }

    @Test
    public void test3902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3902");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 100);
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray26, (-1), 2, (int) (byte) -1);
        int[] intArray34 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, (int) (short) 1, (int) (byte) 100, (int) (byte) -1, intArray34, false);
        int int38 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray26, (int) (short) 1);
        int int40 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray26, 10);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        int[] intArray63 = new int[] { '#' };
        int int65 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray63, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (short) -1, 1, 2, intArray63, true);
        int[] intArray69 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray63, 10);
        int int73 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray69, 1, (int) (short) 1, (int) (byte) -1);
        int[] intArray75 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray69, (int) ' ');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 2, (int) (short) 100, 1, intArray75, false);
        int int79 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray26, (int) (byte) -1);
        int[] intArray81 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 0);
        int int83 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray26, 3);
        int[] intArray85 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (-1));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2 + "'", int40 == 2);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[35]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 2 + "'", int79 == 2);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 2 + "'", int83 == 2);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[0, 1]");
    }

    @Test
    public void test3903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3903");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) '#');
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, 4);
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, 100);
        int[] intArray14 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) (byte) 10);
        int int16 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray14, (int) (short) 1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
    }

    @Test
    public void test3904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3904");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int int22 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, 1, (int) (byte) 100, (-1));
        int[] intArray28 = new int[] { ' ', (byte) -1 };
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray36, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray44, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray28, (-1), (int) ' ', (int) (byte) 10, intArray44, false);
        int int50 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray44, (int) (short) 1);
        int int52 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray44, (int) '#');
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, 2);
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, 4);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, (-1), (int) (byte) 10, 4, intArray44, true);
        int[] intArray64 = new int[] { (-1), 100 };
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) (byte) 1);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) ' ');
        int[] intArray73 = new int[] { 10 };
        int[] intArray75 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray73, (int) '4');
        int[] intArray80 = new int[] { '#' };
        int int82 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray80, (int) (short) 0);
        int int84 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray80, (int) (byte) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray75, 10, (int) (byte) 1, (int) (short) 0, intArray80, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray68, (int) (byte) 1, 0, (-1), intArray75, true);
        int[] intArray90 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray75, 4);
        int int92 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray90, (int) '#');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, 0, 1, (int) (byte) -1, intArray90, false);
        int int96 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray90, 4);
        java.lang.Class<?> wildcardClass97 = intArray90.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[10]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[35]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 2 + "'", int92 == 2);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 2 + "'", int96 == 2);
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test3905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3905");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) 'a', 100, (int) (byte) 1, intArray38, false);
        int int46 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, (int) '4');
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) 'a');
        int[] intArray54 = new int[] { ' ', (byte) -1 };
        int[] intArray60 = new int[] { (-1), 100 };
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) (byte) 1);
        int[] intArray68 = new int[] { (-1), 100 };
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray62, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray70, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray54, (-1), (int) ' ', (int) (byte) 10, intArray70, false);
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, 100);
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray76, (int) '4');
        int int80 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray78, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (short) 1, (int) ' ', 2, intArray78, false);
        int int84 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray78, 3);
        int[] intArray86 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray78, (int) (short) 1);
        java.lang.Class<?> wildcardClass87 = intArray86.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2 + "'", int80 == 2);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 2 + "'", int84 == 2);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test3906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3906");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray27 = new int[] { (short) 100, (short) 0, 100, (byte) -1, 10 };
        int int31 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray27, 1, (int) (byte) 100, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, 100, (int) '#', (int) (short) 10, intArray27, false);
        int int35 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, 0);
        int[] intArray41 = new int[] { ' ', (byte) -1 };
        int[] intArray47 = new int[] { (-1), 100 };
        int[] intArray49 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray47, (int) (byte) 1);
        int[] intArray55 = new int[] { (-1), 100 };
        int[] intArray57 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray55, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray49, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray57, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray41, (-1), (int) ' ', (int) (byte) 10, intArray57, false);
        int[] intArray63 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray57, 1);
        int int65 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray63, (int) (short) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, (int) (byte) 1, (-1), 0, intArray63, false);
        int[] intArray69 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray63, (int) (short) 1);
        int int71 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray63, (int) (byte) 0);
        int[] intArray75 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray63, (int) '#', (int) (byte) 1, (int) (byte) 0, intArray75, true);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[100, 0, 100, -1, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2 + "'", int65 == 2);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2 + "'", int71 == 2);
    }

    @Test
    public void test3907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3907");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 1, (int) (byte) 1, (int) (short) -1, intArray32, false);
        int int38 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray32, 1);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) ' ');
        int int42 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray32, (int) (byte) -1);
        int int44 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray32, (int) (short) 0);
        int int48 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray32, 4, (int) '#', 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
    }

    @Test
    public void test3908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3908");
        int[] intArray1 = new int[] { 10 };
        int[] intArray3 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray1, (int) '4');
        int[] intArray9 = new int[] { (-1), 100 };
        int[] intArray11 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray9, (int) (byte) 1);
        int[] intArray17 = new int[] { (-1), 100 };
        int[] intArray19 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray17, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray11, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray19, false);
        int[] intArray23 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, (int) 'a');
        int[] intArray25 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray23, (int) ' ');
        int int29 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray25, (int) (byte) -1, 0, (int) (short) 0);
        int[] intArray31 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray25, (-1));
        int[] intArray33 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray31, (int) '#');
        int int37 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray31, 1, (int) (short) 100, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray1, 1, (int) (byte) 10, (int) (byte) -1, intArray31, true);
        int int41 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray1, (int) (byte) 0);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[10]");
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
    }

    @Test
    public void test3909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3909");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, 0);
        int[] intArray24 = new int[] { (-1), 100 };
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 1);
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray26, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray34, false);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) 'a');
        int int40 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, (int) ' ');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) (short) 100, 10, (int) (byte) -1, intArray38, true);
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 100);
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, 4);
        java.lang.Class<?> wildcardClass47 = intArray44.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2 + "'", int40 == 2);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass47);
    }

    @Test
    public void test3910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3910");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) 'a', 100, (int) (byte) 1, intArray38, false);
        int int46 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, (int) '4');
        int int48 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, 0);
        int int52 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray38, (int) (byte) 10, 10, 3);
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (short) 10);
        int int56 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray54, 100);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2 + "'", int56 == 2);
    }

    @Test
    public void test3911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3911");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 1);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (short) 1);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) 'a');
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, 10);
        int int32 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray30, 100);
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray30, 4);
        int int36 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray30, (-1));
        java.lang.Class<?> wildcardClass37 = intArray30.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test3912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3912");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray19 = new int[] { '#' };
        int int21 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (short) -1, 1, 2, intArray19, true);
        int[] intArray25 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 10);
        int[] intArray27 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 0);
        int[] intArray33 = new int[] { ' ', (byte) -1 };
        int[] intArray39 = new int[] { (-1), 100 };
        int[] intArray41 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray39, (int) (byte) 1);
        int[] intArray47 = new int[] { (-1), 100 };
        int[] intArray49 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray47, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray41, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray49, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray33, (-1), (int) ' ', (int) (byte) 10, intArray49, false);
        int[] intArray59 = new int[] { (-1), 100 };
        int[] intArray61 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray59, (int) (byte) 1);
        int[] intArray67 = new int[] { (-1), 100 };
        int[] intArray69 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray67, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray61, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray69, false);
        int[] intArray73 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray69, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray49, (int) 'a', 100, (int) (byte) 1, intArray69, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray27, (int) (short) 0, (int) (byte) 1, (int) (short) 1, intArray49, true);
        int int79 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray27, (int) (byte) -1);
        int[] intArray81 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray27, 1);
        int[] intArray83 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray81, (int) (short) -1);
        int[] intArray85 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray81, (int) (short) 100);
        int[] intArray87 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray85, (int) '4');
        int[] intArray89 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray87, 0);
        int[] intArray91 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray89, 0);
        int[] intArray93 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray91, (int) ' ');
        int int95 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray93, (int) (short) 10);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 2 + "'", int79 == 2);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 2 + "'", int95 == 2);
    }

    @Test
    public void test3913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3913");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { (-1), 100 };
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 1);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray22, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray30, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) 10, (int) '4', 10, intArray30, true);
        int int36 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray4, 0);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (byte) 100);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) '4');
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) 'a');
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) ' ');
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray62, (int) (byte) -1, 0, (int) (short) 0);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, (-1));
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) '#');
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (short) -1, 1, (int) (short) 100, intArray68, false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
    }

    @Test
    public void test3914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3914");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 0);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 10);
        int int28 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray26, 0);
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (short) 100);
        int int34 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray30, (-1), (int) 'a', 0);
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray30, (int) (short) 1);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray30, 0);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray30, 0);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        int[] intArray63 = new int[] { '#' };
        int int65 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray63, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (short) -1, 1, 2, intArray63, true);
        int[] intArray73 = new int[] { (-1), 100 };
        int[] intArray75 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray73, (int) (byte) 1);
        int[] intArray81 = new int[] { (-1), 100 };
        int[] intArray83 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray81, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray75, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray83, false);
        int[] intArray87 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray83, (int) 'a');
        int int91 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray87, 0, (-1), 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray63, (int) (short) 100, (int) (short) 0, (int) (short) 0, intArray87, true);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray40, 3, (int) (byte) 100, (int) (short) 0, intArray63, true);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[35]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 1 + "'", int91 == 1);
    }

    @Test
    public void test3915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3915");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 1);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (short) 1);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) 'a');
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray36, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray44, false);
        int int50 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray36, (int) ' ', (int) (short) -1, (int) (short) 1);
        int int52 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, (int) '#');
        int int56 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray36, (int) (short) -1, 100, 10);
        int int60 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray36, 4, (int) ' ', (int) (byte) 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (-1), 1, (int) (byte) 0, intArray36, true);
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, 0);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, (int) (byte) 10);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, 1);
        int int72 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray36, 1, (int) (byte) -1, (int) (byte) 0);
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, 3);
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray74, (int) (byte) -1);
        java.lang.Class<?> wildcardClass77 = intArray76.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[0, 1]");
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test3916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3916");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 100);
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray26, (int) (short) 10, (-1), (int) (short) 1);
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, 100);
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) ' ');
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, 4);
        int[] intArray44 = new int[] { (-1), 100 };
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) (byte) 1);
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) ' ');
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) (short) 100);
        int int52 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray44, 1);
        int int54 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray44, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, 2, (int) (short) 10, 4, intArray44, true);
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        int[] intArray62 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray36, 3, (int) '#', (int) (byte) -1, intArray62, false);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[1, 1]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
    }

    @Test
    public void test3917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3917");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { ' ', (byte) -1 };
        int[] intArray38 = new int[] { (-1), 100 };
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 1);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray40, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray48, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, (-1), (int) ' ', (int) (byte) 10, intArray48, false);
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, 100);
        int int56 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray32, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray24, 10, (int) 'a', (-1), intArray32, true);
        int int60 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray32, (int) ' ');
        int int62 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray32, (int) '4');
        // The following exception was thrown during execution in test generation
        try {
            int int66 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray32, (int) '4', (int) (byte) 10, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2 + "'", int60 == 2);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2 + "'", int62 == 2);
    }

    @Test
    public void test3918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3918");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int int8 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, 0);
        int int12 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray6, 10, (int) ' ', 10);
        int int14 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, (int) (byte) 0);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, 100);
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (int) (byte) -1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[0, 1]");
    }

    @Test
    public void test3919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3919");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) 'a', 100, (int) (byte) 1, intArray38, false);
        int[] intArray50 = new int[] { ' ', (byte) -1 };
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        int[] intArray64 = new int[] { (-1), 100 };
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray58, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray66, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray50, (-1), (int) ' ', (int) (byte) 10, intArray66, false);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, 0);
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (int) ' ');
        int int78 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray74, 0, 2, (int) (short) -1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray38, (int) (byte) 10, (int) ' ', (int) (short) -1, intArray74, false);
        int int82 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, (int) (byte) 0);
        int[] intArray84 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 100);
        int int86 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, 0);
        int int88 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, (int) (short) 1);
        int int92 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray38, (int) (byte) 10, (int) (byte) 1, (int) (short) -1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 2 + "'", int82 == 2);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 2 + "'", int86 == 2);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 2 + "'", int88 == 2);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
    }

    @Test
    public void test3920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3920");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) 'a', 100, (int) (byte) 1, intArray38, false);
        int int46 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, (int) '4');
        int int48 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, 0);
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, 0);
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, 0);
        // The following exception was thrown during execution in test generation
        try {
            int int56 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray52, (int) (byte) 0, 0, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
    }

    @Test
    public void test3921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3921");
        int[] intArray1 = new int[] { 10 };
        int[] intArray3 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray1, (int) '4');
        int[] intArray8 = new int[] { '#' };
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) (short) 0);
        int int12 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) (byte) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray3, 10, (int) (byte) 1, (int) (short) 0, intArray8, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (short) 0);
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) '#');
        int[] intArray24 = new int[] { (-1), 100 };
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 1);
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray26, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray34, false);
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        int[] intArray50 = new int[] { (-1), 100 };
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray44, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray52, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray26, (int) (byte) 10, (int) '4', 10, intArray52, true);
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, 2);
        int int62 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray26, (int) (short) 1, (int) (short) 100, (int) (byte) -1);
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, 4);
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray8, (int) '#', (int) (short) 1, 0, intArray64, true);
        java.lang.Class<?> wildcardClass69 = intArray8.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[10]");
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[35]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[0, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test3922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3922");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int int18 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray4, (int) ' ', (int) (short) -1, (int) (short) 1);
        int int22 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray4, 0, (int) (short) 10, 4);
        int[] intArray28 = new int[] { ' ', (byte) -1 };
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray36, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray44, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray28, (-1), (int) ' ', (int) (byte) 10, intArray44, false);
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, 100);
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) '4');
        int[] intArray58 = new int[] { (-1), 100 };
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray52, 1, (int) (byte) 1, (int) (short) -1, intArray58, false);
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) (short) 10);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray64, (int) 'a');
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) (byte) 100);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (short) 100, (int) '#', (int) (byte) 0, intArray64, false);
        int int74 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray4, (int) 'a', 100, (int) (short) 10);
        int int76 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray4, (int) '4');
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2 + "'", int76 == 2);
    }

    @Test
    public void test3923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3923");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) ' ');
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) 'a');
        int[] intArray34 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) ' ', (int) (short) 0, 3, intArray34, true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
    }

    @Test
    public void test3924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3924");
        int[] intArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int4 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray0, (int) 'a', (-1), (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test3925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3925");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 0);
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) '#');
        int int22 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray16, (int) ' ');
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray16, (int) (short) 1, (int) (byte) 100, (int) (short) 0);
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray16, (int) (byte) 100, (int) '#', 0);
        int[] intArray36 = new int[] { ' ', (byte) -1 };
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        int[] intArray50 = new int[] { (-1), 100 };
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray44, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray52, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (-1), (int) ' ', (int) (byte) 10, intArray52, false);
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, 100);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 100);
        int int64 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray60, (int) (short) -1, (int) (byte) -1, (int) (short) 1);
        int int68 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray60, (int) (short) 100, (int) '#', 3);
        int int72 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray60, (int) (short) 100, (int) (short) 100, 3);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray16, 4, (int) (byte) -1, (int) (short) -1, intArray60, false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index -1 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2 + "'", int64 == 2);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
    }

    @Test
    public void test3926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3926");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int int8 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, 0);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, (int) (short) -1);
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (int) (byte) 0);
        int[] intArray18 = new int[] { ' ', (byte) -1 };
        int[] intArray24 = new int[] { (-1), 100 };
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 1);
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray26, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray34, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (-1), (int) ' ', (int) (byte) 10, intArray34, false);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, 1);
        int int42 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray40, (int) (short) 1);
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) 'a');
        int int46 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray40, 10);
        int int48 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray40, (int) (short) 100);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray12, (int) (short) 10, 1, (int) (short) -1, intArray40, true);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        int[] intArray64 = new int[] { (-1), 100 };
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray58, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray66, false);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) 'a');
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) ' ');
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (int) (byte) 10);
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (int) (short) 100);
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray12, (int) (byte) 100, (int) '#', (int) (byte) 10, intArray78, false);
        int int82 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray78, 0);
        int[] intArray84 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray78, 3);
        int int86 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray84, (int) (byte) -1);
        java.lang.Class<?> wildcardClass87 = intArray84.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2 + "'", int42 == 2);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 2 + "'", int82 == 2);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 2 + "'", int86 == 2);
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test3927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3927");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 1);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (short) 1);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) 'a');
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, 10);
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray30, 10);
        int[] intArray38 = new int[] { ' ', (byte) -1 };
        int[] intArray44 = new int[] { (-1), 100 };
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) (byte) 1);
        int[] intArray52 = new int[] { (-1), 100 };
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray46, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray54, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray38, (-1), (int) ' ', (int) (byte) 10, intArray54, false);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, 100);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) '4');
        int[] intArray68 = new int[] { (-1), 100 };
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray62, 1, (int) (byte) 1, (int) (short) -1, intArray68, false);
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) (short) 10);
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) (short) 1);
        int[] intArray82 = new int[] { (-1), 100 };
        int[] intArray84 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray82, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray68, (int) (byte) 10, (int) (short) 1, 1, intArray82, false);
        int int90 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray82, (int) (byte) 1, (int) (byte) 1, (int) (short) -1);
        int int92 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray82, (int) (byte) 100);
        int[] intArray94 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray82, 0);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (-1), 0, (int) '4', intArray82, false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 2 + "'", int92 == 2);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, -1]");
    }

    @Test
    public void test3928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3928");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, 10);
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (int) (short) 1);
        int int12 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray10, 10);
        int[] intArray14 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (short) 100);
        int int18 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray14, 0, (int) 'a', 4);
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray14, (int) (byte) -1);
        int int24 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray14, (-1), (int) (byte) 1, (int) (short) 0);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray14, (int) (short) 1);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray14, 0);
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray14, (int) (short) 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
    }

    @Test
    public void test3929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3929");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) '#');
        int[] intArray14 = new int[] { ' ', (byte) -1 };
        int[] intArray20 = new int[] { (-1), 100 };
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 1);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray22, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray30, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray14, (-1), (int) ' ', (int) (byte) 10, intArray30, false);
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray14, 100);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) '4');
        int[] intArray44 = new int[] { (-1), 100 };
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray38, 1, (int) (byte) 1, (int) (short) -1, intArray44, false);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        int[] intArray62 = new int[] { (-1), 100 };
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray56, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray64, false);
        int[] intArray71 = new int[] { '#' };
        int int73 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray71, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray56, (int) (short) -1, 1, 2, intArray71, true);
        int[] intArray77 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray71, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray44, (int) (short) 100, 0, 1, intArray77, false);
        int[] intArray81 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) (byte) 100);
        int int85 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray44, (int) '#', (int) (short) 100, (-1));
        int[] intArray87 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) (short) 100);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray8, (-1), 2, 0, intArray44, true);
        int int93 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray8, (int) '#', (int) (short) 0, (int) (short) 1);
        int int95 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) 'a');
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[35]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[1, 1]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[1, 1]");
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 2 + "'", int93 == 2);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 2 + "'", int95 == 2);
    }

    @Test
    public void test3930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3930");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray27 = new int[] { (short) 100, (short) 0, 100, (byte) -1, 10 };
        int int31 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray27, 1, (int) (byte) 100, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, 100, (int) '#', (int) (short) 10, intArray27, false);
        int int35 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, 0);
        int[] intArray41 = new int[] { (-1), 100 };
        int[] intArray43 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray41, (int) (byte) 1);
        int[] intArray49 = new int[] { (-1), 100 };
        int[] intArray51 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray49, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray43, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray51, false);
        int[] intArray55 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray51, (int) ' ');
        int[] intArray57 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray55, (int) (byte) 0);
        int[] intArray59 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray57, (int) (byte) 1);
        int int63 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray57, (int) ' ', 10, 0);
        int[] intArray65 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray57, (int) (short) 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, 0, (int) (short) 100, (int) '#', intArray65, false);
        int[] intArray69 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) '4');
        int int73 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (int) ' ', (int) (byte) 100, (int) '#');
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[100, 0, 100, -1, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
    }

    @Test
    public void test3931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3931");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, 10);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) 'a');
        int int12 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, 0);
        int[] intArray18 = new int[] { ' ', (byte) -1 };
        int[] intArray24 = new int[] { (-1), 100 };
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 1);
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray26, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray34, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (-1), (int) ' ', (int) (byte) 10, intArray34, false);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 100);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) '4');
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray42, 1, (int) (byte) 1, (int) (short) -1, intArray48, false);
        int[] intArray58 = new int[] { (-1), 100 };
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) (byte) 1);
        int[] intArray66 = new int[] { (-1), 100 };
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray60, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray68, false);
        int[] intArray75 = new int[] { '#' };
        int int77 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray75, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray60, (int) (short) -1, 1, 2, intArray75, true);
        int[] intArray81 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray75, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray48, (int) (short) 100, 0, 1, intArray81, false);
        int[] intArray87 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray81, (int) (byte) 0, (int) (byte) 10, (int) (short) -1, intArray87, true);
        int[] intArray91 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray81, (int) ' ');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray8, (int) (short) 10, (int) (byte) 100, 0, intArray91, false);
        int[] intArray95 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray91, (int) '#');
        int[] intArray97 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray95, 0);
        java.lang.Class<?> wildcardClass98 = intArray95.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[35]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 1]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray97), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test3932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3932");
        int[] intArray0 = null;
        int[] intArray6 = new int[] { ' ', (byte) -1 };
        int[] intArray12 = new int[] { (-1), 100 };
        int[] intArray14 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) (byte) 1);
        int[] intArray20 = new int[] { (-1), 100 };
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray14, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray22, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray6, (-1), (int) ' ', (int) (byte) 10, intArray22, false);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, 0);
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, 4);
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray30, 0);
        int int34 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray30, 10);
        int int38 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray30, (int) '#', (int) (byte) 100, (int) 'a');
        int int40 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray30, 0);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray0, (int) (byte) 10, 0, (int) (short) 1, intArray30, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2 + "'", int40 == 2);
    }

    @Test
    public void test3933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3933");
        int[] intArray0 = null;
        int[] intArray6 = new int[] { (-1), 100 };
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (int) (byte) 1);
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (int) ' ');
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (int) (short) 100);
        int int14 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, 1);
        int int18 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray6, (-1), 1, 2);
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray0, (-1), (int) ' ', 0, intArray20, true);
        java.lang.Class<?> wildcardClass23 = intArray20.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[1, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test3934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3934");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray22 = new int[] { ' ', (byte) -1 };
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray22, (-1), (int) ' ', (int) (byte) 10, intArray38, false);
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray50, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray58, false);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray38, (int) 'a', 100, (int) (byte) 1, intArray58, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray12, (int) (short) 100, (int) 'a', (int) (short) 0, intArray38, true);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (-1));
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) (short) 100);
        int int72 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray12, (int) (short) 100);
        java.lang.Class<?> wildcardClass73 = intArray12.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 2 + "'", int72 == 2);
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test3935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3935");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 1);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (short) 1);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) 'a');
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (-1));
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray30, 2);
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 10);
        int[] intArray40 = new int[] { (-1), 100 };
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) (byte) 1);
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray42, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray50, false);
        int[] intArray57 = new int[] { '#' };
        int int59 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray57, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray42, (int) (short) -1, 1, 2, intArray57, true);
        int[] intArray63 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray57, 10);
        int[] intArray65 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray57, 0);
        int[] intArray67 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray57, (int) '#');
        int[] intArray69 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray67, (int) (byte) 100);
        int[] intArray71 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray69, (-1));
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, (int) (byte) -1, (int) '4', 100, intArray69, false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 76 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[35]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[0, 0]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[0, 1]");
    }

    @Test
    public void test3936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3936");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { (-1), 100 };
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 1);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray22, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray30, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) 10, (int) '4', 10, intArray30, true);
        int int36 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray4, 0);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (byte) 100);
        int int42 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray38, (int) (byte) 0, 100, (int) (short) 1);
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (short) -1);
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) 'a');
        java.lang.Class<?> wildcardClass47 = intArray46.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass47);
    }

    @Test
    public void test3937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3937");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { ' ', (byte) -1 };
        int[] intArray38 = new int[] { (-1), 100 };
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 1);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray40, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray48, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, (-1), (int) ' ', (int) (byte) 10, intArray48, false);
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, 100);
        int int56 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray32, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray24, 10, (int) 'a', (-1), intArray32, true);
        int int60 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) '#');
        int[] intArray66 = new int[] { (-1), 100 };
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) (byte) 1);
        int[] intArray74 = new int[] { (-1), 100 };
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray74, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray68, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray76, false);
        int[] intArray80 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray76, (int) ' ');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray24, (int) (byte) 100, 100, 0, intArray80, false);
        int int86 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray80, (int) (byte) -1, (int) (short) 100, (int) '4');
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2 + "'", int60 == 2);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
    }

    @Test
    public void test3938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3938");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 0);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (-1));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[0, 1]");
    }

    @Test
    public void test3939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3939");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 10);
        int int22 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) (short) -1);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (int) '4', (int) 'a', 0);
        int[] intArray32 = new int[] { ' ', (byte) -1 };
        int[] intArray38 = new int[] { (-1), 100 };
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 1);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray40, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray48, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, (-1), (int) ' ', (int) (byte) 10, intArray48, false);
        int int54 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray48, (int) (short) 1);
        int int56 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray48, (int) '#');
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, 2);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, 4);
        int[] intArray66 = new int[] { ' ', (byte) -1 };
        int[] intArray72 = new int[] { (-1), 100 };
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (int) (byte) 1);
        int[] intArray80 = new int[] { (-1), 100 };
        int[] intArray82 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray80, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray74, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray82, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray66, (-1), (int) ' ', (int) (byte) 10, intArray82, false);
        int[] intArray88 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray82, 1);
        int int90 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray88, (int) (short) 1);
        int int92 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray88, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray60, 0, 4, 2, intArray88, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, (int) (short) 100, (int) (byte) 10, 3, intArray88, false);
        java.lang.Class<?> wildcardClass97 = intArray18.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2 + "'", int54 == 2);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2 + "'", int56 == 2);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 2 + "'", int90 == 2);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 2 + "'", int92 == 2);
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test3940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3940");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int int18 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray4, (int) ' ', (int) (short) -1, (int) (short) 1);
        int int20 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray4, (int) '#');
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, 10);
        int int24 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray4, 2);
        int[] intArray30 = new int[] { ' ', (byte) -1 };
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        int[] intArray44 = new int[] { (-1), 100 };
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray38, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray46, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray30, (-1), (int) ' ', (int) (byte) 10, intArray46, false);
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, 1);
        int int54 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray52, (int) (short) 1);
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) 'a');
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, 10);
        int[] intArray63 = new int[] { '#' };
        int int65 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray63, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray56, 4, (int) '#', 1, intArray63, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, (int) (short) 100, (int) '#', 0, intArray56, false);
        int[] intArray71 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 100);
        int int73 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray56, 4);
        int int75 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray56, (int) '#');
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2 + "'", int54 == 2);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[35]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 2 + "'", int73 == 2);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 2 + "'", int75 == 2);
    }

    @Test
    public void test3941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3941");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int int8 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, 0);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, 4);
        int int14 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray6, (int) (short) 0, (int) (short) 10, (int) (short) 1);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, 10);
        int[] intArray22 = new int[] { (-1), 100 };
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, (int) (byte) 1);
        int[] intArray30 = new int[] { (-1), 100 };
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray30, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray24, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray32, false);
        int[] intArray39 = new int[] { '#' };
        int int41 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray39, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray24, (int) (short) -1, 1, 2, intArray39, true);
        int[] intArray45 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray39, 10);
        int[] intArray47 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray39, (int) 'a');
        int int49 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray39, (int) '4');
        int int51 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray39, (int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray6, (int) '4', (int) (byte) -1, (int) (short) -1, intArray39, true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index -1 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[35]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
    }

    @Test
    public void test3942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3942");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 0);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 10);
        int int28 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray26, 0);
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (short) 100);
        int int34 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray30, (-1), (int) 'a', 0);
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray30, (int) (short) 1);
        int int38 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, (int) '#');
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, 2);
        java.lang.Class<?> wildcardClass41 = intArray40.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test3943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3943");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { ' ', (byte) -1 };
        int[] intArray38 = new int[] { (-1), 100 };
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 1);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray40, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray48, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, (-1), (int) ' ', (int) (byte) 10, intArray48, false);
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, 100);
        int int56 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray32, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray24, 10, (int) 'a', (-1), intArray32, true);
        int int60 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) '#');
        int[] intArray66 = new int[] { (-1), 100 };
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) (byte) 1);
        int[] intArray74 = new int[] { (-1), 100 };
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray74, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray68, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray76, false);
        int[] intArray80 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray76, (int) ' ');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray24, (int) (byte) 100, 100, 0, intArray80, false);
        int int84 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (-1));
        int int88 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray24, 2, (int) ' ', 1);
        java.lang.Class<?> wildcardClass89 = intArray24.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2 + "'", int60 == 2);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 2 + "'", int84 == 2);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test3944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3944");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 1);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (short) 1);
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        int[] intArray40 = new int[] { (-1), 100 };
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray34, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray42, false);
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) 'a');
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (short) 100);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray24, (int) '#', (int) 'a', (int) '#', intArray48, false);
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, 0);
        int int56 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray52, (int) (short) 0, 0, (int) (byte) 1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2 + "'", int56 == 2);
    }

    @Test
    public void test3945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3945");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (int) (byte) -1);
        int int12 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray8, (-1), 2, (int) (short) -1);
        int int14 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
    }

    @Test
    public void test3946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3946");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) 'a', 100, (int) (byte) 1, intArray38, false);
        int int46 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, (int) '4');
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) 'a');
        int[] intArray54 = new int[] { ' ', (byte) -1 };
        int[] intArray60 = new int[] { (-1), 100 };
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) (byte) 1);
        int[] intArray68 = new int[] { (-1), 100 };
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray62, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray70, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray54, (-1), (int) ' ', (int) (byte) 10, intArray70, false);
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, 100);
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray76, (int) '4');
        int int80 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray78, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (short) 1, (int) ' ', 2, intArray78, false);
        int[] intArray84 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, 100);
        // The following exception was thrown during execution in test generation
        try {
            int int88 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray48, (int) ' ', 4, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2 + "'", int80 == 2);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1]");
    }

    @Test
    public void test3947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3947");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 1);
        int[] intArray30 = new int[] { ' ', (byte) -1 };
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        int[] intArray44 = new int[] { (-1), 100 };
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray38, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray46, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray30, (-1), (int) ' ', (int) (byte) 10, intArray46, false);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        int[] intArray64 = new int[] { (-1), 100 };
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray58, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray66, false);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray46, (int) 'a', 100, (int) (byte) 1, intArray66, false);
        int int74 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray66, (int) '4');
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) (byte) 10, (int) '#', 0, intArray66, false);
        int[] intArray80 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (-1));
        java.lang.Class<?> wildcardClass81 = intArray66.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2 + "'", int74 == 2);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[0, 1]");
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test3948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3948");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) '#');
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, 4);
        int int12 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, 2);
        int[] intArray18 = new int[] { (-1), 100 };
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 1);
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray20, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray28, false);
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) ' ');
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray8, (int) '#', (int) (short) 10, 0, intArray28, true);
        int int40 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray28, (-1), (int) (byte) 1, (-1));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
    }

    @Test
    public void test3949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3949");
        int[] intArray1 = new int[] { 10 };
        int[] intArray3 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray1, (int) '4');
        int[] intArray8 = new int[] { '#' };
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) (short) 0);
        int int12 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) (byte) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray3, 10, (int) (byte) 1, (int) (short) 0, intArray8, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, 1);
        int int20 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray8, (int) (byte) 10, (int) 'a', (int) '#');
        int int22 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) '#');
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) 'a');
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) ' ');
        int[] intArray53 = new int[] { (short) 100, (short) 0, 100, (byte) -1, 10 };
        int int57 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray53, 1, (int) (byte) 100, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray44, 100, (int) '#', (int) (short) 10, intArray53, false);
        int int61 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray53, 10);
        int[] intArray63 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray53, (int) (byte) 1);
        int[] intArray69 = new int[] { ' ', (byte) -1 };
        int[] intArray75 = new int[] { (-1), 100 };
        int[] intArray77 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray75, (int) (byte) 1);
        int[] intArray83 = new int[] { (-1), 100 };
        int[] intArray85 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray83, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray77, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray85, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray69, (-1), (int) ' ', (int) (byte) 10, intArray85, false);
        int[] intArray91 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray85, 0);
        int[] intArray93 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray91, (int) (byte) 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray63, (int) (byte) 100, 0, (int) (short) 0, intArray93, false);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray8, (int) (byte) -1, 2, (int) '#', intArray63, true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[10]");
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[35]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[100, 0, 100, -1, 10]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, -1]");
    }

    @Test
    public void test3950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3950");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (byte) 0);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray4, 2, 0, (int) (byte) -1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        int[] intArray24 = new int[] { (-1), 100 };
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray26, false);
        int[] intArray34 = new int[] { ' ', (byte) -1 };
        int[] intArray40 = new int[] { (-1), 100 };
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) (byte) 1);
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray42, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray50, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray34, (-1), (int) ' ', (int) (byte) 10, intArray50, false);
        int[] intArray60 = new int[] { (-1), 100 };
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) (byte) 1);
        int[] intArray68 = new int[] { (-1), 100 };
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray62, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray70, false);
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray50, (int) 'a', 100, (int) (byte) 1, intArray70, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, 10, (int) (short) 0, (int) (short) -1, intArray50, true);
        int int80 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray50, 0);
        int[] intArray82 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, 10);
        int[] intArray84 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray82, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, (int) (short) 1, 0, 0, intArray84, false);
        // The following exception was thrown during execution in test generation
        try {
            int int90 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray4, 0, 10, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2 + "'", int80 == 2);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1]");
    }

    @Test
    public void test3951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3951");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int int8 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, 0);
        int int12 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray6, 10, (int) ' ', 10);
        int[] intArray18 = new int[] { ' ', (byte) -1 };
        int[] intArray24 = new int[] { (-1), 100 };
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 1);
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray26, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray34, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (-1), (int) ' ', (int) (byte) 10, intArray34, false);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 100);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) '4');
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray42, 1, (int) (byte) 1, (int) (short) -1, intArray48, false);
        int int56 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray48, 10, 100, (int) '#');
        int int58 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray48, (int) (byte) 0);
        int[] intArray64 = new int[] { (-1), 100 };
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) (byte) 1);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) ' ');
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) (short) 100);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, 1, 10, (int) (byte) 0, intArray70, true);
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray6, 100, (int) (byte) -1, (int) (short) 0, intArray48, false);
        int int78 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray48, (int) (byte) 10);
        int[] intArray80 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (short) 1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[1, 1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1]");
    }

    @Test
    public void test3952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3952");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { ' ', (byte) -1 };
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray36, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, (-1), (int) ' ', (int) (byte) 10, intArray36, false);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (int) 'a', 100, (int) (byte) 1, intArray56, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, 10, (int) (short) 0, (int) (short) -1, intArray36, true);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, 0);
        int[] intArray72 = new int[] { (-1), 100 };
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (int) (byte) 1);
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray74, (int) (short) 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, 2, 10, (int) (short) 1, intArray74, false);
        int[] intArray80 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 0);
        int[] intArray82 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray80, 100);
        int[] intArray84 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray80, (int) (short) 1);
        java.lang.Class<?> wildcardClass85 = intArray80.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test3953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3953");
        int[] intArray1 = new int[] { '#' };
        int int3 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray1, (int) (short) 0);
        int[] intArray9 = new int[] { ' ', (byte) -1 };
        int[] intArray15 = new int[] { (-1), 100 };
        int[] intArray17 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray15, (int) (byte) 1);
        int[] intArray23 = new int[] { (-1), 100 };
        int[] intArray25 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray23, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray17, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray25, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray9, (-1), (int) ' ', (int) (byte) 10, intArray25, false);
        int[] intArray31 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray25, 1);
        int int33 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray31, (int) (short) 1);
        int int35 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray31, (int) 'a');
        int int37 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray31, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray1, (-1), (int) (byte) 0, (int) (byte) 1, intArray31, false);
        int[] intArray41 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray31, (int) (short) 10);
        int int43 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray31, (int) (short) 1);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[35]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2 + "'", int37 == 2);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
    }

    @Test
    public void test3954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3954");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int int6 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray2, (int) (byte) 100);
        int[] intArray12 = new int[] { (-1), 100 };
        int[] intArray14 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) (byte) 1);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int int20 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray16, (int) (short) 1, (-1), (int) (byte) 0);
        int int24 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray16, 10, (int) 'a', (int) (short) 10);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) '#');
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        int[] intArray40 = new int[] { (-1), 100 };
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray34, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray42, false);
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) ' ');
        int[] intArray52 = new int[] { (-1), 100 };
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) (byte) 1);
        int[] intArray60 = new int[] { (-1), 100 };
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray54, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray62, false);
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, (int) 'a');
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) ' ');
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) (byte) 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray46, (int) (byte) 1, (int) 'a', 0, intArray68, true);
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) (short) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray26, (int) 'a', (int) (byte) 1, (int) (byte) 0, intArray74, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (int) '4', 100, (int) (short) 10, intArray26, true);
        int int82 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray26, (int) ' ', (-1), 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
    }

    @Test
    public void test3955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3955");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 100);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 1);
        int int32 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray2, (int) (byte) 1, 0, (int) (byte) 0);
        int[] intArray38 = new int[] { (-1), 100 };
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 1);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) ' ');
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray50, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray58, false);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) ' ');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray38, (int) (short) 0, (int) ' ', 0, intArray62, true);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray2, (int) (byte) 10, (int) (byte) 1, (int) (short) 1, intArray62, true);
        int int68 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray62, 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2 + "'", int68 == 2);
    }

    @Test
    public void test3956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3956");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, 10);
        int[] intArray12 = null;
        int[] intArray18 = new int[] { (-1), 100 };
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 1);
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray20, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray28, false);
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) ' ');
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray12, 10, (int) (short) 1, (int) (short) 0, intArray34, false);
        int int40 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray34, 0, (int) '4', (int) (short) 10);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (-1));
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray6, (-1), (int) (short) -1, (int) (byte) 0, intArray34, true);
        int int48 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray6, 3, (int) (short) 0, (int) (short) 1);
        int int52 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray6, (int) (byte) 10, 10, 0);
        int[] intArray58 = new int[] { (-1), 100 };
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) (byte) 1);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) ' ');
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, 2);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray6, 0, (int) (byte) 0, 1, intArray64, true);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[0, -1]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
    }

    @Test
    public void test3957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3957");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { ' ', (byte) -1 };
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray36, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, (-1), (int) ' ', (int) (byte) 10, intArray36, false);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (int) 'a', 100, (int) (byte) 1, intArray56, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, 10, (int) (short) 0, (int) (short) -1, intArray36, true);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, 0);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, 10);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 100);
        int int72 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray70, (int) (byte) 0);
        int int74 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray70, 0);
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) ' ');
        int int80 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray76, 100, 0, (int) (short) 1);
        int[] intArray82 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray76, 3);
        int[] intArray84 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray76, (int) (byte) 10);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 2 + "'", int72 == 2);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2 + "'", int74 == 2);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2 + "'", int80 == 2);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1]");
    }

    @Test
    public void test3958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3958");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray19 = new int[] { '#' };
        int int21 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (short) -1, 1, 2, intArray19, true);
        int[] intArray25 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 10);
        int int27 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) -1);
        int int29 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (byte) -1);
        int[] intArray31 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 3);
        int[] intArray33 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, (int) '#');
        int[] intArray39 = new int[] { (-1), 100 };
        int[] intArray41 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray39, (int) (byte) 1);
        int[] intArray47 = new int[] { (-1), 100 };
        int[] intArray49 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray47, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray41, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray49, false);
        int[] intArray53 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray49, (int) 'a');
        int[] intArray55 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray53, (int) ' ');
        int[] intArray57 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray55, (int) (byte) 10);
        int[] intArray59 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray55, (int) (short) 100);
        int[] intArray65 = new int[] { ' ', (byte) -1 };
        int[] intArray71 = new int[] { (-1), 100 };
        int[] intArray73 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray71, (int) (byte) 1);
        int[] intArray79 = new int[] { (-1), 100 };
        int[] intArray81 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray79, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray73, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray81, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray65, (-1), (int) ' ', (int) (byte) 10, intArray81, false);
        int[] intArray87 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray65, 100);
        int[] intArray89 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray65, (int) (byte) 100);
        int int93 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray89, (-1), 2, (int) (byte) -1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray55, 0, 2, 0, intArray89, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray33, 0, (int) (short) 1, (int) (byte) 1, intArray55, true);
        int[] intArray99 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray55, (int) '4');
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[0, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
        org.junit.Assert.assertNotNull(intArray99);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray99), "[-1, -1]");
    }

    @Test
    public void test3959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3959");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray22 = new int[] { ' ', (byte) -1 };
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray22, (-1), (int) ' ', (int) (byte) 10, intArray38, false);
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray50, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray58, false);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray38, (int) 'a', 100, (int) (byte) 1, intArray58, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray12, (int) (short) 100, (int) 'a', (int) (short) 0, intArray38, true);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (-1));
        int int70 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray68, (int) (byte) 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
    }

    @Test
    public void test3960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3960");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 1, (int) (byte) 1, (int) (short) -1, intArray32, false);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 10);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 1);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) 'a');
        int int46 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray40, 2, 100, (int) ' ');
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
    }

    @Test
    public void test3961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3961");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { (-1), 100 };
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 1);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray22, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray30, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) 10, (int) '4', 10, intArray30, true);
        int int36 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray4, (int) (byte) -1);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, 4);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, 10);
        // The following exception was thrown during execution in test generation
        try {
            int int44 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray40, 100, 1, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
    }

    @Test
    public void test3962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3962");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { (-1), 100 };
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 1);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray22, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray30, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) 10, (int) '4', 10, intArray30, true);
        int int36 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray4, (int) (byte) 10);
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        int[] intArray50 = new int[] { (-1), 100 };
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray44, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray52, false);
        int[] intArray59 = new int[] { '#' };
        int int61 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray59, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray44, (int) (short) -1, 1, 2, intArray59, true);
        int[] intArray65 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray59, 10);
        int[] intArray67 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray59, 0);
        int[] intArray69 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray59, (int) '#');
        int[] intArray71 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray69, (int) (byte) 100);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, (int) (short) 10, (int) (short) 1, (int) (short) 0, intArray71, false);
        int[] intArray75 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray71, (int) (byte) 10);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[35]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[0, 0]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1]");
    }

    @Test
    public void test3963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3963");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int int8 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, 0);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, 2);
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (-1));
        int[] intArray16 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray6, (int) (short) 1, (int) (short) -1, (int) (short) 10, intArray16, true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 4 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[0, 1]");
    }

    @Test
    public void test3964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3964");
        int[] intArray0 = null;
        int[] intArray6 = new int[] { ' ', (byte) -1 };
        int[] intArray12 = new int[] { (-1), 100 };
        int[] intArray14 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) (byte) 1);
        int[] intArray20 = new int[] { (-1), 100 };
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray14, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray22, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray6, (-1), (int) ' ', (int) (byte) 10, intArray22, false);
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        int[] intArray40 = new int[] { (-1), 100 };
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray34, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray42, false);
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray22, (int) 'a', 100, (int) (byte) 1, intArray42, false);
        int int50 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray42, (int) '4');
        int int54 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray42, (int) ' ', (int) (byte) 1, 0);
        int int56 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray42, 0);
        int int58 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray42, 100);
        int int60 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray42, 0);
        int int62 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray42, 10);
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, 2);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray0, 100, (int) (byte) 10, 1, intArray42, true);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) 'a');
        int int70 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray68, (int) ' ');
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2 + "'", int56 == 2);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2 + "'", int58 == 2);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2 + "'", int60 == 2);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2 + "'", int62 == 2);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2 + "'", int70 == 2);
    }

    @Test
    public void test3965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3965");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray27 = new int[] { (short) 100, (short) 0, 100, (byte) -1, 10 };
        int int31 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray27, 1, (int) (byte) 100, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, 100, (int) '#', (int) (short) 10, intArray27, false);
        int int35 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, 0);
        int[] intArray41 = new int[] { ' ', (byte) -1 };
        int[] intArray47 = new int[] { (-1), 100 };
        int[] intArray49 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray47, (int) (byte) 1);
        int[] intArray55 = new int[] { (-1), 100 };
        int[] intArray57 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray55, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray49, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray57, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray41, (-1), (int) ' ', (int) (byte) 10, intArray57, false);
        int[] intArray63 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray57, 1);
        int int65 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray63, (int) (short) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, (int) (byte) 1, (-1), 0, intArray63, false);
        int[] intArray69 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray63, (int) (short) 1);
        int int71 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray63, (int) (byte) 0);
        int[] intArray73 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray63, (int) '#');
        int[] intArray75 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray63, (int) (byte) 100);
        java.lang.Class<?> wildcardClass76 = intArray63.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[100, 0, 100, -1, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2 + "'", int65 == 2);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2 + "'", int71 == 2);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass76);
    }

    @Test
    public void test3966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3966");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 10);
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) ' ');
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        int[] intArray45 = new int[] { '#' };
        int int47 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray45, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (short) -1, 1, 2, intArray45, true);
        int[] intArray51 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray45, 10);
        int[] intArray53 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray45, 0);
        int[] intArray55 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray45, (int) '#');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray20, 0, 2, (int) (short) 1, intArray55, true);
        int int59 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray55, (int) (short) -1);
        int[] intArray65 = new int[] { (-1), 100 };
        int[] intArray67 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray65, (int) (byte) 1);
        int[] intArray69 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray65, (int) ' ');
        int[] intArray71 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray65, (int) (short) 100);
        int int73 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray71, 100);
        int[] intArray75 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray71, (int) '#');
        int int77 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray75, 4);
        int int79 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray75, 4);
        int[] intArray81 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray75, 4);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray55, 4, 0, 2, intArray81, true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[35]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[1, 1]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 2 + "'", int73 == 2);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 2 + "'", int77 == 2);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 2 + "'", int79 == 2);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1]");
    }

    @Test
    public void test3967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3967");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 100);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 1);
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) '4');
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        int[] intArray44 = new int[] { (-1), 100 };
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray38, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray46, false);
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) 'a');
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) ' ');
        int int56 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray52, (int) (byte) -1, 0, (int) (short) 0);
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (-1));
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) '#');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray30, (int) (short) 100, (int) '#', (int) (short) 1, intArray58, false);
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) '4');
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray58, 2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
    }

    @Test
    public void test3968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3968");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 1);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (short) 1);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) 'a');
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, 10);
        int int32 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray30, 100);
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray30, 4);
        int[] intArray40 = new int[] { (-1), 100 };
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) (byte) 1);
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray42, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray50, false);
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) 'a');
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) ' ');
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (-1));
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, 10);
        int[] intArray66 = new int[] { (-1), 100 };
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) (byte) 1);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) ' ');
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) (short) 100);
        int int74 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray66, 1);
        int int78 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray66, (-1), 1, 2);
        int[] intArray80 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, 0);
        int int82 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray66, (int) (byte) 10);
        int int86 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray66, 4, (int) (byte) 100, 4);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray58, 0, 10, 0, intArray66, false);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray30, 0, 4, (int) (byte) 100, intArray58, true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 52 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[1, 1]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
    }

    @Test
    public void test3969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3969");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { ' ', (byte) -1 };
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray36, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, (-1), (int) ' ', (int) (byte) 10, intArray36, false);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (int) 'a', 100, (int) (byte) 1, intArray56, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, 10, (int) (short) 0, (int) (short) -1, intArray36, true);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, 0);
        int int70 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray36, 10, 10, (int) (short) 1);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (short) -1);
        int int74 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, (-1));
        int int76 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, (int) (byte) 0);
        java.lang.Class<?> wildcardClass77 = intArray36.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2 + "'", int74 == 2);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2 + "'", int76 == 2);
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test3970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3970");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray27 = new int[] { (short) 100, (short) 0, 100, (byte) -1, 10 };
        int int31 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray27, 1, (int) (byte) 100, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, 100, (int) '#', (int) (short) 10, intArray27, false);
        int[] intArray35 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (short) 1);
        int int37 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray35, (int) (byte) 100);
        int[] intArray43 = new int[] { (-1), 100 };
        int[] intArray45 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray43, (int) (byte) 1);
        int[] intArray51 = new int[] { (-1), 100 };
        int[] intArray53 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray51, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray45, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray53, false);
        int[] intArray57 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray53, (int) 'a');
        int[] intArray59 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray57, (int) ' ');
        int int63 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray59, (int) (byte) -1, 0, (int) (short) 0);
        int[] intArray65 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray59, (-1));
        int int67 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray59, (int) (short) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray35, 10, (int) 'a', 0, intArray59, true);
        int[] intArray71 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray35, (int) (short) 10);
        int[] intArray75 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray71, (int) (byte) -1, (int) (short) 100, (-1), intArray75, false);
        int int79 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray71, (int) 'a');
        java.lang.Class<?> wildcardClass80 = intArray71.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[100, 0, 100, -1, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2 + "'", int37 == 2);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 2 + "'", int67 == 2);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 2 + "'", int79 == 2);
        org.junit.Assert.assertNotNull(wildcardClass80);
    }

    @Test
    public void test3971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3971");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 1);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (short) 1);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) 'a');
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (-1));
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (short) 10);
        int int36 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray32, (int) '#', (int) '4', 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
    }

    @Test
    public void test3972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3972");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { (-1), 100 };
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 1);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray22, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray30, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) 10, (int) '4', 10, intArray30, true);
        int int36 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray4, 0);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (byte) 100);
        int int42 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray38, (int) (byte) 0, 100, (int) (short) 1);
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (short) -1);
        int int46 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, (int) (byte) 0);
        java.lang.Class<?> wildcardClass47 = intArray38.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertNotNull(wildcardClass47);
    }

    @Test
    public void test3973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3973");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int int22 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (int) (byte) -1, 0, (int) (short) 0);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (-1));
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) (byte) 100);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) '4');
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 100);
        int int32 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray30, 2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
    }

    @Test
    public void test3974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3974");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { ' ', (byte) -1 };
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray36, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, (-1), (int) ' ', (int) (byte) 10, intArray36, false);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (int) 'a', 100, (int) (byte) 1, intArray56, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, 10, (int) (short) 0, (int) (short) -1, intArray36, true);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, (int) 'a');
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, 1);
        int int72 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray68, (int) (short) -1, (int) (short) 100, 2);
        int int74 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray68, 4);
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, 0);
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray76, 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2 + "'", int74 == 2);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1]");
    }

    @Test
    public void test3975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3975");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, 0);
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (short) -1);
        int int22 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray20, 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
    }

    @Test
    public void test3976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3976");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int int24 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) (short) 1);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) '#');
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 2);
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 4);
        int int34 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (int) 'a', 3, (-1));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
    }

    @Test
    public void test3977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3977");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray2, (int) (short) -1);
        int int28 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray2, 2);
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray2, 0);
        java.lang.Class<?> wildcardClass31 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test3978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3978");
        int[] intArray2 = new int[] { 1, 'a' };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) ' ');
        int int16 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray12, (int) (short) 1, (-1), (int) (byte) 0);
        int[] intArray20 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray12, 2, (int) '4', (int) (short) 0, intArray20, true);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray12, (int) (short) -1, (int) ' ', (int) (byte) 1);
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray12, 0, (int) 'a', 2, intArray32, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray2, (int) '4', 10, 1, intArray32, true);
        int int40 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray2, 4);
        java.lang.Class<?> wildcardClass41 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[1, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test3979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3979");
        int[] intArray1 = new int[] { 10 };
        int[] intArray3 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray1, (int) '4');
        int[] intArray8 = new int[] { '#' };
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) (short) 0);
        int int12 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) (byte) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray3, 10, (int) (byte) 1, (int) (short) 0, intArray8, false);
        int[] intArray19 = new int[] { 10 };
        int[] intArray21 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, (int) '4');
        int[] intArray26 = new int[] { '#' };
        int int28 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray26, (int) (short) 0);
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray26, (int) (byte) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray21, 10, (int) (byte) 1, (int) (short) 0, intArray26, false);
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray3, 0, 0, 1, intArray34, false);
        int int38 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray3, (int) ' ');
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray3, (int) ' ');
        int int44 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray40, 10, (int) 'a', (int) (short) -1);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[10]");
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[35]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[10]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[35]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
    }

    @Test
    public void test3980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3980");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) 'a', 100, (int) (byte) 1, intArray38, false);
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) ' ');
        int[] intArray52 = new int[] { ' ', (byte) -1 };
        int[] intArray58 = new int[] { (-1), 100 };
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) (byte) 1);
        int[] intArray66 = new int[] { (-1), 100 };
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray60, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray68, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray52, (-1), (int) ' ', (int) (byte) 10, intArray68, false);
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, 100);
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) (byte) 100);
        int int80 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray76, (int) (short) 10, (-1), (int) (short) 1);
        int[] intArray82 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray76, 100);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, 10, 0, (int) (byte) -1, intArray82, true);
        int int86 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, 10);
        // The following exception was thrown during execution in test generation
        try {
            int int90 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (int) '#', 4, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2 + "'", int80 == 2);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 2 + "'", int86 == 2);
    }

    @Test
    public void test3981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3981");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 0);
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 1);
        int int24 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (int) ' ', 10, 0);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (short) 10);
        int[] intArray32 = new int[] { ' ', (byte) -1 };
        int[] intArray38 = new int[] { (-1), 100 };
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 1);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray40, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray48, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, (-1), (int) ' ', (int) (byte) 10, intArray48, false);
        int[] intArray58 = new int[] { (-1), 100 };
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) (byte) 1);
        int[] intArray66 = new int[] { (-1), 100 };
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray60, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray68, false);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray48, (int) 'a', 100, (int) (byte) 1, intArray68, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, (int) (byte) -1, (int) (byte) 100, (int) (short) 10, intArray68, false);
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) (byte) 100);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1]");
    }

    @Test
    public void test3982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3982");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 100);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 1);
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 0);
        int int34 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray28, 1, (int) 'a', 0);
        // The following exception was thrown during execution in test generation
        try {
            int int38 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray28, (int) (byte) 10, 10, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
    }

    @Test
    public void test3983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3983");
        int[] intArray0 = null;
        int[] intArray6 = new int[] { (-1), 100 };
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (int) (byte) 1);
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (short) 10);
        int int12 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray10, 0);
        int int14 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray10, (int) (short) -1);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 0);
        int[] intArray22 = new int[] { ' ', (byte) -1 };
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray22, (-1), (int) ' ', (int) (byte) 10, intArray38, false);
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, 100);
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) '4');
        int[] intArray52 = new int[] { (-1), 100 };
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray46, 1, (int) (byte) 1, (int) (short) -1, intArray52, false);
        int[] intArray62 = new int[] { (-1), 100 };
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, (int) (byte) 1);
        int[] intArray70 = new int[] { (-1), 100 };
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray64, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray72, false);
        int[] intArray79 = new int[] { '#' };
        int int81 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray79, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray64, (int) (short) -1, 1, 2, intArray79, true);
        int[] intArray85 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray79, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray52, (int) (short) 100, 0, 1, intArray85, false);
        int[] intArray89 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) (byte) 100);
        int int91 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray52, (-1));
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, 0, 0, (int) (byte) 1, intArray52, true);
        int int97 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray52, 4, (int) (byte) 1, (int) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray0, 10, 0, (int) (byte) 100, intArray52, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot load from int array because \"nums\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[35]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 1]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[1, 1]");
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 1 + "'", int91 == 1);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 0 + "'", int97 == 0);
    }

    @Test
    public void test3984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3984");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { (-1), 100 };
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 1);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray22, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray30, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) 10, (int) '4', 10, intArray30, true);
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, 2);
        int int40 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray4, (int) '#', (int) '#', (-1));
        java.lang.Class<?> wildcardClass41 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test3985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3985");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) 'a', 100, (int) (byte) 1, intArray38, false);
        int int46 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, (int) '4');
        int int48 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, 0);
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, 0);
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) '4');
        int int54 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray52, (int) (short) 100);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2 + "'", int54 == 2);
    }

    @Test
    public void test3986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3986");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray27 = new int[] { (short) 100, (short) 0, 100, (byte) -1, 10 };
        int int31 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray27, 1, (int) (byte) 100, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, 100, (int) '#', (int) (short) 10, intArray27, false);
        int int35 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, 0);
        int[] intArray37 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (short) 1);
        int int39 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, 4);
        int[] intArray45 = new int[] { (-1), 100 };
        int[] intArray47 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray45, (int) (byte) 1);
        int[] intArray49 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray45, (int) ' ');
        int int53 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray49, (int) (short) 1, (-1), (int) (byte) 0);
        int[] intArray57 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray49, 2, (int) '4', (int) (short) 0, intArray57, true);
        int int63 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray49, (int) (short) -1, (int) ' ', (int) (byte) 1);
        int[] intArray69 = new int[] { (-1), 100 };
        int[] intArray71 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray69, (int) (byte) 1);
        int[] intArray77 = new int[] { (-1), 100 };
        int[] intArray79 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray77, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray71, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray79, false);
        int[] intArray83 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray79, (int) 'a');
        int[] intArray85 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray83, (int) ' ');
        int int89 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray85, 1, (int) (byte) 100, (-1));
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray49, (int) (byte) 1, 2, (int) (short) -1, intArray85, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) (byte) -1, 4, 3, intArray85, false);
        java.lang.Class<?> wildcardClass94 = intArray85.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[100, 0, 100, -1, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2 + "'", int39 == 2);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test3987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3987");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) ' ');
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (short) 100);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray2, 1);
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            int int16 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray2, (int) '#', 2, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[1, 1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[0, 0]");
    }

    @Test
    public void test3988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3988");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int int22 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (int) (byte) -1, 0, (int) (short) 0);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (-1));
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) (byte) 100);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) '4');
        int int32 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray28, (int) (short) 100, (int) (short) -1, (int) (byte) 1);
        int[] intArray38 = new int[] { (-1), 100 };
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 1);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) (short) 10);
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, 10);
        int int46 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray44, (int) 'a');
        int int48 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray44, 0);
        int int50 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray44, (int) (byte) 100);
        int int52 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray44, 4);
        int int54 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray44, (int) (short) -1);
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) '4');
        int int58 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray44, (int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) '#', (int) ' ', (int) '#', intArray44, true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2 + "'", int54 == 2);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2 + "'", int58 == 2);
    }

    @Test
    public void test3989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3989");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) 'a', 100, (int) (byte) 1, intArray38, false);
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (short) 100);
        int int50 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray46, (-1), (int) 'a', (int) (byte) 0);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        int[] intArray64 = new int[] { (-1), 100 };
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray58, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray66, false);
        int[] intArray73 = new int[] { '#' };
        int int75 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray73, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray58, (int) (short) -1, 1, 2, intArray73, true);
        int[] intArray79 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray73, 10);
        int[] intArray81 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray73, (int) 'a');
        int int83 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray73, (int) ' ');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray46, 0, 3, (int) (byte) 0, intArray73, true);
        // The following exception was thrown during execution in test generation
        try {
            int int89 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray73, (int) (byte) 100, 0, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[35]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
    }

    @Test
    public void test3990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3990");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) 'a', 100, (int) (byte) 1, intArray38, false);
        int int46 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, (int) '4');
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) 'a');
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, 1);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) (short) 10);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, 10);
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) (short) 1);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray64, 10);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) (short) 100);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray50, (int) (byte) 10, (int) (short) 10, (-1), intArray68, true);
        int int72 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray68, (int) (byte) -1);
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, 2);
        java.lang.Class<?> wildcardClass75 = intArray74.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 2 + "'", int72 == 2);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test3991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3991");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) 'a', 100, (int) (byte) 1, intArray38, false);
        int int46 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, (int) '4');
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) 'a');
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, 1);
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) (byte) 100);
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, 2);
        // The following exception was thrown during execution in test generation
        try {
            int int58 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray54, 1, 4, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
    }

    @Test
    public void test3992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3992");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 10);
        int[] intArray24 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) (byte) 0, (int) (short) 100, (int) (byte) -1, intArray24, false);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) 'a');
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) '#');
        java.lang.Class<?> wildcardClass31 = intArray28.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test3993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3993");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { ' ', (byte) -1 };
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray36, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, (-1), (int) ' ', (int) (byte) 10, intArray36, false);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (int) 'a', 100, (int) (byte) 1, intArray56, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, 10, (int) (short) 0, (int) (short) -1, intArray36, true);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, (int) 'a');
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, 1);
        int int70 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray68, (int) (byte) 1);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (-1));
        int int76 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray68, 4, (int) (short) 0, (int) (byte) 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2 + "'", int70 == 2);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
    }

    @Test
    public void test3994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3994");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) ' ');
        int[] intArray11 = new int[] { 10 };
        int[] intArray13 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray11, (int) '4');
        int[] intArray18 = new int[] { '#' };
        int int20 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) (short) 0);
        int int22 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) (byte) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray13, 10, (int) (byte) 1, (int) (short) 0, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray6, (int) (byte) 1, 0, (-1), intArray13, true);
        int[] intArray32 = new int[] { ' ', (byte) -1 };
        int[] intArray38 = new int[] { (-1), 100 };
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 1);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray40, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray48, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, (-1), (int) ' ', (int) (byte) 10, intArray48, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray13, (int) (byte) -1, (int) (short) 100, 4, intArray32, true);
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 10);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[10]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[35]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
    }

    @Test
    public void test3995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3995");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, 10);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) 'a');
        int int12 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, 0);
        int[] intArray18 = new int[] { ' ', (byte) -1 };
        int[] intArray24 = new int[] { (-1), 100 };
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 1);
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray26, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray34, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (-1), (int) ' ', (int) (byte) 10, intArray34, false);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 100);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) '4');
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray42, 1, (int) (byte) 1, (int) (short) -1, intArray48, false);
        int[] intArray58 = new int[] { (-1), 100 };
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) (byte) 1);
        int[] intArray66 = new int[] { (-1), 100 };
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray60, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray68, false);
        int[] intArray75 = new int[] { '#' };
        int int77 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray75, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray60, (int) (short) -1, 1, 2, intArray75, true);
        int[] intArray81 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray75, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray48, (int) (short) 100, 0, 1, intArray81, false);
        int[] intArray87 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray81, (int) (byte) 0, (int) (byte) 10, (int) (short) -1, intArray87, true);
        int[] intArray91 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray81, (int) ' ');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray8, (int) (short) 10, (int) (byte) 100, 0, intArray91, false);
        int[] intArray95 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray91, (int) '#');
        int[] intArray97 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray91, (int) (byte) -1);
        int[] intArray99 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray97, (int) (short) 100);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[35]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 1]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray97), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray99);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray99), "[-1, -1]");
    }

    @Test
    public void test3996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3996");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 100);
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray26, (-1), 2, (int) (byte) -1);
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) '4');
        // The following exception was thrown during execution in test generation
        try {
            int int36 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray26, (int) (short) 0, (int) (byte) -1, 4);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
    }

    @Test
    public void test3997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3997");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray19 = new int[] { '#' };
        int int21 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (short) -1, 1, 2, intArray19, true);
        int[] intArray25 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 10);
        int[] intArray27 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 0);
        int[] intArray33 = new int[] { ' ', (byte) -1 };
        int[] intArray39 = new int[] { (-1), 100 };
        int[] intArray41 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray39, (int) (byte) 1);
        int[] intArray47 = new int[] { (-1), 100 };
        int[] intArray49 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray47, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray41, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray49, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray33, (-1), (int) ' ', (int) (byte) 10, intArray49, false);
        int[] intArray59 = new int[] { (-1), 100 };
        int[] intArray61 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray59, (int) (byte) 1);
        int[] intArray67 = new int[] { (-1), 100 };
        int[] intArray69 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray67, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray61, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray69, false);
        int[] intArray73 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray69, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray49, (int) 'a', 100, (int) (byte) 1, intArray69, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray27, (int) (short) 0, (int) (byte) 1, (int) (short) 1, intArray49, true);
        int int79 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray27, (int) (byte) -1);
        int[] intArray81 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray27, 1);
        int int83 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray27, (int) ' ');
        int[] intArray85 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray27, (int) 'a');
        int[] intArray87 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray85, 0);
        int[] intArray89 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray87, 3);
        int int91 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray87, 10);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 2 + "'", int79 == 2);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 2 + "'", int83 == 2);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 2 + "'", int91 == 2);
    }

    @Test
    public void test3998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3998");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray22 = new int[] { (-1), 100 };
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, (int) (byte) 1);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, (int) ' ');
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray16, 0, 0, (int) (byte) 0, intArray22, true);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        int[] intArray44 = new int[] { (-1), 100 };
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray38, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray46, false);
        int[] intArray53 = new int[] { '#' };
        int int55 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray53, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray38, (int) (short) -1, 1, 2, intArray53, true);
        int[] intArray59 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray53, 10);
        int[] intArray61 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray53, 100);
        int int63 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray61, (int) (short) 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray22, (int) (byte) 0, (-1), 0, intArray61, true);
        java.lang.Class<?> wildcardClass66 = intArray61.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[35]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 2 + "'", int63 == 2);
        org.junit.Assert.assertNotNull(wildcardClass66);
    }

    @Test
    public void test3999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3999");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) '#');
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) (short) 0);
        int int12 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) ' ');
        int[] intArray14 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (short) 1);
        int int18 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray8, (int) (short) 1, (int) (byte) 100, (int) '4');
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test4000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test4000");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 100);
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray26, (-1), 2, (int) (byte) -1);
        int[] intArray34 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, (int) (short) 1, (int) (byte) 100, (int) (byte) -1, intArray34, false);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) ' ');
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
    }
}


package RangeInSortedArray;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest3 {

    public static boolean debug = false;

    @Test
    public void test1501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1501");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 1, (int) (byte) 1, (int) (short) -1, intArray32, false);
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        int[] intArray50 = new int[] { (-1), 100 };
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray44, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray52, false);
        int[] intArray59 = new int[] { '#' };
        int int61 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray59, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray44, (int) (short) -1, 1, 2, intArray59, true);
        int[] intArray65 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray59, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, (int) (short) 100, 0, 1, intArray65, false);
        int[] intArray69 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 100);
        int int73 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray32, (int) '#', (int) (short) 100, (-1));
        int[] intArray75 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 100);
        java.lang.Class<?> wildcardClass76 = intArray32.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[35]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[1, 1]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[1, 1]");
        org.junit.Assert.assertNotNull(wildcardClass76);
    }

    @Test
    public void test1502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1502");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray27 = new int[] { (short) 100, (short) 0, 100, (byte) -1, 10 };
        int int31 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray27, 1, (int) (byte) 100, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, 100, (int) '#', (int) (short) 10, intArray27, false);
        int int35 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, 0);
        int[] intArray41 = new int[] { (-1), 100 };
        int[] intArray43 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray41, (int) (byte) 1);
        int[] intArray49 = new int[] { (-1), 100 };
        int[] intArray51 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray49, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray43, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray51, false);
        int[] intArray55 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray51, (int) ' ');
        int[] intArray57 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray55, (int) (byte) 0);
        int[] intArray59 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray57, (int) (byte) 1);
        int int63 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray57, (int) ' ', 10, 0);
        int[] intArray65 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray57, (int) (short) 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, 0, (int) (short) 100, (int) '#', intArray65, false);
        int[] intArray69 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) '4');
        int[] intArray71 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 10);
        int int73 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, 1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[100, 0, 100, -1, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 2 + "'", int73 == 2);
    }

    @Test
    public void test1503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1503");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { ' ', (byte) -1 };
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray36, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, (-1), (int) ' ', (int) (byte) 10, intArray36, false);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (int) 'a', 100, (int) (byte) 1, intArray56, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, 10, (int) (short) 0, (int) (short) -1, intArray36, true);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, 0);
        int[] intArray72 = new int[] { (-1), 100 };
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (int) (byte) 1);
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray74, (int) (short) 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, 2, 10, (int) (short) 1, intArray74, false);
        int[] intArray80 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 0);
        int int82 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, (int) ' ');
        int int84 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, (int) (byte) -1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 2 + "'", int82 == 2);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 2 + "'", int84 == 2);
    }

    @Test
    public void test1504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1504");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 100);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) 'a');
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, 1);
        int int34 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray30, (int) (byte) 0, 0, 0);
        int[] intArray39 = new int[] { 10 };
        int[] intArray41 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray39, (int) '4');
        int[] intArray46 = new int[] { '#' };
        int int48 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray46, (int) (short) 0);
        int int50 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray46, (int) (byte) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray41, 10, (int) (byte) 1, (int) (short) 0, intArray46, false);
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, 100, (int) (short) 100, 0, intArray46, true);
        java.lang.Class<?> wildcardClass57 = intArray30.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[35]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test1505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1505");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) 'a', 100, (int) (byte) 1, intArray38, false);
        int int46 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, (int) (short) 1);
        int[] intArray52 = new int[] { (-1), 100 };
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) (byte) 1);
        int[] intArray60 = new int[] { (-1), 100 };
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray54, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray62, false);
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, (int) 'a');
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) ' ');
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) (byte) 10);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) (byte) 1);
        int int74 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray70, (int) (byte) 100);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray38, (int) (byte) 0, (int) ' ', (int) (byte) 1, intArray70, true);
        java.lang.Class<?> wildcardClass77 = intArray38.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2 + "'", int74 == 2);
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test1506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1506");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (int) (byte) -1);
        int[] intArray14 = new int[] { ' ', (byte) -1 };
        int[] intArray20 = new int[] { (-1), 100 };
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 1);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray22, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray30, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray14, (-1), (int) ' ', (int) (byte) 10, intArray30, false);
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray14, 100);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) '4');
        int[] intArray44 = new int[] { (-1), 100 };
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray38, 1, (int) (byte) 1, (int) (short) -1, intArray44, false);
        int int52 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray44, 10, 100, (int) '#');
        int int54 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray44, (int) (byte) 0);
        int[] intArray60 = new int[] { (-1), 100 };
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) (byte) 1);
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) ' ');
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) (short) 100);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray44, 1, 10, (int) (byte) 0, intArray66, true);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray8, 10, 4, 2, intArray44, false);
        int[] intArray74 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray8, (int) (byte) -1, (int) (short) -1, 0, intArray74, true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index -1 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[1, 1]");
    }

    @Test
    public void test1507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1507");
        int[] intArray1 = new int[] { 10 };
        int[] intArray3 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray1, (int) '4');
        int[] intArray8 = new int[] { '#' };
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) (short) 0);
        int int12 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) (byte) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray3, 10, (int) (byte) 1, (int) (short) 0, intArray8, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (short) 0);
        java.lang.Class<?> wildcardClass17 = intArray8.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[10]");
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[35]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test1508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1508");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, 10);
        int[] intArray12 = null;
        int[] intArray18 = new int[] { (-1), 100 };
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 1);
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray20, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray28, false);
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) ' ');
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray12, 10, (int) (short) 1, (int) (short) 0, intArray34, false);
        int int40 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray34, 0, (int) '4', (int) (short) 10);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (-1));
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray6, (-1), (int) (short) -1, (int) (byte) 0, intArray34, true);
        int int48 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray6, 3, (int) (short) 0, (int) (short) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        int[] intArray62 = new int[] { (-1), 100 };
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray56, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray64, false);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) ' ');
        int[] intArray74 = new int[] { (-1), 100 };
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray74, (int) (byte) 1);
        int[] intArray82 = new int[] { (-1), 100 };
        int[] intArray84 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray82, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray76, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray84, false);
        int[] intArray88 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray84, (int) 'a');
        int[] intArray90 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray88, (int) ' ');
        int[] intArray92 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray90, (int) (byte) 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray68, (int) (byte) 1, (int) 'a', 0, intArray90, true);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray6, (int) (byte) 100, (int) (byte) 0, (int) (short) 1, intArray90, false);
        int int98 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray90, (int) (byte) 1);
        java.lang.Class<?> wildcardClass99 = intArray90.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[0, -1]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 2 + "'", int98 == 2);
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test1509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1509");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (-1));
        int int24 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray16, (int) (short) 0, (int) (byte) 0, 1);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray16, (int) (byte) 10);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, 4);
        int int32 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray16, (int) (short) 100, 10, (int) (byte) -1);
        int int34 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray16, 1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
    }

    @Test
    public void test1510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1510");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray24, 0, (int) (byte) 100, 0);
        int[] intArray36 = new int[] { ' ', (byte) -1 };
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        int[] intArray50 = new int[] { (-1), 100 };
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray44, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray52, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (-1), (int) ' ', (int) (byte) 10, intArray52, false);
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, 100);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 100);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, 1);
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) '4');
        int[] intArray70 = new int[] { ' ', (byte) -1 };
        int[] intArray76 = new int[] { (-1), 100 };
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray76, (int) (byte) 1);
        int[] intArray84 = new int[] { (-1), 100 };
        int[] intArray86 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray84, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray78, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray86, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray70, (-1), (int) ' ', (int) (byte) 10, intArray86, false);
        int[] intArray92 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray86, 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (-1), (int) (byte) 1, (int) (byte) 0, intArray86, true);
        int int96 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray86, (int) (short) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray24, (int) (byte) -1, (int) '#', (int) (byte) 1, intArray86, false);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 2 + "'", int96 == 2);
    }

    @Test
    public void test1511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1511");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray22 = new int[] { ' ', (byte) -1 };
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray22, (-1), (int) ' ', (int) (byte) 10, intArray38, false);
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray50, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray58, false);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray38, (int) 'a', 100, (int) (byte) 1, intArray58, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray12, (int) (short) 100, (int) 'a', (int) (short) 0, intArray38, true);
        int int68 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray12, (int) '4');
        int int70 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray12, 0);
        int int74 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray12, (int) (byte) 10, (int) '4', 1);
        java.lang.Class<?> wildcardClass75 = intArray12.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2 + "'", int68 == 2);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2 + "'", int70 == 2);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test1512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1512");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) ' ');
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (short) 100);
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (short) 10);
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            int int16 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray12, (int) (short) 100, (int) (byte) 0, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[1, 1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
    }

    @Test
    public void test1513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1513");
        int[] intArray0 = null;
        int[] intArray6 = new int[] { (-1), 100 };
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (int) (byte) 1);
        int[] intArray14 = new int[] { (-1), 100 };
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray14, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray8, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray16, false);
        int[] intArray24 = new int[] { ' ', (byte) -1 };
        int[] intArray30 = new int[] { (-1), 100 };
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray30, (int) (byte) 1);
        int[] intArray38 = new int[] { (-1), 100 };
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray32, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray40, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray24, (-1), (int) ' ', (int) (byte) 10, intArray40, false);
        int[] intArray50 = new int[] { (-1), 100 };
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) (byte) 1);
        int[] intArray58 = new int[] { (-1), 100 };
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray52, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray60, false);
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray40, (int) 'a', 100, (int) (byte) 1, intArray60, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray8, 10, (int) (short) 0, (int) (short) -1, intArray40, true);
        int int70 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray40, 0);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, 10);
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) (byte) 100);
        int int76 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray40, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray0, (int) '4', (int) 'a', 4, intArray40, true);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2 + "'", int70 == 2);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2 + "'", int76 == 2);
    }

    @Test
    public void test1514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1514");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray24, 0, (int) (byte) 100, 0);
        int int32 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) '#');
        int[] intArray38 = new int[] { (-1), 100 };
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 1);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray40, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray48, false);
        int[] intArray55 = new int[] { '#' };
        int int57 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray55, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray40, (int) (short) -1, 1, 2, intArray55, true);
        int[] intArray61 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray55, 10);
        int[] intArray63 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray55, 0);
        int[] intArray65 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray55, (int) '#');
        int int69 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray55, 4, (int) (byte) 100, 2);
        int int73 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray55, 2, (int) (short) 10, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray24, (int) (short) 100, (int) (byte) 1, (int) '4', intArray55, true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[35]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
    }

    @Test
    public void test1515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1515");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { ' ', (byte) -1 };
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray36, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, (-1), (int) ' ', (int) (byte) 10, intArray36, false);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (int) 'a', 100, (int) (byte) 1, intArray56, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, 10, (int) (short) 0, (int) (short) -1, intArray36, true);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, 0);
        int[] intArray72 = new int[] { (-1), 100 };
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (int) (byte) 1);
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray74, (int) (short) 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, 2, 10, (int) (short) 1, intArray74, false);
        int int80 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, (int) (short) 0);
        int int84 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray36, (-1), (int) (short) 10, (int) (byte) -1);
        int[] intArray86 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) ' ');
        java.lang.Class<?> wildcardClass87 = intArray36.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2 + "'", int80 == 2);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test1516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1516");
        int[] intArray2 = new int[] { 1, 'a' };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) ' ');
        int int16 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray12, (int) (short) 1, (-1), (int) (byte) 0);
        int[] intArray20 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray12, 2, (int) '4', (int) (short) 0, intArray20, true);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray12, (int) (short) -1, (int) ' ', (int) (byte) 1);
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray12, 0, (int) 'a', 2, intArray32, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray2, (int) '4', 10, 1, intArray32, true);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) ' ');
        int[] intArray46 = new int[] { ' ', (byte) -1 };
        int[] intArray52 = new int[] { (-1), 100 };
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) (byte) 1);
        int[] intArray60 = new int[] { (-1), 100 };
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray54, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray62, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray46, (-1), (int) ' ', (int) (byte) 10, intArray62, false);
        int[] intArray72 = new int[] { (-1), 100 };
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (int) (byte) 1);
        int[] intArray80 = new int[] { (-1), 100 };
        int[] intArray82 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray80, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray74, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray82, false);
        int[] intArray86 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray82, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray62, (int) 'a', 100, (int) (byte) 1, intArray82, false);
        int int90 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray82, (int) '4');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray2, (int) (short) 0, (int) (byte) 10, (int) (byte) -1, intArray82, true);
        int int96 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray82, 1, (int) (byte) 10, 1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[1, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 2 + "'", int90 == 2);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 0 + "'", int96 == 0);
    }

    @Test
    public void test1517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1517");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { ' ', (byte) -1 };
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray36, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, (-1), (int) ' ', (int) (byte) 10, intArray36, false);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (int) 'a', 100, (int) (byte) 1, intArray56, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, 10, (int) (short) 0, (int) (short) -1, intArray36, true);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, (int) 'a');
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, 1);
        int int70 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray68, (int) (byte) 1);
        int[] intArray76 = new int[] { (-1), 100 };
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray76, (int) (byte) 1);
        int[] intArray80 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray78, (int) (short) 10);
        int[] intArray82 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray78, (int) '#');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray68, 100, 100, 4, intArray82, false);
        // The following exception was thrown during execution in test generation
        try {
            int int88 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray82, 4, (int) (short) -1, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2 + "'", int70 == 2);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1]");
    }

    @Test
    public void test1518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1518");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 0);
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 1);
        int int24 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (int) ' ', 10, 0);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (short) 10);
        int[] intArray32 = new int[] { ' ', (byte) -1 };
        int[] intArray38 = new int[] { (-1), 100 };
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 1);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray40, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray48, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, (-1), (int) ' ', (int) (byte) 10, intArray48, false);
        int[] intArray58 = new int[] { (-1), 100 };
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) (byte) 1);
        int[] intArray66 = new int[] { (-1), 100 };
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray60, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray68, false);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray48, (int) 'a', 100, (int) (byte) 1, intArray68, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, (int) (byte) -1, (int) (byte) 100, (int) (short) 10, intArray68, false);
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) (byte) -1);
        int int80 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray78, (int) 'a');
        int[] intArray82 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray78, (int) (short) 0);
        int int84 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray78, (int) (short) -1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2 + "'", int80 == 2);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
    }

    @Test
    public void test1519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1519");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int int8 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, 0);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, 4);
        int[] intArray16 = new int[] { ' ', (byte) -1 };
        int[] intArray22 = new int[] { (-1), 100 };
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, (int) (byte) 1);
        int[] intArray30 = new int[] { (-1), 100 };
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray30, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray24, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray32, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray16, (-1), (int) ' ', (int) (byte) 10, intArray32, false);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, 100);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 100);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, 1);
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) '4');
        int[] intArray50 = new int[] { ' ', (byte) -1 };
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        int[] intArray64 = new int[] { (-1), 100 };
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray58, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray66, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray50, (-1), (int) ' ', (int) (byte) 10, intArray66, false);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray16, (-1), (int) (byte) 1, (int) (byte) 0, intArray66, true);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray6, (int) '#', (int) (short) -1, 0, intArray16, false);
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (short) -1);
        int[] intArray80 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (short) 100);
        java.lang.Class<?> wildcardClass81 = intArray80.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test1520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1520");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 1);
        int[] intArray30 = new int[] { ' ', (byte) -1 };
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        int[] intArray44 = new int[] { (-1), 100 };
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray38, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray46, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray30, (-1), (int) ' ', (int) (byte) 10, intArray46, false);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        int[] intArray64 = new int[] { (-1), 100 };
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray58, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray66, false);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray46, (int) 'a', 100, (int) (byte) 1, intArray66, false);
        int int74 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray66, (int) '4');
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) (byte) 10, (int) '#', 0, intArray66, false);
        int[] intArray80 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) (short) 1);
        int int84 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray80, (int) '4', 100, (-1));
        int int88 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray80, 4, 100, 3);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2 + "'", int74 == 2);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
    }

    @Test
    public void test1521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1521");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray27 = new int[] { (short) 100, (short) 0, 100, (byte) -1, 10 };
        int int31 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray27, 1, (int) (byte) 100, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, 100, (int) '#', (int) (short) 10, intArray27, false);
        int int35 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray27, 10);
        int[] intArray37 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray27, (int) (byte) 1);
        int[] intArray43 = new int[] { (-1), 100 };
        int[] intArray45 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray43, (int) (byte) 1);
        int[] intArray47 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray45, (int) (short) 10);
        int int49 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray45, 2);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray27, (int) '4', (int) (byte) 1, 0, intArray45, false);
        int int55 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray27, 2, 1, 0);
        // The following exception was thrown during execution in test generation
        try {
            int int59 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray27, (int) (byte) 10, (int) (short) 1, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[100, 0, 100, -1, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2 + "'", int49 == 2);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
    }

    @Test
    public void test1522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1522");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) ' ');
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (short) 100);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, 100);
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) '#');
        java.lang.Class<?> wildcardClass13 = intArray8.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[1, 1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1523");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int int8 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, 0);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, 4);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        int[] intArray24 = new int[] { (-1), 100 };
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray26, false);
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) 'a');
        int[] intArray36 = new int[] { ' ', (byte) -1 };
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        int[] intArray50 = new int[] { (-1), 100 };
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray44, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray52, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (-1), (int) ' ', (int) (byte) 10, intArray52, false);
        int[] intArray62 = new int[] { (-1), 100 };
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, (int) (byte) 1);
        int[] intArray70 = new int[] { (-1), 100 };
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray64, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray72, false);
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray52, (int) 'a', 100, (int) (byte) 1, intArray72, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray26, (int) (short) 100, (int) 'a', (int) (short) 0, intArray52, true);
        int[] intArray82 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (-1));
        int[] intArray84 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (short) 100);
        int[] intArray86 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray6, (int) (byte) 0, (-1), (int) (short) -1, intArray26, true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1]");
    }

    @Test
    public void test1524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1524");
        int[] intArray0 = null;
        int[] intArray6 = new int[] { (-1), 100 };
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (int) (byte) 1);
        int[] intArray14 = new int[] { (-1), 100 };
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray14, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray8, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray16, false);
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) 'a');
        int[] intArray26 = new int[] { ' ', (byte) -1 };
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        int[] intArray40 = new int[] { (-1), 100 };
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray34, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray42, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, (-1), (int) ' ', (int) (byte) 10, intArray42, false);
        int[] intArray52 = new int[] { (-1), 100 };
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) (byte) 1);
        int[] intArray60 = new int[] { (-1), 100 };
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray54, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray62, false);
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray42, (int) 'a', 100, (int) (byte) 1, intArray62, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray16, (int) (short) 100, (int) 'a', (int) (short) 0, intArray42, true);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (-1));
        int int76 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray16, (int) (byte) 100, (int) '4', 10);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray0, 10, 1, (int) '4', intArray16, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
    }

    @Test
    public void test1525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1525");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray22 = new int[] { ' ', (byte) -1 };
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray22, (-1), (int) ' ', (int) (byte) 10, intArray38, false);
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray50, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray58, false);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray38, (int) 'a', 100, (int) (byte) 1, intArray58, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray12, (int) (short) 100, (int) 'a', (int) (short) 0, intArray38, true);
        int int68 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray12, (int) '4');
        int int70 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray12, 0);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, 2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2 + "'", int68 == 2);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2 + "'", int70 == 2);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
    }

    @Test
    public void test1526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1526");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int int8 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, 0);
        int int12 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray6, 10, (int) ' ', 10);
        java.lang.Class<?> wildcardClass13 = intArray6.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1527");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int int22 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (int) (byte) -1, 0, (int) (short) 0);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (-1));
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 0);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (-1));
        java.lang.Class<?> wildcardClass29 = intArray28.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[0, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test1528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1528");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) ' ');
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray6, (int) (short) 1, (-1), (int) (byte) 0);
        int[] intArray14 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray6, 2, (int) '4', (int) (short) 0, intArray14, true);
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, 0);
        int[] intArray24 = new int[] { (-1), 100 };
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 1);
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray26, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray34, false);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) ' ');
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 0);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) '#');
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray50, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray58, false);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) 'a');
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, (int) ' ');
        int int68 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray64, (int) (byte) -1, 0, (int) (short) 0);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (-1));
        int int72 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray64, (int) (short) 1);
        int int74 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray64, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray42, (int) ' ', (int) (short) 1, (int) (short) 1, intArray64, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray6, (int) '4', (int) (short) 100, (int) (byte) 0, intArray64, true);
        java.lang.Class<?> wildcardClass79 = intArray6.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 2 + "'", int72 == 2);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2 + "'", int74 == 2);
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test1529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1529");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) ' ');
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 10);
        int[] intArray14 = new int[] { ' ', (byte) -1 };
        int[] intArray20 = new int[] { (-1), 100 };
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 1);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray22, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray30, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray14, (-1), (int) ' ', (int) (byte) 10, intArray30, false);
        int[] intArray40 = new int[] { (-1), 100 };
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) (byte) 1);
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray42, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray50, false);
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray30, (int) 'a', 100, (int) (byte) 1, intArray50, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray8, (-1), (int) '4', (int) '#', intArray50, false);
        int[] intArray64 = new int[] { (-1), 100 };
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) (byte) 1);
        int[] intArray72 = new int[] { (-1), 100 };
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray66, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray74, false);
        int[] intArray81 = new int[] { '#' };
        int int83 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray81, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray66, (int) (short) -1, 1, 2, intArray81, true);
        int[] intArray87 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray81, 10);
        int[] intArray89 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray81, 100);
        int int93 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray81, (-1), 0, (int) (short) -1);
        int[] intArray95 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray81, (int) (byte) -1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray50, (int) 'a', (int) (short) -1, 0, intArray95, false);
        java.lang.Class<?> wildcardClass98 = intArray95.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[35]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test1530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1530");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 0);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 10);
        int int28 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray26, 0);
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (short) 100);
        int int34 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray30, (-1), (int) 'a', 0);
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray30, (int) (short) 1);
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        int[] intArray50 = new int[] { (-1), 100 };
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray44, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray52, false);
        int[] intArray60 = new int[] { (-1), 100 };
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) (byte) 1);
        int[] intArray68 = new int[] { (-1), 100 };
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray62, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray70, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray44, (int) (byte) 10, (int) '4', 10, intArray70, true);
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, 2);
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray76, (int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray30, (int) (short) 1, 4, 10, intArray76, false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 7 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1]");
    }

    @Test
    public void test1531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1531");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int int18 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray4, (int) ' ', (int) (short) -1, (int) (short) 1);
        int int20 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray4, (int) '#');
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, 10);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) ' ');
        int int36 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray32, (int) (short) 1, (-1), (int) (byte) 0);
        int int40 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray32, 4, 10, 0);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) 'a');
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) ' ');
        int[] intArray71 = new int[] { (short) 100, (short) 0, 100, (byte) -1, 10 };
        int int75 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray71, 1, (int) (byte) 100, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray62, 100, (int) '#', (int) (short) 10, intArray71, false);
        int[] intArray79 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, (int) (short) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray32, (int) (byte) 10, (int) (byte) 10, 4, intArray62, true);
        int int83 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray32, (int) (short) 10);
        int int85 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray32, (int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, 2, 1, (int) (short) 10, intArray32, true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[100, 0, 100, -1, 10]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 2 + "'", int83 == 2);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 2 + "'", int85 == 2);
    }

    @Test
    public void test1532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1532");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 100);
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray26, (-1), 2, (int) (byte) -1);
        int[] intArray34 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, (int) (short) 1, (int) (byte) 100, (int) (byte) -1, intArray34, false);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) ' ');
        int int40 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray26, 1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2 + "'", int40 == 2);
    }

    @Test
    public void test1533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1533");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray19 = new int[] { '#' };
        int int21 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (short) -1, 1, 2, intArray19, true);
        int[] intArray25 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 10);
        int[] intArray27 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, (int) 'a');
        int[] intArray29 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray27, (int) (short) 0);
        int[] intArray35 = new int[] { (-1), 100 };
        int[] intArray37 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray35, (int) (byte) 1);
        int[] intArray43 = new int[] { (-1), 100 };
        int[] intArray45 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray43, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray37, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray45, false);
        int[] intArray49 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray45, (int) 'a');
        int[] intArray51 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray49, (int) ' ');
        int[] intArray53 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray51, (int) (byte) 10);
        int[] intArray55 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray53, (int) (byte) 1);
        int int57 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray53, (int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray29, (int) ' ', (int) (byte) -1, (int) '4', intArray53, false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2 + "'", int57 == 2);
    }

    @Test
    public void test1534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1534");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, 10);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) 'a');
        int int12 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, 0);
        int int14 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) (byte) 100);
        int[] intArray20 = new int[] { (-1), 100 };
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 1);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray22, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray30, false);
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray30, (int) 'a');
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) ' ');
        int int40 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray36, (int) (byte) -1, 0, (int) (short) 0);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (-1));
        int int44 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, (int) (short) 1);
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) '#');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray8, (int) (short) 1, (int) (byte) 0, (-1), intArray46, false);
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 100);
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, 4);
        // The following exception was thrown during execution in test generation
        try {
            int int56 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray52, 10, (int) (short) -1, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2 + "'", int44 == 2);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
    }

    @Test
    public void test1535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1535");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 10);
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (short) 100);
        int[] intArray28 = new int[] { ' ', (byte) -1 };
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray36, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray44, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray28, (-1), (int) ' ', (int) (byte) 10, intArray44, false);
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, 100);
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 100);
        int int56 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray52, (-1), 2, (int) (byte) -1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, 0, 2, 0, intArray52, false);
        int int62 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (-1), (-1), 0);
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) -1);
        java.lang.Class<?> wildcardClass65 = intArray64.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[0, 1]");
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test1536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1536");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int int8 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, 0);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, (int) (short) -1);
        int int12 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, (int) '#');
        int[] intArray18 = new int[] { (-1), 100 };
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 1);
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray20, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray28, false);
        int[] intArray35 = new int[] { '#' };
        int int37 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray35, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray20, (int) (short) -1, 1, 2, intArray35, true);
        int[] intArray41 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray35, 10);
        int[] intArray43 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray35, 100);
        int int45 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray43, (int) (short) 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray6, (int) (short) 10, (int) (short) 1, 1, intArray43, false);
        java.lang.Class<?> wildcardClass48 = intArray43.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[35]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertNotNull(wildcardClass48);
    }

    @Test
    public void test1537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1537");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray24 = new int[] { ' ', (byte) -1 };
        int[] intArray30 = new int[] { (-1), 100 };
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray30, (int) (byte) 1);
        int[] intArray38 = new int[] { (-1), 100 };
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray32, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray40, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray24, (-1), (int) ' ', (int) (byte) 10, intArray40, false);
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, 1);
        int int48 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray46, (int) (short) 1);
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) 'a');
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, 10);
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) '4');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray16, (int) 'a', (int) '#', (int) (short) 10, intArray52, false);
        int int58 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray16, (int) 'a');
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2 + "'", int58 == 2);
    }

    @Test
    public void test1538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1538");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int int22 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (int) (byte) -1, 0, (int) (short) 0);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (-1));
        int[] intArray30 = new int[] { (-1), 100 };
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray30, (int) (byte) 1);
        int[] intArray38 = new int[] { (-1), 100 };
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray32, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray40, false);
        int[] intArray47 = new int[] { '#' };
        int int49 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray47, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray32, (int) (short) -1, 1, 2, intArray47, true);
        int[] intArray53 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray47, 10);
        int[] intArray55 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray47, 0);
        int[] intArray57 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray47, (int) '#');
        int[] intArray59 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray47, (int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray24, (int) (short) 100, 0, (int) (byte) 10, intArray47, false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 5 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[35]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[0, 0]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1]");
    }

    @Test
    public void test1539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1539");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 1, (int) (byte) 1, (int) (short) -1, intArray32, false);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 10);
        int int40 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray32, (int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            int int44 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray32, (int) '4', (int) (short) 100, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
    }

    @Test
    public void test1540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1540");
        int[] intArray0 = null;
        int[] intArray6 = new int[] { ' ', (byte) -1 };
        int[] intArray12 = new int[] { (-1), 100 };
        int[] intArray14 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) (byte) 1);
        int[] intArray20 = new int[] { (-1), 100 };
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray14, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray22, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray6, (-1), (int) ' ', (int) (byte) 10, intArray22, false);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, 100);
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) '4');
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray30, 1, (int) (byte) 1, (int) (short) -1, intArray36, false);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (short) 10);
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (short) 1);
        int[] intArray50 = new int[] { (-1), 100 };
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (int) (byte) 10, (int) (short) 1, 1, intArray50, false);
        int[] intArray60 = new int[] { (-1), 100 };
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) (byte) 1);
        int[] intArray68 = new int[] { (-1), 100 };
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray62, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray70, false);
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) 'a');
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray74, (int) ' ');
        int int80 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray76, (int) (byte) -1, 0, (int) (short) 0);
        int[] intArray82 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray76, (-1));
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray36, (int) '4', 1, (int) (short) 0, intArray82, false);
        int[] intArray86 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (short) 100);
        int[] intArray88 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray86, 1);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray0, 100, 0, (int) (byte) 1, intArray88, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot load from int array because \"nums\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[1, 1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[0, 1]");
    }

    @Test
    public void test1541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1541");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 1);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (short) 1);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) 'a');
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, 10);
        int int32 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray30, 100);
        int[] intArray38 = new int[] { (-1), 100 };
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 1);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) (short) 10);
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, 10);
        int int46 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray44, (int) 'a');
        int int48 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray44, 0);
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) (short) 10);
        int int54 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray44, (int) (byte) 10, (int) (short) 0, (int) (byte) 0);
        int[] intArray60 = new int[] { (-1), 100 };
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) (byte) 1);
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, (int) (short) 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray44, (-1), 0, 1, intArray64, true);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) '#', (int) (byte) -1, (int) (short) 100, intArray64, true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[0, -1]");
    }

    @Test
    public void test1542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1542");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray27 = new int[] { (short) 100, (short) 0, 100, (byte) -1, 10 };
        int int31 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray27, 1, (int) (byte) 100, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, 100, (int) '#', (int) (short) 10, intArray27, false);
        int int35 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, 0);
        int[] intArray37 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) 'a');
        int[] intArray39 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray37, 2);
        int[] intArray41 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray37, 4);
        java.lang.Class<?> wildcardClass42 = intArray37.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[100, 0, 100, -1, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test1543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1543");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { ' ', (byte) -1 };
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray36, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, (-1), (int) ' ', (int) (byte) 10, intArray36, false);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (int) 'a', 100, (int) (byte) 1, intArray56, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, 10, (int) (short) 0, (int) (short) -1, intArray36, true);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, 0);
        int[] intArray72 = new int[] { (-1), 100 };
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (int) (byte) 1);
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray74, (int) (short) 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, 2, 10, (int) (short) 1, intArray74, false);
        int int80 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, (int) (short) 0);
        int int84 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray36, (-1), (int) (short) 10, (int) (byte) -1);
        int[] intArray86 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, 3);
        java.lang.Class<?> wildcardClass87 = intArray86.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2 + "'", int80 == 2);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test1544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1544");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 10);
        int[] intArray24 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) (byte) 0, (int) (short) 100, (int) (byte) -1, intArray24, false);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) 'a');
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) '#');
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, 100);
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 10);
        int int38 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray32, 0, 0, 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
    }

    @Test
    public void test1545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1545");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { ' ', (byte) -1 };
        int[] intArray38 = new int[] { (-1), 100 };
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 1);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray40, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray48, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, (-1), (int) ' ', (int) (byte) 10, intArray48, false);
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, 100);
        int int56 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray32, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray24, 10, (int) 'a', (-1), intArray32, true);
        int int60 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) '#');
        int int62 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) ' ');
        int int64 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (byte) 0);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (short) 100);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '#');
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) (short) 1);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) ' ');
        int int74 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray68, (int) (byte) 100);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2 + "'", int60 == 2);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2 + "'", int62 == 2);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2 + "'", int64 == 2);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2 + "'", int74 == 2);
    }

    @Test
    public void test1546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1546");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { (-1), 100 };
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 1);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray22, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray30, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) 10, (int) '4', 10, intArray30, true);
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, 2);
        int int40 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray4, (int) (short) 1, (int) (short) 100, (int) (byte) -1);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, 4);
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            int int48 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray44, 1, (int) 'a', (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
    }

    @Test
    public void test1547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1547");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 0);
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 1);
        int int24 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (int) ' ', 10, 0);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (short) 10);
        int[] intArray32 = new int[] { ' ', (byte) -1 };
        int[] intArray38 = new int[] { (-1), 100 };
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 1);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray40, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray48, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, (-1), (int) ' ', (int) (byte) 10, intArray48, false);
        int[] intArray58 = new int[] { (-1), 100 };
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) (byte) 1);
        int[] intArray66 = new int[] { (-1), 100 };
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray60, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray68, false);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray48, (int) 'a', 100, (int) (byte) 1, intArray68, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, (int) (byte) -1, (int) (byte) 100, (int) (short) 10, intArray68, false);
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) (byte) -1);
        int int80 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray78, (int) 'a');
        int int82 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray78, (int) (short) 100);
        int[] intArray87 = new int[] { '#' };
        int int89 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray87, (int) (short) 0);
        int[] intArray93 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray87, 100, 0, (int) (short) -1, intArray93, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray78, (int) (byte) 1, (int) '#', 10, intArray93, true);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray99 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray93, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2 + "'", int80 == 2);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 2 + "'", int82 == 2);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[35]");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
    }

    @Test
    public void test1548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1548");
        int[] intArray0 = null;
        int[] intArray6 = new int[] { ' ', (byte) -1 };
        int[] intArray12 = new int[] { (-1), 100 };
        int[] intArray14 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) (byte) 1);
        int[] intArray20 = new int[] { (-1), 100 };
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray14, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray22, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray6, (-1), (int) ' ', (int) (byte) 10, intArray22, false);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, 0);
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray28, (int) (byte) 0);
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) 'a');
        int[] intArray38 = new int[] { (-1), 100 };
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 1);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray40, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray48, false);
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) ' ');
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) (byte) 0);
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) '#');
        int[] intArray62 = new int[] { (-1), 100 };
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, (int) (byte) 1);
        int[] intArray70 = new int[] { (-1), 100 };
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray64, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray72, false);
        int[] intArray79 = new int[] { '#' };
        int int81 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray79, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray64, (int) (short) -1, 1, 2, intArray79, true);
        int[] intArray85 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray79, 10);
        int[] intArray87 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray79, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray52, (int) (byte) 0, (int) (short) 10, (int) (byte) 1, intArray87, false);
        int[] intArray91 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray87, (int) (short) 100);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, (int) '#', (int) 'a', 2, intArray91, false);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray0, 100, 3, (int) '#', intArray32, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[35]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, -1]");
    }

    @Test
    public void test1549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1549");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 1, (int) (byte) 1, (int) (short) -1, intArray32, false);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 10);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) 'a');
        int[] intArray46 = new int[] { ' ', (byte) -1 };
        int[] intArray52 = new int[] { (-1), 100 };
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) (byte) 1);
        int[] intArray60 = new int[] { (-1), 100 };
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray54, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray62, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray46, (-1), (int) ' ', (int) (byte) 10, intArray62, false);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, 1);
        int int70 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray68, (int) (short) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray40, 0, (int) ' ', (int) (short) -1, intArray68, false);
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) (byte) 0);
        int[] intArray78 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray74, (int) (byte) -1, 10, 0, intArray78, true);
        // The following exception was thrown during execution in test generation
        try {
            int int84 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray78, 0, 0, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2 + "'", int70 == 2);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
    }

    @Test
    public void test1550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1550");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 1, (int) (byte) 1, (int) (short) -1, intArray32, false);
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        int[] intArray50 = new int[] { (-1), 100 };
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray44, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray52, false);
        int[] intArray59 = new int[] { '#' };
        int int61 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray59, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray44, (int) (short) -1, 1, 2, intArray59, true);
        int[] intArray65 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray59, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, (int) (short) 100, 0, 1, intArray65, false);
        int[] intArray69 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 100);
        int int73 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray32, (int) '#', (int) (short) 100, (-1));
        int[] intArray75 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 100);
        int int79 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray75, (int) (short) 10, 1, (int) (short) 0);
        int[] intArray81 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray75, 2);
        int int83 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray81, (int) (short) 10);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[35]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[1, 1]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[1, 1]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 2 + "'", int83 == 2);
    }

    @Test
    public void test1551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1551");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 10);
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (short) 100);
        int[] intArray28 = new int[] { ' ', (byte) -1 };
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray36, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray44, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray28, (-1), (int) ' ', (int) (byte) 10, intArray44, false);
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, 100);
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) '4');
        int[] intArray58 = new int[] { (-1), 100 };
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray52, 1, (int) (byte) 1, (int) (short) -1, intArray58, false);
        int[] intArray68 = new int[] { (-1), 100 };
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) (byte) 1);
        int[] intArray76 = new int[] { (-1), 100 };
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray76, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray70, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray78, false);
        int[] intArray85 = new int[] { '#' };
        int int87 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray85, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray70, (int) (short) -1, 1, 2, intArray85, true);
        int[] intArray91 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray85, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray58, (int) (short) 100, 0, 1, intArray91, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray22, 0, (int) (short) 100, (int) ' ', intArray91, true);
        java.lang.Class<?> wildcardClass96 = intArray22.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[35]");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 1]");
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test1552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1552");
        int[] intArray0 = null;
        int[] intArray8 = new int[] { (byte) -1, 2, (short) 1, '#' };
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) '4');
        int int12 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, 10);
        int[] intArray18 = new int[] { (-1), 100 };
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 1);
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray20, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray28, false);
        int[] intArray36 = new int[] { ' ', (byte) -1 };
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        int[] intArray50 = new int[] { (-1), 100 };
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray44, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray52, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (-1), (int) ' ', (int) (byte) 10, intArray52, false);
        int[] intArray62 = new int[] { (-1), 100 };
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, (int) (byte) 1);
        int[] intArray70 = new int[] { (-1), 100 };
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray64, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray72, false);
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray52, (int) 'a', 100, (int) (byte) 1, intArray72, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, 10, (int) (short) 0, (int) (short) -1, intArray52, true);
        int int82 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray52, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray8, (int) (byte) 100, (int) '4', (int) (short) 10, intArray52, true);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray0, (int) (short) 100, (int) (short) 0, (int) '#', intArray8, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot load from int array because \"nums\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 2, 1, 35]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 4 + "'", int10 == 4);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 3 + "'", int12 == 3);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 2 + "'", int82 == 2);
    }

    @Test
    public void test1553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1553");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int int8 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, 0);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, 2);
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, 1);
        java.lang.Class<?> wildcardClass13 = intArray6.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1554");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) 'a', 100, (int) (byte) 1, intArray38, false);
        int int46 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, (int) '4');
        int int50 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray38, (int) ' ', (int) (byte) 1, 0);
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) 'a');
        int int56 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray38, (int) '#', (int) '#', 4);
        java.lang.Class<?> wildcardClass57 = intArray38.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test1555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1555");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int int8 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, 0);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, (int) (short) -1);
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (int) (byte) 0);
        int[] intArray18 = new int[] { ' ', (byte) -1 };
        int[] intArray24 = new int[] { (-1), 100 };
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 1);
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray26, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray34, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (-1), (int) ' ', (int) (byte) 10, intArray34, false);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, 1);
        int int42 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray40, (int) (short) 1);
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) 'a');
        int int46 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray40, 10);
        int int48 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray40, (int) (short) 100);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray12, (int) (short) 10, 1, (int) (short) -1, intArray40, true);
        int int54 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray40, 10, 1, (int) (byte) 0);
        int int58 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray40, (int) (short) 100, 4, (int) (byte) 1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2 + "'", int42 == 2);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
    }

    @Test
    public void test1556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1556");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 0);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (byte) 0);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) 'a');
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray36, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray44, false);
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) ' ');
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 0);
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) '#');
        int[] intArray58 = new int[] { (-1), 100 };
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) (byte) 1);
        int[] intArray66 = new int[] { (-1), 100 };
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray60, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray68, false);
        int[] intArray75 = new int[] { '#' };
        int int77 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray75, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray60, (int) (short) -1, 1, 2, intArray75, true);
        int[] intArray81 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray75, 10);
        int[] intArray83 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray75, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray48, (int) (byte) 0, (int) (short) 10, (int) (byte) 1, intArray83, false);
        int[] intArray87 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray83, (int) (short) 100);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray28, (int) '#', (int) 'a', 2, intArray87, false);
        int int91 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray87, 1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[35]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 2 + "'", int91 == 2);
    }

    @Test
    public void test1557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1557");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 1, (int) (byte) 1, (int) (short) -1, intArray32, false);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 10);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) 'a');
        int[] intArray46 = new int[] { ' ', (byte) -1 };
        int[] intArray52 = new int[] { (-1), 100 };
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) (byte) 1);
        int[] intArray60 = new int[] { (-1), 100 };
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray54, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray62, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray46, (-1), (int) ' ', (int) (byte) 10, intArray62, false);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, 1);
        int int70 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray68, (int) (short) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray40, 0, (int) ' ', (int) (short) -1, intArray68, false);
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) (byte) 0);
        int int76 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray74, 10);
        int int78 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray74, 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2 + "'", int70 == 2);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2 + "'", int76 == 2);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 2 + "'", int78 == 2);
    }

    @Test
    public void test1558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1558");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 1);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (short) 1);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) 'a');
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, 10);
        int int32 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray30, 100);
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray30, 4);
        int[] intArray40 = new int[] { (-1), 100 };
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) (byte) 1);
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (short) 10);
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, 10);
        int[] intArray52 = new int[] { (-1), 100 };
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) (byte) 1);
        int[] intArray60 = new int[] { (-1), 100 };
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray54, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray62, false);
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, (int) 'a');
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) ' ');
        int int72 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray68, (int) (byte) -1, 0, (int) (short) 0);
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (-1));
        int int76 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray68, (int) (byte) 100);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray46, (-1), 100, 3, intArray68, true);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, 2, (-1), (int) (byte) 10, intArray46, false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2 + "'", int76 == 2);
    }

    @Test
    public void test1559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1559");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { ' ', (byte) -1 };
        int[] intArray38 = new int[] { (-1), 100 };
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 1);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray40, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray48, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, (-1), (int) ' ', (int) (byte) 10, intArray48, false);
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, 100);
        int int56 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray32, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray24, 10, (int) 'a', (-1), intArray32, true);
        int int60 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) '#');
        int[] intArray66 = new int[] { (-1), 100 };
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) (byte) 1);
        int[] intArray74 = new int[] { (-1), 100 };
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray74, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray68, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray76, false);
        int[] intArray80 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray76, (int) ' ');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray24, (int) (byte) 100, 100, 0, intArray80, false);
        int int86 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray24, (int) ' ', (int) (byte) 1, (int) (short) -1);
        int int88 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) '#');
        java.lang.Class<?> wildcardClass89 = intArray24.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2 + "'", int60 == 2);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 2 + "'", int88 == 2);
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test1560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1560");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, 10);
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (int) (short) 1);
        int int12 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray10, 10);
        int[] intArray18 = new int[] { ' ', (byte) -1 };
        int[] intArray24 = new int[] { (-1), 100 };
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 1);
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray26, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray34, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (-1), (int) ' ', (int) (byte) 10, intArray34, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray10, 0, (int) 'a', 4, intArray34, false);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, 2);
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray50, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray58, false);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) ' ');
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, (int) (byte) 0);
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) (byte) 1);
        int int70 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray64, (int) ' ', 10, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray34, 2, (int) (byte) 100, 4, intArray64, true);
        int int74 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray34, 10);
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, 3);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2 + "'", int74 == 2);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
    }

    @Test
    public void test1561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1561");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 1);
        int[] intArray30 = new int[] { ' ', (byte) -1 };
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        int[] intArray44 = new int[] { (-1), 100 };
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray38, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray46, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray30, (-1), (int) ' ', (int) (byte) 10, intArray46, false);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        int[] intArray64 = new int[] { (-1), 100 };
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray58, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray66, false);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray46, (int) 'a', 100, (int) (byte) 1, intArray66, false);
        int int74 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray66, (int) '4');
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) (byte) 10, (int) '#', 0, intArray66, false);
        int[] intArray80 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) (short) 1);
        int int84 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray80, (int) '4', 100, (-1));
        int int86 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray80, (int) (short) 0);
        int[] intArray88 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray80, (int) (byte) 0);
        java.lang.Class<?> wildcardClass89 = intArray88.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2 + "'", int74 == 2);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 2 + "'", int86 == 2);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test1562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1562");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) 'a', 100, (int) (byte) 1, intArray38, false);
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (short) 100);
        int int50 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray46, (-1), (int) 'a', (int) (byte) 0);
        java.lang.Class<?> wildcardClass51 = intArray46.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(wildcardClass51);
    }

    @Test
    public void test1563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1563");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) ' ');
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (short) 100);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, 100);
        int int12 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, 0);
        int[] intArray14 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) 'a');
        int int16 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray14, (int) (byte) 1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[1, 1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
    }

    @Test
    public void test1564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1564");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (-1));
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) '#');
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) 'a');
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) ' ');
        int[] intArray53 = new int[] { (short) 100, (short) 0, 100, (byte) -1, 10 };
        int int57 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray53, 1, (int) (byte) 100, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray44, 100, (int) '#', (int) (short) 10, intArray53, false);
        int int61 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray44, 0);
        int[] intArray63 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) (short) 1);
        int[] intArray69 = new int[] { (-1), 100 };
        int[] intArray71 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray69, (int) (byte) 1);
        int[] intArray77 = new int[] { (-1), 100 };
        int[] intArray79 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray77, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray71, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray79, false);
        int[] intArray86 = new int[] { '#' };
        int int88 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray86, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray71, (int) (short) -1, 1, 2, intArray86, true);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray44, (int) (short) 10, 2, (int) (byte) 1, intArray71, true);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray22, 100, (int) ' ', (-1), intArray71, true);
        int[] intArray96 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray71, (int) (short) 10);
        int[] intArray98 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray96, (int) (byte) 0);
        java.lang.Class<?> wildcardClass99 = intArray98.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[100, 0, 100, -1, 10]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2 + "'", int61 == 2);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[35]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray98);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray98), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test1565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1565");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { ' ', (byte) -1 };
        int[] intArray38 = new int[] { (-1), 100 };
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 1);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray40, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray48, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, (-1), (int) ' ', (int) (byte) 10, intArray48, false);
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, 100);
        int int56 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray32, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray24, 10, (int) 'a', (-1), intArray32, true);
        int int60 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) '#');
        int int62 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) ' ');
        int int64 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (byte) 0);
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, 2);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) (short) -1);
        int[] intArray73 = new int[] { 10 };
        int[] intArray75 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray73, (int) '4');
        int[] intArray80 = new int[] { '#' };
        int int82 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray80, (int) (short) 0);
        int int84 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray80, (int) (byte) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray75, 10, (int) (byte) 1, (int) (short) 0, intArray80, false);
        int[] intArray88 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray80, (int) (short) 0);
        int int90 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray88, 10);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray66, 1, 0, 10, intArray88, false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 5 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2 + "'", int60 == 2);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2 + "'", int62 == 2);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2 + "'", int64 == 2);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[10]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[35]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 2 + "'", int90 == 2);
    }

    @Test
    public void test1566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1566");
        int[] intArray0 = null;
        int[] intArray6 = new int[] { (-1), 100 };
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (int) (byte) 1);
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 0);
        int int14 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray8, 2, 0, (int) (byte) -1);
        int[] intArray20 = new int[] { (-1), 100 };
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 1);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray22, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray30, false);
        int[] intArray38 = new int[] { ' ', (byte) -1 };
        int[] intArray44 = new int[] { (-1), 100 };
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) (byte) 1);
        int[] intArray52 = new int[] { (-1), 100 };
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray46, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray54, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray38, (-1), (int) ' ', (int) (byte) 10, intArray54, false);
        int[] intArray64 = new int[] { (-1), 100 };
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) (byte) 1);
        int[] intArray72 = new int[] { (-1), 100 };
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray66, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray74, false);
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray74, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray54, (int) 'a', 100, (int) (byte) 1, intArray74, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray22, 10, (int) (short) 0, (int) (short) -1, intArray54, true);
        int int84 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray54, 0);
        int[] intArray86 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, 10);
        int[] intArray88 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray86, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray8, (int) (short) 1, 0, 0, intArray88, false);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray0, 0, (int) (byte) 0, 0, intArray8, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 2 + "'", int84 == 2);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1]");
    }

    @Test
    public void test1567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1567");
        int[] intArray1 = new int[] { 10 };
        int[] intArray3 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray1, (int) '4');
        int[] intArray8 = new int[] { '#' };
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) (short) 0);
        int int12 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) (byte) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray3, 10, (int) (byte) 1, (int) (short) 0, intArray8, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (short) 0);
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) '#');
        int[] intArray24 = new int[] { (-1), 100 };
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 1);
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray26, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray34, false);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) ' ');
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 0);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) '#');
        int int44 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, (int) ' ');
        int[] intArray50 = new int[] { (-1), 100 };
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) (byte) 1);
        int[] intArray58 = new int[] { (-1), 100 };
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray52, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray60, false);
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) ' ');
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) (byte) 0);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) (byte) 1);
        int int72 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray66, (int) ' ', 10, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray38, (int) (short) 100, (int) (short) 0, (int) (byte) 1, intArray66, false);
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, (int) '4', 2, (int) (byte) 1, intArray38, false);
        java.lang.Class<?> wildcardClass79 = intArray18.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[10]");
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[35]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[0, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2 + "'", int44 == 2);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test1568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1568");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { ' ', (byte) -1 };
        int[] intArray38 = new int[] { (-1), 100 };
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 1);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray40, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray48, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, (-1), (int) ' ', (int) (byte) 10, intArray48, false);
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, 100);
        int int56 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray32, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray24, 10, (int) 'a', (-1), intArray32, true);
        int int60 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) '#');
        int int62 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) ' ');
        int int64 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (byte) 0);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (short) 100);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '#');
        int int70 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (byte) 100);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2 + "'", int60 == 2);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2 + "'", int62 == 2);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2 + "'", int64 == 2);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2 + "'", int70 == 2);
    }

    @Test
    public void test1569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1569");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 100);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) 'a');
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, 1);
        int int34 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray30, (int) (byte) 0, 0, 0);
        int[] intArray39 = new int[] { 10 };
        int[] intArray41 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray39, (int) '4');
        int[] intArray46 = new int[] { '#' };
        int int48 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray46, (int) (short) 0);
        int int50 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray46, (int) (byte) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray41, 10, (int) (byte) 1, (int) (short) 0, intArray46, false);
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, 100, (int) (short) 100, 0, intArray46, true);
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, 4);
        // The following exception was thrown during execution in test generation
        try {
            int int62 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray58, 0, (int) (short) -1, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[35]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
    }

    @Test
    public void test1570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1570");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 10);
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (short) 100);
        int[] intArray28 = new int[] { ' ', (byte) -1 };
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray36, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray44, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray28, (-1), (int) ' ', (int) (byte) 10, intArray44, false);
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, 100);
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 100);
        int int56 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray52, (-1), 2, (int) (byte) -1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, 0, 2, 0, intArray52, false);
        int int62 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray52, (int) (byte) 0, (int) '4', (int) (short) 0);
        java.lang.Class<?> wildcardClass63 = intArray52.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(wildcardClass63);
    }

    @Test
    public void test1571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1571");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (-1));
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray36, false);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) ' ');
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) (byte) 0);
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) '#');
        int int46 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray40, (int) ' ');
        int[] intArray52 = new int[] { (-1), 100 };
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) (byte) 1);
        int[] intArray60 = new int[] { (-1), 100 };
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray54, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray62, false);
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, (int) ' ');
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) (byte) 0);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) (byte) 1);
        int int74 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray68, (int) ' ', 10, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray40, (int) (short) 100, (int) (short) 0, (int) (byte) 1, intArray68, false);
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, 10);
        int[] intArray80 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray16, 100, 1, 100, intArray80, false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1]");
    }

    @Test
    public void test1572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1572");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 1);
        int[] intArray30 = new int[] { ' ', (byte) -1 };
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        int[] intArray44 = new int[] { (-1), 100 };
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray38, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray46, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray30, (-1), (int) ' ', (int) (byte) 10, intArray46, false);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        int[] intArray64 = new int[] { (-1), 100 };
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray58, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray66, false);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray46, (int) 'a', 100, (int) (byte) 1, intArray66, false);
        int int74 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray66, (int) '4');
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) (byte) 10, (int) '#', 0, intArray66, false);
        int[] intArray80 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (-1));
        int int84 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray66, (int) (short) 100, (int) (short) 1, (int) (short) 1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2 + "'", int74 == 2);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 2 + "'", int84 == 2);
    }

    @Test
    public void test1573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1573");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { ' ', (byte) -1 };
        int[] intArray38 = new int[] { (-1), 100 };
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 1);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray40, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray48, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, (-1), (int) ' ', (int) (byte) 10, intArray48, false);
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, 100);
        int int56 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray32, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray24, 10, (int) 'a', (-1), intArray32, true);
        int int60 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) '#');
        int int62 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, 3);
        java.lang.Class<?> wildcardClass63 = intArray24.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2 + "'", int60 == 2);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2 + "'", int62 == 2);
        org.junit.Assert.assertNotNull(wildcardClass63);
    }

    @Test
    public void test1574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1574");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray27 = new int[] { (short) 100, (short) 0, 100, (byte) -1, 10 };
        int int31 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray27, 1, (int) (byte) 100, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, 100, (int) '#', (int) (short) 10, intArray27, false);
        int int35 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, 0);
        int[] intArray41 = new int[] { (-1), 100 };
        int[] intArray43 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray41, (int) (byte) 1);
        int[] intArray49 = new int[] { (-1), 100 };
        int[] intArray51 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray49, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray43, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray51, false);
        int[] intArray55 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray51, (int) ' ');
        int[] intArray57 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray55, (int) (byte) 0);
        int[] intArray59 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray57, (int) (byte) 1);
        int int63 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray57, (int) ' ', 10, 0);
        int[] intArray65 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray57, (int) (short) 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, 0, (int) (short) 100, (int) '#', intArray65, false);
        int[] intArray69 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) '4');
        // The following exception was thrown during execution in test generation
        try {
            int int73 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (int) '4', (int) (byte) 10, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[100, 0, 100, -1, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1]");
    }

    @Test
    public void test1575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1575");
        int[] intArray1 = new int[] { 10 };
        int[] intArray3 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray1, (int) '4');
        int[] intArray8 = new int[] { '#' };
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) (short) 0);
        int int12 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) (byte) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray3, 10, (int) (byte) 1, (int) (short) 0, intArray8, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, 1);
        int int20 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray8, (int) (byte) 10, (int) 'a', (int) '#');
        java.lang.Class<?> wildcardClass21 = intArray8.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[10]");
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[35]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test1576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1576");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray24 = new int[] { ' ', (byte) -1 };
        int[] intArray30 = new int[] { (-1), 100 };
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray30, (int) (byte) 1);
        int[] intArray38 = new int[] { (-1), 100 };
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray32, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray40, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray24, (-1), (int) ' ', (int) (byte) 10, intArray40, false);
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, 1);
        int int48 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray46, (int) (short) 1);
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) 'a');
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, 10);
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) '4');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray16, (int) 'a', (int) '#', (int) (short) 10, intArray52, false);
        int int58 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray52, (int) (byte) 1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2 + "'", int58 == 2);
    }

    @Test
    public void test1577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1577");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int int8 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, 0);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, 2);
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, 1);
        int[] intArray18 = new int[] { ' ', (byte) -1 };
        int[] intArray24 = new int[] { (-1), 100 };
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 1);
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray26, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray34, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (-1), (int) ' ', (int) (byte) 10, intArray34, false);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 100);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 100);
        int int44 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray42, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray12, (int) (short) 1, (int) 'a', 3, intArray42, true);
        int int48 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray12, (int) 'a');
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2 + "'", int44 == 2);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
    }

    @Test
    public void test1578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1578");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int int8 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, 0);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, (int) (short) -1);
        int[] intArray16 = new int[] { ' ', (byte) -1 };
        int[] intArray22 = new int[] { (-1), 100 };
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, (int) (byte) 1);
        int[] intArray30 = new int[] { (-1), 100 };
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray30, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray24, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray32, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray16, (-1), (int) ' ', (int) (byte) 10, intArray32, false);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, 100);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) '4');
        int[] intArray46 = new int[] { ' ', (byte) -1 };
        int[] intArray52 = new int[] { (-1), 100 };
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) (byte) 1);
        int[] intArray60 = new int[] { (-1), 100 };
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray54, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray62, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray46, (-1), (int) ' ', (int) (byte) 10, intArray62, false);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, 100);
        int int70 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray46, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray38, 10, (int) 'a', (-1), intArray46, true);
        int int74 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray46, (int) ' ');
        int int76 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray46, (int) '4');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray6, (int) (short) 0, (int) (short) 10, (int) (byte) 0, intArray46, false);
        int int82 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray46, (int) (short) 1, 4, (-1));
        int[] intArray84 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, 100);
        java.lang.Class<?> wildcardClass85 = intArray46.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2 + "'", int74 == 2);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2 + "'", int76 == 2);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test1579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1579");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 100);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray36, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray44, false);
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) ' ');
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 0);
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (int) (byte) 100, (int) '#', (int) (short) 0, intArray52, true);
        java.lang.Class<?> wildcardClass55 = intArray52.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test1580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1580");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 100);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) 'a');
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (short) 10);
        int int40 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, 0);
        int int42 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, (int) (short) -1);
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 0);
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, 0);
        int int48 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray46, 0);
        int[] intArray52 = null;
        int[] intArray58 = new int[] { (-1), 100 };
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) (byte) 1);
        int[] intArray66 = new int[] { (-1), 100 };
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray60, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray68, false);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) ' ');
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (int) (byte) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray52, 10, (int) (short) 1, (int) (short) 0, intArray74, false);
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray74, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray46, (int) 'a', (int) ' ', 1, intArray78, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (short) 1, (int) (short) 10, (-1), intArray46, false);
        java.lang.Class<?> wildcardClass83 = intArray28.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2 + "'", int40 == 2);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2 + "'", int42 == 2);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test1581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1581");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 1);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (short) 1);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) 'a');
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (-1));
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray30, 2);
        java.lang.Class<?> wildcardClass33 = intArray32.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test1582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1582");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { ' ', (byte) -1 };
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray36, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, (-1), (int) ' ', (int) (byte) 10, intArray36, false);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (int) 'a', 100, (int) (byte) 1, intArray56, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, 10, (int) (short) 0, (int) (short) -1, intArray36, true);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, 0);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, 1);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, 2);
        int int72 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, (-1));
        int int76 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray36, (int) (byte) 1, (int) '4', 10);
        java.lang.Class<?> wildcardClass77 = intArray36.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 2 + "'", int72 == 2);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test1583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1583");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 0);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (byte) 0);
        int int28 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, 0);
        int int32 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray24, 3, 100, (int) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            int int36 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray24, (int) (byte) -1, 3, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
    }

    @Test
    public void test1584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1584");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (byte) 0);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray4, 2, 0, (int) (byte) -1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        int[] intArray24 = new int[] { (-1), 100 };
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray26, false);
        int[] intArray34 = new int[] { ' ', (byte) -1 };
        int[] intArray40 = new int[] { (-1), 100 };
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) (byte) 1);
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray42, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray50, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray34, (-1), (int) ' ', (int) (byte) 10, intArray50, false);
        int[] intArray60 = new int[] { (-1), 100 };
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) (byte) 1);
        int[] intArray68 = new int[] { (-1), 100 };
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray62, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray70, false);
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray50, (int) 'a', 100, (int) (byte) 1, intArray70, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, 10, (int) (short) 0, (int) (short) -1, intArray50, true);
        int int80 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray50, 0);
        int[] intArray82 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, 10);
        int[] intArray84 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray82, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, (int) (short) 1, 0, 0, intArray84, false);
        int int90 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray84, 100, (int) (short) 100, 0);
        int[] intArray92 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray84, (-1));
        java.lang.Class<?> wildcardClass93 = intArray84.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2 + "'", int80 == 2);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[0, 1]");
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test1585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1585");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 10);
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (short) 100);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 0);
        int int28 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray24, (-1), 10, (-1));
        int[] intArray32 = null;
        int[] intArray38 = new int[] { (-1), 100 };
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 1);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray40, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray48, false);
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) 'a');
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) ' ');
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 10);
        int int60 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray56, (int) (byte) 100, 100, 10);
        int int62 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray56, (int) (short) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray32, (int) (short) 1, (int) ' ', 2, intArray56, true);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray24, (int) (short) 10, (int) (byte) 10, (int) (byte) 100, intArray32, false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2 + "'", int62 == 2);
    }

    @Test
    public void test1586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1586");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 100);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 1);
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) '4');
        int int34 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray2, 0, 100, 1);
        // The following exception was thrown during execution in test generation
        try {
            int int38 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray2, 3, 10, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
    }

    @Test
    public void test1587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1587");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) '4');
        int int22 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray12, (int) (byte) 100, (int) '4', (int) (byte) 10);
        int[] intArray28 = new int[] { ' ', (byte) -1 };
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray36, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray44, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray28, (-1), (int) ' ', (int) (byte) 10, intArray44, false);
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, 100);
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 100);
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, 1);
        int int56 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray28, 0);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray12, (int) '4', 3, 3, intArray28, true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
    }

    @Test
    public void test1588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1588");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 0);
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 1);
        int int24 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (int) ' ', 10, 0);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 2);
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        int[] intArray40 = new int[] { (-1), 100 };
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray34, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray42, false);
        int[] intArray50 = new int[] { (-1), 100 };
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) (byte) 1);
        int[] intArray58 = new int[] { (-1), 100 };
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray52, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray60, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray34, (int) (byte) 10, (int) '4', 10, intArray60, true);
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, 2);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, (int) (short) 100, (int) 'a', (int) (byte) 0, intArray34, false);
        java.lang.Class<?> wildcardClass69 = intArray34.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test1589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1589");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { ' ', (byte) -1 };
        int[] intArray38 = new int[] { (-1), 100 };
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 1);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray40, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray48, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, (-1), (int) ' ', (int) (byte) 10, intArray48, false);
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, 100);
        int int56 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray32, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray24, 10, (int) 'a', (-1), intArray32, true);
        int int60 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) '#');
        int int62 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) ' ');
        int int64 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (byte) 0);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (short) 100);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '#');
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) (short) 1);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) ' ');
        java.lang.Class<?> wildcardClass73 = intArray68.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2 + "'", int60 == 2);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2 + "'", int62 == 2);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2 + "'", int64 == 2);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test1590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1590");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray19 = new int[] { '#' };
        int int21 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (short) -1, 1, 2, intArray19, true);
        int[] intArray25 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 10);
        int[] intArray27 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 0);
        int[] intArray33 = new int[] { ' ', (byte) -1 };
        int[] intArray39 = new int[] { (-1), 100 };
        int[] intArray41 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray39, (int) (byte) 1);
        int[] intArray47 = new int[] { (-1), 100 };
        int[] intArray49 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray47, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray41, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray49, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray33, (-1), (int) ' ', (int) (byte) 10, intArray49, false);
        int[] intArray59 = new int[] { (-1), 100 };
        int[] intArray61 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray59, (int) (byte) 1);
        int[] intArray67 = new int[] { (-1), 100 };
        int[] intArray69 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray67, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray61, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray69, false);
        int[] intArray73 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray69, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray49, (int) 'a', 100, (int) (byte) 1, intArray69, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray27, (int) (short) 0, (int) (byte) 1, (int) (short) 1, intArray49, true);
        int int79 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray27, (int) (byte) -1);
        int int81 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray27, (int) (byte) -1);
        int[] intArray83 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray27, 1);
        int[] intArray85 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray27, (int) ' ');
        java.lang.Class<?> wildcardClass86 = intArray85.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 2 + "'", int79 == 2);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 2 + "'", int81 == 2);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test1591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1591");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 10);
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) ' ');
        int[] intArray28 = new int[] { ' ', (byte) -1 };
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray36, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray44, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray28, (-1), (int) ' ', (int) (byte) 10, intArray44, false);
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray22, 100, (int) (short) 100, (-1), intArray50, true);
        int[] intArray58 = new int[] { (-1), 100 };
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) (byte) 1);
        int[] intArray66 = new int[] { (-1), 100 };
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray60, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray68, false);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) 'a');
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (int) ' ');
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray74, (int) (byte) 10);
        int int78 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray74, (int) (short) -1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray22, (int) (byte) 1, (-1), (int) (short) 1, intArray74, true);
        int int82 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray22, (int) (short) 0);
        int int84 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray22, (int) (byte) 100);
        java.lang.Class<?> wildcardClass85 = intArray22.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 2 + "'", int78 == 2);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 2 + "'", int82 == 2);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 2 + "'", int84 == 2);
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test1592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1592");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 10);
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) ' ');
        int[] intArray28 = new int[] { ' ', (byte) -1 };
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray36, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray44, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray28, (-1), (int) ' ', (int) (byte) 10, intArray44, false);
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray22, 100, (int) (short) 100, (-1), intArray50, true);
        int[] intArray58 = new int[] { (-1), 100 };
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) (byte) 1);
        int[] intArray66 = new int[] { (-1), 100 };
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray60, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray68, false);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) 'a');
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (int) ' ');
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray74, (int) (byte) 10);
        int int78 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray74, (int) (short) -1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray22, (int) (byte) 1, (-1), (int) (short) 1, intArray74, true);
        int int82 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray22, (int) (short) 0);
        int[] intArray84 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, (int) (short) 0);
        java.lang.Class<?> wildcardClass85 = intArray84.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 2 + "'", int78 == 2);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 2 + "'", int82 == 2);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test1593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1593");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int int8 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, 0);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, (int) (short) -1);
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (int) (byte) 0);
        int[] intArray18 = new int[] { ' ', (byte) -1 };
        int[] intArray24 = new int[] { (-1), 100 };
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 1);
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray26, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray34, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (-1), (int) ' ', (int) (byte) 10, intArray34, false);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, 1);
        int int42 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray40, (int) (short) 1);
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) 'a');
        int int46 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray40, 10);
        int int48 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray40, (int) (short) 100);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray12, (int) (short) 10, 1, (int) (short) -1, intArray40, true);
        int[] intArray54 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray40, (int) 'a', (int) (short) 0, (int) (byte) 0, intArray54, true);
        // The following exception was thrown during execution in test generation
        try {
            int int60 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray54, (int) (short) 10, 0, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2 + "'", int42 == 2);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
    }

    @Test
    public void test1594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1594");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 10);
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 1);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) 'a');
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) ' ');
        int[] intArray53 = new int[] { (short) 100, (short) 0, 100, (byte) -1, 10 };
        int int57 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray53, 1, (int) (byte) 100, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray44, 100, (int) '#', (int) (short) 10, intArray53, false);
        int int61 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray53, 10);
        int[] intArray63 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray53, (int) (byte) 1);
        int[] intArray69 = new int[] { (-1), 100 };
        int[] intArray71 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray69, (int) (byte) 1);
        int[] intArray73 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray71, (int) (short) 10);
        int int75 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray71, 2);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray53, (int) '4', (int) (byte) 1, 0, intArray71, false);
        int int81 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray53, 2, 1, 0);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray22, (int) ' ', (int) (short) 1, (int) (byte) 100, intArray53, false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[100, 0, 100, -1, 10]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 2 + "'", int75 == 2);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
    }

    @Test
    public void test1595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1595");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 100);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 1);
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 0);
        int int34 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray30, 2, 4, 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
    }

    @Test
    public void test1596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1596");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) '4');
        int int20 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) (byte) -1);
        int int22 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (-1));
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (-1), (int) '#', 4);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) -1);
        java.lang.Class<?> wildcardClass29 = intArray28.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[0, 1]");
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test1597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1597");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, 10);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) 'a');
        int int12 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, 0);
        int int14 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) (byte) 100);
        int int16 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, 4);
        int int18 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) (short) -1);
        java.lang.Class<?> wildcardClass19 = intArray8.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test1598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1598");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) 'a', 100, (int) (byte) 1, intArray38, false);
        int int46 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, (int) '4');
        int int50 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray38, (int) ' ', (int) (byte) 1, 0);
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, 100);
        int int54 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray52, 2);
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, 100);
        int int58 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray52, (int) (short) 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2 + "'", int54 == 2);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2 + "'", int58 == 2);
    }

    @Test
    public void test1599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1599");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) ' ');
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray6, (int) (short) 1, (-1), (int) (byte) 0);
        int[] intArray14 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray6, 2, (int) '4', (int) (short) 0, intArray14, true);
        int int20 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray6, (int) (short) -1, (int) ' ', (int) (byte) 1);
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray6, 0, (int) 'a', 2, intArray26, false);
        int int32 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, (int) (byte) 1);
        int int36 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray6, (int) (short) -1, (int) (byte) 10, 1);
        int[] intArray41 = new int[] { 10 };
        int[] intArray43 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray41, (int) '4');
        int[] intArray48 = new int[] { '#' };
        int int50 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray48, (int) (short) 0);
        int int52 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray48, (int) (byte) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray43, 10, (int) (byte) 1, (int) (short) 0, intArray48, false);
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (short) 0);
        int int58 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray56, (int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray6, 0, (int) (short) -1, (int) (byte) -1, intArray56, false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index -1 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[10]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[35]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2 + "'", int58 == 2);
    }

    @Test
    public void test1600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1600");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (int) (byte) -1);
        int int12 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray8, (-1), 2, (int) (short) -1);
        int[] intArray18 = new int[] { (-1), 100 };
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 1);
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) ' ');
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray22, (int) (short) 1, (-1), (int) (byte) 0);
        int[] intArray30 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray22, 2, (int) '4', (int) (short) 0, intArray30, true);
        int int36 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray22, (int) (short) -1, (int) ' ', (int) (byte) 1);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, (int) '#');
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 100);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray8, (int) (short) -1, 100, (int) ' ', intArray40, true);
        int int44 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) (short) 1);
        java.lang.Class<?> wildcardClass45 = intArray8.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2 + "'", int44 == 2);
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test1601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1601");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (int) (byte) -1);
        int[] intArray14 = new int[] { ' ', (byte) -1 };
        int[] intArray20 = new int[] { (-1), 100 };
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 1);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray22, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray30, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray14, (-1), (int) ' ', (int) (byte) 10, intArray30, false);
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray14, 100);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) '4');
        int[] intArray44 = new int[] { (-1), 100 };
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray38, 1, (int) (byte) 1, (int) (short) -1, intArray44, false);
        int int52 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray44, 10, 100, (int) '#');
        int int54 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray44, (int) (byte) 0);
        int[] intArray60 = new int[] { (-1), 100 };
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) (byte) 1);
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) ' ');
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) (short) 100);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray44, 1, 10, (int) (byte) 0, intArray66, true);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray8, 10, 4, 2, intArray44, false);
        // The following exception was thrown during execution in test generation
        try {
            int int74 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray44, (int) (byte) 1, (int) (byte) -1, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[1, 1]");
    }

    @Test
    public void test1602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1602");
        int[] intArray0 = null;
        int[] intArray6 = new int[] { ' ', (byte) -1 };
        int[] intArray12 = new int[] { (-1), 100 };
        int[] intArray14 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) (byte) 1);
        int[] intArray20 = new int[] { (-1), 100 };
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray14, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray22, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray6, (-1), (int) ' ', (int) (byte) 10, intArray22, false);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, 100);
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (int) (byte) 100);
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, 1);
        int[] intArray38 = new int[] { (-1), 100 };
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 1);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray40, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray48, false);
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) ' ');
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) (byte) 0);
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray6, (int) (byte) 100, (int) '#', (int) (short) 0, intArray56, true);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray0, 0, 100, (int) (byte) -1, intArray56, false);
        java.lang.Class<?> wildcardClass61 = intArray56.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass61);
    }

    @Test
    public void test1603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1603");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (-1));
        int int24 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray16, (int) (short) 0, (int) (byte) 0, 1);
        java.lang.Class<?> wildcardClass25 = intArray16.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test1604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1604");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) 'a', 100, (int) (byte) 1, intArray38, false);
        int int46 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, (int) '4');
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) 'a');
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, 1);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) (short) 10);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, 10);
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) (short) 1);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray64, 10);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) (short) 100);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray50, (int) (byte) 10, (int) (short) 10, (-1), intArray68, true);
        java.lang.Class<?> wildcardClass71 = intArray50.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test1605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1605");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 0);
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) '#');
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray36, false);
        int[] intArray43 = new int[] { '#' };
        int int45 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray43, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (short) -1, 1, 2, intArray43, true);
        int[] intArray49 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray43, 10);
        int[] intArray51 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray43, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray16, (int) (byte) 0, (int) (short) 10, (int) (byte) 1, intArray51, false);
        // The following exception was thrown during execution in test generation
        try {
            int int57 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray51, (int) (byte) 1, (int) ' ', (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[35]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, -1]");
    }

    @Test
    public void test1606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1606");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 100);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 1);
        int int32 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray2, (int) (byte) 1, 0, (int) (byte) 0);
        int[] intArray38 = new int[] { (-1), 100 };
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 1);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) ' ');
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray50, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray58, false);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) ' ');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray38, (int) (short) 0, (int) ' ', 0, intArray62, true);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray2, (int) (byte) 10, (int) (byte) 1, (int) (short) 1, intArray62, true);
        int int70 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray2, (int) '4', (int) '4', (-1));
        int int72 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray2, 100);
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 0);
        java.lang.Class<?> wildcardClass75 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 2 + "'", int72 == 2);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test1607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1607");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int int22 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (int) (byte) -1, 0, (int) (short) 0);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (-1));
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) (short) 1);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) '#');
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) '#');
        java.lang.Class<?> wildcardClass31 = intArray18.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test1608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1608");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 10);
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (short) 100);
        int[] intArray28 = new int[] { ' ', (byte) -1 };
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray36, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray44, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray28, (-1), (int) ' ', (int) (byte) 10, intArray44, false);
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, 100);
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) '4');
        int[] intArray58 = new int[] { (-1), 100 };
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray52, 1, (int) (byte) 1, (int) (short) -1, intArray58, false);
        int[] intArray68 = new int[] { (-1), 100 };
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) (byte) 1);
        int[] intArray76 = new int[] { (-1), 100 };
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray76, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray70, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray78, false);
        int[] intArray85 = new int[] { '#' };
        int int87 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray85, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray70, (int) (short) -1, 1, 2, intArray85, true);
        int[] intArray91 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray85, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray58, (int) (short) 100, 0, 1, intArray91, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray22, 0, (int) (short) 100, (int) ' ', intArray91, true);
        int int97 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray91, (int) (byte) 100);
        int[] intArray99 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray91, (int) 'a');
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[35]");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 1]");
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 2 + "'", int97 == 2);
        org.junit.Assert.assertNotNull(intArray99);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray99), "[-1, -1]");
    }

    @Test
    public void test1609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1609");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 10);
        int[] intArray24 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) (byte) 0, (int) (short) 100, (int) (byte) -1, intArray24, false);
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (short) 10);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, 10);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (short) 1);
        int int42 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray40, 10);
        int[] intArray48 = new int[] { ' ', (byte) -1 };
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        int[] intArray62 = new int[] { (-1), 100 };
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray56, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray64, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray48, (-1), (int) ' ', (int) (byte) 10, intArray64, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray40, 0, (int) 'a', 4, intArray64, false);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, 2);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) (byte) 0, (int) '4', (int) (byte) 1, intArray64, true);
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2 + "'", int42 == 2);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
    }

    @Test
    public void test1610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1610");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) '4');
        int int20 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) (byte) -1);
        int int24 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (int) '#', (-1), (int) (byte) 0);
        int[] intArray30 = new int[] { (-1), 100 };
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray30, (int) (byte) 1);
        int[] intArray38 = new int[] { (-1), 100 };
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray32, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray40, false);
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) 'a');
        int[] intArray50 = new int[] { ' ', (byte) -1 };
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        int[] intArray64 = new int[] { (-1), 100 };
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray58, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray66, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray50, (-1), (int) ' ', (int) (byte) 10, intArray66, false);
        int[] intArray76 = new int[] { (-1), 100 };
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray76, (int) (byte) 1);
        int[] intArray84 = new int[] { (-1), 100 };
        int[] intArray86 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray84, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray78, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray86, false);
        int[] intArray90 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray86, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray66, (int) 'a', 100, (int) (byte) 1, intArray86, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray40, (int) (short) 100, (int) 'a', (int) (short) 0, intArray66, true);
        int int96 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray40, (int) '4');
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, 100, 3, (int) (short) 100, intArray40, true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 2 + "'", int96 == 2);
    }

    @Test
    public void test1611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1611");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray19 = new int[] { '#' };
        int int21 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (short) -1, 1, 2, intArray19, true);
        int[] intArray29 = new int[] { (-1), 100 };
        int[] intArray31 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray29, (int) (byte) 1);
        int[] intArray37 = new int[] { (-1), 100 };
        int[] intArray39 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray37, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray31, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray39, false);
        int[] intArray43 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray39, (int) 'a');
        int int47 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray43, 0, (-1), 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray19, (int) (short) 100, (int) (short) 0, (int) (short) 0, intArray43, true);
        int int51 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray43, 2);
        int int53 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray43, (int) (byte) 1);
        int[] intArray55 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray43, (int) (short) 10);
        java.lang.Class<?> wildcardClass56 = intArray55.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2 + "'", int51 == 2);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2 + "'", int53 == 2);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass56);
    }

    @Test
    public void test1612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1612");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, 10);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) 'a');
        int int12 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, 0);
        int[] intArray14 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (short) 10);
        int int18 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray8, (int) (byte) 10, (int) (short) 0, (int) (byte) 0);
        int[] intArray24 = new int[] { (-1), 100 };
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 1);
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray26, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray34, false);
        int[] intArray41 = new int[] { '#' };
        int int43 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray41, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray26, (int) (short) -1, 1, 2, intArray41, true);
        int[] intArray47 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) '#');
        int[] intArray53 = new int[] { (-1), 100 };
        int[] intArray55 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray53, (int) (byte) 1);
        int[] intArray61 = new int[] { (-1), 100 };
        int[] intArray63 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray61, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray55, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray63, false);
        int[] intArray67 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray63, (int) ' ');
        int[] intArray69 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray67, (int) (byte) 0);
        int[] intArray71 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray69, (int) (byte) 1);
        int int75 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray69, (int) ' ', 10, 0);
        int[] intArray77 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray69, (int) (short) 10);
        int[] intArray79 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray77, (int) '4');
        int int81 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray79, (int) (short) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 0, (int) 'a', (int) (byte) 1, intArray79, true);
        int[] intArray85 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray8, (int) (short) 0, (int) (byte) 1, (int) (byte) 0, intArray85, true);
        java.lang.Class<?> wildcardClass88 = intArray85.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[35]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 2 + "'", int81 == 2);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test1613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1613");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, 10);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) 'a');
        int int12 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, 0);
        int[] intArray14 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (short) 10);
        int int18 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray8, (int) (byte) 10, (int) (short) 0, (int) (byte) 0);
        int[] intArray24 = new int[] { (-1), 100 };
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 1);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (short) 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray8, (-1), 0, 1, intArray28, true);
        int int34 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray8, (int) 'a', 0, 1);
        java.lang.Class<?> wildcardClass35 = intArray8.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[0, -1]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test1614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1614");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { (-1), 100 };
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 1);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray22, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray30, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) 10, (int) '4', 10, intArray30, true);
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, 2);
        int int40 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray4, (int) (short) 1, (int) (short) 100, (int) (byte) -1);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, 4);
        java.lang.Class<?> wildcardClass43 = intArray42.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test1615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1615");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 0);
        int[] intArray24 = new int[] { (-1), 100 };
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 1);
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray26, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray34, false);
        int[] intArray41 = new int[] { '#' };
        int int43 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray41, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray26, (int) (short) -1, 1, 2, intArray41, true);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) (short) -1, 0, (int) (short) 0, intArray41, true);
        int[] intArray51 = null;
        int[] intArray57 = new int[] { (-1), 100 };
        int[] intArray59 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray57, (int) (byte) 1);
        int[] intArray65 = new int[] { (-1), 100 };
        int[] intArray67 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray65, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray59, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray67, false);
        int[] intArray71 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray67, (int) ' ');
        int[] intArray73 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray71, (int) (byte) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray51, 10, (int) (short) 1, (int) (short) 0, intArray73, false);
        int int79 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray73, 0, (int) '4', (int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray41, (int) (byte) 10, 4, 4, intArray73, false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 4 out of bounds for length 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[0]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
    }

    @Test
    public void test1616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1616");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { (-1), 100 };
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 1);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray22, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray30, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) 10, (int) '4', 10, intArray30, true);
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, 2);
        int int40 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray4, (int) (short) 1, (int) (short) 100, (int) (byte) -1);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, 100);
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (-1));
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) ' ');
        java.lang.Class<?> wildcardClass47 = intArray46.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass47);
    }

    @Test
    public void test1617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1617");
        int[] intArray2 = new int[] { 1, 'a' };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) ' ');
        int int16 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray12, (int) (short) 1, (-1), (int) (byte) 0);
        int[] intArray20 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray12, 2, (int) '4', (int) (short) 0, intArray20, true);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray12, (int) (short) -1, (int) ' ', (int) (byte) 1);
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray12, 0, (int) 'a', 2, intArray32, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray2, (int) '4', 10, 1, intArray32, true);
        int[] intArray44 = new int[] { (-1), 100 };
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) (byte) 1);
        int[] intArray52 = new int[] { (-1), 100 };
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray46, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray54, false);
        int int60 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray46, (int) ' ', (int) (short) -1, (int) (short) 1);
        int int62 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray46, (int) '#');
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray46, (int) (short) -1, 100, 10);
        int int70 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray46, 4, (int) ' ', (int) (byte) 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, (int) (short) 100, (int) (byte) 10, (int) (byte) -1, intArray46, true);
        int int74 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray46, (-1));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[1, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2 + "'", int60 == 2);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2 + "'", int62 == 2);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2 + "'", int74 == 2);
    }

    @Test
    public void test1618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1618");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, 10);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) 'a');
        int int12 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, 0);
        int[] intArray14 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (short) 10);
        java.lang.Class<?> wildcardClass15 = intArray8.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test1619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1619");
        int[] intArray1 = new int[] { 10 };
        int[] intArray3 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray1, (int) '4');
        int[] intArray9 = new int[] { (-1), 100 };
        int[] intArray11 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray9, (int) (byte) 1);
        int[] intArray17 = new int[] { (-1), 100 };
        int[] intArray19 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray17, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray11, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray19, false);
        int[] intArray23 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, (int) 'a');
        int[] intArray29 = new int[] { ' ', (byte) -1 };
        int[] intArray35 = new int[] { (-1), 100 };
        int[] intArray37 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray35, (int) (byte) 1);
        int[] intArray43 = new int[] { (-1), 100 };
        int[] intArray45 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray43, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray37, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray45, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray29, (-1), (int) ' ', (int) (byte) 10, intArray45, false);
        int[] intArray55 = new int[] { (-1), 100 };
        int[] intArray57 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray55, (int) (byte) 1);
        int[] intArray63 = new int[] { (-1), 100 };
        int[] intArray65 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray63, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray57, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray65, false);
        int[] intArray69 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray65, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray45, (int) 'a', 100, (int) (byte) 1, intArray65, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray19, (int) (short) 100, (int) 'a', (int) (short) 0, intArray45, true);
        int[] intArray75 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, (-1));
        int[] intArray77 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, (int) (short) 100);
        int int81 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray19, (int) (short) 100, (int) 'a', (int) (short) -1);
        int int85 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray19, (int) (short) -1, (int) ' ', (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray3, (int) (short) -1, (int) (byte) 100, (-1), intArray19, true);
        java.lang.Class<?> wildcardClass88 = intArray19.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[10]");
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test1620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1620");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { ' ', (byte) -1 };
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray36, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, (-1), (int) ' ', (int) (byte) 10, intArray36, false);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (int) 'a', 100, (int) (byte) 1, intArray56, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, 10, (int) (short) 0, (int) (short) -1, intArray36, true);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, 0);
        int[] intArray72 = new int[] { (-1), 100 };
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (int) (byte) 1);
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray74, (int) (short) 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, 2, 10, (int) (short) 1, intArray74, false);
        int int80 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, (int) (short) 0);
        int int84 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray36, (-1), (int) (short) 10, (int) (byte) -1);
        int[] intArray86 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) -1);
        int int88 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, 100);
        // The following exception was thrown during execution in test generation
        try {
            int int92 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray36, 0, (int) (byte) -1, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2 + "'", int80 == 2);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 2 + "'", int88 == 2);
    }

    @Test
    public void test1621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1621");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 1, (int) (byte) 1, (int) (short) -1, intArray32, false);
        int int40 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray32, 0, (int) (short) 100, (int) '4');
        int int42 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray32, 10);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
    }

    @Test
    public void test1622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1622");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray19 = new int[] { '#' };
        int int21 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (short) -1, 1, 2, intArray19, true);
        int[] intArray25 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 10);
        int[] intArray27 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 0);
        int[] intArray33 = new int[] { ' ', (byte) -1 };
        int[] intArray39 = new int[] { (-1), 100 };
        int[] intArray41 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray39, (int) (byte) 1);
        int[] intArray47 = new int[] { (-1), 100 };
        int[] intArray49 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray47, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray41, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray49, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray33, (-1), (int) ' ', (int) (byte) 10, intArray49, false);
        int[] intArray59 = new int[] { (-1), 100 };
        int[] intArray61 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray59, (int) (byte) 1);
        int[] intArray67 = new int[] { (-1), 100 };
        int[] intArray69 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray67, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray61, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray69, false);
        int[] intArray73 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray69, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray49, (int) 'a', 100, (int) (byte) 1, intArray69, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray27, (int) (short) 0, (int) (byte) 1, (int) (short) 1, intArray49, true);
        int int79 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray27, (int) (byte) -1);
        int int81 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray27, (int) (byte) -1);
        int[] intArray83 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray27, 1);
        int[] intArray85 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray83, 0);
        int int89 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray83, (-1), (int) (short) -1, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            int int93 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray83, (int) (short) 100, 0, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 2 + "'", int79 == 2);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 2 + "'", int81 == 2);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 2 + "'", int89 == 2);
    }

    @Test
    public void test1623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1623");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 0);
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) '#');
        int int22 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray16, (int) ' ');
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) ' ');
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 0);
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) (byte) 1);
        int int50 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray44, (int) ' ', 10, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray16, (int) (short) 100, (int) (short) 0, (int) (byte) 1, intArray44, false);
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, 2);
        int int56 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray16, (int) (short) 1);
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (short) 100);
        int[] intArray64 = new int[] { (-1), 100 };
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) (byte) 1);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) (short) 10);
        int int70 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray68, 0);
        int int72 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray68, (int) (short) -1);
        int int74 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray68, (int) '#');
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray16, (int) (byte) 0, 2, (int) ' ', intArray68, false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2 + "'", int56 == 2);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2 + "'", int70 == 2);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 2 + "'", int72 == 2);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2 + "'", int74 == 2);
    }

    @Test
    public void test1624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1624");
        int[] intArray0 = null;
        int[] intArray4 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray0, (int) (short) 0, 1, (int) (short) 100, intArray4, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1625");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (byte) 0);
        int int8 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray4, 0);
        int[] intArray14 = new int[] { (-1), 100 };
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray14, (int) (byte) 1);
        int[] intArray22 = new int[] { (-1), 100 };
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray16, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray24, false);
        int[] intArray31 = new int[] { '#' };
        int int33 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray31, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray16, (int) (short) -1, 1, 2, intArray31, true);
        int[] intArray41 = new int[] { (-1), 100 };
        int[] intArray43 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray41, (int) (byte) 1);
        int[] intArray49 = new int[] { (-1), 100 };
        int[] intArray51 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray49, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray43, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray51, false);
        int[] intArray55 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray51, (int) 'a');
        int int59 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray55, 0, (-1), 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray31, (int) (short) 100, (int) (short) 0, (int) (short) 0, intArray55, true);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) 'a', (int) ' ', 0, intArray31, true);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[35]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
    }

    @Test
    public void test1626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1626");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray19 = new int[] { '#' };
        int int21 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (short) -1, 1, 2, intArray19, true);
        int[] intArray25 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 10);
        int[] intArray27 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 0);
        int[] intArray33 = new int[] { ' ', (byte) -1 };
        int[] intArray39 = new int[] { (-1), 100 };
        int[] intArray41 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray39, (int) (byte) 1);
        int[] intArray47 = new int[] { (-1), 100 };
        int[] intArray49 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray47, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray41, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray49, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray33, (-1), (int) ' ', (int) (byte) 10, intArray49, false);
        int[] intArray59 = new int[] { (-1), 100 };
        int[] intArray61 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray59, (int) (byte) 1);
        int[] intArray67 = new int[] { (-1), 100 };
        int[] intArray69 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray67, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray61, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray69, false);
        int[] intArray73 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray69, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray49, (int) 'a', 100, (int) (byte) 1, intArray69, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray27, (int) (short) 0, (int) (byte) 1, (int) (short) 1, intArray49, true);
        int int79 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray27, (int) (byte) -1);
        int[] intArray81 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray27, 1);
        int[] intArray83 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray81, (int) (short) -1);
        int[] intArray85 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray81, (int) (short) 100);
        int[] intArray87 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray85, (int) '4');
        int[] intArray89 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray87, 4);
        java.lang.Class<?> wildcardClass90 = intArray89.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 2 + "'", int79 == 2);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test1627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1627");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 1, (int) (byte) 1, (int) (short) -1, intArray32, false);
        int int40 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray32, 10, 100, (int) '#');
        int int42 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray32, (int) (byte) 0);
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) (short) 10);
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray32, (int) ' ', (int) (short) -1, (int) (byte) 1, intArray52, false);
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 0);
        int[] intArray64 = new int[] { (-1), 100 };
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) (byte) 1);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) ' ');
        int[] intArray73 = new int[] { 10 };
        int[] intArray75 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray73, (int) '4');
        int[] intArray80 = new int[] { '#' };
        int int82 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray80, (int) (short) 0);
        int int84 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray80, (int) (byte) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray75, 10, (int) (byte) 1, (int) (short) 0, intArray80, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray68, (int) (byte) 1, 0, (-1), intArray75, true);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray32, 0, (int) (byte) 10, (int) ' ', intArray68, false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[10]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[35]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
    }

    @Test
    public void test1628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1628");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) 'a', 100, (int) (byte) 1, intArray38, false);
        int int46 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, (int) '4');
        int int48 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, 0);
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, 0);
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) '4');
        java.lang.Class<?> wildcardClass53 = intArray52.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test1629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1629");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 10);
        int int24 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray20, (int) (byte) 100, 100, 10);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray20, (int) (short) 100);
        java.lang.Class<?> wildcardClass27 = intArray20.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test1630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1630");
        int[] intArray0 = null;
        int[] intArray6 = new int[] { ' ', (byte) -1 };
        int[] intArray12 = new int[] { (-1), 100 };
        int[] intArray14 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) (byte) 1);
        int[] intArray20 = new int[] { (-1), 100 };
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray14, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray22, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray6, (-1), (int) ' ', (int) (byte) 10, intArray22, false);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, 1);
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray28, (int) (short) 1);
        int int32 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray28, (int) 'a');
        int int34 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray28, 0);
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) ' ');
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (short) 1);
        int int40 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, (int) '4');
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray0, (int) (byte) 1, (int) (byte) 1, (int) '4', intArray38, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2 + "'", int40 == 2);
    }

    @Test
    public void test1631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1631");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) ' ');
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (short) 100);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray2, 1);
        int int14 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray2, (-1), 1, 2);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 0);
        java.lang.Class<?> wildcardClass17 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[1, 1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test1632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1632");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray22 = new int[] { (-1), 100 };
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, (int) (byte) 1);
        int[] intArray30 = new int[] { (-1), 100 };
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray30, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray24, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray32, false);
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) 'a');
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) ' ');
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray16, (int) (byte) 1, (int) 'a', 0, intArray38, true);
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (short) 1);
        int int46 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, (int) (byte) 0);
        java.lang.Class<?> wildcardClass47 = intArray38.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertNotNull(wildcardClass47);
    }

    @Test
    public void test1633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1633");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 1, (int) (byte) 1, (int) (short) -1, intArray32, false);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 10);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) 'a');
        int[] intArray46 = new int[] { ' ', (byte) -1 };
        int[] intArray52 = new int[] { (-1), 100 };
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) (byte) 1);
        int[] intArray60 = new int[] { (-1), 100 };
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray54, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray62, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray46, (-1), (int) ' ', (int) (byte) 10, intArray62, false);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, 1);
        int int70 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray68, (int) (short) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray40, 0, (int) ' ', (int) (short) -1, intArray68, false);
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, 2);
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray74, 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2 + "'", int70 == 2);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
    }

    @Test
    public void test1634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1634");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 0);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 10);
        int int28 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray26, 0);
        int[] intArray32 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 10, (int) ' ', (int) (byte) 0, intArray32, true);
        int[] intArray38 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, (int) (short) 1, (int) (short) 10, 100, intArray38, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot load from int array because \"nums\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
    }

    @Test
    public void test1635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1635");
        int[] intArray0 = null;
        int[] intArray4 = null;
        int[] intArray8 = null;
        int[] intArray14 = new int[] { ' ', (byte) -1 };
        int[] intArray20 = new int[] { (-1), 100 };
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 1);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray22, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray30, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray14, (-1), (int) ' ', (int) (byte) 10, intArray30, false);
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray14, 100);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) '4');
        int[] intArray44 = new int[] { ' ', (byte) -1 };
        int[] intArray50 = new int[] { (-1), 100 };
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) (byte) 1);
        int[] intArray58 = new int[] { (-1), 100 };
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray52, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray60, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray44, (-1), (int) ' ', (int) (byte) 10, intArray60, false);
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, 100);
        int int68 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray44, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, 10, (int) 'a', (-1), intArray44, true);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray8, (int) ' ', (int) (byte) 1, (int) (short) -1, intArray44, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, (int) (short) 0, (int) (short) 1, (int) (short) -1, intArray44, true);
        int int78 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray44, 10, (int) (short) 100, 1);
        int[] intArray80 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) (byte) 10);
        int[] intArray82 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray80, (int) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray0, (int) '4', (int) (byte) -1, 1, intArray82, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot load from int array because \"nums\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[0, 1]");
    }

    @Test
    public void test1636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1636");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { ' ', (byte) -1 };
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray36, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, (-1), (int) ' ', (int) (byte) 10, intArray36, false);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (int) 'a', 100, (int) (byte) 1, intArray56, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, 10, (int) (short) 0, (int) (short) -1, intArray36, true);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, 0);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, 10);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 100);
        int int72 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray70, (int) (byte) 0);
        int int74 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray70, 0);
        int int76 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray70, (int) ' ');
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, 100);
        // The following exception was thrown during execution in test generation
        try {
            int int82 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray70, (-1), (int) (byte) 1, 2);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 2 + "'", int72 == 2);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2 + "'", int74 == 2);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2 + "'", int76 == 2);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1]");
    }

    @Test
    public void test1637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1637");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, 10);
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (int) (short) 1);
        int int12 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray10, 10);
        int[] intArray14 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (short) 100);
        int int18 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray14, 0, (int) 'a', 4);
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray14, (int) (byte) -1);
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray14, (int) 'a');
        int[] intArray28 = new int[] { ' ', (byte) -1 };
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray36, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray44, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray28, (-1), (int) ' ', (int) (byte) 10, intArray44, false);
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, 1);
        int int52 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray50, (int) (short) 1);
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) 'a');
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (-1));
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (short) 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray14, (-1), 0, (int) (short) -1, intArray58, true);
        java.lang.Class<?> wildcardClass61 = intArray58.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass61);
    }

    @Test
    public void test1638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1638");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int int22 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (int) (byte) -1, 0, (int) (short) 0);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (-1));
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) (byte) 100);
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        int[] intArray40 = new int[] { (-1), 100 };
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray34, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray42, false);
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) 'a');
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) ' ');
        int[] intArray57 = new int[] { (short) 100, (short) 0, 100, (byte) -1, 10 };
        int int61 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray57, 1, (int) (byte) 100, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, 100, (int) '#', (int) (short) 10, intArray57, false);
        int int65 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray57, 10);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, (int) (short) 100, (int) (short) 1, 100, intArray57, false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[100, 0, 100, -1, 10]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
    }

    @Test
    public void test1639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1639");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 0);
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 1);
        int int24 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (int) ' ', 10, 0);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 2);
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        int[] intArray40 = new int[] { (-1), 100 };
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray34, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray42, false);
        int[] intArray50 = new int[] { (-1), 100 };
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) (byte) 1);
        int[] intArray58 = new int[] { (-1), 100 };
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray52, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray60, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray34, (int) (byte) 10, (int) '4', 10, intArray60, true);
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, 2);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, (int) (short) 100, (int) 'a', (int) (byte) 0, intArray34, false);
        int int72 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (int) (byte) 100, 1, (int) (short) -1);
        java.lang.Class<?> wildcardClass73 = intArray18.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test1640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1640");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 0);
        int[] intArray24 = new int[] { (-1), 100 };
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 1);
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray26, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray34, false);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) 'a');
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) ' ');
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (-1));
        int int44 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray42, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) ' ', (int) 'a', 1, intArray42, false);
        // The following exception was thrown during execution in test generation
        try {
            int int50 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray42, 1, (int) (short) 1, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
    }

    @Test
    public void test1641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1641");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 0);
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 1);
        int int24 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (int) ' ', 10, 0);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (short) 10);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) '4');
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (short) -1);
        java.lang.Class<?> wildcardClass31 = intArray28.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[0, 1]");
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test1642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1642");
        int[] intArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int4 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray0, (-1), (int) (short) -1, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1643");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { (-1), 100 };
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 1);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray22, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray30, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) 10, (int) '4', 10, intArray30, true);
        int int36 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray4, 0);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (byte) 100);
        int[] intArray44 = new int[] { (-1), 100 };
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) (byte) 1);
        int[] intArray52 = new int[] { (-1), 100 };
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray46, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray54, false);
        int[] intArray61 = new int[] { '#' };
        int int63 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray61, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray46, (int) (short) -1, 1, 2, intArray61, true);
        int[] intArray67 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray61, 10);
        int[] intArray69 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray61, 100);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray38, 100, (int) (byte) 1, (int) (short) 1, intArray61, false);
        int[] intArray73 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray61, (int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            int int77 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray73, (-1), 1, 4);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[35]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1]");
    }

    @Test
    public void test1644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1644");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 1, (int) (byte) 1, (int) (short) -1, intArray32, false);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 10);
        int int40 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray32, (int) 'a');
        int int42 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray32, (int) (short) 100);
        java.lang.Class<?> wildcardClass43 = intArray32.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2 + "'", int42 == 2);
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test1645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1645");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray19 = new int[] { '#' };
        int int21 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (short) -1, 1, 2, intArray19, true);
        int[] intArray25 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 10);
        int[] intArray27 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 0);
        int[] intArray29 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, (int) '#');
        int[] intArray35 = new int[] { (-1), 100 };
        int[] intArray37 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray35, (int) (byte) 1);
        int[] intArray43 = new int[] { (-1), 100 };
        int[] intArray45 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray43, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray37, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray45, false);
        int[] intArray49 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray45, (int) ' ');
        int[] intArray51 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray49, (int) (byte) 0);
        int[] intArray53 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray49, (int) '#');
        int[] intArray59 = new int[] { ' ', (byte) -1 };
        int[] intArray65 = new int[] { (-1), 100 };
        int[] intArray67 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray65, (int) (byte) 1);
        int[] intArray73 = new int[] { (-1), 100 };
        int[] intArray75 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray73, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray67, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray75, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray59, (-1), (int) ' ', (int) (byte) 10, intArray75, false);
        int[] intArray81 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray59, 100);
        int[] intArray83 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray59, (int) (byte) 100);
        int int87 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray83, (int) (short) 10, (-1), (int) (short) 1);
        int[] intArray89 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray83, 100);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray49, 1, (int) (short) -1, (int) (short) 1, intArray83, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray19, 0, 0, (int) (short) 1, intArray83, false);
        java.lang.Class<?> wildcardClass94 = intArray83.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[0, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 2 + "'", int87 == 2);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test1646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1646");
        int[] intArray0 = null;
        int int4 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray0, (int) (byte) 0, (int) 'a', (int) '4');
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test1647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1647");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 100);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 1);
        int int32 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray2, (int) (short) 0, (int) 'a', 2);
        int int36 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray2, 10, 100, (int) (short) 1);
        int int38 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray2, (int) (short) 10);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) ' ');
        java.lang.Class<?> wildcardClass41 = intArray40.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[0, 0]");
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test1648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1648");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) ' ');
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray6, (int) (short) 1, (-1), (int) (byte) 0);
        int int14 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray6, 4, 10, 0);
        int[] intArray20 = new int[] { (-1), 100 };
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 1);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray22, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray30, false);
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray30, (int) 'a');
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) ' ');
        int[] intArray45 = new int[] { (short) 100, (short) 0, 100, (byte) -1, 10 };
        int int49 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray45, 1, (int) (byte) 100, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray36, 100, (int) '#', (int) (short) 10, intArray45, false);
        int[] intArray53 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (short) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray6, (int) (byte) 10, (int) (byte) 10, 4, intArray36, true);
        int int59 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray36, (int) (byte) -1, (int) (byte) 100, 2);
        java.lang.Class<?> wildcardClass60 = intArray36.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[100, 0, 100, -1, 10]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(wildcardClass60);
    }

    @Test
    public void test1649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1649");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { ' ', (byte) -1 };
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray36, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, (-1), (int) ' ', (int) (byte) 10, intArray36, false);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (int) 'a', 100, (int) (byte) 1, intArray56, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, 10, (int) (short) 0, (int) (short) -1, intArray36, true);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, 0);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, 10);
        int[] intArray72 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray36, 2, (int) (byte) 10, (int) (byte) -1, intArray72, true);
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (short) 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
    }

    @Test
    public void test1650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1650");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray19 = new int[] { '#' };
        int int21 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (short) -1, 1, 2, intArray19, true);
        int[] intArray29 = new int[] { (-1), 100 };
        int[] intArray31 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray29, (int) (byte) 1);
        int[] intArray37 = new int[] { (-1), 100 };
        int[] intArray39 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray37, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray31, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray39, false);
        int[] intArray43 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray39, (int) 'a');
        int int47 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray43, 0, (-1), 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray19, (int) (short) 100, (int) (short) 0, (int) (short) 0, intArray43, true);
        int[] intArray53 = null;
        int[] intArray59 = new int[] { (-1), 100 };
        int[] intArray61 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray59, (int) (byte) 1);
        int[] intArray67 = new int[] { (-1), 100 };
        int[] intArray69 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray67, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray61, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray69, false);
        int[] intArray73 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray69, (int) 'a');
        int[] intArray75 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray73, (int) ' ');
        int int79 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray75, (int) (byte) -1, 0, (int) (short) 0);
        int[] intArray81 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray75, (-1));
        int int83 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray75, (int) (byte) 100);
        int[] intArray85 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray75, (int) (short) 10);
        int[] intArray87 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray75, (int) (byte) -1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray53, (int) (short) 0, 10, 4, intArray75, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray43, (-1), (int) '#', (int) (short) 10, intArray53, false);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 2 + "'", int83 == 2);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[0, 1]");
    }

    @Test
    public void test1651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1651");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 10);
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 1);
        int int24 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray20, (-1));
        int int28 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray20, 10, (int) (short) 10, 4);
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) ' ');
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        int[] intArray44 = new int[] { (-1), 100 };
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray38, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray46, false);
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) ' ');
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) '4');
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, 2);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray20, 0, (int) (byte) 100, (int) (short) 1, intArray52, true);
        int[] intArray62 = new int[] { (-1), 100 };
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, (int) (byte) 1);
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) (short) 10);
        int int68 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray66, 0);
        int int72 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray66, 10, (int) ' ', 10);
        int[] intArray77 = new int[] { '#' };
        int int79 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray77, (int) (short) 0);
        int[] intArray83 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray77, 100, 0, (int) (short) -1, intArray83, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray66, (int) (short) -1, (int) (short) 1, (-1), intArray77, true);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, 100, (int) (short) 1, 4, intArray66, true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 2 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2 + "'", int68 == 2);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[35]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
    }

    @Test
    public void test1652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1652");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, 0);
        int int20 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) (short) 10);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
    }

    @Test
    public void test1653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1653");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 10);
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (short) 100);
        int[] intArray28 = new int[] { ' ', (byte) -1 };
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray36, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray44, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray28, (-1), (int) ' ', (int) (byte) 10, intArray44, false);
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, 100);
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) '4');
        int[] intArray58 = new int[] { (-1), 100 };
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray52, 1, (int) (byte) 1, (int) (short) -1, intArray58, false);
        int[] intArray68 = new int[] { (-1), 100 };
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) (byte) 1);
        int[] intArray76 = new int[] { (-1), 100 };
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray76, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray70, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray78, false);
        int[] intArray85 = new int[] { '#' };
        int int87 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray85, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray70, (int) (short) -1, 1, 2, intArray85, true);
        int[] intArray91 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray85, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray58, (int) (short) 100, 0, 1, intArray91, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray22, 0, (int) (short) 100, (int) ' ', intArray91, true);
        int int97 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray91, (int) (byte) 100);
        int int99 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray91, 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[35]");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 1]");
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 2 + "'", int97 == 2);
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + 1 + "'", int99 == 1);
    }

    @Test
    public void test1654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1654");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray22 = new int[] { ' ', (byte) -1 };
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray22, (-1), (int) ' ', (int) (byte) 10, intArray38, false);
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray50, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray58, false);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray38, (int) 'a', 100, (int) (byte) 1, intArray58, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray12, (int) (short) 100, (int) 'a', (int) (short) 0, intArray38, true);
        int int68 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray12, (int) '4');
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, 10);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) (short) -1);
        int int74 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray70, (int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            int int78 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray70, (-1), (int) (short) -1, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2 + "'", int68 == 2);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2 + "'", int74 == 2);
    }

    @Test
    public void test1655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1655");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray27 = new int[] { (short) 100, (short) 0, 100, (byte) -1, 10 };
        int int31 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray27, 1, (int) (byte) 100, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, 100, (int) '#', (int) (short) 10, intArray27, false);
        int int35 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, 0);
        int[] intArray41 = new int[] { ' ', (byte) -1 };
        int[] intArray47 = new int[] { (-1), 100 };
        int[] intArray49 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray47, (int) (byte) 1);
        int[] intArray55 = new int[] { (-1), 100 };
        int[] intArray57 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray55, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray49, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray57, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray41, (-1), (int) ' ', (int) (byte) 10, intArray57, false);
        int[] intArray63 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray57, 1);
        int int65 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray63, (int) (short) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, (int) (byte) 1, (-1), 0, intArray63, false);
        int[] intArray73 = new int[] { (-1), 100 };
        int[] intArray75 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray73, (int) (byte) 1);
        int[] intArray77 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray73, (int) ' ');
        int int81 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray77, (int) (short) 1, (-1), (int) (byte) 0);
        int int85 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray77, 10, (int) 'a', (int) (short) 10);
        int int87 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray77, (int) (short) -1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) (short) -1, 0, (-1), intArray77, true);
        int int93 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, 2, (int) (short) 1, 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[100, 0, 100, -1, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2 + "'", int65 == 2);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 2 + "'", int87 == 2);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
    }

    @Test
    public void test1656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1656");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray19 = new int[] { '#' };
        int int21 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (short) -1, 1, 2, intArray19, true);
        int[] intArray25 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 10);
        int[] intArray27 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 0);
        int[] intArray33 = new int[] { ' ', (byte) -1 };
        int[] intArray39 = new int[] { (-1), 100 };
        int[] intArray41 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray39, (int) (byte) 1);
        int[] intArray47 = new int[] { (-1), 100 };
        int[] intArray49 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray47, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray41, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray49, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray33, (-1), (int) ' ', (int) (byte) 10, intArray49, false);
        int[] intArray59 = new int[] { (-1), 100 };
        int[] intArray61 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray59, (int) (byte) 1);
        int[] intArray67 = new int[] { (-1), 100 };
        int[] intArray69 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray67, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray61, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray69, false);
        int[] intArray73 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray69, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray49, (int) 'a', 100, (int) (byte) 1, intArray69, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray27, (int) (short) 0, (int) (byte) 1, (int) (short) 1, intArray49, true);
        int int79 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray27, (int) (byte) -1);
        int[] intArray81 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray27, 1);
        int int83 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray27, (int) ' ');
        int[] intArray85 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray27, (int) 'a');
        java.lang.Class<?> wildcardClass86 = intArray85.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 2 + "'", int79 == 2);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 2 + "'", int83 == 2);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test1657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1657");
        int[] intArray0 = null;
        int int4 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray0, (-1), 0, (int) (byte) -1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test1658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1658");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int int8 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray4, 2);
        int[] intArray14 = new int[] { ' ', (byte) -1 };
        int[] intArray20 = new int[] { (-1), 100 };
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 1);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray22, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray30, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray14, (-1), (int) ' ', (int) (byte) 10, intArray30, false);
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray14, 100);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray14, (int) (byte) 100);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray14, 1);
        int int44 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray14, (int) (byte) 1, 0, (int) (byte) 0);
        int[] intArray50 = new int[] { (-1), 100 };
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) (byte) 1);
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) ' ');
        int[] intArray60 = new int[] { (-1), 100 };
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) (byte) 1);
        int[] intArray68 = new int[] { (-1), 100 };
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray62, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray70, false);
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) ' ');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray50, (int) (short) 0, (int) ' ', 0, intArray74, true);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray14, (int) (byte) 10, (int) (byte) 1, (int) (short) 1, intArray74, true);
        int[] intArray80 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray74, (int) (byte) 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) ' ', (int) '#', (int) (short) 0, intArray74, true);
        int int84 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray4, 100);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 2 + "'", int84 == 2);
    }

    @Test
    public void test1659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1659");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray19 = new int[] { '#' };
        int int21 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (short) -1, 1, 2, intArray19, true);
        int[] intArray25 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 10);
        int int29 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray25, 1, (int) (short) 1, (int) (byte) -1);
        int[] intArray31 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray25, (int) ' ');
        int int35 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray25, 10, (int) (byte) 0, (int) (short) 1);
        int int37 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray25, (int) '#');
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2 + "'", int37 == 2);
    }

    @Test
    public void test1660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1660");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray19 = new int[] { '#' };
        int int21 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (short) -1, 1, 2, intArray19, true);
        int[] intArray25 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 10);
        int[] intArray27 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 0);
        int[] intArray29 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, (int) '#');
        int[] intArray35 = new int[] { (-1), 100 };
        int[] intArray37 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray35, (int) (byte) 1);
        int[] intArray43 = new int[] { (-1), 100 };
        int[] intArray45 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray43, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray37, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray45, false);
        int[] intArray52 = new int[] { '#' };
        int int54 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray52, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray37, (int) (short) -1, 1, 2, intArray52, true);
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, 10);
        int int62 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray58, 1, (int) (short) 1, (int) (byte) -1);
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) ' ');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray19, (int) (short) 100, 0, (int) (byte) -1, intArray64, true);
        // The following exception was thrown during execution in test generation
        try {
            int int70 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray64, (int) (short) 1, (int) (byte) 0, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[0, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[35]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
    }

    @Test
    public void test1661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1661");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 10);
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (short) 100);
        int[] intArray28 = new int[] { ' ', (byte) -1 };
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray36, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray44, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray28, (-1), (int) ' ', (int) (byte) 10, intArray44, false);
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, 100);
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 100);
        int int56 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray52, (-1), 2, (int) (byte) -1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, 0, 2, 0, intArray52, false);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 0);
        int[] intArray66 = new int[] { (-1), 100 };
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) (byte) 1);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) ' ');
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, 10);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray60, (int) '4', (int) (byte) 10, (int) (short) 10, intArray66, false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 10 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
    }

    @Test
    public void test1662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1662");
        int[] intArray0 = null;
        int[] intArray6 = new int[] { (-1), 100 };
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (int) (byte) 1);
        int[] intArray14 = new int[] { (-1), 100 };
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray14, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray8, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray16, false);
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) 'a');
        int[] intArray26 = new int[] { ' ', (byte) -1 };
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        int[] intArray40 = new int[] { (-1), 100 };
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray34, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray42, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, (-1), (int) ' ', (int) (byte) 10, intArray42, false);
        int[] intArray52 = new int[] { (-1), 100 };
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) (byte) 1);
        int[] intArray60 = new int[] { (-1), 100 };
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray54, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray62, false);
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray42, (int) 'a', 100, (int) (byte) 1, intArray62, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray16, (int) (short) 100, (int) 'a', (int) (short) 0, intArray42, true);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (-1));
        int int74 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray72, (int) '4');
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (int) (byte) 10);
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray76, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray0, (int) (short) 0, (int) '#', (int) (byte) 0, intArray78, false);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2 + "'", int74 == 2);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1]");
    }

    @Test
    public void test1663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1663");
        int[] intArray0 = null;
        int[] intArray6 = new int[] { ' ', (byte) -1 };
        int[] intArray12 = new int[] { (-1), 100 };
        int[] intArray14 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) (byte) 1);
        int[] intArray20 = new int[] { (-1), 100 };
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray14, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray22, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray6, (-1), (int) ' ', (int) (byte) 10, intArray22, false);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, 1);
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray28, (int) (short) 1);
        int int32 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray28, (int) 'a');
        int int34 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray28, 0);
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) ' ');
        int int38 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray28, (int) '4');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray0, 100, (int) (byte) 100, 10, intArray28, false);
        java.lang.Class<?> wildcardClass41 = intArray28.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test1664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1664");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray22 = new int[] { ' ', (byte) -1 };
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray22, (-1), (int) ' ', (int) (byte) 10, intArray38, false);
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray50, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray58, false);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray38, (int) 'a', 100, (int) (byte) 1, intArray58, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray12, (int) (short) 100, (int) 'a', (int) (short) 0, intArray38, true);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (-1));
        int int70 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray68, (int) '4');
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) (byte) 10);
        int int74 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray68, 4);
        java.lang.Class<?> wildcardClass75 = intArray68.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2 + "'", int70 == 2);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2 + "'", int74 == 2);
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test1665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1665");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 100);
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray26, (int) (short) 10, (-1), (int) (short) 1);
        int int32 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray26, (int) ' ');
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
    }

    @Test
    public void test1666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1666");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 1, (int) (byte) 1, (int) (short) -1, intArray32, false);
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        int[] intArray50 = new int[] { (-1), 100 };
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray44, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray52, false);
        int[] intArray59 = new int[] { '#' };
        int int61 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray59, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray44, (int) (short) -1, 1, 2, intArray59, true);
        int[] intArray65 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray59, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, (int) (short) 100, 0, 1, intArray65, false);
        int[] intArray71 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray65, (int) (byte) 0, (int) (byte) 10, (int) (short) -1, intArray71, true);
        int[] intArray75 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray65, (int) ' ');
        int[] intArray77 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray65, 4);
        java.lang.Class<?> wildcardClass78 = intArray65.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[35]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 1]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass78);
    }

    @Test
    public void test1667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1667");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 1, (int) (byte) 1, (int) (short) -1, intArray32, false);
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        int[] intArray50 = new int[] { (-1), 100 };
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray44, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray52, false);
        int[] intArray59 = new int[] { '#' };
        int int61 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray59, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray44, (int) (short) -1, 1, 2, intArray59, true);
        int[] intArray65 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray59, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, (int) (short) 100, 0, 1, intArray65, false);
        int[] intArray69 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 100);
        int int73 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray32, (int) '#', (int) (short) 100, (-1));
        int[] intArray75 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 100);
        int int79 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray75, (int) (short) 10, 1, (int) (short) 0);
        int[] intArray81 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray75, 2);
        java.lang.Class<?> wildcardClass82 = intArray75.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[35]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[1, 1]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[1, 1]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass82);
    }

    @Test
    public void test1668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1668");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 100);
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray26, (-1), 2, (int) (byte) -1);
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (short) 1);
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            int int40 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray34, 10, (int) (byte) 0, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
    }

    @Test
    public void test1669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1669");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { ' ', (byte) -1 };
        int[] intArray38 = new int[] { (-1), 100 };
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 1);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray40, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray48, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, (-1), (int) ' ', (int) (byte) 10, intArray48, false);
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, 100);
        int int56 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray32, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray24, 10, (int) 'a', (-1), intArray32, true);
        int int60 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) '#');
        java.lang.Class<?> wildcardClass61 = intArray24.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2 + "'", int60 == 2);
        org.junit.Assert.assertNotNull(wildcardClass61);
    }

    @Test
    public void test1670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1670");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { (-1), 100 };
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 1);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray22, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray30, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) 10, (int) '4', 10, intArray30, true);
        int int36 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray4, (int) (byte) -1);
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        int[] intArray50 = new int[] { (-1), 100 };
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray44, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray52, false);
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) ' ');
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 0);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) (byte) 1);
        int int64 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray58, (int) ' ', 10, 0);
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) (short) 10);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) '4');
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) (short) -1);
        int int72 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray68, (-1));
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, 0, (int) '4', (-1), intArray68, true);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 2 + "'", int72 == 2);
    }

    @Test
    public void test1671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1671");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 1);
        int[] intArray30 = new int[] { ' ', (byte) -1 };
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        int[] intArray44 = new int[] { (-1), 100 };
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray38, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray46, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray30, (-1), (int) ' ', (int) (byte) 10, intArray46, false);
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray30, 100);
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray30, (int) (byte) 100);
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray30, 1);
        int int60 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray30, (int) (short) 0, (int) 'a', 2);
        int int64 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray30, 10, 100, (int) (short) 1);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray30, (int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, 10, (-1), 100, intArray30, false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
    }

    @Test
    public void test1672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1672");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray27 = new int[] { (short) 100, (short) 0, 100, (byte) -1, 10 };
        int int31 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray27, 1, (int) (byte) 100, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, 100, (int) '#', (int) (short) 10, intArray27, false);
        int int35 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, 0);
        int[] intArray41 = new int[] { ' ', (byte) -1 };
        int[] intArray47 = new int[] { (-1), 100 };
        int[] intArray49 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray47, (int) (byte) 1);
        int[] intArray55 = new int[] { (-1), 100 };
        int[] intArray57 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray55, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray49, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray57, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray41, (-1), (int) ' ', (int) (byte) 10, intArray57, false);
        int[] intArray63 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray57, 1);
        int int65 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray63, (int) (short) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, (int) (byte) 1, (-1), 0, intArray63, false);
        int[] intArray69 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray63, (int) (short) 1);
        java.lang.Class<?> wildcardClass70 = intArray69.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[100, 0, 100, -1, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2 + "'", int65 == 2);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass70);
    }

    @Test
    public void test1673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1673");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) ' ');
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (short) 100);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray2, 1);
        int int14 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray2, (-1), 1, 2);
        int[] intArray20 = new int[] { (-1), 100 };
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 1);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray22, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray30, false);
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray30, (int) ' ');
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 0);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) '#');
        int[] intArray44 = new int[] { (-1), 100 };
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) (byte) 1);
        int[] intArray52 = new int[] { (-1), 100 };
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray46, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray54, false);
        int[] intArray61 = new int[] { '#' };
        int int63 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray61, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray46, (int) (short) -1, 1, 2, intArray61, true);
        int[] intArray67 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray61, 10);
        int[] intArray69 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray61, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray34, (int) (byte) 0, (int) (short) 10, (int) (byte) 1, intArray69, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (int) (byte) 10, (int) '#', (int) (short) 10, intArray34, true);
        int int75 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray34, (int) (short) 1);
        int[] intArray77 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 0);
        int int79 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray77, (int) ' ');
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[1, 1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[35]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 2 + "'", int75 == 2);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 2 + "'", int79 == 2);
    }

    @Test
    public void test1674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1674");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 100);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 1);
        int int32 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray2, (int) (byte) 1, 0, (int) (byte) 0);
        int[] intArray38 = new int[] { (-1), 100 };
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 1);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) ' ');
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray50, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray58, false);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) ' ');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray38, (int) (short) 0, (int) ' ', 0, intArray62, true);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray2, (int) (byte) 10, (int) (byte) 1, (int) (short) 1, intArray62, true);
        int int70 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray2, (int) '4', (int) '4', (-1));
        int int72 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray2, 100);
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 0);
        int int76 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray74, 2);
        java.lang.Class<?> wildcardClass77 = intArray74.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 2 + "'", int72 == 2);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2 + "'", int76 == 2);
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test1675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1675");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 10);
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 1);
        int int24 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray20, (-1));
        int int28 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray20, 10, (int) (short) 10, 4);
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) ' ');
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        int[] intArray44 = new int[] { (-1), 100 };
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray38, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray46, false);
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) ' ');
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) '4');
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, 2);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray20, 0, (int) (byte) 100, (int) (short) 1, intArray52, true);
        int int60 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray52, (int) '4', 1, (int) (byte) 1);
        java.lang.Class<?> wildcardClass61 = intArray52.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2 + "'", int60 == 2);
        org.junit.Assert.assertNotNull(wildcardClass61);
    }

    @Test
    public void test1676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1676");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray22 = new int[] { ' ', (byte) -1 };
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray22, (-1), (int) ' ', (int) (byte) 10, intArray38, false);
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray50, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray58, false);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray38, (int) 'a', 100, (int) (byte) 1, intArray58, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray12, (int) (short) 100, (int) 'a', (int) (short) 0, intArray38, true);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (-1));
        int int70 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray68, (int) '4');
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, 0);
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, 4);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2 + "'", int70 == 2);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[0, 0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
    }

    @Test
    public void test1677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1677");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 0);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (byte) 0);
        int int28 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, 0);
        int int32 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray24, 3, 100, (int) (byte) -1);
        int[] intArray38 = new int[] { (-1), 100 };
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 1);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray40, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray48, false);
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) ' ');
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) (byte) 0);
        int int58 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray54, 0, 1, (-1));
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray24, (int) (short) 10, 0, (int) (short) 0, intArray54, false);
        java.lang.Class<?> wildcardClass61 = intArray54.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(wildcardClass61);
    }

    @Test
    public void test1678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1678");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, 10);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) 'a');
        int int12 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, 0);
        int int14 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) (byte) 100);
        int int16 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, 4);
        int[] intArray22 = new int[] { (-1), 100 };
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, (int) (byte) 1);
        int[] intArray30 = new int[] { (-1), 100 };
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray30, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray24, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray32, false);
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) 'a');
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) ' ');
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 10);
        int[] intArray46 = new int[] { ' ', (byte) -1 };
        int[] intArray52 = new int[] { (-1), 100 };
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) (byte) 1);
        int[] intArray60 = new int[] { (-1), 100 };
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray54, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray62, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray46, (-1), (int) ' ', (int) (byte) 10, intArray62, false);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, 100);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) '4');
        int[] intArray76 = new int[] { (-1), 100 };
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray76, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray70, 1, (int) (byte) 1, (int) (short) -1, intArray76, false);
        int[] intArray82 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray76, (int) (short) 10);
        int[] intArray84 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray76, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray38, (int) (short) 0, (int) '#', (int) (byte) 1, intArray84, true);
        int int88 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, (int) (byte) 0);
        int[] intArray90 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray8, (int) (short) 1, 10, (int) (byte) 1, intArray90, true);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 2 + "'", int88 == 2);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1]");
    }

    @Test
    public void test1679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1679");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 100);
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray26, (-1), 2, (int) (byte) -1);
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (short) 1);
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (short) 1);
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) (short) 10);
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, 10);
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (short) 1);
        int int52 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray50, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray34, (int) (short) 0, (int) (short) -1, (int) (short) 1, intArray50, true);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
    }

    @Test
    public void test1680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1680");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 1, (int) (byte) 1, (int) (short) -1, intArray32, false);
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        int[] intArray50 = new int[] { (-1), 100 };
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray44, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray52, false);
        int[] intArray59 = new int[] { '#' };
        int int61 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray59, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray44, (int) (short) -1, 1, 2, intArray59, true);
        int[] intArray65 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray59, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, (int) (short) 100, 0, 1, intArray65, false);
        int[] intArray69 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 100);
        int int71 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray32, (-1));
        int[] intArray73 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, 0);
        int[] intArray75 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) -1);
        int int79 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray32, (int) (short) 10, (int) 'a', (int) (short) 10);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[35]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[1, 1]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
    }

    @Test
    public void test1681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1681");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 100);
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray26, (-1), 2, (int) (byte) -1);
        int[] intArray34 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, (int) (short) 1, (int) (byte) 100, (int) (byte) -1, intArray34, false);
        int int38 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray26, (int) (short) 1);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, 4);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        int[] intArray63 = new int[] { '#' };
        int int65 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray63, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (short) -1, 1, 2, intArray63, true);
        int[] intArray69 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray63, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, (int) (short) -1, 0, 1, intArray69, false);
        int int75 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray69, 100, (int) '4', 10);
        java.lang.Class<?> wildcardClass76 = intArray69.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[35]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 1]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(wildcardClass76);
    }

    @Test
    public void test1682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1682");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray27 = new int[] { (short) 100, (short) 0, 100, (byte) -1, 10 };
        int int31 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray27, 1, (int) (byte) 100, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, 100, (int) '#', (int) (short) 10, intArray27, false);
        int int35 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, 0);
        int[] intArray41 = new int[] { ' ', (byte) -1 };
        int[] intArray47 = new int[] { (-1), 100 };
        int[] intArray49 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray47, (int) (byte) 1);
        int[] intArray55 = new int[] { (-1), 100 };
        int[] intArray57 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray55, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray49, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray57, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray41, (-1), (int) ' ', (int) (byte) 10, intArray57, false);
        int[] intArray63 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray57, 1);
        int int65 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray63, (int) (short) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, (int) (byte) 1, (-1), 0, intArray63, false);
        int[] intArray69 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray63, (int) (short) 1);
        int int71 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray63, (int) (short) 0);
        java.lang.Class<?> wildcardClass72 = intArray63.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[100, 0, 100, -1, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2 + "'", int65 == 2);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2 + "'", int71 == 2);
        org.junit.Assert.assertNotNull(wildcardClass72);
    }

    @Test
    public void test1683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1683");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 0);
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 1);
        int int24 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (int) ' ', 10, 0);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (short) 10);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) '4');
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray36, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray44, false);
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) ' ');
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 0);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        int[] intArray64 = new int[] { (-1), 100 };
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray58, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray66, false);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) 'a');
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) ' ');
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (-1));
        int int76 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray74, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray50, (int) ' ', (int) 'a', 1, intArray74, false);
        int int80 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray50, (int) '#');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray26, (-1), 1, 0, intArray50, true);
        int int86 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray26, (int) (byte) -1, (int) (short) 0, (int) (short) 1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2 + "'", int80 == 2);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 2 + "'", int86 == 2);
    }

    @Test
    public void test1684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1684");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 0);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (byte) 0);
        int int28 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            int int32 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray24, 1, (int) '4', (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
    }

    @Test
    public void test1685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1685");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { ' ', (byte) -1 };
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray36, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, (-1), (int) ' ', (int) (byte) 10, intArray36, false);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (int) 'a', 100, (int) (byte) 1, intArray56, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, 10, (int) (short) 0, (int) (short) -1, intArray36, true);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, (int) 'a');
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, 1);
        int int70 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray68, (int) (byte) 1);
        int[] intArray76 = new int[] { (-1), 100 };
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray76, (int) (byte) 1);
        int[] intArray80 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray78, (int) (short) 10);
        int[] intArray82 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray78, (int) '#');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray68, 100, 100, 4, intArray82, false);
        int int86 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray82, (int) (byte) 10);
        java.lang.Class<?> wildcardClass87 = intArray82.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2 + "'", int70 == 2);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 2 + "'", int86 == 2);
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test1686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1686");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) ' ');
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray6, (int) (short) 1, (-1), (int) (byte) 0);
        int int14 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray6, 4, 10, 0);
        int int18 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray6, 3, (int) '4', (int) (byte) 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test1687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1687");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray22 = new int[] { ' ', (byte) -1 };
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray22, (-1), (int) ' ', (int) (byte) 10, intArray38, false);
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray50, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray58, false);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray38, (int) 'a', 100, (int) (byte) 1, intArray58, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray12, (int) (short) 100, (int) 'a', (int) (short) 0, intArray38, true);
        int int68 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray12, (int) '4');
        int int70 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray12, 0);
        int[] intArray76 = new int[] { (-1), 100 };
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray76, (int) (byte) 1);
        int[] intArray80 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray78, (int) (short) 10);
        int int82 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray80, 0);
        int int84 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray80, (int) (short) -1);
        int[] intArray86 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray80, (int) (byte) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray12, (int) ' ', 0, (int) (byte) -1, intArray86, false);
        int int92 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray12, 1, (int) (short) 1, (int) (byte) -1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2 + "'", int68 == 2);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2 + "'", int70 == 2);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 2 + "'", int82 == 2);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 2 + "'", int84 == 2);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
    }

    @Test
    public void test1688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1688");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 1);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (short) 1);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) 'a');
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray36, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray44, false);
        int int50 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray36, (int) ' ', (int) (short) -1, (int) (short) 1);
        int int52 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, (int) '#');
        int int56 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray36, (int) (short) -1, 100, 10);
        int int60 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray36, 4, (int) ' ', (int) (byte) 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (-1), 1, (int) (byte) 0, intArray36, true);
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, 0);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, (int) (byte) 10);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, 1);
        java.lang.Class<?> wildcardClass69 = intArray68.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test1689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1689");
        int[] intArray0 = null;
        int[] intArray6 = new int[] { (-1), 100 };
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (int) (byte) 1);
        int[] intArray14 = new int[] { (-1), 100 };
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray14, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray8, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray16, false);
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray0, 10, (int) (short) 1, (int) (short) 0, intArray22, false);
        int int28 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray22, 0, (int) '4', (int) (short) 10);
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, (-1));
        java.lang.Class<?> wildcardClass31 = intArray30.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[0, 1]");
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test1690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1690");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray27 = new int[] { (short) 100, (short) 0, 100, (byte) -1, 10 };
        int int31 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray27, 1, (int) (byte) 100, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, 100, (int) '#', (int) (short) 10, intArray27, false);
        int int35 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, 0);
        int[] intArray37 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) 'a');
        int int41 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray37, (int) (byte) 1, 100, 10);
        int[] intArray47 = new int[] { (-1), 100 };
        int[] intArray49 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray47, (int) (byte) 1);
        int[] intArray51 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray49, (int) (short) 10);
        int[] intArray53 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray49, (int) '#');
        int[] intArray55 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray53, 4);
        int int57 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray53, 2);
        int int59 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray53, (int) (short) 100);
        int[] intArray61 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray53, 2);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray37, (int) (short) 100, (int) (byte) 0, 2, intArray53, true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[100, 0, 100, -1, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2 + "'", int57 == 2);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2 + "'", int59 == 2);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1]");
    }

    @Test
    public void test1691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1691");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 10);
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 1);
        int int24 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray20, (-1));
        int int28 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray20, 10, (int) (short) 10, 4);
        // The following exception was thrown during execution in test generation
        try {
            int int32 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray20, 1, (int) (byte) -1, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
    }

    @Test
    public void test1692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1692");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray19 = new int[] { '#' };
        int int21 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (short) -1, 1, 2, intArray19, true);
        int[] intArray25 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 10);
        int[] intArray27 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, (int) 'a');
        int int29 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) ' ');
        int[] intArray31 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 1);
        int int33 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray31, (int) (short) 100);
        int[] intArray37 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray31, (int) (short) -1, 100, (int) 'a', intArray37, true);
        // The following exception was thrown during execution in test generation
        try {
            int int41 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray37, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
    }

    @Test
    public void test1693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1693");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (byte) 0);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray4, 2, 0, (int) (byte) -1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        int[] intArray24 = new int[] { (-1), 100 };
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray26, false);
        int[] intArray34 = new int[] { ' ', (byte) -1 };
        int[] intArray40 = new int[] { (-1), 100 };
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) (byte) 1);
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray42, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray50, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray34, (-1), (int) ' ', (int) (byte) 10, intArray50, false);
        int[] intArray60 = new int[] { (-1), 100 };
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) (byte) 1);
        int[] intArray68 = new int[] { (-1), 100 };
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray62, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray70, false);
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray50, (int) 'a', 100, (int) (byte) 1, intArray70, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, 10, (int) (short) 0, (int) (short) -1, intArray50, true);
        int int80 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray50, 0);
        int[] intArray82 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, 10);
        int[] intArray84 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray82, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, (int) (short) 1, 0, 0, intArray84, false);
        int int90 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray84, 100, (int) (short) 100, 0);
        int[] intArray92 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray84, (-1));
        int[] intArray94 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray92, (int) (byte) -1);
        int int98 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray94, (int) '4', (int) (short) 10, 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2 + "'", int80 == 2);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 0 + "'", int98 == 0);
    }

    @Test
    public void test1694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1694");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int int22 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (int) (byte) -1, 0, (int) (short) 0);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (-1));
        int[] intArray30 = new int[] { (-1), 100 };
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray30, (int) (byte) 1);
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray30, (int) ' ');
        int int38 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray34, (int) (short) 1, (-1), (int) (byte) 0);
        int int42 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray34, 10, (int) 'a', (int) (short) 10);
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) '#');
        int[] intArray50 = new int[] { ' ', (byte) -1 };
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        int[] intArray64 = new int[] { (-1), 100 };
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray58, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray66, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray50, (-1), (int) ' ', (int) (byte) 10, intArray66, false);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, 100);
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) (byte) 100);
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, 1);
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) '4');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray34, (-1), 1, (-1), intArray50, true);
        int[] intArray82 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) 'a');
        int int86 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray82, 0, (int) (byte) 100, (int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) (byte) -1, 3, 3, intArray82, false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 3 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
    }

    @Test
    public void test1695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1695");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 0);
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) '#');
        int int22 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray16, (int) ' ');
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) ' ');
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 0);
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) (byte) 1);
        int int50 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray44, (int) ' ', 10, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray16, (int) (short) 100, (int) (short) 0, (int) (byte) 1, intArray44, false);
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, 10);
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 100);
        java.lang.Class<?> wildcardClass57 = intArray16.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test1696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1696");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray19 = new int[] { '#' };
        int int21 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (short) -1, 1, 2, intArray19, true);
        int[] intArray25 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 10);
        int[] intArray27 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 0);
        int[] intArray33 = new int[] { ' ', (byte) -1 };
        int[] intArray39 = new int[] { (-1), 100 };
        int[] intArray41 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray39, (int) (byte) 1);
        int[] intArray47 = new int[] { (-1), 100 };
        int[] intArray49 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray47, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray41, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray49, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray33, (-1), (int) ' ', (int) (byte) 10, intArray49, false);
        int[] intArray59 = new int[] { (-1), 100 };
        int[] intArray61 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray59, (int) (byte) 1);
        int[] intArray67 = new int[] { (-1), 100 };
        int[] intArray69 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray67, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray61, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray69, false);
        int[] intArray73 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray69, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray49, (int) 'a', 100, (int) (byte) 1, intArray69, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray27, (int) (short) 0, (int) (byte) 1, (int) (short) 1, intArray49, true);
        int int79 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray27, (int) (byte) -1);
        int[] intArray81 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray27, (int) '4');
        int int83 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray27, (int) (byte) 10);
        int int87 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray27, 0, (int) '#', 2);
        java.lang.Class<?> wildcardClass88 = intArray27.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 2 + "'", int79 == 2);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 2 + "'", int83 == 2);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test1697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1697");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 100);
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray26, (-1), 2, (int) (byte) -1);
        int[] intArray34 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, (int) (short) 1, (int) (byte) 100, (int) (byte) -1, intArray34, false);
        int int38 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray26, (int) (short) 1);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, 4);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        int[] intArray63 = new int[] { '#' };
        int int65 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray63, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (short) -1, 1, 2, intArray63, true);
        int[] intArray69 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray63, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, (int) (short) -1, 0, 1, intArray69, false);
        java.lang.Class<?> wildcardClass72 = intArray26.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[35]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 1]");
        org.junit.Assert.assertNotNull(wildcardClass72);
    }

    @Test
    public void test1698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1698");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray19 = new int[] { '#' };
        int int21 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (short) -1, 1, 2, intArray19, true);
        int[] intArray25 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 10);
        int[] intArray27 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, (int) 'a');
        int int29 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) ' ');
        int int33 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray19, 0, (int) ' ', (int) (short) -1);
        java.lang.Class<?> wildcardClass34 = intArray19.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test1699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1699");
        int[] intArray0 = null;
        int[] intArray6 = new int[] { (-1), 100 };
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (int) (byte) 1);
        int[] intArray14 = new int[] { (-1), 100 };
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray14, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray8, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray16, false);
        int[] intArray24 = new int[] { (-1), 100 };
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 1);
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray26, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray34, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray8, (int) (byte) 10, (int) '4', 10, intArray34, true);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, 2);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray0, (int) (short) 100, (int) ' ', 10, intArray40, false);
        int int44 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray40, 0);
        int[] intArray50 = new int[] { ' ', (byte) -1 };
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        int[] intArray64 = new int[] { (-1), 100 };
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray58, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray66, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray50, (-1), (int) ' ', (int) (byte) 10, intArray66, false);
        int[] intArray76 = new int[] { (-1), 100 };
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray76, (int) (byte) 1);
        int[] intArray84 = new int[] { (-1), 100 };
        int[] intArray86 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray84, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray78, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray86, false);
        int[] intArray90 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray86, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray66, (int) 'a', 100, (int) (byte) 1, intArray86, false);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray40, 0, 0, 4, intArray86, false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2 + "'", int44 == 2);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1]");
    }

    @Test
    public void test1700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1700");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 1);
        int[] intArray30 = new int[] { ' ', (byte) -1 };
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        int[] intArray44 = new int[] { (-1), 100 };
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray38, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray46, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray30, (-1), (int) ' ', (int) (byte) 10, intArray46, false);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        int[] intArray64 = new int[] { (-1), 100 };
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray58, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray66, false);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray46, (int) 'a', 100, (int) (byte) 1, intArray66, false);
        int int74 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray66, (int) '4');
        int int78 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray66, (int) ' ', (int) (byte) 1, 0);
        int[] intArray80 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) 'a');
        int int84 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray66, (int) '#', (int) '#', 4);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) (short) 1, (int) (byte) -1, (int) (byte) 100, intArray66, true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 49 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2 + "'", int74 == 2);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
    }

    @Test
    public void test1701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1701");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 10);
        int[] intArray24 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) (byte) 0, (int) (short) 100, (int) (byte) -1, intArray24, false);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) 'a');
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) '#');
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, 100);
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            int int38 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray32, (int) 'a', 1, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
    }

    @Test
    public void test1702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1702");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int int8 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, 0);
        int int12 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray6, 10, (int) ' ', 10);
        int int14 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, (int) (byte) 0);
        java.lang.Class<?> wildcardClass15 = intArray6.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test1703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1703");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, 10);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) 'a');
        int int12 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, 0);
        int[] intArray14 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (short) 10);
        int[] intArray20 = new int[] { (-1), 100 };
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 1);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray22, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray30, false);
        int[] intArray38 = new int[] { ' ', (byte) -1 };
        int[] intArray44 = new int[] { (-1), 100 };
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) (byte) 1);
        int[] intArray52 = new int[] { (-1), 100 };
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray46, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray54, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray38, (-1), (int) ' ', (int) (byte) 10, intArray54, false);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, 100);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 100);
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) '#', (int) (short) 10, 0, intArray38, false);
        int int70 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray38, 100, 4, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray14, (int) '#', (int) (byte) 0, (int) (short) 0, intArray38, true);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
    }

    @Test
    public void test1704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1704");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) ' ');
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 10);
        int[] intArray14 = new int[] { ' ', (byte) -1 };
        int[] intArray20 = new int[] { (-1), 100 };
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 1);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray22, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray30, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray14, (-1), (int) ' ', (int) (byte) 10, intArray30, false);
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray14, 100);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray14, (int) (byte) 100);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray14, 1);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray14, (int) '4');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (int) '#', (int) (short) 100, (int) ' ', intArray14, false);
        int[] intArray50 = new int[] { ' ', (byte) -1 };
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        int[] intArray64 = new int[] { (-1), 100 };
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray58, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray66, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray50, (-1), (int) ' ', (int) (byte) 10, intArray66, false);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, 100);
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) (byte) 100);
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, 1);
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) '4');
        int[] intArray80 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, 0);
        int int84 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray80, (int) (short) 100, (int) (byte) 0, (int) (byte) 1);
        int[] intArray86 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray80, (int) (short) -1);
        int int90 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray80, 4, (int) (byte) 100, (int) (short) -1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray2, (-1), 10, (int) (byte) -1, intArray80, true);
        int int96 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray80, (int) '#', 4, (int) (byte) -1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 2 + "'", int84 == 2);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 0 + "'", int96 == 0);
    }

    @Test
    public void test1705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1705");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (-1));
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) '#');
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) 'a');
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) ' ');
        int int46 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray42, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, 3, (int) (short) 1, 0, intArray42, false);
        int int52 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray42, (int) (byte) 100, (int) (byte) 1, 1);
        java.lang.Class<?> wildcardClass53 = intArray42.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test1706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1706");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) '4');
        int int20 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) (byte) -1);
        int int22 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (-1));
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (-1), (int) '#', 4);
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (int) (short) 0, (int) '#', (int) (byte) 1);
        java.lang.Class<?> wildcardClass31 = intArray18.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test1707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1707");
        int[] intArray0 = null;
        int[] intArray6 = new int[] { (-1), 100 };
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (int) (byte) 1);
        int[] intArray14 = new int[] { (-1), 100 };
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray14, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray8, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray16, false);
        int[] intArray24 = new int[] { ' ', (byte) -1 };
        int[] intArray30 = new int[] { (-1), 100 };
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray30, (int) (byte) 1);
        int[] intArray38 = new int[] { (-1), 100 };
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray32, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray40, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray24, (-1), (int) ' ', (int) (byte) 10, intArray40, false);
        int[] intArray50 = new int[] { (-1), 100 };
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) (byte) 1);
        int[] intArray58 = new int[] { (-1), 100 };
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray52, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray60, false);
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray40, (int) 'a', 100, (int) (byte) 1, intArray60, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray8, 10, (int) (short) 0, (int) (short) -1, intArray40, true);
        int int70 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray40, (int) 'a');
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, 1);
        int int76 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray40, 100, (int) (short) 100, 2);
        int int78 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray40, (int) (byte) 10);
        int int80 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray40, (int) (byte) 1);
        int[] intArray82 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, 4);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray0, (int) (short) -1, (int) (short) 0, (int) (byte) 1, intArray40, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2 + "'", int70 == 2);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 2 + "'", int78 == 2);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2 + "'", int80 == 2);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1]");
    }

    @Test
    public void test1708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1708");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 0);
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 1);
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray36, false);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) 'a');
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray20, (int) (short) -1, (-1), (int) (byte) 10, intArray40, true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
    }

    @Test
    public void test1709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1709");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int int22 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (int) (byte) -1, 0, (int) (short) 0);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (-1));
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) (short) 1);
        int int28 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, 0);
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) '#');
        java.lang.Class<?> wildcardClass31 = intArray18.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test1710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1710");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 0);
        int int22 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, 0, 1, (-1));
        int int24 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) '4');
        int int28 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (int) (byte) -1, (int) (short) 100, (int) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            int int32 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (int) (byte) 0, 0, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
    }

    @Test
    public void test1711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1711");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) '4');
        int int20 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) (byte) -1);
        int int22 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (-1));
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (-1), (int) '#', 4);
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (int) (short) 0, (int) '#', (int) (byte) 1);
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 0);
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 1);
        int[] intArray40 = new int[] { (-1), 100 };
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) (byte) 1);
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray42, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray50, false);
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) 'a');
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) ' ');
        int int60 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray56, (int) (byte) -1, 0, (int) (short) 0);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (-1));
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, (int) '#');
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) '#');
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray34, (int) (byte) 1, (int) (short) 1, 10, intArray66, true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 5 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
    }

    @Test
    public void test1712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1712");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { (-1), 100 };
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 1);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray22, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray30, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) 10, (int) '4', 10, intArray30, true);
        int int36 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray4, 0);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (byte) 100);
        int int40 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, (int) (byte) 1);
        java.lang.Class<?> wildcardClass41 = intArray38.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2 + "'", int40 == 2);
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test1713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1713");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, 10);
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            int int14 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray10, (int) (byte) 1, 0, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
    }

    @Test
    public void test1714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1714");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 0);
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 1);
        int int24 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (int) ' ', 10, 0);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (short) 10);
        int[] intArray32 = new int[] { ' ', (byte) -1 };
        int[] intArray38 = new int[] { (-1), 100 };
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 1);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray40, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray48, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, (-1), (int) ' ', (int) (byte) 10, intArray48, false);
        int[] intArray58 = new int[] { (-1), 100 };
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) (byte) 1);
        int[] intArray66 = new int[] { (-1), 100 };
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray60, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray68, false);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray48, (int) 'a', 100, (int) (byte) 1, intArray68, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, (int) (byte) -1, (int) (byte) 100, (int) (short) 10, intArray68, false);
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) (byte) -1);
        int int80 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray78, 10);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2 + "'", int80 == 2);
    }

    @Test
    public void test1715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1715");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 1, (int) (byte) 1, (int) (short) -1, intArray32, false);
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        int[] intArray50 = new int[] { (-1), 100 };
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray44, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray52, false);
        int[] intArray59 = new int[] { '#' };
        int int61 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray59, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray44, (int) (short) -1, 1, 2, intArray59, true);
        int[] intArray65 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray59, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, (int) (short) 100, 0, 1, intArray65, false);
        int[] intArray71 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray65, (int) (byte) 0, (int) (byte) 10, (int) (short) -1, intArray71, true);
        int[] intArray75 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray65, (int) ' ');
        int[] intArray77 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray65, 4);
        // The following exception was thrown during execution in test generation
        try {
            int int81 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray77, 10, (int) (byte) -1, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[35]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 1]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1]");
    }

    @Test
    public void test1716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1716");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) '#');
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, 4);
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, 100);
        int[] intArray14 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) (byte) 10);
        java.lang.Class<?> wildcardClass15 = intArray14.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test1717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1717");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray22 = new int[] { ' ', (byte) -1 };
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray22, (-1), (int) ' ', (int) (byte) 10, intArray38, false);
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray50, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray58, false);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray38, (int) 'a', 100, (int) (byte) 1, intArray58, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray12, (int) (short) 100, (int) 'a', (int) (short) 0, intArray38, true);
        int int68 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray12, (int) '4');
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, 10);
        int int74 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray70, (int) '4', (int) ' ', (int) (short) -1);
        java.lang.Class<?> wildcardClass75 = intArray70.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2 + "'", int68 == 2);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test1718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1718");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int int24 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) (short) 1);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) '#');
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 2);
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 4);
        int[] intArray36 = new int[] { ' ', (byte) -1 };
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        int[] intArray50 = new int[] { (-1), 100 };
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray44, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray52, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (-1), (int) ' ', (int) (byte) 10, intArray52, false);
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, 1);
        int int60 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray58, (int) (short) 1);
        int int62 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray58, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray30, 0, 4, 2, intArray58, false);
        int int68 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray58, (int) (byte) 10, (int) '4', (int) (byte) -1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2 + "'", int60 == 2);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2 + "'", int62 == 2);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
    }

    @Test
    public void test1719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1719");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { ' ', (byte) -1 };
        int[] intArray38 = new int[] { (-1), 100 };
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 1);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray40, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray48, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, (-1), (int) ' ', (int) (byte) 10, intArray48, false);
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, 100);
        int int56 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray32, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray24, 10, (int) 'a', (-1), intArray32, true);
        int int60 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) '#');
        int int62 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) ' ');
        int int64 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (byte) 0);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (short) 100);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '#');
        int int72 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray68, (int) (short) 1, (int) '#', (int) (short) 1);
        java.lang.Class<?> wildcardClass73 = intArray68.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2 + "'", int60 == 2);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2 + "'", int62 == 2);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2 + "'", int64 == 2);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test1720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1720");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) ' ');
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray6, (int) (short) 1, (-1), (int) (byte) 0);
        int int14 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray6, 4, 10, 0);
        // The following exception was thrown during execution in test generation
        try {
            int int18 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray6, (int) '#', (-1), (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test1721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1721");
        int[] intArray1 = new int[] { '#' };
        int int3 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray1, (int) (short) 0);
        int[] intArray7 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray1, 100, 0, (int) (short) -1, intArray7, false);
        int[] intArray11 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray1, (int) (byte) -1);
        int[] intArray17 = new int[] { ' ', (byte) -1 };
        int[] intArray23 = new int[] { (-1), 100 };
        int[] intArray25 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray23, (int) (byte) 1);
        int[] intArray31 = new int[] { (-1), 100 };
        int[] intArray33 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray31, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray25, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray33, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray17, (-1), (int) ' ', (int) (byte) 10, intArray33, false);
        int[] intArray39 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray33, 1);
        int int41 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray39, (int) (short) 1);
        int[] intArray43 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray39, (int) 'a');
        int[] intArray49 = new int[] { (-1), 100 };
        int[] intArray51 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray49, (int) (byte) 1);
        int[] intArray57 = new int[] { (-1), 100 };
        int[] intArray59 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray57, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray51, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray59, false);
        int int65 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray51, (int) ' ', (int) (short) -1, (int) (short) 1);
        int int67 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray51, (int) '#');
        int int71 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray51, (int) (short) -1, 100, 10);
        int int75 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray51, 4, (int) ' ', (int) (byte) 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray43, (-1), 1, (int) (byte) 0, intArray51, true);
        int[] intArray79 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray51, 0);
        int int81 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray51, (int) (byte) 10);
        int[] intArray83 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray51, 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray11, (int) '4', (int) (byte) 100, (int) (short) 0, intArray83, true);
        // The following exception was thrown during execution in test generation
        try {
            int int89 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray83, 0, (int) (short) 0, 2);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[35]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2 + "'", int41 == 2);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2 + "'", int65 == 2);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 2 + "'", int67 == 2);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 2 + "'", int81 == 2);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, -1]");
    }

    @Test
    public void test1722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1722");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 1, (int) (byte) 1, (int) (short) -1, intArray32, false);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 10);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) 'a');
        int[] intArray46 = new int[] { ' ', (byte) -1 };
        int[] intArray52 = new int[] { (-1), 100 };
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) (byte) 1);
        int[] intArray60 = new int[] { (-1), 100 };
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray54, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray62, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray46, (-1), (int) ' ', (int) (byte) 10, intArray62, false);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, 1);
        int int70 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray68, (int) (short) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray40, 0, (int) ' ', (int) (short) -1, intArray68, false);
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) (byte) 0);
        int[] intArray78 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray74, (int) (byte) -1, 10, 0, intArray78, true);
        int[] intArray85 = new int[] { '#' };
        int int87 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray85, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray78, (int) (byte) 0, (int) ' ', (int) (byte) 1, intArray85, false);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray91 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray78, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2 + "'", int70 == 2);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[35]");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
    }

    @Test
    public void test1723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1723");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray27 = new int[] { (short) 100, (short) 0, 100, (byte) -1, 10 };
        int int31 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray27, 1, (int) (byte) 100, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, 100, (int) '#', (int) (short) 10, intArray27, false);
        int int35 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, 0);
        int[] intArray37 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (short) 1);
        int int39 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, 4);
        int[] intArray45 = new int[] { (-1), 100 };
        int[] intArray47 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray45, (int) (byte) 1);
        int[] intArray49 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray45, (int) ' ');
        int int53 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray49, (int) (short) 1, (-1), (int) (byte) 0);
        int[] intArray57 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray49, 2, (int) '4', (int) (short) 0, intArray57, true);
        int int63 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray49, (int) (short) -1, (int) ' ', (int) (byte) 1);
        int[] intArray69 = new int[] { (-1), 100 };
        int[] intArray71 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray69, (int) (byte) 1);
        int[] intArray77 = new int[] { (-1), 100 };
        int[] intArray79 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray77, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray71, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray79, false);
        int[] intArray83 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray79, (int) 'a');
        int[] intArray85 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray83, (int) ' ');
        int int89 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray85, 1, (int) (byte) 100, (-1));
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray49, (int) (byte) 1, 2, (int) (short) -1, intArray85, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) (byte) -1, 4, 3, intArray85, false);
        int[] intArray95 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray85, (int) (short) 1);
        int[] intArray97 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray85, (int) '4');
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[100, 0, 100, -1, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2 + "'", int39 == 2);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray97), "[-1, -1]");
    }

    @Test
    public void test1724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1724");
        int[] intArray0 = null;
        int[] intArray5 = new int[] { 10 };
        int[] intArray7 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray5, (int) '4');
        int[] intArray12 = new int[] { '#' };
        int int14 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray12, (int) (short) 0);
        int int16 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray12, (int) (byte) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray7, 10, (int) (byte) 1, (int) (short) 0, intArray12, false);
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) (short) 0);
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) '#');
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray0, (int) (byte) -1, (int) (short) 100, 100, intArray22, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[10]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[35]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[0, 0]");
    }

    @Test
    public void test1725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1725");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) 'a', 100, (int) (byte) 1, intArray38, false);
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (short) 100);
        java.lang.Class<?> wildcardClass47 = intArray46.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass47);
    }

    @Test
    public void test1726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1726");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int int8 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, 0);
        int int12 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray6, 10, (int) ' ', 10);
        int int14 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, (int) (byte) 0);
        int[] intArray20 = new int[] { (-1), 100 };
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 1);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) ' ');
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (short) 100);
        int int28 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray20, 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray6, (int) '4', 100, (int) '#', intArray20, false);
        int[] intArray36 = new int[] { ' ', (byte) -1 };
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        int[] intArray50 = new int[] { (-1), 100 };
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray44, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray52, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (-1), (int) ' ', (int) (byte) 10, intArray52, false);
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, 1);
        int int60 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray58, (int) (short) 1);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) 'a');
        int int64 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray58, 10);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray58, (int) (short) 100);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, (int) (short) 100, (int) (short) 1, (int) (byte) -1, intArray58, false);
        java.lang.Class<?> wildcardClass69 = intArray58.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2 + "'", int60 == 2);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2 + "'", int64 == 2);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test1727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1727");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { (-1), 100 };
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 1);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray22, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray30, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) 10, (int) '4', 10, intArray30, true);
        int int36 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray4, 0);
        int int40 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray4, (int) (byte) 0, (-1), 1);
        int int44 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray4, (int) ' ', (int) (byte) 10, 0);
        // The following exception was thrown during execution in test generation
        try {
            int int48 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray4, (-1), (int) (short) 10, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2 + "'", int40 == 2);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
    }

    @Test
    public void test1728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1728");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 10);
        int[] intArray24 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) (byte) 0, (int) (short) 100, (int) (byte) -1, intArray24, false);
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (short) 10);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, 10);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (short) 1);
        int int42 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray40, 10);
        int[] intArray48 = new int[] { ' ', (byte) -1 };
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        int[] intArray62 = new int[] { (-1), 100 };
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray56, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray64, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray48, (-1), (int) ' ', (int) (byte) 10, intArray64, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray40, 0, (int) 'a', 4, intArray64, false);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, 2);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) (byte) 0, (int) '4', (int) (byte) 1, intArray64, true);
        java.lang.Class<?> wildcardClass75 = intArray64.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2 + "'", int42 == 2);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test1729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1729");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, 0);
        int[] intArray24 = new int[] { (-1), 100 };
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 1);
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray26, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray34, false);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) 'a');
        int int40 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, (int) ' ');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) (short) 100, 10, (int) (byte) -1, intArray38, true);
        // The following exception was thrown during execution in test generation
        try {
            int int46 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, 0, 0, 4);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2 + "'", int40 == 2);
    }

    @Test
    public void test1730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1730");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray19 = new int[] { '#' };
        int int21 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (short) -1, 1, 2, intArray19, true);
        int[] intArray29 = new int[] { ' ', (byte) -1 };
        int[] intArray35 = new int[] { (-1), 100 };
        int[] intArray37 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray35, (int) (byte) 1);
        int[] intArray43 = new int[] { (-1), 100 };
        int[] intArray45 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray43, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray37, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray45, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray29, (-1), (int) ' ', (int) (byte) 10, intArray45, false);
        int int51 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray45, (int) (short) 1);
        int[] intArray57 = new int[] { (-1), 100 };
        int[] intArray59 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray57, (int) (byte) 1);
        int[] intArray65 = new int[] { (-1), 100 };
        int[] intArray67 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray65, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray59, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray67, false);
        int[] intArray71 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray67, (int) 'a');
        int[] intArray73 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray71, (int) ' ');
        int[] intArray75 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray73, (int) (byte) 10);
        int[] intArray77 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray75, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray45, (int) 'a', (int) (short) 10, (int) (byte) 0, intArray75, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray19, (int) (byte) -1, 2, (int) (byte) 0, intArray45, false);
        // The following exception was thrown during execution in test generation
        try {
            int int85 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray45, (int) (short) 100, (int) (short) -1, 2);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2 + "'", int51 == 2);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1]");
    }

    @Test
    public void test1731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1731");
        int[] intArray0 = null;
        int[] intArray6 = new int[] { ' ', (byte) -1 };
        int[] intArray12 = new int[] { (-1), 100 };
        int[] intArray14 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) (byte) 1);
        int[] intArray20 = new int[] { (-1), 100 };
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray14, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray22, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray6, (-1), (int) ' ', (int) (byte) 10, intArray22, false);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, 1);
        int[] intArray34 = new int[] { ' ', (byte) -1 };
        int[] intArray40 = new int[] { (-1), 100 };
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) (byte) 1);
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray42, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray50, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray34, (-1), (int) ' ', (int) (byte) 10, intArray50, false);
        int[] intArray60 = new int[] { (-1), 100 };
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) (byte) 1);
        int[] intArray68 = new int[] { (-1), 100 };
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray62, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray70, false);
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray50, (int) 'a', 100, (int) (byte) 1, intArray70, false);
        int int78 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray70, (int) '4');
        int[] intArray80 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray22, (int) (byte) 10, (int) '#', 0, intArray70, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray0, (int) (byte) 100, (int) (byte) 100, (int) '#', intArray22, true);
        // The following exception was thrown during execution in test generation
        try {
            int int86 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray0, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 2 + "'", int78 == 2);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1]");
    }

    @Test
    public void test1732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1732");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray22 = new int[] { ' ', (byte) -1 };
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray22, (-1), (int) ' ', (int) (byte) 10, intArray38, false);
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray50, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray58, false);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray38, (int) 'a', 100, (int) (byte) 1, intArray58, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray12, (int) (short) 100, (int) 'a', (int) (short) 0, intArray38, true);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (-1));
        int int70 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray68, (int) '4');
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) (byte) 10);
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) (short) 1);
        int int76 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray74, 4);
        java.lang.Class<?> wildcardClass77 = intArray74.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2 + "'", int70 == 2);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[1, 1]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2 + "'", int76 == 2);
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test1733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1733");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) ' ');
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray6, (int) (short) 1, (-1), (int) (byte) 0);
        int int14 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray6, 10, (int) 'a', (int) (short) 10);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (int) '#');
        // The following exception was thrown during execution in test generation
        try {
            int int20 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray6, 3, 2, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
    }

    @Test
    public void test1734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1734");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 1, (int) (byte) 1, (int) (short) -1, intArray32, false);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 10);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 1);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, (int) (byte) 10, (int) (short) 1, 1, intArray46, false);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        int[] intArray64 = new int[] { (-1), 100 };
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray58, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray66, false);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) 'a');
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) ' ');
        int int76 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray72, (int) (byte) -1, 0, (int) (short) 0);
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (-1));
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray32, (int) '4', 1, (int) (short) 0, intArray78, false);
        int int82 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray32, 1);
        int[] intArray84 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) 'a');
        java.lang.Class<?> wildcardClass85 = intArray32.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test1735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1735");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 10);
        int[] intArray26 = new int[] { ' ', (byte) -1 };
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        int[] intArray40 = new int[] { (-1), 100 };
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray34, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray42, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, (-1), (int) ' ', (int) (byte) 10, intArray42, false);
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, 100);
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) '4');
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray50, 1, (int) (byte) 1, (int) (short) -1, intArray56, false);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (short) 10);
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, (int) (short) 0, (int) '#', (int) (byte) 1, intArray64, true);
        int int70 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (int) (byte) -1, (int) (short) 0, (int) (short) 1);
        int int72 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) (byte) 0);
        int int74 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, 3);
        // The following exception was thrown during execution in test generation
        try {
            int int78 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (int) '#', (int) (short) -1, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2 + "'", int70 == 2);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 2 + "'", int72 == 2);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2 + "'", int74 == 2);
    }

    @Test
    public void test1736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1736");
        int[] intArray0 = null;
        int[] intArray4 = null;
        int[] intArray10 = new int[] { ' ', (byte) -1 };
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        int[] intArray24 = new int[] { (-1), 100 };
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray26, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray10, (-1), (int) ' ', (int) (byte) 10, intArray26, false);
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, 100);
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) '4');
        int[] intArray40 = new int[] { ' ', (byte) -1 };
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray40, (-1), (int) ' ', (int) (byte) 10, intArray56, false);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, 100);
        int int64 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray40, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, 10, (int) 'a', (-1), intArray40, true);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, (int) ' ', (int) (byte) 1, (int) (short) -1, intArray40, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray0, (int) (short) 0, (int) (short) 1, (int) (short) -1, intArray40, true);
        int int74 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray40, 10, (int) (short) 100, 1);
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) (byte) 10);
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray76, (int) (short) -1);
        int int80 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray76, 1);
        int[] intArray82 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray76, (int) (byte) 10);
        int[] intArray84 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray82, 0);
        java.lang.Class<?> wildcardClass85 = intArray84.getClass();
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2 + "'", int80 == 2);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test1737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1737");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int int22 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, 1, (int) (byte) 100, (-1));
        java.lang.Class<?> wildcardClass23 = intArray18.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test1738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1738");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { ' ', (byte) -1 };
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray36, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, (-1), (int) ' ', (int) (byte) 10, intArray36, false);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (int) 'a', 100, (int) (byte) 1, intArray56, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, 10, (int) (short) 0, (int) (short) -1, intArray36, true);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, 0);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, 10);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 100);
        int int72 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray70, (int) (byte) 0);
        int int74 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray70, 0);
        int int76 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray70, (int) '4');
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) (byte) 1);
        int[] intArray80 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) (short) 10);
        int[] intArray82 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, 2);
        java.lang.Class<?> wildcardClass83 = intArray82.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 2 + "'", int72 == 2);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2 + "'", int74 == 2);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2 + "'", int76 == 2);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test1739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1739");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 100);
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray26, (-1), 2, (int) (byte) -1);
        int[] intArray34 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, (int) (short) 1, (int) (byte) 100, (int) (byte) -1, intArray34, false);
        int int38 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray26, (int) (short) 1);
        int int40 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray26, 10);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) ' ');
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) (byte) 0);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray62, 0, 1, (-1));
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray26, 100, (int) ' ', 0, intArray62, false);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, (int) (byte) 1);
        java.lang.Class<?> wildcardClass71 = intArray70.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2 + "'", int40 == 2);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test1740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1740");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 1, (int) (byte) 1, (int) (short) -1, intArray32, false);
        int int38 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray32, 1);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) ' ');
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) 'a');
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) ' ');
        int[] intArray71 = new int[] { (short) 100, (short) 0, 100, (byte) -1, 10 };
        int int75 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray71, 1, (int) (byte) 100, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray62, 100, (int) '#', (int) (short) 10, intArray71, false);
        int int79 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray71, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray40, (int) (short) 10, (int) '4', (int) ' ', intArray71, false);
        int[] intArray85 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray71, (int) ' ', 100, 3, intArray85, false);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[100, 0, 100, -1, 10]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
    }

    @Test
    public void test1741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1741");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int int8 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, 0);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, (int) (short) -1);
        int int12 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, (int) '#');
        int int16 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray6, (int) (byte) 1, 0, (int) (byte) 1);
        int int18 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, 2);
        java.lang.Class<?> wildcardClass19 = intArray6.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test1742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1742");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 1);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (short) 1);
        int int28 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) 'a');
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, 0);
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) ' ');
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (short) 1);
        int int36 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray34, (int) (byte) -1);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            int int42 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray34, (int) (short) 1, 0, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
    }

    @Test
    public void test1743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1743");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { ' ', (byte) -1 };
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray36, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, (-1), (int) ' ', (int) (byte) 10, intArray36, false);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (int) 'a', 100, (int) (byte) 1, intArray56, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, 10, (int) (short) 0, (int) (short) -1, intArray36, true);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, 0);
        int int70 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray36, 10, 10, (int) (short) 1);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (short) -1);
        int int74 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, (-1));
        int int78 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray36, 1, (int) (byte) -1, (int) (short) 1);
        int int82 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray36, (int) (byte) 100, (int) (byte) 100, (int) 'a');
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2 + "'", int74 == 2);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 2 + "'", int78 == 2);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
    }

    @Test
    public void test1744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1744");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 1, (int) (byte) 1, (int) (short) -1, intArray32, false);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 10);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 1);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, (int) (byte) 10, (int) (short) 1, 1, intArray46, false);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        int[] intArray64 = new int[] { (-1), 100 };
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray58, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray66, false);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) 'a');
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) ' ');
        int int76 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray72, (int) (byte) -1, 0, (int) (short) 0);
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (-1));
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray32, (int) '4', 1, (int) (short) 0, intArray78, false);
        int[] intArray82 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            int int86 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray32, (int) 'a', 1, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[1, 1]");
    }

    @Test
    public void test1745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1745");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { ' ', (byte) -1 };
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray36, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, (-1), (int) ' ', (int) (byte) 10, intArray36, false);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (int) 'a', 100, (int) (byte) 1, intArray56, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, 10, (int) (short) 0, (int) (short) -1, intArray36, true);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, 0);
        int int70 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray36, 10, 10, (int) (short) 1);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, 0);
        int int74 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray72, (int) (byte) 0);
        int int78 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray72, 4, 0, (int) (byte) 1);
        int int82 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray72, 3, 0, (int) (byte) 1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2 + "'", int74 == 2);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 2 + "'", int78 == 2);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 2 + "'", int82 == 2);
    }

    @Test
    public void test1746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1746");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 1, (int) (byte) 1, (int) (short) -1, intArray32, false);
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        int[] intArray50 = new int[] { (-1), 100 };
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray44, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray52, false);
        int[] intArray59 = new int[] { '#' };
        int int61 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray59, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray44, (int) (short) -1, 1, 2, intArray59, true);
        int[] intArray65 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray59, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, (int) (short) 100, 0, 1, intArray65, false);
        int[] intArray69 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 100);
        int int71 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray32, (-1));
        int[] intArray73 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, 0);
        int[] intArray75 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) -1);
        int int77 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray32, (int) '#');
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[35]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[1, 1]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
    }

    @Test
    public void test1747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1747");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray22 = new int[] { ' ', (byte) -1 };
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray22, (-1), (int) ' ', (int) (byte) 10, intArray38, false);
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray50, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray58, false);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray38, (int) 'a', 100, (int) (byte) 1, intArray58, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray12, (int) (short) 100, (int) 'a', (int) (short) 0, intArray38, true);
        int int68 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, (int) (byte) 0);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (short) -1);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, 0);
        java.lang.Class<?> wildcardClass73 = intArray70.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2 + "'", int68 == 2);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[0, 0]");
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test1748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1748");
        int[] intArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int2 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray0, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1749");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 1, (int) (byte) 1, (int) (short) -1, intArray32, false);
        int int40 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray32, 10, 100, (int) '#');
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 0);
        java.lang.Class<?> wildcardClass43 = intArray42.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test1750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1750");
        int[] intArray1 = new int[] { 10 };
        int[] intArray3 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray1, (int) '4');
        int[] intArray9 = new int[] { ' ', (byte) -1 };
        int[] intArray15 = new int[] { (-1), 100 };
        int[] intArray17 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray15, (int) (byte) 1);
        int[] intArray23 = new int[] { (-1), 100 };
        int[] intArray25 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray23, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray17, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray25, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray9, (-1), (int) ' ', (int) (byte) 10, intArray25, false);
        int[] intArray31 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray9, 100);
        int[] intArray33 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray31, (int) '4');
        int[] intArray39 = new int[] { (-1), 100 };
        int[] intArray41 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray39, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray33, 1, (int) (byte) 1, (int) (short) -1, intArray39, false);
        int[] intArray49 = new int[] { (-1), 100 };
        int[] intArray51 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray49, (int) (byte) 1);
        int[] intArray57 = new int[] { (-1), 100 };
        int[] intArray59 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray57, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray51, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray59, false);
        int[] intArray66 = new int[] { '#' };
        int int68 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray66, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray51, (int) (short) -1, 1, 2, intArray66, true);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray39, (int) (short) 100, 0, 1, intArray72, false);
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray39, (int) (byte) 100);
        int int80 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray39, (int) '#', (int) (short) 100, (-1));
        int[] intArray82 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray39, (int) (short) 100);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray3, 100, (int) ' ', 0, intArray82, true);
        int int86 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray82, (-1));
        int int88 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray82, (int) ' ');
        java.lang.Class<?> wildcardClass89 = intArray82.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[10]");
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[35]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[1, 1]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[1, 1]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 2 + "'", int88 == 2);
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test1751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1751");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray30 = new int[] { ' ', (byte) -1 };
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        int[] intArray44 = new int[] { (-1), 100 };
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray38, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray46, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray30, (-1), (int) ' ', (int) (byte) 10, intArray46, false);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        int[] intArray64 = new int[] { (-1), 100 };
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray58, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray66, false);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray46, (int) 'a', 100, (int) (byte) 1, intArray66, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), 10, (-1), intArray46, true);
        int int76 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray2, 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
    }

    @Test
    public void test1752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1752");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int int18 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray16, 0);
        int int20 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray16, (int) (short) 10);
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) 'a');
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, 10);
        int[] intArray30 = new int[] { ' ', (byte) -1 };
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        int[] intArray44 = new int[] { (-1), 100 };
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray38, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray46, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray30, (-1), (int) ' ', (int) (byte) 10, intArray46, false);
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray30, 100);
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray30, (int) (byte) 100);
        int int58 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray54, (-1), 2, (int) (byte) -1);
        int[] intArray62 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray54, (int) (short) 1, (int) (byte) 100, (int) (byte) -1, intArray62, false);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray54, (int) (short) 1);
        int int68 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray54, 10);
        int[] intArray74 = new int[] { (-1), 100 };
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray74, (int) (byte) 1);
        int[] intArray82 = new int[] { (-1), 100 };
        int[] intArray84 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray82, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray76, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray84, false);
        int[] intArray88 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray84, (int) ' ');
        int[] intArray90 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray88, (int) (byte) 0);
        int int94 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray90, 0, 1, (-1));
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray54, 100, (int) ' ', 0, intArray90, false);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray24, (int) ' ', (int) (byte) 1, (int) ' ', intArray54, false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2 + "'", int68 == 2);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
    }

    @Test
    public void test1753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1753");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 0);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 10);
        int int28 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray26, 0);
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (short) 100);
        int int32 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray26, (int) (byte) 10);
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) '#');
        int[] intArray40 = new int[] { (-1), 100 };
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) (byte) 1);
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray42, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray50, false);
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) 'a');
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) ' ');
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 10);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (short) 100);
        int int62 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray60, (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray34, (int) (short) 0, 0, (int) '#', intArray60, false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 17 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2 + "'", int62 == 2);
    }

    @Test
    public void test1754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1754");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (byte) 0);
        int[] intArray10 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray6, 2, (int) '#', 0, intArray10, true);
        int[] intArray16 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray10, 1, (int) ' ', (int) '#', intArray16, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot load from int array because \"nums\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
    }

    @Test
    public void test1755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1755");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (byte) 0);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray4, 2, 0, (int) (byte) -1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        int[] intArray24 = new int[] { (-1), 100 };
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray26, false);
        int[] intArray34 = new int[] { ' ', (byte) -1 };
        int[] intArray40 = new int[] { (-1), 100 };
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) (byte) 1);
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray42, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray50, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray34, (-1), (int) ' ', (int) (byte) 10, intArray50, false);
        int[] intArray60 = new int[] { (-1), 100 };
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) (byte) 1);
        int[] intArray68 = new int[] { (-1), 100 };
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray62, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray70, false);
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray50, (int) 'a', 100, (int) (byte) 1, intArray70, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, 10, (int) (short) 0, (int) (short) -1, intArray50, true);
        int int80 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray50, 0);
        int[] intArray82 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, 10);
        int[] intArray84 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray82, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, (int) (short) 1, 0, 0, intArray84, false);
        int int88 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray4, (-1));
        int int90 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray4, (int) (byte) 0);
        java.lang.Class<?> wildcardClass91 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2 + "'", int80 == 2);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 2 + "'", int88 == 2);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 2 + "'", int90 == 2);
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test1756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1756");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) ' ');
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (short) 100);
        int int12 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray8, (int) (byte) 100, (int) '#', 4);
        int[] intArray18 = new int[] { ' ', (byte) -1 };
        int[] intArray24 = new int[] { (-1), 100 };
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 1);
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray26, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray34, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (-1), (int) ' ', (int) (byte) 10, intArray34, false);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 100);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) '4');
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray42, 1, (int) (byte) 1, (int) (short) -1, intArray48, false);
        int[] intArray58 = new int[] { (-1), 100 };
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) (byte) 1);
        int[] intArray66 = new int[] { (-1), 100 };
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray60, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray68, false);
        int[] intArray75 = new int[] { '#' };
        int int77 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray75, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray60, (int) (short) -1, 1, 2, intArray75, true);
        int[] intArray81 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray75, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray48, (int) (short) 100, 0, 1, intArray81, false);
        int[] intArray85 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 100);
        int int87 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray48, 1);
        int[] intArray89 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) '#');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray8, (int) ' ', (int) (short) 100, (int) (short) 1, intArray89, true);
        // The following exception was thrown during execution in test generation
        try {
            int int95 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray8, (int) (byte) 0, 4, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[1, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[35]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 1]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[1, 1]");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1 + "'", int87 == 1);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, -1]");
    }

    @Test
    public void test1757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1757");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 1);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (short) 1);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) 'a');
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (-1));
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray30, 2);
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 10);
        java.lang.Class<?> wildcardClass35 = intArray34.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test1758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1758");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 100);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 1);
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) '4');
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        int[] intArray44 = new int[] { (-1), 100 };
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray38, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray46, false);
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) ' ');
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) '4');
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, 2);
        int[] intArray60 = new int[] { ' ', (byte) -1 };
        int[] intArray66 = new int[] { (-1), 100 };
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) (byte) 1);
        int[] intArray74 = new int[] { (-1), 100 };
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray74, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray68, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray76, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray60, (-1), (int) ' ', (int) (byte) 10, intArray76, false);
        int[] intArray82 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray76, 1);
        int int84 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray82, (int) (short) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray54, (int) (byte) 10, (int) '#', (int) ' ', intArray82, false);
        int int88 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray54, (int) (short) -1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (int) (short) 10, (int) (byte) 0, (int) (short) -1, intArray54, true);
        int int92 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray2, (int) (short) 100);
        int[] intArray94 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 2 + "'", int84 == 2);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 2 + "'", int88 == 2);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 2 + "'", int92 == 2);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, -1]");
    }

    @Test
    public void test1759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1759");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 1);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (short) 1);
        int int28 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) 'a');
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, 0);
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) ' ');
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (short) 1);
        int int36 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray34, (int) (byte) -1);
        int[] intArray40 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray34, (int) (short) -1, (int) (byte) 1, (int) (byte) 100, intArray40, true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 50 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
    }

    @Test
    public void test1760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1760");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray19 = new int[] { '#' };
        int int21 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (short) -1, 1, 2, intArray19, true);
        int[] intArray25 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 10);
        int int27 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) -1);
        int int29 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (byte) -1);
        int[] intArray31 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 3);
        java.lang.Class<?> wildcardClass32 = intArray19.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test1761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1761");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) '4');
        int int22 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (int) ' ', 100, (int) (short) 1);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 3);
        int[] intArray30 = new int[] { (-1), 100 };
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray30, (int) (byte) 1);
        int[] intArray38 = new int[] { (-1), 100 };
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray32, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray40, false);
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) ' ');
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) (byte) 0);
        int int50 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray46, 0, 1, (-1));
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) (byte) 0, 10, (int) '4', intArray46, false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 31 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
    }

    @Test
    public void test1762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1762");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 0);
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 1);
        int int24 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (int) ' ', 10, 0);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (short) 10);
        int int28 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) (short) 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray36, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray44, false);
        int[] intArray51 = new int[] { '#' };
        int int53 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray51, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray36, (int) (short) -1, 1, 2, intArray51, true);
        int[] intArray57 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray51, 10);
        int int59 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray51, (int) (short) -1);
        int int61 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray51, (int) (byte) -1);
        int[] intArray63 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray51, 1);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) (short) 100, (int) (short) 1, 10, intArray63, true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 5 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[35]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, -1]");
    }

    @Test
    public void test1763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1763");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 0);
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) '#');
        int[] intArray26 = new int[] { ' ', (byte) -1 };
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        int[] intArray40 = new int[] { (-1), 100 };
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray34, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray42, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, (-1), (int) ' ', (int) (byte) 10, intArray42, false);
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, 100);
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 100);
        int int54 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray50, (int) (short) 10, (-1), (int) (short) 1);
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, 100);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray16, 1, (int) (short) -1, (int) (short) 1, intArray50, false);
        // The following exception was thrown during execution in test generation
        try {
            int int62 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray50, (int) (short) 1, (int) (byte) -1, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2 + "'", int54 == 2);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
    }

    @Test
    public void test1764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1764");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray19 = new int[] { '#' };
        int int21 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (short) -1, 1, 2, intArray19, true);
        int[] intArray25 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 10);
        int[] intArray27 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 0);
        int[] intArray33 = new int[] { ' ', (byte) -1 };
        int[] intArray39 = new int[] { (-1), 100 };
        int[] intArray41 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray39, (int) (byte) 1);
        int[] intArray47 = new int[] { (-1), 100 };
        int[] intArray49 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray47, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray41, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray49, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray33, (-1), (int) ' ', (int) (byte) 10, intArray49, false);
        int[] intArray59 = new int[] { (-1), 100 };
        int[] intArray61 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray59, (int) (byte) 1);
        int[] intArray67 = new int[] { (-1), 100 };
        int[] intArray69 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray67, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray61, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray69, false);
        int[] intArray73 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray69, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray49, (int) 'a', 100, (int) (byte) 1, intArray69, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray27, (int) (short) 0, (int) (byte) 1, (int) (short) 1, intArray49, true);
        int int79 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray27, (int) (byte) -1);
        int[] intArray85 = new int[] { (-1), 100 };
        int[] intArray87 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray85, (int) (byte) 1);
        int[] intArray89 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray85, (int) ' ');
        int[] intArray91 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray85, 10);
        int int93 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray85, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray27, 1, (int) (short) 10, (int) (short) 1, intArray85, true);
        int[] intArray97 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray85, (int) (byte) -1);
        int int99 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray85, 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 2 + "'", int79 == 2);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 1 + "'", int93 == 1);
        org.junit.Assert.assertNotNull(intArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray97), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + 1 + "'", int99 == 1);
    }

    @Test
    public void test1765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1765");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 10);
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray36, false);
        int[] intArray43 = new int[] { '#' };
        int int45 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray43, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (short) -1, 1, 2, intArray43, true);
        int[] intArray49 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray43, 10);
        int[] intArray51 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray43, 100);
        int int53 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray51, (int) (short) 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, (int) (byte) 1, (int) (short) 10, (int) (byte) 1, intArray51, false);
        int int57 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray20, (int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            int int61 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray20, (int) (byte) 1, 10, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[35]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2 + "'", int53 == 2);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2 + "'", int57 == 2);
    }

    @Test
    public void test1766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1766");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) ' ');
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 10);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray2, (int) 'a');
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        int[] intArray24 = new int[] { (-1), 100 };
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray26, false);
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) 'a');
        int[] intArray36 = new int[] { ' ', (byte) -1 };
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        int[] intArray50 = new int[] { (-1), 100 };
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray44, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray52, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (-1), (int) ' ', (int) (byte) 10, intArray52, false);
        int[] intArray62 = new int[] { (-1), 100 };
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, (int) (byte) 1);
        int[] intArray70 = new int[] { (-1), 100 };
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray64, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray72, false);
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray52, (int) 'a', 100, (int) (byte) 1, intArray72, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray26, (int) (short) 100, (int) 'a', (int) (short) 0, intArray52, true);
        int[] intArray82 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (-1));
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray2, 4, (int) (byte) -1, 0, intArray26, true);
        // The following exception was thrown during execution in test generation
        try {
            int int88 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray26, (int) (short) 100, 4, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[0, 1]");
    }

    @Test
    public void test1767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1767");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int int28 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray26, 0);
        int[] intArray33 = new int[] { 10 };
        int[] intArray35 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray33, (int) '4');
        int[] intArray40 = new int[] { '#' };
        int int42 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray40, (int) (short) 0);
        int int44 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray40, (int) (byte) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray35, 10, (int) (byte) 1, (int) (short) 0, intArray40, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, (int) (byte) 1, (int) (byte) 0, (int) (short) 1, intArray40, true);
        int int50 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray40, (int) (short) 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[10]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[35]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
    }

    @Test
    public void test1768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1768");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 100);
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray26, (int) (short) 10, (-1), (int) (short) 1);
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, 100);
        int int34 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray32, (int) (short) 10);
        int int38 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray32, (int) (short) -1, 100, (int) (short) 0);
        java.lang.Class<?> wildcardClass39 = intArray32.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test1769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1769");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) 'a', 100, (int) (byte) 1, intArray38, false);
        int int46 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, (int) '4');
        int int48 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, 0);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        int[] intArray62 = new int[] { (-1), 100 };
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray56, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray64, false);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) 'a');
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) ' ');
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) (byte) 10);
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (int) (byte) 1);
        int int76 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray72, (int) (byte) 100);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray38, 100, (int) (short) -1, 0, intArray72, false);
        int int80 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, 2);
        java.lang.Class<?> wildcardClass81 = intArray38.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2 + "'", int76 == 2);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2 + "'", int80 == 2);
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test1770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1770");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 1, (int) (byte) 1, (int) (short) -1, intArray32, false);
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        int[] intArray50 = new int[] { (-1), 100 };
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray44, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray52, false);
        int[] intArray59 = new int[] { '#' };
        int int61 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray59, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray44, (int) (short) -1, 1, 2, intArray59, true);
        int[] intArray65 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray59, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, (int) (short) 100, 0, 1, intArray65, false);
        int int71 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray32, 100, (int) '#', (int) (byte) 1);
        int[] intArray73 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 10);
        int int77 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray73, 0, (int) (short) 100, 0);
        // The following exception was thrown during execution in test generation
        try {
            int int81 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray73, (int) (byte) 100, 0, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[35]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 1]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
    }

    @Test
    public void test1771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1771");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 0);
        int[] intArray24 = new int[] { (-1), 100 };
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 1);
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray26, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray34, false);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) 'a');
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) ' ');
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (-1));
        int int44 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray42, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) ' ', (int) 'a', 1, intArray42, false);
        int[] intArray52 = new int[] { (-1), 100 };
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) (byte) 1);
        int[] intArray60 = new int[] { (-1), 100 };
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray54, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray62, false);
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, (int) ' ');
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, (int) '4');
        int int72 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray68, 0, 10, (-1));
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray42, (int) (byte) 1, (int) (byte) 0, (-1), intArray68, false);
        int int78 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray68, (int) (short) -1, (int) (byte) 100, 4);
        int int80 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray68, (int) (short) 0);
        int int82 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray68, 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2 + "'", int80 == 2);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 2 + "'", int82 == 2);
    }

    @Test
    public void test1772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1772");
        int[] intArray2 = new int[] { 1, 'a' };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) ' ');
        int int16 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray12, (int) (short) 1, (-1), (int) (byte) 0);
        int[] intArray20 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray12, 2, (int) '4', (int) (short) 0, intArray20, true);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray12, (int) (short) -1, (int) ' ', (int) (byte) 1);
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray12, 0, (int) 'a', 2, intArray32, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray2, (int) '4', 10, 1, intArray32, true);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            int int44 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray2, 10, (int) (short) 10, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[1, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
    }

    @Test
    public void test1773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1773");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 1);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (short) 1);
        int int28 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) 'a');
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, 0);
        int int34 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray24, (int) 'a', 0, (int) (short) 0);
        int[] intArray40 = new int[] { (-1), 100 };
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) (byte) 1);
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (short) 10);
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) '#');
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray24, (int) 'a', (int) ' ', 100, intArray46, false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 66 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
    }

    @Test
    public void test1774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1774");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { ' ', (byte) -1 };
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray36, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, (-1), (int) ' ', (int) (byte) 10, intArray36, false);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (int) 'a', 100, (int) (byte) 1, intArray56, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, 10, (int) (short) 0, (int) (short) -1, intArray36, true);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, 0);
        int[] intArray72 = new int[] { (-1), 100 };
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (int) (byte) 1);
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray74, (int) (short) 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, 2, 10, (int) (short) 1, intArray74, false);
        int[] intArray80 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            int int84 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray36, 3, 0, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1]");
    }

    @Test
    public void test1775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1775");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray19 = new int[] { '#' };
        int int21 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (short) -1, 1, 2, intArray19, true);
        int[] intArray25 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 10);
        int[] intArray27 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 100);
        int int31 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray19, (-1), 0, (int) (short) -1);
        int int33 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) '#');
        // The following exception was thrown during execution in test generation
        try {
            int int37 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray19, (int) '4', (int) (byte) 100, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
    }

    @Test
    public void test1776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1776");
        int[] intArray0 = null;
        int[] intArray6 = new int[] { (-1), 100 };
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (int) (byte) 1);
        int[] intArray14 = new int[] { (-1), 100 };
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray14, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray8, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray16, false);
        int[] intArray23 = new int[] { '#' };
        int int25 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray23, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray8, (int) (short) -1, 1, 2, intArray23, true);
        int[] intArray29 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray23, 10);
        int[] intArray31 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray23, 0);
        int[] intArray37 = new int[] { ' ', (byte) -1 };
        int[] intArray43 = new int[] { (-1), 100 };
        int[] intArray45 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray43, (int) (byte) 1);
        int[] intArray51 = new int[] { (-1), 100 };
        int[] intArray53 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray51, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray45, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray53, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray37, (-1), (int) ' ', (int) (byte) 10, intArray53, false);
        int[] intArray63 = new int[] { (-1), 100 };
        int[] intArray65 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray63, (int) (byte) 1);
        int[] intArray71 = new int[] { (-1), 100 };
        int[] intArray73 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray71, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray65, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray73, false);
        int[] intArray77 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray73, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray53, (int) 'a', 100, (int) (byte) 1, intArray73, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray31, (int) (short) 0, (int) (byte) 1, (int) (short) 1, intArray53, true);
        int int83 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray31, (int) (byte) -1);
        int[] intArray85 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray31, 1);
        int int87 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray31, (int) ' ');
        int[] intArray89 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray31, (int) 'a');
        int[] intArray91 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray89, 0);
        int[] intArray93 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray91, 3);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray0, 10, (int) (short) -1, (int) ' ', intArray91, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[35]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 2 + "'", int83 == 2);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 2 + "'", int87 == 2);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, -1]");
    }

    @Test
    public void test1777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1777");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int int8 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, 0);
        int int12 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray6, 10, (int) ' ', 10);
        int[] intArray17 = new int[] { '#' };
        int int19 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray17, (int) (short) 0);
        int[] intArray23 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray17, 100, 0, (int) (short) -1, intArray23, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray6, (int) (short) -1, (int) (short) 1, (-1), intArray17, true);
        int[] intArray29 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (int) (short) -1);
        java.lang.Class<?> wildcardClass30 = intArray29.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[35]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[0, 1]");
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test1778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1778");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) ' ');
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 10);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray2, (int) 'a');
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        int[] intArray24 = new int[] { (-1), 100 };
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray26, false);
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) 'a');
        int[] intArray36 = new int[] { ' ', (byte) -1 };
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        int[] intArray50 = new int[] { (-1), 100 };
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray44, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray52, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (-1), (int) ' ', (int) (byte) 10, intArray52, false);
        int[] intArray62 = new int[] { (-1), 100 };
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, (int) (byte) 1);
        int[] intArray70 = new int[] { (-1), 100 };
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray64, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray72, false);
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray52, (int) 'a', 100, (int) (byte) 1, intArray72, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray26, (int) (short) 100, (int) 'a', (int) (short) 0, intArray52, true);
        int[] intArray82 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (-1));
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray2, 4, (int) (byte) -1, 0, intArray26, true);
        int[] intArray86 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, 4);
        int int88 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray26, (int) (byte) 1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 2 + "'", int88 == 2);
    }

    @Test
    public void test1779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1779");
        int[] intArray1 = new int[] { 10 };
        int[] intArray3 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray1, (int) '4');
        int[] intArray8 = new int[] { '#' };
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) (short) 0);
        int int12 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) (byte) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray3, 10, (int) (byte) 1, (int) (short) 0, intArray8, false);
        int int18 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray3, 4, (int) (short) 0, (-1));
        java.lang.Class<?> wildcardClass19 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[10]");
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[35]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test1780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1780");
        int[] intArray4 = new int[] { (byte) -1, 2, (short) 1, '#' };
        int int6 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray4, (int) '4');
        int int8 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray4, 10);
        int[] intArray14 = new int[] { (-1), 100 };
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray14, (int) (byte) 1);
        int[] intArray22 = new int[] { (-1), 100 };
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray16, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray24, false);
        int[] intArray32 = new int[] { ' ', (byte) -1 };
        int[] intArray38 = new int[] { (-1), 100 };
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 1);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray40, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray48, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, (-1), (int) ' ', (int) (byte) 10, intArray48, false);
        int[] intArray58 = new int[] { (-1), 100 };
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) (byte) 1);
        int[] intArray66 = new int[] { (-1), 100 };
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray60, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray68, false);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray48, (int) 'a', 100, (int) (byte) 1, intArray68, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray16, 10, (int) (short) 0, (int) (short) -1, intArray48, true);
        int int78 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray48, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) 100, (int) '4', (int) (short) 10, intArray48, true);
        // The following exception was thrown during execution in test generation
        try {
            int int84 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray4, (int) (short) 1, 3, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, 2, 1, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 2 + "'", int78 == 2);
    }

    @Test
    public void test1781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1781");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 0);
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) '#');
        int int22 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray16, (int) ' ');
        int[] intArray27 = new int[] { 10 };
        int[] intArray29 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray27, (int) '4');
        int[] intArray34 = new int[] { '#' };
        int int36 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray34, (int) (short) 0);
        int int38 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray34, (int) (byte) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray29, 10, (int) (byte) 1, (int) (short) 0, intArray34, false);
        int[] intArray45 = new int[] { 10 };
        int[] intArray47 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray45, (int) '4');
        int[] intArray52 = new int[] { '#' };
        int int54 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray52, (int) (short) 0);
        int int56 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray52, (int) (byte) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray47, 10, (int) (byte) 1, (int) (short) 0, intArray52, false);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray29, 0, 0, 1, intArray60, false);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray16, 0, (int) (short) 10, (int) (byte) 10, intArray29, true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 10 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[10]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[35]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[10]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[35]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
    }

    @Test
    public void test1782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1782");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray19 = new int[] { '#' };
        int int21 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (short) -1, 1, 2, intArray19, true);
        int[] intArray25 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 10);
        int[] intArray27 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 0);
        int[] intArray33 = new int[] { ' ', (byte) -1 };
        int[] intArray39 = new int[] { (-1), 100 };
        int[] intArray41 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray39, (int) (byte) 1);
        int[] intArray47 = new int[] { (-1), 100 };
        int[] intArray49 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray47, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray41, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray49, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray33, (-1), (int) ' ', (int) (byte) 10, intArray49, false);
        int[] intArray59 = new int[] { (-1), 100 };
        int[] intArray61 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray59, (int) (byte) 1);
        int[] intArray67 = new int[] { (-1), 100 };
        int[] intArray69 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray67, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray61, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray69, false);
        int[] intArray73 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray69, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray49, (int) 'a', 100, (int) (byte) 1, intArray69, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray27, (int) (short) 0, (int) (byte) 1, (int) (short) 1, intArray49, true);
        int int79 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray27, (int) (short) -1);
        int int83 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray27, (int) (byte) 10, (int) '4', (int) (short) 10);
        int[] intArray85 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray27, (int) 'a');
        int int87 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray27, (-1));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 2 + "'", int79 == 2);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 2 + "'", int87 == 2);
    }

    @Test
    public void test1783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1783");
        int[] intArray0 = null;
        int[] intArray6 = new int[] { ' ', (byte) -1 };
        int[] intArray12 = new int[] { (-1), 100 };
        int[] intArray14 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) (byte) 1);
        int[] intArray20 = new int[] { (-1), 100 };
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray14, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray22, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray6, (-1), (int) ' ', (int) (byte) 10, intArray22, false);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, 1);
        int[] intArray34 = new int[] { ' ', (byte) -1 };
        int[] intArray40 = new int[] { (-1), 100 };
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) (byte) 1);
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray42, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray50, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray34, (-1), (int) ' ', (int) (byte) 10, intArray50, false);
        int[] intArray60 = new int[] { (-1), 100 };
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) (byte) 1);
        int[] intArray68 = new int[] { (-1), 100 };
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray62, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray70, false);
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray50, (int) 'a', 100, (int) (byte) 1, intArray70, false);
        int int78 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray70, (int) '4');
        int[] intArray80 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray22, (int) (byte) 10, (int) '#', 0, intArray70, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray0, (int) (byte) 100, (int) (byte) 100, (int) '#', intArray22, true);
        int[] intArray86 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, 0);
        java.lang.Class<?> wildcardClass87 = intArray22.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 2 + "'", int78 == 2);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test1784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1784");
        int[] intArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int4 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray0, 1, (int) (short) 1, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1785");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) ' ');
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (short) 100);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray2, 1);
        int int14 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray2, (-1), 1, 2);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 0);
        int int18 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray2, (int) (byte) 10);
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) '4');
        int[] intArray24 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (int) (byte) 0, (int) (byte) 10, (-1), intArray24, true);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[1, 1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
    }

    @Test
    public void test1786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1786");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 0);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 10);
        int int28 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray26, 0);
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray26, (int) (byte) 100);
        int int34 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray26, (int) ' ', (int) '#', (int) (byte) 10);
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 10);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
    }

    @Test
    public void test1787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1787");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray19 = new int[] { '#' };
        int int21 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (short) -1, 1, 2, intArray19, true);
        int[] intArray25 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 10);
        int[] intArray27 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, (int) 'a');
        int int29 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) ' ');
        int int33 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray19, 0, (int) ' ', (int) (short) -1);
        int[] intArray35 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, (int) 'a');
        java.lang.Class<?> wildcardClass36 = intArray35.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test1788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1788");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 1, (int) (byte) 1, (int) (short) -1, intArray32, false);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 10);
        int int40 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray32, (int) '#');
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) '4');
        int int44 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray42, 3);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2 + "'", int44 == 2);
    }

    @Test
    public void test1789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1789");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { (-1), 100 };
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 1);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray22, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray30, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) 10, (int) '4', 10, intArray30, true);
        int int36 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray4, 0);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (byte) 100);
        int int42 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray38, (int) (byte) 0, 100, (int) (short) 1);
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (short) -1);
        int[] intArray50 = new int[] { ' ', (byte) -1 };
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        int[] intArray64 = new int[] { (-1), 100 };
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray58, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray66, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray50, (-1), (int) ' ', (int) (byte) 10, intArray66, false);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, 100);
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) (byte) 100);
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, 1);
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) '4');
        int[] intArray80 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray78, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray44, (int) (short) 10, (int) '4', 1, intArray78, false);
        int int86 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray44, (int) (byte) 0, 1, (int) (short) -1);
        int int88 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray44, (-1));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
    }

    @Test
    public void test1790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1790");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int int24 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) (short) 1);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) '#');
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 2);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (short) 10);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, 10);
        int[] intArray44 = null;
        int[] intArray50 = new int[] { (-1), 100 };
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) (byte) 1);
        int[] intArray58 = new int[] { (-1), 100 };
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray52, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray60, false);
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) ' ');
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) (byte) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray44, 10, (int) (short) 1, (int) (short) 0, intArray66, false);
        int int72 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray66, 0, (int) '4', (int) (short) 10);
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (-1));
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray38, (-1), (int) (short) -1, (int) (byte) 0, intArray66, true);
        int int80 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray66, 0, (int) (byte) 1, 0);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray28, 2, 0, (int) '4', intArray66, true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 26 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[0, -1]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
    }

    @Test
    public void test1791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1791");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) '#');
        int[] intArray14 = new int[] { ' ', (byte) -1 };
        int[] intArray20 = new int[] { (-1), 100 };
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 1);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray22, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray30, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray14, (-1), (int) ' ', (int) (byte) 10, intArray30, false);
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray14, 100);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) '4');
        int[] intArray44 = new int[] { (-1), 100 };
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray38, 1, (int) (byte) 1, (int) (short) -1, intArray44, false);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        int[] intArray62 = new int[] { (-1), 100 };
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray56, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray64, false);
        int[] intArray71 = new int[] { '#' };
        int int73 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray71, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray56, (int) (short) -1, 1, 2, intArray71, true);
        int[] intArray77 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray71, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray44, (int) (short) 100, 0, 1, intArray77, false);
        int[] intArray81 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) (byte) 100);
        int int85 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray44, (int) '#', (int) (short) 100, (-1));
        int[] intArray87 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) (short) 100);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray8, (-1), 2, 0, intArray44, true);
        int int91 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray44, 0);
        int int93 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray44, (int) '#');
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[35]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[1, 1]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[1, 1]");
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 1 + "'", int91 == 1);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 1 + "'", int93 == 1);
    }

    @Test
    public void test1792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1792");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray19 = new int[] { '#' };
        int int21 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (short) -1, 1, 2, intArray19, true);
        int[] intArray25 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) '#');
        int int27 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray25, (int) (byte) 1);
        int[] intArray31 = null;
        int[] intArray37 = new int[] { ' ', (byte) -1 };
        int[] intArray43 = new int[] { (-1), 100 };
        int[] intArray45 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray43, (int) (byte) 1);
        int[] intArray51 = new int[] { (-1), 100 };
        int[] intArray53 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray51, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray45, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray53, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray37, (-1), (int) ' ', (int) (byte) 10, intArray53, false);
        int[] intArray63 = new int[] { (-1), 100 };
        int[] intArray65 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray63, (int) (byte) 1);
        int[] intArray71 = new int[] { (-1), 100 };
        int[] intArray73 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray71, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray65, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray73, false);
        int[] intArray77 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray73, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray53, (int) 'a', 100, (int) (byte) 1, intArray73, false);
        int int81 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray73, (int) '4');
        int int85 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray73, (int) ' ', (int) (byte) 1, 0);
        int int87 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray73, 0);
        int int89 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray73, 100);
        int[] intArray91 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray73, (int) (short) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray31, (int) (byte) 10, 100, (int) '4', intArray73, true);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray25, (int) '#', (int) '4', (int) 'a', intArray31, true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 74 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 2 + "'", int81 == 2);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 2 + "'", int87 == 2);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 2 + "'", int89 == 2);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, -1]");
    }

    @Test
    public void test1793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1793");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) ' ');
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (short) 100);
        int[] intArray14 = new int[] { (-1), 100 };
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray14, (int) (byte) 1);
        int[] intArray22 = new int[] { (-1), 100 };
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray16, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray24, false);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) ' ');
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 0);
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) '#');
        int[] intArray38 = new int[] { (-1), 100 };
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 1);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray40, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray48, false);
        int[] intArray55 = new int[] { '#' };
        int int57 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray55, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray40, (int) (short) -1, 1, 2, intArray55, true);
        int[] intArray61 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray55, 10);
        int[] intArray63 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray55, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray28, (int) (byte) 0, (int) (short) 10, (int) (byte) 1, intArray63, false);
        int[] intArray67 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray8, (int) '4', (int) (byte) 1, (int) (short) 0, intArray67, false);
        int[] intArray71 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) '#');
        int int73 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray71, (int) (short) 100);
        java.lang.Class<?> wildcardClass74 = intArray71.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[1, 1]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[35]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 2 + "'", int73 == 2);
        org.junit.Assert.assertNotNull(wildcardClass74);
    }

    @Test
    public void test1794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1794");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 100);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 1);
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) '4');
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        int[] intArray44 = new int[] { (-1), 100 };
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray38, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray46, false);
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) ' ');
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) '4');
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, 2);
        int[] intArray60 = new int[] { ' ', (byte) -1 };
        int[] intArray66 = new int[] { (-1), 100 };
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) (byte) 1);
        int[] intArray74 = new int[] { (-1), 100 };
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray74, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray68, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray76, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray60, (-1), (int) ' ', (int) (byte) 10, intArray76, false);
        int[] intArray82 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray76, 1);
        int int84 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray82, (int) (short) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray54, (int) (byte) 10, (int) '#', (int) ' ', intArray82, false);
        int int88 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray54, (int) (short) -1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (int) (short) 10, (int) (byte) 0, (int) (short) -1, intArray54, true);
        int int92 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray2, (int) (short) 100);
        int int94 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray2, 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 2 + "'", int84 == 2);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 2 + "'", int88 == 2);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 2 + "'", int92 == 2);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
    }

    @Test
    public void test1795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1795");
        int[] intArray1 = new int[] { 10 };
        int[] intArray3 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray1, (int) '4');
        int[] intArray8 = new int[] { '#' };
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) (short) 0);
        int int12 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) (byte) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray3, 10, (int) (byte) 1, (int) (short) 0, intArray8, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, 1);
        int int20 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray8, (int) (byte) 10, (int) 'a', (int) '#');
        int int22 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) '#');
        // The following exception was thrown during execution in test generation
        try {
            int int26 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray8, (int) (byte) 100, 2, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[10]");
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[35]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
    }

    @Test
    public void test1796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1796");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int int8 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, 0);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, 4);
        int[] intArray16 = new int[] { ' ', (byte) -1 };
        int[] intArray22 = new int[] { (-1), 100 };
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, (int) (byte) 1);
        int[] intArray30 = new int[] { (-1), 100 };
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray30, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray24, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray32, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray16, (-1), (int) ' ', (int) (byte) 10, intArray32, false);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, 100);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 100);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, 1);
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) '4');
        int[] intArray50 = new int[] { ' ', (byte) -1 };
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        int[] intArray64 = new int[] { (-1), 100 };
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray58, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray66, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray50, (-1), (int) ' ', (int) (byte) 10, intArray66, false);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray16, (-1), (int) (byte) 1, (int) (byte) 0, intArray66, true);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray6, (int) '#', (int) (short) -1, 0, intArray16, false);
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (short) -1);
        int int82 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray16, (int) (byte) -1, (int) (short) 100, (int) ' ');
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
    }

    @Test
    public void test1797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1797");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (-1));
        int int24 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray16, (int) (short) 0, (int) (byte) 0, 1);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray16, (int) (byte) 10);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, 4);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) ' ');
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, 10);
        int[] intArray46 = new int[] { ' ', (byte) -1 };
        int[] intArray52 = new int[] { (-1), 100 };
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) (byte) 1);
        int[] intArray60 = new int[] { (-1), 100 };
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray54, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray62, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray46, (-1), (int) ' ', (int) (byte) 10, intArray62, false);
        int[] intArray72 = new int[] { (-1), 100 };
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (int) (byte) 1);
        int[] intArray80 = new int[] { (-1), 100 };
        int[] intArray82 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray80, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray74, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray82, false);
        int[] intArray86 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray82, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray62, (int) 'a', 100, (int) (byte) 1, intArray82, false);
        int int90 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray82, (int) '4');
        int int92 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray82, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray34, 0, (int) (short) -1, 0, intArray82, false);
        int int96 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray34, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, 0, (int) 'a', (int) (short) 1, intArray34, true);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 2 + "'", int90 == 2);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 2 + "'", int92 == 2);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 1 + "'", int96 == 1);
    }

    @Test
    public void test1798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1798");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int int8 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, 0);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, 4);
        int int14 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray6, (int) (short) 0, (int) (short) 10, (int) (short) 1);
        int int18 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray6, (int) (short) 100, (int) ' ', 4);
        int[] intArray24 = new int[] { ' ', (byte) -1 };
        int[] intArray30 = new int[] { (-1), 100 };
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray30, (int) (byte) 1);
        int[] intArray38 = new int[] { (-1), 100 };
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray32, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray40, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray24, (-1), (int) ' ', (int) (byte) 10, intArray40, false);
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, 100);
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) '4');
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray48, 1, (int) (byte) 1, (int) (short) -1, intArray54, false);
        int[] intArray64 = new int[] { (-1), 100 };
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) (byte) 1);
        int[] intArray72 = new int[] { (-1), 100 };
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray66, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray74, false);
        int[] intArray81 = new int[] { '#' };
        int int83 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray81, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray66, (int) (short) -1, 1, 2, intArray81, true);
        int[] intArray87 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray81, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray54, (int) (short) 100, 0, 1, intArray87, false);
        int int93 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray54, 100, (int) '#', (int) (byte) 1);
        int[] intArray95 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray6, (int) (short) 0, 10, (int) (byte) 0, intArray95, true);
        int int99 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, (int) ' ');
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[35]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, 1]");
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + 2 + "'", int99 == 2);
    }

    @Test
    public void test1799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1799");
        int[] intArray1 = new int[] { '#' };
        int int3 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray1, (int) (short) 0);
        int[] intArray7 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray1, 100, 0, (int) (short) -1, intArray7, false);
        int[] intArray11 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray1, (int) (byte) -1);
        java.lang.Class<?> wildcardClass12 = intArray11.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[35]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test1800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1800");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray19 = new int[] { '#' };
        int int21 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (short) -1, 1, 2, intArray19, true);
        int[] intArray25 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 10);
        int int27 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) -1);
        int int29 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (byte) -1);
        int[] intArray31 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 3);
        int[] intArray33 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray31, (int) (short) 0);
        int int37 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray33, (int) (byte) 100, (int) ' ', (int) (short) -1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
    }

    @Test
    public void test1801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1801");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) 'a', 100, (int) (byte) 1, intArray38, false);
        int int46 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, (int) '4');
        int int48 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, 0);
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, 0);
        int int52 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray50, 0);
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            int int58 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray54, 2, (int) (short) 0, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
    }

    @Test
    public void test1802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1802");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray19 = new int[] { '#' };
        int int21 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (short) -1, 1, 2, intArray19, true);
        int[] intArray25 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 10);
        int[] intArray27 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 0);
        int[] intArray33 = new int[] { ' ', (byte) -1 };
        int[] intArray39 = new int[] { (-1), 100 };
        int[] intArray41 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray39, (int) (byte) 1);
        int[] intArray47 = new int[] { (-1), 100 };
        int[] intArray49 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray47, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray41, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray49, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray33, (-1), (int) ' ', (int) (byte) 10, intArray49, false);
        int[] intArray59 = new int[] { (-1), 100 };
        int[] intArray61 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray59, (int) (byte) 1);
        int[] intArray67 = new int[] { (-1), 100 };
        int[] intArray69 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray67, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray61, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray69, false);
        int[] intArray73 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray69, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray49, (int) 'a', 100, (int) (byte) 1, intArray69, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray27, (int) (short) 0, (int) (byte) 1, (int) (short) 1, intArray49, true);
        int int79 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray27, (int) (byte) -1);
        int[] intArray81 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray27, 1);
        int[] intArray83 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray81, (int) (short) -1);
        int[] intArray85 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray81, (int) (short) 100);
        int[] intArray87 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray85, (int) '4');
        int[] intArray89 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray87, 0);
        java.lang.Class<?> wildcardClass90 = intArray87.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 2 + "'", int79 == 2);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test1803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1803");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 10);
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (short) 1);
        java.lang.Class<?> wildcardClass23 = intArray22.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test1804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1804");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { (-1), 100 };
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 1);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray22, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray30, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) 10, (int) '4', 10, intArray30, true);
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, 2);
        int int40 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray4, (int) (short) 1, (int) (short) 100, (int) (byte) -1);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, 100);
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) ' ');
        int int46 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray42, (int) (short) 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
    }

    @Test
    public void test1805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1805");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { (-1), 100 };
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 1);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray22, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray30, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) 10, (int) '4', 10, intArray30, true);
        int[] intArray40 = new int[] { ' ', (byte) -1 };
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray40, (-1), (int) ' ', (int) (byte) 10, intArray56, false);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, 0);
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, (int) ' ');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, 2, (int) 'a', 4, intArray62, true);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, 2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
    }

    @Test
    public void test1806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1806");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { ' ', (byte) -1 };
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray36, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, (-1), (int) ' ', (int) (byte) 10, intArray36, false);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (int) 'a', 100, (int) (byte) 1, intArray56, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, 10, (int) (short) 0, (int) (short) -1, intArray36, true);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, 0);
        int int70 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray36, 10, 10, (int) (short) 1);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (short) -1);
        int int74 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, (-1));
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, 3);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2 + "'", int74 == 2);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
    }

    @Test
    public void test1807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1807");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray19 = new int[] { '#' };
        int int21 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (short) -1, 1, 2, intArray19, true);
        int[] intArray25 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 10);
        int[] intArray27 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 0);
        int[] intArray33 = new int[] { ' ', (byte) -1 };
        int[] intArray39 = new int[] { (-1), 100 };
        int[] intArray41 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray39, (int) (byte) 1);
        int[] intArray47 = new int[] { (-1), 100 };
        int[] intArray49 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray47, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray41, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray49, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray33, (-1), (int) ' ', (int) (byte) 10, intArray49, false);
        int[] intArray59 = new int[] { (-1), 100 };
        int[] intArray61 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray59, (int) (byte) 1);
        int[] intArray67 = new int[] { (-1), 100 };
        int[] intArray69 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray67, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray61, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray69, false);
        int[] intArray73 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray69, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray49, (int) 'a', 100, (int) (byte) 1, intArray69, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray27, (int) (short) 0, (int) (byte) 1, (int) (short) 1, intArray49, true);
        int[] intArray79 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray27, (int) 'a');
        int[] intArray83 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray27, (int) (byte) -1, 0, (int) (short) -1, intArray83, false);
        java.lang.Class<?> wildcardClass86 = intArray27.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test1808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1808");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 1, (int) (byte) 1, (int) (short) -1, intArray32, false);
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        int[] intArray50 = new int[] { (-1), 100 };
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray44, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray52, false);
        int[] intArray59 = new int[] { '#' };
        int int61 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray59, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray44, (int) (short) -1, 1, 2, intArray59, true);
        int[] intArray65 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray59, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, (int) (short) 100, 0, 1, intArray65, false);
        int[] intArray69 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 100);
        int int71 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray32, (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            int int75 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray32, 3, 0, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[35]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[1, 1]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
    }

    @Test
    public void test1809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1809");
        int[] intArray0 = null;
        int int4 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray0, 1, 100, (int) '4');
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test1810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1810");
        int[] intArray1 = new int[] { 10 };
        int[] intArray3 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray1, (int) '4');
        int[] intArray9 = new int[] { ' ', (byte) -1 };
        int[] intArray15 = new int[] { (-1), 100 };
        int[] intArray17 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray15, (int) (byte) 1);
        int[] intArray23 = new int[] { (-1), 100 };
        int[] intArray25 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray23, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray17, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray25, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray9, (-1), (int) ' ', (int) (byte) 10, intArray25, false);
        int[] intArray31 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray25, 0);
        int int33 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray31, (int) (byte) 0);
        int int35 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray31, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray1, (int) '#', (int) (byte) 1, (int) (byte) -1, intArray31, false);
        java.lang.Class<?> wildcardClass38 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[10]");
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test1811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1811");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray22 = new int[] { (-1), 100 };
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, (int) (byte) 1);
        int[] intArray30 = new int[] { (-1), 100 };
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray30, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray24, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray32, false);
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) 'a');
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) ' ');
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray16, (int) (byte) 1, (int) 'a', 0, intArray38, true);
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, 100);
        java.lang.Class<?> wildcardClass45 = intArray16.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test1812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1812");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray22 = new int[] { ' ', (byte) -1 };
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray22, (-1), (int) ' ', (int) (byte) 10, intArray38, false);
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray50, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray58, false);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray38, (int) 'a', 100, (int) (byte) 1, intArray58, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray12, (int) (short) 100, (int) 'a', (int) (short) 0, intArray38, true);
        int int68 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, 2);
        int int72 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray38, (int) (byte) 0, (int) (byte) 1, (-1));
        // The following exception was thrown during execution in test generation
        try {
            int int76 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray38, (int) '#', 2, 2);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2 + "'", int68 == 2);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
    }

    @Test
    public void test1813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1813");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 1, (int) (byte) 1, (int) (short) -1, intArray32, false);
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        int[] intArray50 = new int[] { (-1), 100 };
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray44, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray52, false);
        int[] intArray59 = new int[] { '#' };
        int int61 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray59, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray44, (int) (short) -1, 1, 2, intArray59, true);
        int[] intArray65 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray59, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, (int) (short) 100, 0, 1, intArray65, false);
        int[] intArray69 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 100);
        int int71 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray32, 1);
        int[] intArray73 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) '#');
        int int77 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray73, (int) (byte) 100, (int) (short) 100, (int) ' ');
        int int81 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray73, (int) (short) 0, (int) 'a', 2);
        int int85 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray73, (int) (byte) 1, (int) (short) 0, (int) (short) 0);
        int int87 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray73, (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            int int91 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray73, (int) '4', (int) (byte) 1, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[35]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[1, 1]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 2 + "'", int87 == 2);
    }

    @Test
    public void test1814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1814");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int int28 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray26, 0);
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray26, (int) ' ');
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
    }

    @Test
    public void test1815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1815");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 1, (int) (byte) 1, (int) (short) -1, intArray32, false);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 10);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) 'a');
        int[] intArray46 = new int[] { ' ', (byte) -1 };
        int[] intArray52 = new int[] { (-1), 100 };
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) (byte) 1);
        int[] intArray60 = new int[] { (-1), 100 };
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray54, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray62, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray46, (-1), (int) ' ', (int) (byte) 10, intArray62, false);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, 1);
        int int70 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray68, (int) (short) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray40, 0, (int) ' ', (int) (short) -1, intArray68, false);
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) (byte) 0);
        int int76 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray68, (int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            int int80 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray68, (-1), (int) (short) -1, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2 + "'", int70 == 2);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2 + "'", int76 == 2);
    }

    @Test
    public void test1816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1816");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 100);
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray26, (int) (short) -1, (int) (byte) -1, (int) (short) 1);
        int int34 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray26, (int) (short) 100, (int) '#', 3);
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        int int40 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray36, (int) 'a', (int) (byte) -1, (int) (byte) 1);
        int int44 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray36, (int) '#', 10, (int) (short) -1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2 + "'", int40 == 2);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
    }

    @Test
    public void test1817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1817");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int int8 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, 0);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, (int) (short) -1);
        int int12 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, (int) '#');
        int[] intArray18 = new int[] { (-1), 100 };
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 1);
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray20, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray28, false);
        int[] intArray35 = new int[] { '#' };
        int int37 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray35, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray20, (int) (short) -1, 1, 2, intArray35, true);
        int[] intArray41 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray35, 10);
        int[] intArray43 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray35, 100);
        int int45 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray43, (int) (short) 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray6, (int) (short) 10, (int) (short) 1, 1, intArray43, false);
        int[] intArray49 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, 0);
        java.lang.Class<?> wildcardClass50 = intArray6.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[35]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass50);
    }

    @Test
    public void test1818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1818");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 1, (int) (byte) 1, (int) (short) -1, intArray32, false);
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        int[] intArray50 = new int[] { (-1), 100 };
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray44, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray52, false);
        int[] intArray59 = new int[] { '#' };
        int int61 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray59, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray44, (int) (short) -1, 1, 2, intArray59, true);
        int[] intArray65 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray59, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, (int) (short) 100, 0, 1, intArray65, false);
        int[] intArray71 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray65, (int) (byte) 0, (int) (byte) 10, (int) (short) -1, intArray71, true);
        int[] intArray75 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray65, (int) ' ');
        int[] intArray81 = new int[] { (-1), 100 };
        int[] intArray83 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray81, (int) (byte) 1);
        int[] intArray85 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray81, (int) ' ');
        int int89 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray85, (int) (short) 1, (-1), (int) (byte) 0);
        int int93 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray85, 10, (int) 'a', (int) (short) 10);
        int[] intArray95 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray85, (int) (byte) 100);
        int[] intArray97 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray95, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray65, (int) (byte) 1, 3, 0, intArray97, true);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[35]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 1]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 1 + "'", int89 == 1);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray97), "[-1, -1]");
    }

    @Test
    public void test1819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1819");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { (-1), 100 };
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 1);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray22, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray30, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) 10, (int) '4', 10, intArray30, true);
        int int36 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray4, 0);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (byte) 100);
        int int42 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray38, (int) (byte) 0, 100, (int) (short) 1);
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (short) -1);
        int[] intArray50 = new int[] { ' ', (byte) -1 };
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        int[] intArray64 = new int[] { (-1), 100 };
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray58, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray66, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray50, (-1), (int) ' ', (int) (byte) 10, intArray66, false);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, 100);
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (int) '4');
        int[] intArray80 = new int[] { (-1), 100 };
        int[] intArray82 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray80, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray74, 1, (int) (byte) 1, (int) (short) -1, intArray80, false);
        int[] intArray86 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray80, (int) (short) 10);
        int int88 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray80, (int) '#');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray44, (int) 'a', (int) 'a', 4, intArray80, false);
        int int94 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray44, (int) (byte) 100, 100, 10);
        int[] intArray96 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) (short) 0);
        int[] intArray98 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) (byte) -1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[0, 0]");
        org.junit.Assert.assertNotNull(intArray98);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray98), "[-1, -1]");
    }

    @Test
    public void test1820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1820");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { ' ', (byte) -1 };
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray36, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, (-1), (int) ' ', (int) (byte) 10, intArray36, false);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (int) 'a', 100, (int) (byte) 1, intArray56, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, 10, (int) (short) 0, (int) (short) -1, intArray36, true);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, 0);
        int[] intArray72 = new int[] { (-1), 100 };
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (int) (byte) 1);
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray74, (int) (short) 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, 2, 10, (int) (short) 1, intArray74, false);
        int int80 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, (int) (short) 0);
        int int84 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray36, (-1), (int) (short) 10, (int) (byte) -1);
        int[] intArray86 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            int int90 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray36, 100, (int) (byte) 1, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2 + "'", int80 == 2);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[0, 1]");
    }

    @Test
    public void test1821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1821");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 1, (int) (byte) 1, (int) (short) -1, intArray32, false);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 10);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) 'a');
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        int[] intArray63 = new int[] { '#' };
        int int65 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray63, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (short) -1, 1, 2, intArray63, true);
        int[] intArray69 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray63, 10);
        int[] intArray71 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray63, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, 1, 2, 1, intArray63, true);
        int int75 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray32, 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[35]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
    }

    @Test
    public void test1822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1822");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) 'a', 100, (int) (byte) 1, intArray38, false);
        int int46 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, (int) '4');
        int int50 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray38, (int) ' ', (int) (byte) 1, 0);
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, 100);
        int int54 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray52, 2);
        int int56 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray52, (int) (short) -1);
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) '#');
        int int60 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray52, 10);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2 + "'", int54 == 2);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2 + "'", int56 == 2);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2 + "'", int60 == 2);
    }

    @Test
    public void test1823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1823");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, 10);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) 'a');
        int int12 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, 0);
        int[] intArray18 = new int[] { ' ', (byte) -1 };
        int[] intArray24 = new int[] { (-1), 100 };
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 1);
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray26, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray34, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (-1), (int) ' ', (int) (byte) 10, intArray34, false);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 100);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) '4');
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray42, 1, (int) (byte) 1, (int) (short) -1, intArray48, false);
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (short) 10);
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (short) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray8, (int) (short) 100, (int) (short) 1, 0, intArray56, false);
        int[] intArray64 = new int[] { ' ', (byte) -1 };
        int[] intArray70 = new int[] { (-1), 100 };
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) (byte) 1);
        int[] intArray78 = new int[] { (-1), 100 };
        int[] intArray80 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray78, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray72, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray80, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray64, (-1), (int) ' ', (int) (byte) 10, intArray80, false);
        int[] intArray86 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, 100);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray8, (int) ' ', (int) 'a', (int) (byte) 1, intArray86, true);
        int int92 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray8, (int) (byte) 100, (int) (short) 100, (int) (short) -1);
        int int96 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray8, 0, 2, (int) (byte) 1);
        int int98 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) (short) 1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 0 + "'", int96 == 0);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 2 + "'", int98 == 2);
    }

    @Test
    public void test1824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1824");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) ' ');
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (short) 100);
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (short) 10);
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (short) 0);
        int int14 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray2, (int) '4');
        java.lang.Class<?> wildcardClass15 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[1, 1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test1825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1825");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 1, (int) (byte) 1, (int) (short) -1, intArray32, false);
        int int40 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray32, 0, (int) (short) 100, (int) '4');
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) ' ');
        int[] intArray66 = new int[] { (-1), 100 };
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) (byte) 1);
        int[] intArray74 = new int[] { (-1), 100 };
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray74, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray68, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray76, false);
        int[] intArray80 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray76, (int) 'a');
        int[] intArray82 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray80, (int) ' ');
        int[] intArray84 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray82, (int) (byte) 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray60, (int) (byte) 1, (int) 'a', 0, intArray82, true);
        int int88 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray82, (int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray32, (int) (byte) -1, (int) 'a', (int) (byte) 100, intArray82, false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 2 + "'", int88 == 2);
    }

    @Test
    public void test1826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1826");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int int8 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, 0);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, (int) (short) -1);
        int[] intArray16 = new int[] { ' ', (byte) -1 };
        int[] intArray22 = new int[] { (-1), 100 };
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, (int) (byte) 1);
        int[] intArray30 = new int[] { (-1), 100 };
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray30, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray24, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray32, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray16, (-1), (int) ' ', (int) (byte) 10, intArray32, false);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, 100);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) '4');
        int[] intArray46 = new int[] { ' ', (byte) -1 };
        int[] intArray52 = new int[] { (-1), 100 };
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) (byte) 1);
        int[] intArray60 = new int[] { (-1), 100 };
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray54, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray62, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray46, (-1), (int) ' ', (int) (byte) 10, intArray62, false);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, 100);
        int int70 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray46, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray38, 10, (int) 'a', (-1), intArray46, true);
        int int74 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray46, (int) ' ');
        int int76 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray46, (int) '4');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray6, (int) (short) 0, (int) (short) 10, (int) (byte) 0, intArray46, false);
        int[] intArray80 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) 'a');
        int[] intArray82 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, 100);
        java.lang.Class<?> wildcardClass83 = intArray46.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2 + "'", int74 == 2);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2 + "'", int76 == 2);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test1827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1827");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, 10);
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (int) (short) 1);
        int int12 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray10, 10);
        int[] intArray18 = new int[] { ' ', (byte) -1 };
        int[] intArray24 = new int[] { (-1), 100 };
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 1);
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray26, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray34, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (-1), (int) ' ', (int) (byte) 10, intArray34, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray10, 0, (int) 'a', 4, intArray34, false);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, 2);
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray50, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray58, false);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) ' ');
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, (int) (byte) 0);
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) (byte) 1);
        int int70 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray64, (int) ' ', 10, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray34, 2, (int) (byte) 100, 4, intArray64, true);
        int int74 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray34, (int) (short) 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2 + "'", int74 == 2);
    }

    @Test
    public void test1828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1828");
        int[] intArray1 = new int[] { '#' };
        int int3 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray1, (int) (short) 0);
        int[] intArray9 = new int[] { ' ', (byte) -1 };
        int[] intArray15 = new int[] { (-1), 100 };
        int[] intArray17 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray15, (int) (byte) 1);
        int[] intArray23 = new int[] { (-1), 100 };
        int[] intArray25 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray23, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray17, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray25, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray9, (-1), (int) ' ', (int) (byte) 10, intArray25, false);
        int[] intArray31 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray25, 1);
        int int33 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray31, (int) (short) 1);
        int int35 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray31, (int) 'a');
        int int37 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray31, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray1, (-1), (int) (byte) 0, (int) (byte) 1, intArray31, false);
        int[] intArray41 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray1, (int) '#');
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[35]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2 + "'", int37 == 2);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[0, 0]");
    }

    @Test
    public void test1829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1829");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int int22 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (int) (byte) -1, 0, (int) (short) 0);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (-1));
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) (short) 1);
        int int28 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) '4');
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
    }

    @Test
    public void test1830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1830");
        int[] intArray0 = null;
        int[] intArray4 = null;
        int[] intArray10 = new int[] { ' ', (byte) -1 };
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        int[] intArray24 = new int[] { (-1), 100 };
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray26, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray10, (-1), (int) ' ', (int) (byte) 10, intArray26, false);
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, 100);
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) '4');
        int[] intArray40 = new int[] { ' ', (byte) -1 };
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray40, (-1), (int) ' ', (int) (byte) 10, intArray56, false);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, 100);
        int int64 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray40, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, 10, (int) 'a', (-1), intArray40, true);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, (int) ' ', (int) (byte) 1, (int) (short) -1, intArray40, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray0, (int) (short) 0, (int) (short) 1, (int) (short) -1, intArray40, true);
        int int74 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray40, 10, (int) (short) 100, 1);
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) '4');
        int int78 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray40, 2);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
    }

    @Test
    public void test1831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1831");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { ' ', (byte) -1 };
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray36, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, (-1), (int) ' ', (int) (byte) 10, intArray36, false);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (int) 'a', 100, (int) (byte) 1, intArray56, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, 10, (int) (short) 0, (int) (short) -1, intArray36, true);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, 0);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, 10);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 100);
        int int72 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray70, (int) (byte) 0);
        int int74 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray70, 0);
        int int76 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray70, (int) ' ');
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, 100);
        int int80 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray78, (int) (byte) 100);
        int int82 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray78, (int) '#');
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 2 + "'", int72 == 2);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2 + "'", int74 == 2);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2 + "'", int76 == 2);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2 + "'", int80 == 2);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 2 + "'", int82 == 2);
    }

    @Test
    public void test1832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1832");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 0);
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 1);
        int int24 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (int) ' ', 10, 0);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (short) 10);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) '4');
        int[] intArray34 = new int[] { ' ', (byte) -1 };
        int[] intArray40 = new int[] { (-1), 100 };
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) (byte) 1);
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray42, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray50, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray34, (-1), (int) ' ', (int) (byte) 10, intArray50, false);
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, 1);
        int int58 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray56, (int) (short) 1);
        int int60 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray56, (int) 'a');
        int int62 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray56, 0);
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, 0);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray26, 1, (int) (short) 0, 3, intArray64, true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2 + "'", int58 == 2);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2 + "'", int60 == 2);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2 + "'", int62 == 2);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
    }

    @Test
    public void test1833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1833");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 0);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            int int30 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray24, (int) '4', (int) (short) 0, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
    }

    @Test
    public void test1834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1834");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 1, (int) (byte) 1, (int) (short) -1, intArray32, false);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 10);
        int int40 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, (int) ' ');
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, 0);
        int[] intArray47 = new int[] { 10 };
        int[] intArray49 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray47, (int) '4');
        int[] intArray54 = new int[] { '#' };
        int int56 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray54, (int) (short) 0);
        int int58 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray54, (int) (byte) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray49, 10, (int) (byte) 1, (int) (short) 0, intArray54, false);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, 1);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray54, (int) (byte) 10, (int) 'a', (int) '#');
        int int68 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray54, (int) '#');
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray42, (int) ' ', (int) (short) 1, (int) '4', intArray54, true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 26 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2 + "'", int40 == 2);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[10]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[35]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
    }

    @Test
    public void test1835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1835");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 10);
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) ' ');
        int[] intArray28 = new int[] { ' ', (byte) -1 };
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray36, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray44, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray28, (-1), (int) ' ', (int) (byte) 10, intArray44, false);
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray22, 100, (int) (short) 100, (-1), intArray50, true);
        int[] intArray58 = new int[] { (-1), 100 };
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) (byte) 1);
        int[] intArray66 = new int[] { (-1), 100 };
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray60, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray68, false);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) 'a');
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (int) ' ');
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray74, (int) (byte) 10);
        int int78 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray74, (int) (short) -1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray22, (int) (byte) 1, (-1), (int) (short) 1, intArray74, true);
        int[] intArray82 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray74, (int) '4');
        int int84 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray82, (int) (byte) -1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 2 + "'", int78 == 2);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 2 + "'", int84 == 2);
    }

    @Test
    public void test1836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1836");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 10);
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) ' ');
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray22, (int) (byte) 0, (int) ' ', (int) (byte) 0);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, 0);
        java.lang.Class<?> wildcardClass29 = intArray22.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test1837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1837");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int int8 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, 0);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, (int) (short) -1);
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (int) (byte) 0);
        int[] intArray18 = new int[] { ' ', (byte) -1 };
        int[] intArray24 = new int[] { (-1), 100 };
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 1);
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray26, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray34, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (-1), (int) ' ', (int) (byte) 10, intArray34, false);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, 0);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) ' ');
        int int46 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray42, 0, 2, (int) (short) -1);
        int int50 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray42, 1, (int) 'a', (int) (byte) -1);
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, 10);
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray12, 1, 0, 2, intArray54, false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
    }

    @Test
    public void test1838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1838");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, 10);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) 'a');
        int int12 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, 0);
        int[] intArray18 = new int[] { ' ', (byte) -1 };
        int[] intArray24 = new int[] { (-1), 100 };
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 1);
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray26, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray34, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (-1), (int) ' ', (int) (byte) 10, intArray34, false);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 100);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) '4');
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray42, 1, (int) (byte) 1, (int) (short) -1, intArray48, false);
        int[] intArray58 = new int[] { (-1), 100 };
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) (byte) 1);
        int[] intArray66 = new int[] { (-1), 100 };
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray60, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray68, false);
        int[] intArray75 = new int[] { '#' };
        int int77 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray75, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray60, (int) (short) -1, 1, 2, intArray75, true);
        int[] intArray81 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray75, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray48, (int) (short) 100, 0, 1, intArray81, false);
        int[] intArray87 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray81, (int) (byte) 0, (int) (byte) 10, (int) (short) -1, intArray87, true);
        int[] intArray91 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray81, (int) ' ');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray8, (int) (short) 10, (int) (byte) 100, 0, intArray91, false);
        int[] intArray95 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray91, (int) '#');
        int[] intArray97 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray95, 0);
        int[] intArray99 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray95, (int) (byte) 1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[35]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 1]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray97), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray99);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray99), "[-1, -1]");
    }

    @Test
    public void test1839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1839");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, 10);
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (int) (short) 1);
        int int12 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray10, 10);
        // The following exception was thrown during execution in test generation
        try {
            int int16 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray10, 0, (int) (short) 0, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
    }

    @Test
    public void test1840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1840");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 1, (int) (byte) 1, (int) (short) -1, intArray32, false);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 10);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) 'a');
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) ' ');
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) (byte) 0);
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, (int) (byte) 1);
        int int68 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray62, (int) ' ', 10, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, 4, 100, (int) (short) -1, intArray62, true);
        int int74 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray62, (int) '4', (-1), 1);
        java.lang.Class<?> wildcardClass75 = intArray62.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2 + "'", int74 == 2);
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test1841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1841");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 10);
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray36, false);
        int[] intArray43 = new int[] { '#' };
        int int45 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray43, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (short) -1, 1, 2, intArray43, true);
        int[] intArray49 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray43, 10);
        int[] intArray51 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray43, 100);
        int int53 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray51, (int) (short) 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, (int) (byte) 1, (int) (short) 10, (int) (byte) 1, intArray51, false);
        // The following exception was thrown during execution in test generation
        try {
            int int59 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray51, 4, (int) (byte) 0, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[35]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2 + "'", int53 == 2);
    }

    @Test
    public void test1842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1842");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) '4');
        int int20 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) (byte) -1);
        java.lang.Class<?> wildcardClass21 = intArray18.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test1843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1843");
        int[] intArray4 = new int[] { (byte) -1, 2, (short) 1, '#' };
        int int6 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray4, (int) '4');
        int int8 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray4, 10);
        int[] intArray14 = new int[] { ' ', (byte) -1 };
        int[] intArray20 = new int[] { (-1), 100 };
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 1);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray22, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray30, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray14, (-1), (int) ' ', (int) (byte) 10, intArray30, false);
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray14, 100);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) '4');
        int[] intArray44 = new int[] { (-1), 100 };
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray38, 1, (int) (byte) 1, (int) (short) -1, intArray44, false);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        int[] intArray62 = new int[] { (-1), 100 };
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray56, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray64, false);
        int[] intArray71 = new int[] { '#' };
        int int73 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray71, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray56, (int) (short) -1, 1, 2, intArray71, true);
        int[] intArray77 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray71, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray44, (int) (short) 100, 0, 1, intArray77, false);
        int[] intArray81 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) (byte) 100);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, 4, (int) (short) 10, 3, intArray81, true);
        java.lang.Class<?> wildcardClass84 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, 2, 1, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[35]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[1, 1]");
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test1844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1844");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray27 = new int[] { (short) 100, (short) 0, 100, (byte) -1, 10 };
        int int31 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray27, 1, (int) (byte) 100, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, 100, (int) '#', (int) (short) 10, intArray27, false);
        int int35 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, 0);
        int[] intArray37 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) 'a');
        int[] intArray39 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray37, 2);
        int[] intArray41 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray37, 4);
        int[] intArray43 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray41, (int) '#');
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[100, 0, 100, -1, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1]");
    }

    @Test
    public void test1845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1845");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (-1));
        int int24 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray16, (int) (short) 0, (int) (byte) 0, 1);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray16, (int) (byte) 10);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, 4);
        int int32 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray16, (int) (short) 100, 10, (int) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            int int36 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray16, (int) (short) -1, 4, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
    }

    @Test
    public void test1846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1846");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) ' ');
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray6, (int) (short) 1, (-1), (int) (byte) 0);
        int[] intArray14 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray6, 2, (int) '4', (int) (short) 0, intArray14, true);
        int int20 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray6, (int) (short) -1, (int) ' ', (int) (byte) 1);
        int int22 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, (int) (short) 10);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (int) (short) 1);
        java.lang.Class<?> wildcardClass25 = intArray24.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test1847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1847");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 100);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 1);
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) '4');
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 0);
        int int36 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray32, (int) (short) 100, (int) (byte) 0, (int) (byte) 1);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 0);
        java.lang.Class<?> wildcardClass39 = intArray38.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test1848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1848");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { ' ', (byte) -1 };
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray36, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, (-1), (int) ' ', (int) (byte) 10, intArray36, false);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (int) 'a', 100, (int) (byte) 1, intArray56, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, 10, (int) (short) 0, (int) (short) -1, intArray36, true);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, 0);
        int[] intArray72 = new int[] { (-1), 100 };
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (int) (byte) 1);
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray74, (int) (short) 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, 2, 10, (int) (short) 1, intArray74, false);
        int int80 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, (int) (short) 0);
        int int84 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray36, (-1), (int) (short) 10, (int) (byte) -1);
        int[] intArray86 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            int int90 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray86, (-1), (-1), (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2 + "'", int80 == 2);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[0, 1]");
    }

    @Test
    public void test1849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1849");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) '#');
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) (short) 0);
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        java.lang.Class<?> wildcardClass13 = intArray12.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1850");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 10);
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) ' ');
        int[] intArray28 = new int[] { ' ', (byte) -1 };
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray36, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray44, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray28, (-1), (int) ' ', (int) (byte) 10, intArray44, false);
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray22, 100, (int) (short) 100, (-1), intArray50, true);
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, (int) (byte) -1);
        java.lang.Class<?> wildcardClass55 = intArray54.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[0, 1]");
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test1851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1851");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 10);
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) ' ');
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray22, (int) (byte) 0, (int) ' ', (int) (byte) 0);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, 0);
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 100);
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, 100);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
    }

    @Test
    public void test1852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1852");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { (-1), 100 };
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 1);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray22, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray30, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) 10, (int) '4', 10, intArray30, true);
        int int36 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray4, 0);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (byte) 100);
        int int42 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray38, (int) (byte) 0, 100, (int) (short) 1);
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (short) -1);
        int[] intArray50 = new int[] { ' ', (byte) -1 };
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        int[] intArray64 = new int[] { (-1), 100 };
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray58, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray66, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray50, (-1), (int) ' ', (int) (byte) 10, intArray66, false);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, 100);
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) (byte) 100);
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, 1);
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) '4');
        int[] intArray80 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray78, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray44, (int) (short) 10, (int) '4', 1, intArray78, false);
        int int86 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray44, (int) (byte) 0, 1, (int) (short) -1);
        int[] intArray88 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, 3);
        int[] intArray90 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) (byte) 0);
        java.lang.Class<?> wildcardClass91 = intArray90.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[0, 0]");
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test1853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1853");
        int[] intArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int4 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray0, (int) (byte) 10, (int) (byte) 0, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1854");
        int[] intArray1 = new int[] { 10 };
        int[] intArray3 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray1, (int) '4');
        int[] intArray9 = new int[] { (-1), 100 };
        int[] intArray11 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray9, (int) (byte) 1);
        int[] intArray17 = new int[] { (-1), 100 };
        int[] intArray19 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray17, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray11, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray19, false);
        int[] intArray26 = new int[] { '#' };
        int int28 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray26, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray11, (int) (short) -1, 1, 2, intArray26, true);
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, 10);
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, 0);
        int[] intArray40 = new int[] { ' ', (byte) -1 };
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray40, (-1), (int) ' ', (int) (byte) 10, intArray56, false);
        int[] intArray66 = new int[] { (-1), 100 };
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) (byte) 1);
        int[] intArray74 = new int[] { (-1), 100 };
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray74, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray68, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray76, false);
        int[] intArray80 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray76, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray56, (int) 'a', 100, (int) (byte) 1, intArray76, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray34, (int) (short) 0, (int) (byte) 1, (int) (short) 1, intArray56, true);
        int int86 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray34, (int) (byte) -1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray3, (int) 'a', 10, 0, intArray34, false);
        // The following exception was thrown during execution in test generation
        try {
            int int92 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray3, (int) '#', (int) (byte) -1, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[10]");
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[35]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 2 + "'", int86 == 2);
    }

    @Test
    public void test1855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1855");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, 10);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) 'a');
        int int12 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, 0);
        int[] intArray14 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (short) 10);
        int int18 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray8, (int) (byte) 10, (int) (short) 0, (int) (byte) 0);
        int[] intArray24 = new int[] { (-1), 100 };
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 1);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (short) 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray8, (-1), 0, 1, intArray28, true);
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) 'a');
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) -1);
        int[] intArray40 = new int[] { ' ', (byte) -1 };
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray40, (-1), (int) ' ', (int) (byte) 10, intArray56, false);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, 1);
        int int64 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray62, (int) (short) 1);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray62, (int) 'a');
        int int68 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray62, 0);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, (int) ' ');
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, (int) (short) 1);
        int int74 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray72, (int) '4');
        int int78 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray72, (int) (short) 10, (int) (byte) 1, (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray34, (-1), 0, (int) (short) 100, intArray72, false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[0, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2 + "'", int64 == 2);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2 + "'", int68 == 2);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2 + "'", int74 == 2);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
    }

    @Test
    public void test1856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1856");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 0);
        int int22 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, 0, 1, (-1));
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (int) (byte) 10, (int) (short) 1, 0);
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        int[] intArray40 = new int[] { (-1), 100 };
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray34, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray42, false);
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) 'a');
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) ' ');
        int[] intArray57 = new int[] { (short) 100, (short) 0, 100, (byte) -1, 10 };
        int int61 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray57, 1, (int) (byte) 100, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, 100, (int) '#', (int) (short) 10, intArray57, false);
        int int65 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray48, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) (short) 100, 1, (int) (byte) 0, intArray48, true);
        int[] intArray73 = new int[] { (-1), 100 };
        int[] intArray75 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray73, (int) (byte) 1);
        int[] intArray77 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray75, (int) (short) 10);
        int[] intArray79 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray75, (int) '#');
        int int81 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray79, (int) (short) 0);
        int int83 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray79, (int) ' ');
        int int85 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray79, (int) (short) -1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, (int) (short) 100, (int) (byte) 0, 0, intArray79, true);
        java.lang.Class<?> wildcardClass88 = intArray79.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[100, 0, 100, -1, 10]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2 + "'", int65 == 2);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 2 + "'", int81 == 2);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 2 + "'", int83 == 2);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 2 + "'", int85 == 2);
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test1857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1857");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 10);
        int[] intArray24 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) (byte) 0, (int) (short) 100, (int) (byte) -1, intArray24, false);
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (short) 10);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, 10);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (short) 1);
        int int42 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray40, 10);
        int[] intArray48 = new int[] { ' ', (byte) -1 };
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        int[] intArray62 = new int[] { (-1), 100 };
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray56, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray64, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray48, (-1), (int) ' ', (int) (byte) 10, intArray64, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray40, 0, (int) 'a', 4, intArray64, false);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, 2);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) (byte) 0, (int) '4', (int) (byte) 1, intArray64, true);
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, 0);
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) (byte) 1);
        java.lang.Class<?> wildcardClass79 = intArray64.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2 + "'", int42 == 2);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test1858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1858");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, 10);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) 'a');
        int int12 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, 0);
        int[] intArray18 = new int[] { ' ', (byte) -1 };
        int[] intArray24 = new int[] { (-1), 100 };
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 1);
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray26, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray34, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (-1), (int) ' ', (int) (byte) 10, intArray34, false);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 100);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) '4');
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray42, 1, (int) (byte) 1, (int) (short) -1, intArray48, false);
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (short) 10);
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (short) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray8, (int) (short) 100, (int) (short) 1, 0, intArray56, false);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (short) -1);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, 0);
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, 100);
        int int68 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray64, (-1), (int) (short) -1, (int) (byte) 1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[0, 0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2 + "'", int68 == 2);
    }

    @Test
    public void test1859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1859");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) 'a', 100, (int) (byte) 1, intArray38, false);
        int int46 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, (int) (short) 1);
        int int48 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, (int) (byte) 1);
        int int50 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, 4);
        int[] intArray56 = new int[] { ' ', (byte) -1 };
        int[] intArray62 = new int[] { (-1), 100 };
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, (int) (byte) 1);
        int[] intArray70 = new int[] { (-1), 100 };
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray64, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray72, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray56, (-1), (int) ' ', (int) (byte) 10, intArray72, false);
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, 1);
        int int80 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray78, (int) (short) 1);
        int int82 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray78, (int) 'a');
        int int84 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray78, 0);
        int[] intArray86 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray78, (int) ' ');
        int[] intArray88 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray78, (int) (short) 1);
        int[] intArray90 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray88, (int) (byte) 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray38, (int) (byte) -1, (int) (byte) 1, (int) (short) -1, intArray88, true);
        int[] intArray96 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray38, (int) '#', (int) '4', 0, intArray96, false);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2 + "'", int80 == 2);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 2 + "'", int82 == 2);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 2 + "'", int84 == 2);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1]");
    }

    @Test
    public void test1860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1860");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { ' ', (byte) -1 };
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray36, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, (-1), (int) ' ', (int) (byte) 10, intArray36, false);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (int) 'a', 100, (int) (byte) 1, intArray56, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, 10, (int) (short) 0, (int) (short) -1, intArray36, true);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, 0);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, 10);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 100);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 0);
        int int76 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, (int) (byte) 0);
        java.lang.Class<?> wildcardClass77 = intArray36.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2 + "'", int76 == 2);
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test1861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1861");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 10);
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) ' ');
        int[] intArray28 = new int[] { ' ', (byte) -1 };
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray36, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray44, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray28, (-1), (int) ' ', (int) (byte) 10, intArray44, false);
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray22, 100, (int) (short) 100, (-1), intArray50, true);
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, (int) (byte) -1);
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, (int) (byte) 1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
    }

    @Test
    public void test1862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1862");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 0);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 10);
        int int28 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray26, 0);
        int[] intArray32 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 10, (int) ' ', (int) (byte) 0, intArray32, true);
        int int36 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray26, (int) (byte) 0);
        int int38 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray26, (int) (byte) 100);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
    }

    @Test
    public void test1863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1863");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 0);
        int int22 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, 0, 1, (-1));
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (int) (byte) 10, (int) (short) 1, 0);
        int int28 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) (short) 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray36, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray44, false);
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) ' ');
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, 0);
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, 10, (int) (short) 100, (int) (byte) 100, intArray52, true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
    }

    @Test
    public void test1864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1864");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) ' ');
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray6, (int) (short) 1, (-1), (int) (byte) 0);
        int int14 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray6, 10, (int) 'a', (int) (short) 10);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (int) '#');
        int[] intArray22 = new int[] { ' ', (byte) -1 };
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray22, (-1), (int) ' ', (int) (byte) 10, intArray38, false);
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, 100);
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, (int) (byte) 100);
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, 1);
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, (int) '4');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray6, (-1), 1, (-1), intArray22, true);
        int int56 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray6, (int) ' ', (int) 'a', (int) '4');
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (int) (short) 100);
        int int60 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, (int) (short) 10);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2 + "'", int60 == 2);
    }

    @Test
    public void test1865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1865");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 0);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (byte) 0);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) 'a');
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
    }

    @Test
    public void test1866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1866");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 100);
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray26, (int) (short) -1, (int) (byte) -1, (int) (short) 1);
        int int34 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray26, (int) (short) 100, (int) '#', 3);
        int int36 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray26, (int) (byte) 100);
        int int40 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray26, 0, (int) (short) 100, 2);
        java.lang.Class<?> wildcardClass41 = intArray26.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test1867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1867");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 100);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) 'a');
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray36, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray44, false);
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) 'a');
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) ' ');
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) (byte) 10);
        int[] intArray58 = new int[] { (-1), 100 };
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) (byte) 1);
        int[] intArray66 = new int[] { (-1), 100 };
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray60, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray68, false);
        int[] intArray75 = new int[] { '#' };
        int int77 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray75, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray60, (int) (short) -1, 1, 2, intArray75, true);
        int[] intArray81 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray75, 10);
        int[] intArray83 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray75, 100);
        int int85 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray83, (int) (short) 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray52, (int) (byte) 1, (int) (short) 10, (int) (byte) 1, intArray83, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray26, (int) ' ', (int) 'a', 2, intArray83, true);
        int int91 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray26, 100);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[35]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 2 + "'", int85 == 2);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 2 + "'", int91 == 2);
    }

    @Test
    public void test1868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1868");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int int22 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (int) (byte) -1, 0, (int) (short) 0);
        java.lang.Class<?> wildcardClass23 = intArray18.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test1869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1869");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { (-1), 100 };
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 1);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray22, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray30, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) 10, (int) '4', 10, intArray30, true);
        int int36 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray4, 0);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (byte) 100);
        int int42 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray38, (int) (byte) 0, 100, (int) (short) 1);
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (short) -1);
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            int int50 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray44, (int) (byte) 0, 3, 4);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
    }

    @Test
    public void test1870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1870");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 1);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (short) 1);
        int int28 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) 'a');
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, 0);
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) ' ');
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (short) 1);
        int int36 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray34, (int) '4');
        java.lang.Class<?> wildcardClass37 = intArray34.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test1871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1871");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray27 = new int[] { (short) 100, (short) 0, 100, (byte) -1, 10 };
        int int31 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray27, 1, (int) (byte) 100, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, 100, (int) '#', (int) (short) 10, intArray27, false);
        int[] intArray35 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (short) 1);
        int int37 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) (byte) 10);
        int[] intArray41 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, 100, (int) (short) -1, 1, intArray41, false);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[100, 0, 100, -1, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2 + "'", int37 == 2);
    }

    @Test
    public void test1872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1872");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) '4');
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 2);
        int[] intArray26 = new int[] { ' ', (byte) -1 };
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        int[] intArray40 = new int[] { (-1), 100 };
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray34, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray42, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, (-1), (int) ' ', (int) (byte) 10, intArray42, false);
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, 1);
        int int50 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray48, (int) (short) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, (int) (byte) 10, (int) '#', (int) ' ', intArray48, false);
        int int54 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray20, (int) (short) -1);
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, 100);
        // The following exception was thrown during execution in test generation
        try {
            int int60 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray56, 4, 2, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2 + "'", int54 == 2);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
    }

    @Test
    public void test1873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1873");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 1, (int) (byte) 1, (int) (short) -1, intArray32, false);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 10);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) 'a');
        int[] intArray46 = new int[] { ' ', (byte) -1 };
        int[] intArray52 = new int[] { (-1), 100 };
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) (byte) 1);
        int[] intArray60 = new int[] { (-1), 100 };
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray54, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray62, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray46, (-1), (int) ' ', (int) (byte) 10, intArray62, false);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, 1);
        int int70 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray68, (int) (short) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray40, 0, (int) ' ', (int) (short) -1, intArray68, false);
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) (byte) 0);
        int int76 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray74, 10);
        int int78 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray74, (int) (short) 0);
        int int82 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray74, (int) ' ', 2, (int) (byte) -1);
        java.lang.Class<?> wildcardClass83 = intArray74.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2 + "'", int70 == 2);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2 + "'", int76 == 2);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 2 + "'", int78 == 2);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test1874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1874");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray19 = new int[] { '#' };
        int int21 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (short) -1, 1, 2, intArray19, true);
        int[] intArray25 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 10);
        int[] intArray27 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 0);
        int[] intArray33 = new int[] { ' ', (byte) -1 };
        int[] intArray39 = new int[] { (-1), 100 };
        int[] intArray41 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray39, (int) (byte) 1);
        int[] intArray47 = new int[] { (-1), 100 };
        int[] intArray49 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray47, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray41, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray49, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray33, (-1), (int) ' ', (int) (byte) 10, intArray49, false);
        int[] intArray59 = new int[] { (-1), 100 };
        int[] intArray61 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray59, (int) (byte) 1);
        int[] intArray67 = new int[] { (-1), 100 };
        int[] intArray69 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray67, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray61, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray69, false);
        int[] intArray73 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray69, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray49, (int) 'a', 100, (int) (byte) 1, intArray69, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray27, (int) (short) 0, (int) (byte) 1, (int) (short) 1, intArray49, true);
        int int79 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray27, (int) (byte) -1);
        int[] intArray85 = new int[] { (-1), 100 };
        int[] intArray87 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray85, (int) (byte) 1);
        int[] intArray89 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray85, (int) ' ');
        int[] intArray91 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray85, 10);
        int int93 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray85, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray27, 1, (int) (short) 10, (int) (short) 1, intArray85, true);
        java.lang.Class<?> wildcardClass96 = intArray27.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 2 + "'", int79 == 2);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 1 + "'", int93 == 1);
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test1875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1875");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 0);
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) '#');
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray36, false);
        int[] intArray43 = new int[] { '#' };
        int int45 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray43, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (short) -1, 1, 2, intArray43, true);
        int[] intArray49 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray43, 10);
        int[] intArray51 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray43, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray16, (int) (byte) 0, (int) (short) 10, (int) (byte) 1, intArray51, false);
        java.lang.Class<?> wildcardClass54 = intArray51.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[35]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test1876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1876");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int int18 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray4, (int) ' ', (int) (short) -1, (int) (short) 1);
        int int20 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray4, (int) '#');
        int int24 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray4, (int) (short) -1, 100, 10);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray4, (-1));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
    }

    @Test
    public void test1877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1877");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 1, (int) (byte) 1, (int) (short) -1, intArray32, false);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 10);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 1);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, (int) (byte) 10, (int) (short) 1, 1, intArray46, false);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        int[] intArray64 = new int[] { (-1), 100 };
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray58, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray66, false);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) 'a');
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) ' ');
        int int76 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray72, (int) (byte) -1, 0, (int) (short) 0);
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (-1));
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray32, (int) '4', 1, (int) (short) 0, intArray78, false);
        int int82 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray78, 0);
        int int86 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray78, (int) (short) 1, (int) (byte) 10, (int) (short) -1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
    }

    @Test
    public void test1878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1878");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 0);
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 1);
        int int24 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (int) ' ', 10, 0);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (short) 10);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) '4');
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (short) -1);
        int int34 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray30, (int) (byte) 100, 0, (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            int int38 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray30, (-1), (int) (byte) -1, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
    }

    @Test
    public void test1879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1879");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray22 = new int[] { (-1), 100 };
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, (int) (byte) 1);
        int[] intArray30 = new int[] { (-1), 100 };
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray30, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray24, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray32, false);
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) 'a');
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) ' ');
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray16, (int) (byte) 1, (int) 'a', 0, intArray38, true);
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (short) 10);
        java.lang.Class<?> wildcardClass45 = intArray16.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test1880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1880");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) 'a', 100, (int) (byte) 1, intArray38, false);
        int int46 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, (int) (short) 1);
        int int48 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, (int) (byte) 1);
        int int50 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, 4);
        java.lang.Class<?> wildcardClass51 = intArray38.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertNotNull(wildcardClass51);
    }

    @Test
    public void test1881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1881");
        int[] intArray0 = null;
        int[] intArray6 = new int[] { (-1), 100 };
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (int) (byte) 1);
        int[] intArray14 = new int[] { (-1), 100 };
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray14, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray8, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray16, false);
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray0, 10, (int) (short) 1, (int) (short) 0, intArray22, false);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, 0);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, (int) '4');
        java.lang.Class<?> wildcardClass29 = intArray28.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test1882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1882");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, 10);
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (int) (short) 1);
        int int12 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray10, 10);
        int[] intArray14 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (short) 100);
        int int18 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray14, 0, (int) 'a', 4);
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray14, (int) (byte) -1);
        int int24 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray14, (-1), (int) (byte) 1, (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            int int28 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray14, 100, (int) (byte) 1, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
    }

    @Test
    public void test1883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1883");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 1);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (short) 1);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) 'a');
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray36, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray44, false);
        int int50 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray36, (int) ' ', (int) (short) -1, (int) (short) 1);
        int int52 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, (int) '#');
        int int56 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray36, (int) (short) -1, 100, 10);
        int int60 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray36, 4, (int) ' ', (int) (byte) 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (-1), 1, (int) (byte) 0, intArray36, true);
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, 0);
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, 100);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) '4');
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
    }

    @Test
    public void test1884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1884");
        int[] intArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int2 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray0, 4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1885");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) 'a', 100, (int) (byte) 1, intArray38, false);
        int int46 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, (int) '4');
        int int48 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, 0);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        int[] intArray62 = new int[] { (-1), 100 };
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray56, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray64, false);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) 'a');
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) ' ');
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) (byte) 10);
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (int) (byte) 1);
        int int76 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray72, (int) (byte) 100);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray38, 100, (int) (short) -1, 0, intArray72, false);
        int int82 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray72, 0, (int) (byte) 0, (int) (byte) 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2 + "'", int76 == 2);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
    }

    @Test
    public void test1886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1886");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray2, 10);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (short) 0);
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray2, (-1));
        // The following exception was thrown during execution in test generation
        try {
            int int34 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray2, 0, 3, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
    }

    @Test
    public void test1887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1887");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) '4');
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 2);
        int[] intArray26 = new int[] { ' ', (byte) -1 };
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        int[] intArray40 = new int[] { (-1), 100 };
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray34, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray42, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, (-1), (int) ' ', (int) (byte) 10, intArray42, false);
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, 1);
        int int50 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray48, (int) (short) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, (int) (byte) 10, (int) '#', (int) ' ', intArray48, false);
        int[] intArray58 = new int[] { (-1), 100 };
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) (byte) 1);
        int[] intArray66 = new int[] { (-1), 100 };
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray60, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray68, false);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) ' ');
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (int) (byte) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, 2, (-1), intArray72, true);
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, 0);
        int[] intArray80 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray78, (-1));
        int[] intArray82 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray78, (int) ' ');
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1]");
    }

    @Test
    public void test1888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1888");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { ' ', (byte) -1 };
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray36, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, (-1), (int) ' ', (int) (byte) 10, intArray36, false);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (int) 'a', 100, (int) (byte) 1, intArray56, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, 10, (int) (short) 0, (int) (short) -1, intArray36, true);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, 0);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, 1);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, 2);
        int int74 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray70, (int) (byte) 10, (int) (short) 100, (int) '4');
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
    }

    @Test
    public void test1889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1889");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray22 = new int[] { (-1), 100 };
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, (int) (byte) 1);
        int[] intArray30 = new int[] { (-1), 100 };
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray30, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray24, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray32, false);
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) 'a');
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) ' ');
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray16, (int) (byte) 1, (int) 'a', 0, intArray38, true);
        int int44 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, (int) (short) 100);
        int int46 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, (int) (short) 0);
        java.lang.Class<?> wildcardClass47 = intArray38.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2 + "'", int44 == 2);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertNotNull(wildcardClass47);
    }

    @Test
    public void test1890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1890");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 1, (int) (byte) 1, (int) (short) -1, intArray32, false);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 10);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) 'a');
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        int[] intArray63 = new int[] { '#' };
        int int65 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray63, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (short) -1, 1, 2, intArray63, true);
        int[] intArray69 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray63, 10);
        int[] intArray71 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray63, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, 1, 2, 1, intArray63, true);
        int[] intArray75 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, 1);
        int[] intArray77 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray75, (int) ' ');
        java.lang.Class<?> wildcardClass78 = intArray77.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[35]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass78);
    }

    @Test
    public void test1891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1891");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 10);
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (short) 100);
        int[] intArray28 = new int[] { ' ', (byte) -1 };
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray36, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray44, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray28, (-1), (int) ' ', (int) (byte) 10, intArray44, false);
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, 100);
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 100);
        int int56 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray52, (-1), 2, (int) (byte) -1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, 0, 2, 0, intArray52, false);
        int int62 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (-1), (-1), 0);
        int[] intArray68 = new int[] { (-1), 100 };
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) (byte) 1);
        int[] intArray76 = new int[] { (-1), 100 };
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray76, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray70, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray78, false);
        int[] intArray82 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray78, (int) ' ');
        int int84 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray78, 0);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, (int) (short) 1, 2, (int) '#', intArray78, true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 2 + "'", int84 == 2);
    }

    @Test
    public void test1892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1892");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 0);
        int int22 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, 0, 1, (-1));
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (int) (byte) 10, (int) (short) 1, 0);
        int int28 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) (short) 1);
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 2);
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (short) -1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[0, 1]");
    }

    @Test
    public void test1893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1893");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray19 = new int[] { '#' };
        int int21 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (short) -1, 1, 2, intArray19, true);
        int[] intArray25 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 10);
        int[] intArray27 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 100);
        int[] intArray33 = new int[] { ' ', (byte) -1 };
        int[] intArray39 = new int[] { (-1), 100 };
        int[] intArray41 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray39, (int) (byte) 1);
        int[] intArray47 = new int[] { (-1), 100 };
        int[] intArray49 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray47, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray41, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray49, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray33, (-1), (int) ' ', (int) (byte) 10, intArray49, false);
        int[] intArray55 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray33, 100);
        int[] intArray57 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray55, (int) '4');
        int int61 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray55, 0, (int) (byte) 100, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray27, (int) (byte) 0, (-1), 1, intArray55, false);
        java.lang.Class<?> wildcardClass64 = intArray27.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(wildcardClass64);
    }

    @Test
    public void test1894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1894");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray19 = new int[] { '#' };
        int int21 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (short) -1, 1, 2, intArray19, true);
        int[] intArray25 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 10);
        int[] intArray27 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 0);
        int[] intArray29 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, (int) '#');
        int[] intArray31 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, (int) (byte) 100);
        int int33 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) 10);
        int[] intArray39 = new int[] { (-1), 100 };
        int[] intArray41 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray39, (int) (byte) 1);
        int[] intArray43 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray39, (int) ' ');
        int[] intArray45 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray39, (int) (short) 100);
        int int47 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray39, 1);
        int int51 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray39, (-1), 1, 2);
        int[] intArray53 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray39, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray19, 3, (int) (short) 10, (int) (byte) -1, intArray39, true);
        java.lang.Class<?> wildcardClass56 = intArray39.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[0, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[1, 1]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass56);
    }

    @Test
    public void test1895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1895");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (int) (byte) -1);
        int[] intArray14 = new int[] { ' ', (byte) -1 };
        int[] intArray20 = new int[] { (-1), 100 };
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 1);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray22, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray30, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray14, (-1), (int) ' ', (int) (byte) 10, intArray30, false);
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray14, 100);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) '4');
        int[] intArray44 = new int[] { (-1), 100 };
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray38, 1, (int) (byte) 1, (int) (short) -1, intArray44, false);
        int int52 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray44, 10, 100, (int) '#');
        int int54 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray44, (int) (byte) 0);
        int[] intArray60 = new int[] { (-1), 100 };
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) (byte) 1);
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) ' ');
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) (short) 100);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray44, 1, 10, (int) (byte) 0, intArray66, true);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray8, 10, 4, 2, intArray44, false);
        java.lang.Class<?> wildcardClass71 = intArray8.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[1, 1]");
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test1896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1896");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray19 = new int[] { '#' };
        int int21 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (short) -1, 1, 2, intArray19, true);
        int[] intArray25 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 10);
        int int29 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray25, 1, (int) (short) 1, (int) (byte) -1);
        int[] intArray31 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray25, (int) (short) 1);
        int int33 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray25, 10);
        int[] intArray39 = new int[] { (-1), 100 };
        int[] intArray41 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray39, (int) (byte) 1);
        int[] intArray47 = new int[] { (-1), 100 };
        int[] intArray49 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray47, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray41, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray49, false);
        int[] intArray56 = new int[] { '#' };
        int int58 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray56, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray41, (int) (short) -1, 1, 2, intArray56, true);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, 10);
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, 100);
        int int68 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray56, (-1), 0, (int) (short) -1);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) -1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray25, 1, 2, (int) (short) 0, intArray70, false);
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray25, (int) ' ');
        java.lang.Class<?> wildcardClass75 = intArray25.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[35]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test1897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1897");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 0);
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 1);
        int int24 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (int) ' ', 10, 0);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (short) 10);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) '4');
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, 3);
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray30, 4);
        int int36 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray32, (-1), 0, 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
    }

    @Test
    public void test1898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1898");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray19 = new int[] { '#' };
        int int21 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (short) -1, 1, 2, intArray19, true);
        int[] intArray25 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 10);
        int[] intArray27 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 0);
        int[] intArray33 = new int[] { ' ', (byte) -1 };
        int[] intArray39 = new int[] { (-1), 100 };
        int[] intArray41 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray39, (int) (byte) 1);
        int[] intArray47 = new int[] { (-1), 100 };
        int[] intArray49 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray47, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray41, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray49, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray33, (-1), (int) ' ', (int) (byte) 10, intArray49, false);
        int[] intArray59 = new int[] { (-1), 100 };
        int[] intArray61 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray59, (int) (byte) 1);
        int[] intArray67 = new int[] { (-1), 100 };
        int[] intArray69 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray67, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray61, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray69, false);
        int[] intArray73 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray69, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray49, (int) 'a', 100, (int) (byte) 1, intArray69, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray27, (int) (short) 0, (int) (byte) 1, (int) (short) 1, intArray49, true);
        int int79 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray27, (int) (byte) -1);
        int[] intArray81 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray27, 1);
        int[] intArray83 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray81, (int) (short) -1);
        int[] intArray85 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray81, 100);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 2 + "'", int79 == 2);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, -1]");
    }

    @Test
    public void test1899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1899");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 0);
        int int22 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, 100, (int) (byte) 100, 10);
        int[] intArray28 = new int[] { ' ', (byte) -1 };
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray36, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray44, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray28, (-1), (int) ' ', (int) (byte) 10, intArray44, false);
        int int50 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray44, (int) (short) 1);
        int int52 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray44, (int) '#');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (-1), 100, 0, intArray44, false);
        int int56 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, 0);
        int int58 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) (byte) 10);
        int int60 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2 + "'", int56 == 2);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2 + "'", int58 == 2);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2 + "'", int60 == 2);
    }

    @Test
    public void test1900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1900");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 1, (int) (byte) 1, (int) (short) -1, intArray32, false);
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        int[] intArray50 = new int[] { (-1), 100 };
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray44, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray52, false);
        int[] intArray59 = new int[] { '#' };
        int int61 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray59, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray44, (int) (short) -1, 1, 2, intArray59, true);
        int[] intArray65 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray59, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, (int) (short) 100, 0, 1, intArray65, false);
        int[] intArray69 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 100);
        int int71 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray32, (-1));
        int int73 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray32, (int) (byte) 100);
        int int75 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray32, (int) (short) 0);
        java.lang.Class<?> wildcardClass76 = intArray32.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[35]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[1, 1]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 2 + "'", int73 == 2);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertNotNull(wildcardClass76);
    }

    @Test
    public void test1901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1901");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 1, (int) (byte) 1, (int) (short) -1, intArray32, false);
        int int38 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray32, 1);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) ' ');
        int[] intArray46 = new int[] { ' ', (byte) -1 };
        int[] intArray52 = new int[] { (-1), 100 };
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) (byte) 1);
        int[] intArray60 = new int[] { (-1), 100 };
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray54, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray62, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray46, (-1), (int) ' ', (int) (byte) 10, intArray62, false);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, 100);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 100);
        int int74 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray70, (int) (short) 10, (-1), (int) (short) 1);
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, 100);
        int int78 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray76, (int) (short) 10);
        int int80 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray76, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray40, 2, (int) '#', (int) (short) 0, intArray76, false);
        int[] intArray84 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, 100);
        int int86 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray40, (int) (byte) 1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2 + "'", int74 == 2);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 2 + "'", int78 == 2);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2 + "'", int80 == 2);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 2 + "'", int86 == 2);
    }

    @Test
    public void test1902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1902");
        int[] intArray0 = null;
        int int4 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray0, (-1), 100, (int) ' ');
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test1903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1903");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray19 = new int[] { '#' };
        int int21 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (short) -1, 1, 2, intArray19, true);
        int[] intArray25 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 10);
        int int29 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray25, 1, (int) (short) 1, (int) (byte) -1);
        int[] intArray31 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray25, (int) (byte) 100);
        int[] intArray37 = new int[] { ' ', (byte) -1 };
        int[] intArray43 = new int[] { (-1), 100 };
        int[] intArray45 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray43, (int) (byte) 1);
        int[] intArray51 = new int[] { (-1), 100 };
        int[] intArray53 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray51, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray45, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray53, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray37, (-1), (int) ' ', (int) (byte) 10, intArray53, false);
        int[] intArray63 = new int[] { (-1), 100 };
        int[] intArray65 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray63, (int) (byte) 1);
        int[] intArray71 = new int[] { (-1), 100 };
        int[] intArray73 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray71, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray65, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray73, false);
        int[] intArray77 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray73, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray53, (int) 'a', 100, (int) (byte) 1, intArray73, false);
        int int81 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray73, (int) '4');
        int int85 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray73, (int) ' ', (int) (byte) 1, 0);
        int int87 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray73, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray31, (int) (short) 0, (int) (byte) 10, (int) (short) 1, intArray73, false);
        int[] intArray91 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray73, 4);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 2 + "'", int81 == 2);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 2 + "'", int87 == 2);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, -1]");
    }

    @Test
    public void test1904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1904");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 100);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 1);
        int int32 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray2, (int) (byte) 1, 0, (int) (byte) 0);
        int int34 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray2, (int) '4');
        int int36 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray2, 1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
    }

    @Test
    public void test1905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1905");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) 'a', 100, (int) (byte) 1, intArray38, false);
        int[] intArray50 = new int[] { ' ', (byte) -1 };
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        int[] intArray64 = new int[] { (-1), 100 };
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray58, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray66, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray50, (-1), (int) ' ', (int) (byte) 10, intArray66, false);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, 0);
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (int) ' ');
        int int78 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray74, 0, 2, (int) (short) -1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray38, (int) (byte) 10, (int) ' ', (int) (short) -1, intArray74, false);
        int int82 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, (int) (byte) 0);
        int[] intArray84 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 100);
        int[] intArray86 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray84, (int) (byte) 0);
        java.lang.Class<?> wildcardClass87 = intArray86.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 2 + "'", int82 == 2);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test1906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1906");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { (-1), 100 };
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 1);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray22, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray30, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) 10, (int) '4', 10, intArray30, true);
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, 2);
        int int40 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray4, (int) '#', (int) (short) 10, (int) (short) -1);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, 1);
        java.lang.Class<?> wildcardClass43 = intArray42.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test1907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1907");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray19 = new int[] { '#' };
        int int21 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (short) -1, 1, 2, intArray19, true);
        int[] intArray29 = new int[] { ' ', (byte) -1 };
        int[] intArray35 = new int[] { (-1), 100 };
        int[] intArray37 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray35, (int) (byte) 1);
        int[] intArray43 = new int[] { (-1), 100 };
        int[] intArray45 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray43, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray37, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray45, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray29, (-1), (int) ' ', (int) (byte) 10, intArray45, false);
        int int51 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray45, (int) (short) 1);
        int[] intArray57 = new int[] { (-1), 100 };
        int[] intArray59 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray57, (int) (byte) 1);
        int[] intArray65 = new int[] { (-1), 100 };
        int[] intArray67 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray65, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray59, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray67, false);
        int[] intArray71 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray67, (int) 'a');
        int[] intArray73 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray71, (int) ' ');
        int[] intArray75 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray73, (int) (byte) 10);
        int[] intArray77 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray75, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray45, (int) 'a', (int) (short) 10, (int) (byte) 0, intArray75, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray19, (int) (byte) -1, 2, (int) (byte) 0, intArray45, false);
        int int83 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (byte) -1);
        java.lang.Class<?> wildcardClass84 = intArray19.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2 + "'", int51 == 2);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test1908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1908");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) 'a', 100, (int) (byte) 1, intArray38, false);
        int[] intArray50 = new int[] { ' ', (byte) -1 };
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        int[] intArray64 = new int[] { (-1), 100 };
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray58, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray66, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray50, (-1), (int) ' ', (int) (byte) 10, intArray66, false);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, 0);
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (int) ' ');
        int int78 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray74, 0, 2, (int) (short) -1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray38, (int) (byte) 10, (int) ' ', (int) (short) -1, intArray74, false);
        int int82 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, (int) (byte) 0);
        int[] intArray84 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 100);
        int int88 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray38, (int) (byte) 1, (int) '4', 1);
        int int90 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, (int) (byte) 10);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 2 + "'", int82 == 2);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 2 + "'", int90 == 2);
    }

    @Test
    public void test1909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1909");
        int[] intArray1 = new int[] { 10 };
        int[] intArray3 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray1, (int) '4');
        int[] intArray8 = new int[] { '#' };
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) (short) 0);
        int int12 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) (byte) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray3, 10, (int) (byte) 1, (int) (short) 0, intArray8, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (short) 0);
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) '#');
        int int20 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) (byte) 1);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[10]");
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[35]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    }

    @Test
    public void test1910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1910");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (-1));
        int int22 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray20, 0);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (short) 0);
        java.lang.Class<?> wildcardClass25 = intArray24.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[0, 0]");
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test1911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1911");
        int[] intArray1 = new int[] { 10 };
        int[] intArray3 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray1, (int) '4');
        int[] intArray9 = new int[] { ' ', (byte) -1 };
        int[] intArray15 = new int[] { (-1), 100 };
        int[] intArray17 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray15, (int) (byte) 1);
        int[] intArray23 = new int[] { (-1), 100 };
        int[] intArray25 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray23, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray17, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray25, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray9, (-1), (int) ' ', (int) (byte) 10, intArray25, false);
        int[] intArray31 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray9, 100);
        int[] intArray33 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray31, (int) '4');
        int[] intArray39 = new int[] { (-1), 100 };
        int[] intArray41 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray39, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray33, 1, (int) (byte) 1, (int) (short) -1, intArray39, false);
        int[] intArray49 = new int[] { (-1), 100 };
        int[] intArray51 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray49, (int) (byte) 1);
        int[] intArray57 = new int[] { (-1), 100 };
        int[] intArray59 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray57, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray51, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray59, false);
        int[] intArray66 = new int[] { '#' };
        int int68 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray66, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray51, (int) (short) -1, 1, 2, intArray66, true);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray39, (int) (short) 100, 0, 1, intArray72, false);
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray39, (int) (byte) 100);
        int int80 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray39, (int) '#', (int) (short) 100, (-1));
        int[] intArray82 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray39, (int) (short) 100);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray3, 100, (int) ' ', 0, intArray82, true);
        int int86 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray82, (-1));
        int int88 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray82, (int) ' ');
        int int90 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray82, (int) (short) 10);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[10]");
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[35]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[1, 1]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[1, 1]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 2 + "'", int88 == 2);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 2 + "'", int90 == 2);
    }

    @Test
    public void test1912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1912");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { ' ', (byte) -1 };
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray36, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, (-1), (int) ' ', (int) (byte) 10, intArray36, false);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (int) 'a', 100, (int) (byte) 1, intArray56, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, 10, (int) (short) 0, (int) (short) -1, intArray36, true);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, 0);
        int[] intArray72 = new int[] { (-1), 100 };
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (int) (byte) 1);
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray74, (int) (short) 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, 2, 10, (int) (short) 1, intArray74, false);
        int int80 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, (int) (short) 0);
        int int84 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray36, (-1), (int) (short) 10, (int) (byte) -1);
        int[] intArray86 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, 3);
        int[] intArray88 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray86, (int) 'a');
        java.lang.Class<?> wildcardClass89 = intArray88.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2 + "'", int80 == 2);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test1913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1913");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int int8 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, 0);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, 4);
        int[] intArray16 = new int[] { ' ', (byte) -1 };
        int[] intArray22 = new int[] { (-1), 100 };
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, (int) (byte) 1);
        int[] intArray30 = new int[] { (-1), 100 };
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray30, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray24, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray32, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray16, (-1), (int) ' ', (int) (byte) 10, intArray32, false);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, 100);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 100);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, 1);
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) '4');
        int[] intArray50 = new int[] { ' ', (byte) -1 };
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        int[] intArray64 = new int[] { (-1), 100 };
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray58, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray66, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray50, (-1), (int) ' ', (int) (byte) 10, intArray66, false);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray16, (-1), (int) (byte) 1, (int) (byte) 0, intArray66, true);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray6, (int) '#', (int) (short) -1, 0, intArray16, false);
        java.lang.Class<?> wildcardClass77 = intArray6.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test1914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1914");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 100);
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray26, (int) (short) -1, (int) (byte) -1, (int) (short) 1);
        int int34 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray26, (int) (short) 100, (int) '#', 3);
        int int38 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray26, (int) (short) 100, (int) (short) 100, 3);
        int int42 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray26, (int) (short) -1, (int) '4', 2);
        java.lang.Class<?> wildcardClass43 = intArray26.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test1915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1915");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 100);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 1);
        int int32 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray2, (int) (short) 1, 0, 0);
        int int34 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray2, 4);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
    }

    @Test
    public void test1916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1916");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, 0);
        int[] intArray24 = new int[] { (-1), 100 };
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 1);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (short) 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, 4, 2, (int) (byte) 0, intArray26, false);
        java.lang.Class<?> wildcardClass31 = intArray18.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test1917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1917");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray19 = new int[] { '#' };
        int int21 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (short) -1, 1, 2, intArray19, true);
        int[] intArray25 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 10);
        int[] intArray27 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 0);
        int[] intArray33 = new int[] { ' ', (byte) -1 };
        int[] intArray39 = new int[] { (-1), 100 };
        int[] intArray41 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray39, (int) (byte) 1);
        int[] intArray47 = new int[] { (-1), 100 };
        int[] intArray49 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray47, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray41, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray49, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray33, (-1), (int) ' ', (int) (byte) 10, intArray49, false);
        int[] intArray59 = new int[] { (-1), 100 };
        int[] intArray61 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray59, (int) (byte) 1);
        int[] intArray67 = new int[] { (-1), 100 };
        int[] intArray69 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray67, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray61, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray69, false);
        int[] intArray73 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray69, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray49, (int) 'a', 100, (int) (byte) 1, intArray69, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray27, (int) (short) 0, (int) (byte) 1, (int) (short) 1, intArray49, true);
        java.lang.Class<?> wildcardClass78 = intArray27.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass78);
    }

    @Test
    public void test1918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1918");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 0);
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) '#');
        int int24 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray16, (-1), (int) (short) 100, (int) (byte) 0);
        java.lang.Class<?> wildcardClass25 = intArray16.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test1919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1919");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int int28 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray24, 4, 0, (int) (byte) -1);
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (byte) 1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
    }

    @Test
    public void test1920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1920");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) 'a', 100, (int) (byte) 1, intArray38, false);
        int int46 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, (int) '4');
        int int50 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray38, (int) ' ', (int) (byte) 1, 0);
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, 100);
        int int54 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray52, 2);
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, 100);
        java.lang.Class<?> wildcardClass57 = intArray56.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2 + "'", int54 == 2);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test1921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1921");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 100);
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray26, (-1), 2, (int) (byte) -1);
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (short) 1);
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        int int38 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray34, (int) 'a', (int) 'a', (int) ' ');
        int[] intArray44 = new int[] { (-1), 100 };
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) (byte) 1);
        int[] intArray52 = new int[] { (-1), 100 };
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray46, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray54, false);
        int[] intArray61 = new int[] { '#' };
        int int63 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray61, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray46, (int) (short) -1, 1, 2, intArray61, true);
        int[] intArray67 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray61, 10);
        int[] intArray69 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray61, 100);
        int int71 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray69, (int) (short) 10);
        int int73 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray69, 0);
        int[] intArray75 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray69, (int) '4');
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray34, (int) ' ', (int) (byte) 10, (int) 'a', intArray69, true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[35]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2 + "'", int71 == 2);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 2 + "'", int73 == 2);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1]");
    }

    @Test
    public void test1922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1922");
        int[] intArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int4 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray0, (int) (byte) 0, 0, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1923");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { ' ', (byte) -1 };
        int[] intArray38 = new int[] { (-1), 100 };
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 1);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray40, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray48, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, (-1), (int) ' ', (int) (byte) 10, intArray48, false);
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, 100);
        int int56 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray32, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray24, 10, (int) 'a', (-1), intArray32, true);
        int int60 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) '#');
        int[] intArray66 = new int[] { (-1), 100 };
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) (byte) 1);
        int[] intArray74 = new int[] { (-1), 100 };
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray74, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray68, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray76, false);
        int[] intArray80 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray76, (int) ' ');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray24, (int) (byte) 100, 100, 0, intArray80, false);
        int int84 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray80, (int) (short) -1);
        int[] intArray86 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray80, 0);
        int int88 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray86, (int) '#');
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2 + "'", int60 == 2);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 2 + "'", int84 == 2);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 2 + "'", int88 == 2);
    }

    @Test
    public void test1924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1924");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { ' ', (byte) -1 };
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray36, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, (-1), (int) ' ', (int) (byte) 10, intArray36, false);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (int) 'a', 100, (int) (byte) 1, intArray56, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, 10, (int) (short) 0, (int) (short) -1, intArray36, true);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, 0);
        int int70 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray36, 10, 10, (int) (short) 1);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, 0);
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, 4);
        java.lang.Class<?> wildcardClass75 = intArray74.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test1925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1925");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 1);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (short) 1);
        int int28 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) 'a');
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, 0);
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) ' ');
        int int34 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) '4');
        int[] intArray40 = new int[] { (-1), 100 };
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) (byte) 1);
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (short) 10);
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) '#');
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, 4);
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, 100);
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) (byte) 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray24, 4, (int) (byte) 0, (int) (short) 0, intArray50, true);
        java.lang.Class<?> wildcardClass55 = intArray50.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test1926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1926");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 10);
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray36, false);
        int[] intArray43 = new int[] { '#' };
        int int45 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray43, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (short) -1, 1, 2, intArray43, true);
        int[] intArray49 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray43, 10);
        int[] intArray51 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray43, 100);
        int int53 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray51, (int) (short) 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, (int) (byte) 1, (int) (short) 10, (int) (byte) 1, intArray51, false);
        int int57 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray20, (int) ' ');
        java.lang.Class<?> wildcardClass58 = intArray20.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[35]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2 + "'", int53 == 2);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2 + "'", int57 == 2);
        org.junit.Assert.assertNotNull(wildcardClass58);
    }

    @Test
    public void test1927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1927");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) ' ');
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (short) 100);
        int int12 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray8, (int) (byte) 100, (int) '#', 4);
        int[] intArray18 = new int[] { ' ', (byte) -1 };
        int[] intArray24 = new int[] { (-1), 100 };
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 1);
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray26, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray34, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (-1), (int) ' ', (int) (byte) 10, intArray34, false);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 100);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) '4');
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray42, 1, (int) (byte) 1, (int) (short) -1, intArray48, false);
        int[] intArray58 = new int[] { (-1), 100 };
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) (byte) 1);
        int[] intArray66 = new int[] { (-1), 100 };
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray60, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray68, false);
        int[] intArray75 = new int[] { '#' };
        int int77 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray75, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray60, (int) (short) -1, 1, 2, intArray75, true);
        int[] intArray81 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray75, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray48, (int) (short) 100, 0, 1, intArray81, false);
        int[] intArray85 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 100);
        int int87 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray48, 1);
        int[] intArray89 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) '#');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray8, (int) ' ', (int) (short) 100, (int) (short) 1, intArray89, true);
        // The following exception was thrown during execution in test generation
        try {
            int int95 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray89, (int) 'a', 3, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[1, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[35]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 1]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[1, 1]");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1 + "'", int87 == 1);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, -1]");
    }

    @Test
    public void test1928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1928");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 0);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 10);
        int int28 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray26, 0);
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (short) 100);
        int int34 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray30, (-1), (int) 'a', 0);
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray30, (int) (short) 1);
        int int38 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, (int) '#');
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (short) 100);
        java.lang.Class<?> wildcardClass41 = intArray40.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test1929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1929");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 0);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (byte) 0);
        int int28 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, 0);
        int int32 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray24, 3, 100, (int) (byte) -1);
        int[] intArray38 = new int[] { (-1), 100 };
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 1);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray40, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray48, false);
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) ' ');
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) (byte) 0);
        int int58 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray54, 0, 1, (-1));
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray24, (int) (short) 10, 0, (int) (short) 0, intArray54, false);
        int int62 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (short) 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2 + "'", int62 == 2);
    }

    @Test
    public void test1930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1930");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (-1));
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) '#');
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) 'a');
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) ' ');
        int[] intArray53 = new int[] { (short) 100, (short) 0, 100, (byte) -1, 10 };
        int int57 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray53, 1, (int) (byte) 100, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray44, 100, (int) '#', (int) (short) 10, intArray53, false);
        int int61 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray44, 0);
        int[] intArray63 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) (short) 1);
        int[] intArray69 = new int[] { (-1), 100 };
        int[] intArray71 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray69, (int) (byte) 1);
        int[] intArray77 = new int[] { (-1), 100 };
        int[] intArray79 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray77, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray71, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray79, false);
        int[] intArray86 = new int[] { '#' };
        int int88 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray86, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray71, (int) (short) -1, 1, 2, intArray86, true);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray44, (int) (short) 10, 2, (int) (byte) 1, intArray71, true);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray22, 100, (int) ' ', (-1), intArray71, true);
        int[] intArray96 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray71, (int) (short) 10);
        java.lang.Class<?> wildcardClass97 = intArray71.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[100, 0, 100, -1, 10]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2 + "'", int61 == 2);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[35]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test1931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1931");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 10);
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 1);
        int int24 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray20, (-1));
        int int28 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray20, 10, (int) (short) 10, 4);
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) ' ');
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        int[] intArray44 = new int[] { (-1), 100 };
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray38, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray46, false);
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) ' ');
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) '4');
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, 2);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray20, 0, (int) (byte) 100, (int) (short) 1, intArray52, true);
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) 'a');
        java.lang.Class<?> wildcardClass59 = intArray58.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test1932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1932");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 1);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (short) 1);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) 'a');
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray36, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray44, false);
        int[] intArray52 = new int[] { (-1), 100 };
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) (byte) 1);
        int[] intArray60 = new int[] { (-1), 100 };
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray54, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray62, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray36, (int) (byte) 10, (int) '4', 10, intArray62, true);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, 2);
        int int72 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray68, (int) (short) 100, (int) ' ', 1);
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, 0, (int) (byte) 0, 0, intArray74, true);
        int int80 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray28, (int) (short) -1, 100, (int) (byte) 10);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
    }

    @Test
    public void test1933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1933");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { (-1), 100 };
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 1);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray22, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray30, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) 10, (int) '4', 10, intArray30, true);
        int int36 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray4, 0);
        int int40 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray4, (int) (byte) 0, (-1), 1);
        int int42 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray4, (int) '4');
        int int46 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray4, 4, (int) (short) 10, 4);
        int int48 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray4, (int) (short) 0);
        java.lang.Class<?> wildcardClass49 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2 + "'", int40 == 2);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2 + "'", int42 == 2);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
        org.junit.Assert.assertNotNull(wildcardClass49);
    }

    @Test
    public void test1934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1934");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int int8 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, 0);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, (int) (short) -1);
        int int12 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, (int) '#');
        int[] intArray17 = new int[] { 10 };
        int[] intArray19 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray17, (int) '4');
        int[] intArray25 = new int[] { ' ', (byte) -1 };
        int[] intArray31 = new int[] { (-1), 100 };
        int[] intArray33 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray31, (int) (byte) 1);
        int[] intArray39 = new int[] { (-1), 100 };
        int[] intArray41 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray39, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray33, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray41, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray25, (-1), (int) ' ', (int) (byte) 10, intArray41, false);
        int[] intArray47 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray41, 0);
        int int49 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray47, (int) (byte) 0);
        int int51 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray47, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray17, (int) '#', (int) (byte) 1, (int) (byte) -1, intArray47, false);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray6, 3, (int) (byte) -1, (int) (short) 100, intArray17, true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[10]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2 + "'", int49 == 2);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2 + "'", int51 == 2);
    }

    @Test
    public void test1935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1935");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray27 = new int[] { (short) 100, (short) 0, 100, (byte) -1, 10 };
        int int31 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray27, 1, (int) (byte) 100, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, 100, (int) '#', (int) (short) 10, intArray27, false);
        int[] intArray35 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (short) 1);
        int int37 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray35, (int) (byte) 100);
        int int39 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray35, (int) '4');
        java.lang.Class<?> wildcardClass40 = intArray35.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[100, 0, 100, -1, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2 + "'", int37 == 2);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2 + "'", int39 == 2);
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test1936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1936");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 0);
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) '#');
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray36, false);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) 'a');
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) ' ');
        int int46 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray42, (int) (byte) -1, 0, (int) (short) 0);
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (-1));
        int int50 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray42, (int) (short) 1);
        int int52 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray42, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, (int) ' ', (int) (short) 1, (int) (short) 1, intArray42, false);
        int int56 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray20, (int) (byte) 10);
        int int60 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray20, 2, (int) (byte) 1, 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2 + "'", int56 == 2);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
    }

    @Test
    public void test1937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1937");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray19 = new int[] { '#' };
        int int21 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (short) -1, 1, 2, intArray19, true);
        int[] intArray25 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 10);
        int int27 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) -1);
        int int29 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (byte) -1);
        int[] intArray31 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 1);
        int int33 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray31, (int) (byte) 10);
        int[] intArray39 = new int[] { (-1), 100 };
        int[] intArray41 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray39, (int) (byte) 1);
        int[] intArray43 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray41, (int) (short) 10);
        int[] intArray45 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray43, 10);
        int int47 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray45, (int) 'a');
        int int49 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray45, 0);
        int int51 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray45, (int) (byte) 100);
        int int53 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray45, 4);
        int int55 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray45, (int) (short) -1);
        int[] intArray57 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray45, (int) '4');
        int int59 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray57, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray31, (int) (byte) 10, (int) (short) 10, (int) (byte) 10, intArray57, true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2 + "'", int47 == 2);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2 + "'", int49 == 2);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2 + "'", int51 == 2);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2 + "'", int53 == 2);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 2 + "'", int55 == 2);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2 + "'", int59 == 2);
    }

    @Test
    public void test1938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1938");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray27 = new int[] { (short) 100, (short) 0, 100, (byte) -1, 10 };
        int int31 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray27, 1, (int) (byte) 100, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, 100, (int) '#', (int) (short) 10, intArray27, false);
        int int35 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, 0);
        int[] intArray41 = new int[] { ' ', (byte) -1 };
        int[] intArray47 = new int[] { (-1), 100 };
        int[] intArray49 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray47, (int) (byte) 1);
        int[] intArray55 = new int[] { (-1), 100 };
        int[] intArray57 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray55, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray49, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray57, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray41, (-1), (int) ' ', (int) (byte) 10, intArray57, false);
        int[] intArray63 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray57, 1);
        int int65 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray63, (int) (short) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, (int) (byte) 1, (-1), 0, intArray63, false);
        int[] intArray71 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray63, 10, (int) (short) 100, 0, intArray71, true);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[100, 0, 100, -1, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2 + "'", int65 == 2);
    }

    @Test
    public void test1939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1939");
        int[] intArray1 = new int[] { 10 };
        int[] intArray3 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray1, (int) '4');
        int[] intArray8 = new int[] { '#' };
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) (short) 0);
        int int12 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) (byte) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray3, 10, (int) (byte) 1, (int) (short) 0, intArray8, false);
        int int18 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray3, 4, (int) (short) 0, (-1));
        int[] intArray24 = new int[] { (-1), 100 };
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 1);
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray26, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray34, false);
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        int[] intArray50 = new int[] { (-1), 100 };
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray44, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray52, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray26, (int) (byte) 10, (int) '4', 10, intArray52, true);
        int[] intArray62 = new int[] { ' ', (byte) -1 };
        int[] intArray68 = new int[] { (-1), 100 };
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) (byte) 1);
        int[] intArray76 = new int[] { (-1), 100 };
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray76, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray70, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray78, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray62, (-1), (int) ' ', (int) (byte) 10, intArray78, false);
        int[] intArray84 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray78, 0);
        int[] intArray86 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray84, (int) ' ');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 2, (int) 'a', 4, intArray84, true);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray3, 2, 10, (int) (byte) 1, intArray84, false);
        // The following exception was thrown during execution in test generation
        try {
            int int94 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray84, (int) 'a', 1, 3);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[10]");
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[35]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1]");
    }

    @Test
    public void test1940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1940");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray19 = new int[] { '#' };
        int int21 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (short) -1, 1, 2, intArray19, true);
        int[] intArray29 = new int[] { (-1), 100 };
        int[] intArray31 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray29, (int) (byte) 1);
        int[] intArray37 = new int[] { (-1), 100 };
        int[] intArray39 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray37, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray31, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray39, false);
        int[] intArray43 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray39, (int) 'a');
        int int47 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray43, 0, (-1), 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray19, (int) (short) 100, (int) (short) 0, (int) (short) 0, intArray43, true);
        int[] intArray51 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray43, 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, -1]");
    }

    @Test
    public void test1941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1941");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { ' ', (byte) -1 };
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray36, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, (-1), (int) ' ', (int) (byte) 10, intArray36, false);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (int) 'a', 100, (int) (byte) 1, intArray56, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, 10, (int) (short) 0, (int) (short) -1, intArray36, true);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, 0);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, 10);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) (byte) 1);
        java.lang.Class<?> wildcardClass71 = intArray70.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test1942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1942");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 100);
        int int28 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray26, (int) (byte) 1);
        int[] intArray34 = new int[] { ' ', (byte) -1 };
        int[] intArray40 = new int[] { (-1), 100 };
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) (byte) 1);
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray42, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray50, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray34, (-1), (int) ' ', (int) (byte) 10, intArray50, false);
        int int56 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray50, (int) (short) 1);
        int[] intArray62 = new int[] { (-1), 100 };
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, (int) (byte) 1);
        int[] intArray70 = new int[] { (-1), 100 };
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray64, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray72, false);
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (int) 'a');
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray76, (int) ' ');
        int[] intArray80 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray78, (int) (byte) 10);
        int[] intArray82 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray80, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray50, (int) 'a', (int) (short) 10, (int) (byte) 0, intArray80, false);
        int int88 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray80, (int) 'a', (int) (byte) 100, (int) (short) 10);
        int[] intArray90 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray80, (int) (byte) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 1, 10, 0, intArray80, true);
        // The following exception was thrown during execution in test generation
        try {
            int int96 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray80, 0, 10, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2 + "'", int56 == 2);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1]");
    }

    @Test
    public void test1943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1943");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray22 = new int[] { ' ', (byte) -1 };
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray22, (-1), (int) ' ', (int) (byte) 10, intArray38, false);
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray50, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray58, false);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray38, (int) 'a', 100, (int) (byte) 1, intArray58, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray12, (int) (short) 100, (int) 'a', (int) (short) 0, intArray38, true);
        int int68 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray12, (int) '4');
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        java.lang.Class<?> wildcardClass71 = intArray70.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2 + "'", int68 == 2);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test1944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1944");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        int[] intArray40 = new int[] { (-1), 100 };
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray34, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray42, false);
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) ' ');
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 0);
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        int int54 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray48, (int) ' ', 10, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray24, (int) (short) 10, (int) (short) 0, (int) (short) 1, intArray48, true);
        int[] intArray62 = new int[] { (-1), 100 };
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, (int) (byte) 1);
        int[] intArray70 = new int[] { (-1), 100 };
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray64, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray72, false);
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (int) ' ');
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (int) '4');
        int int80 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray78, (int) (byte) -1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray48, 100, (int) (short) 0, (int) (byte) 1, intArray78, false);
        int int84 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray78, (-1));
        int[] intArray88 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray78, (int) (short) 0, (int) (short) 10, 2, intArray88, false);
        int[] intArray92 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray78, (int) 'a');
        int[] intArray96 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray92, (int) 'a', (int) (short) -1, 0, intArray96, true);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2 + "'", int80 == 2);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 2 + "'", int84 == 2);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1]");
    }

    @Test
    public void test1945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1945");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 10);
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (short) 100);
        int[] intArray28 = new int[] { ' ', (byte) -1 };
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray36, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray44, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray28, (-1), (int) ' ', (int) (byte) 10, intArray44, false);
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, 100);
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) '4');
        int[] intArray58 = new int[] { (-1), 100 };
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray52, 1, (int) (byte) 1, (int) (short) -1, intArray58, false);
        int[] intArray68 = new int[] { (-1), 100 };
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) (byte) 1);
        int[] intArray76 = new int[] { (-1), 100 };
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray76, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray70, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray78, false);
        int[] intArray85 = new int[] { '#' };
        int int87 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray85, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray70, (int) (short) -1, 1, 2, intArray85, true);
        int[] intArray91 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray85, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray58, (int) (short) 100, 0, 1, intArray91, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray22, 0, (int) (short) 100, (int) ' ', intArray91, true);
        int int97 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray91, (int) (byte) 100);
        java.lang.Class<?> wildcardClass98 = intArray91.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[35]");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 1]");
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 2 + "'", int97 == 2);
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test1946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1946");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 0);
        int[] intArray24 = new int[] { (-1), 100 };
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 1);
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray26, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray34, false);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) 'a');
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) ' ');
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (-1));
        int int44 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray42, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) ' ', (int) 'a', 1, intArray42, false);
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 10);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) ' ');
        int int62 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray58, (int) (short) 1, (-1), (int) (byte) 0);
        int[] intArray66 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray58, 2, (int) '4', (int) (short) 0, intArray66, true);
        int int72 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray58, (int) (short) -1, (int) ' ', (int) (byte) 1);
        int[] intArray78 = new int[] { (-1), 100 };
        int[] intArray80 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray78, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray58, 0, (int) 'a', 2, intArray78, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, 4, (int) (byte) -1, 1, intArray78, true);
        int int86 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray78, (-1));
        int[] intArray88 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray78, 10);
        int int90 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray88, 100);
        int int92 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray88, 100);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 1 + "'", int86 == 1);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 2 + "'", int90 == 2);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 2 + "'", int92 == 2);
    }

    @Test
    public void test1947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1947");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) 'a', 100, (int) (byte) 1, intArray38, false);
        int int46 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, (int) '4');
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) 'a');
        int[] intArray54 = new int[] { ' ', (byte) -1 };
        int[] intArray60 = new int[] { (-1), 100 };
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) (byte) 1);
        int[] intArray68 = new int[] { (-1), 100 };
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray62, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray70, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray54, (-1), (int) ' ', (int) (byte) 10, intArray70, false);
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, 100);
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray76, (int) '4');
        int int80 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray78, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (short) 1, (int) ' ', 2, intArray78, false);
        int[] intArray84 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, 100);
        int int86 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray84, (int) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            int int90 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray84, (int) (byte) 100, 0, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2 + "'", int80 == 2);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 2 + "'", int86 == 2);
    }

    @Test
    public void test1948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1948");
        int[] intArray0 = null;
        int[] intArray4 = null;
        int[] intArray10 = new int[] { ' ', (byte) -1 };
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        int[] intArray24 = new int[] { (-1), 100 };
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray26, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray10, (-1), (int) ' ', (int) (byte) 10, intArray26, false);
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, 100);
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) '4');
        int[] intArray40 = new int[] { ' ', (byte) -1 };
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray40, (-1), (int) ' ', (int) (byte) 10, intArray56, false);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, 100);
        int int64 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray40, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, 10, (int) 'a', (-1), intArray40, true);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, (int) ' ', (int) (byte) 1, (int) (short) -1, intArray40, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray0, (int) (short) 0, (int) (short) 1, (int) (short) -1, intArray40, true);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) (short) 100);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
    }

    @Test
    public void test1949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1949");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int int22 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (int) (byte) -1, 0, (int) (short) 0);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (-1));
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) (byte) 100);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) '4');
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (short) 10);
        int[] intArray36 = new int[] { ' ', (byte) -1 };
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        int[] intArray50 = new int[] { (-1), 100 };
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray44, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray52, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (-1), (int) ' ', (int) (byte) 10, intArray52, false);
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, 0);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) ' ');
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) (byte) 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, 0, (int) '#', 0, intArray60, false);
        java.lang.Class<?> wildcardClass65 = intArray28.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test1950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1950");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) 'a', 100, (int) (byte) 1, intArray38, false);
        int int46 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, (int) '4');
        int int50 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray38, (int) ' ', (int) (byte) 1, 0);
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, 100);
        int int54 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray52, 2);
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, 100);
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            int int62 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray56, (int) (byte) 0, (int) ' ', (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2 + "'", int54 == 2);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
    }

    @Test
    public void test1951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1951");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { ' ', (byte) -1 };
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray36, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, (-1), (int) ' ', (int) (byte) 10, intArray36, false);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, 100);
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 100);
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray12, (int) '#', (int) (short) 10, 0, intArray20, false);
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, 4);
        java.lang.Class<?> wildcardClass51 = intArray20.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass51);
    }

    @Test
    public void test1952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1952");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { ' ', (byte) -1 };
        int[] intArray38 = new int[] { (-1), 100 };
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 1);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray40, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray48, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, (-1), (int) ' ', (int) (byte) 10, intArray48, false);
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, 100);
        int int56 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray32, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray24, 10, (int) 'a', (-1), intArray32, true);
        int int60 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) '#');
        int int62 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, 10);
        int int64 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, 100);
        java.lang.Class<?> wildcardClass65 = intArray24.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2 + "'", int60 == 2);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2 + "'", int62 == 2);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2 + "'", int64 == 2);
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test1953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1953");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 1);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (short) 1);
        int int28 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) 'a');
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, 0);
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) ' ');
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (short) 1);
        int[] intArray40 = new int[] { ' ', (byte) -1 };
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray40, (-1), (int) ' ', (int) (byte) 10, intArray56, false);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, 100);
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, (int) '4');
        int[] intArray70 = new int[] { (-1), 100 };
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray64, 1, (int) (byte) 1, (int) (short) -1, intArray70, false);
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) (short) 10);
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray24, 1, (int) (byte) 10, (int) (byte) 0, intArray78, true);
        int[] intArray82 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray78, (int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            int int86 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray82, 10, 0, 3);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1]");
    }

    @Test
    public void test1954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1954");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray19 = new int[] { '#' };
        int int21 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (short) -1, 1, 2, intArray19, true);
        int[] intArray25 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 10);
        int int29 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray25, 1, (int) (short) 1, (int) (byte) -1);
        int[] intArray31 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray25, (int) (short) 1);
        int[] intArray37 = new int[] { (-1), 100 };
        int[] intArray39 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray37, (int) (byte) 1);
        int[] intArray41 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray39, (int) (short) 10);
        int[] intArray43 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray39, (int) '#');
        int[] intArray45 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray43, 4);
        int int47 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray43, 2);
        int[] intArray53 = new int[] { (-1), 100 };
        int[] intArray55 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray53, (int) (byte) 1);
        int[] intArray61 = new int[] { (-1), 100 };
        int[] intArray63 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray61, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray55, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray63, false);
        int[] intArray67 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray63, (int) ' ');
        int[] intArray69 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray63, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray43, (int) '#', (int) (short) 10, 0, intArray63, true);
        int[] intArray73 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray43, (int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray25, (int) (byte) 100, 2, (int) 'a', intArray43, true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2 + "'", int47 == 2);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1]");
    }

    @Test
    public void test1955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1955");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray27 = new int[] { (short) 100, (short) 0, 100, (byte) -1, 10 };
        int int31 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray27, 1, (int) (byte) 100, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, 100, (int) '#', (int) (short) 10, intArray27, false);
        int int35 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, 0);
        int[] intArray41 = new int[] { (-1), 100 };
        int[] intArray43 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray41, (int) (byte) 1);
        int[] intArray49 = new int[] { (-1), 100 };
        int[] intArray51 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray49, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray43, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray51, false);
        int[] intArray55 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray51, (int) ' ');
        int[] intArray57 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray55, (int) (byte) 0);
        int[] intArray59 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray57, (int) (byte) 1);
        int int63 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray57, (int) ' ', 10, 0);
        int[] intArray65 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray57, (int) (short) 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, 0, (int) (short) 100, (int) '#', intArray65, false);
        // The following exception was thrown during execution in test generation
        try {
            int int71 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (int) '4', (int) (short) 1, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[100, 0, 100, -1, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1]");
    }

    @Test
    public void test1956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1956");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) 'a', 100, (int) (byte) 1, intArray38, false);
        int int46 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, (int) '4');
        int int50 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray38, (int) ' ', (int) (byte) 1, 0);
        int int52 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, 0);
        int int54 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, 100);
        // The following exception was thrown during execution in test generation
        try {
            int int58 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray38, (int) '#', (-1), (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2 + "'", int54 == 2);
    }

    @Test
    public void test1957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1957");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 100);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 1);
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) '4');
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray30, (int) (byte) 1);
        int int36 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray32, (int) 'a', 4, (int) (byte) 1);
        int int38 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray32, (int) (byte) 100);
        java.lang.Class<?> wildcardClass39 = intArray32.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test1958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1958");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray22 = new int[] { ' ', (byte) -1 };
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray22, (-1), (int) ' ', (int) (byte) 10, intArray38, false);
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray50, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray58, false);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray38, (int) 'a', 100, (int) (byte) 1, intArray58, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray12, (int) (short) 100, (int) 'a', (int) (short) 0, intArray38, true);
        int int68 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, (int) (byte) 0);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (short) -1);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) -1);
        java.lang.Class<?> wildcardClass73 = intArray72.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2 + "'", int68 == 2);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[0, 1]");
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test1959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1959");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (-1));
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) '#');
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) 'a');
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) ' ');
        int[] intArray53 = new int[] { (short) 100, (short) 0, 100, (byte) -1, 10 };
        int int57 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray53, 1, (int) (byte) 100, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray44, 100, (int) '#', (int) (short) 10, intArray53, false);
        int int61 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray44, 0);
        int[] intArray63 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) (short) 1);
        int[] intArray69 = new int[] { (-1), 100 };
        int[] intArray71 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray69, (int) (byte) 1);
        int[] intArray77 = new int[] { (-1), 100 };
        int[] intArray79 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray77, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray71, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray79, false);
        int[] intArray86 = new int[] { '#' };
        int int88 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray86, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray71, (int) (short) -1, 1, 2, intArray86, true);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray44, (int) (short) 10, 2, (int) (byte) 1, intArray71, true);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray22, 100, (int) ' ', (-1), intArray71, true);
        java.lang.Class<?> wildcardClass95 = intArray71.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[100, 0, 100, -1, 10]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2 + "'", int61 == 2);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[35]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test1960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1960");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int int18 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray16, 0);
        int int20 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray16, (int) (short) 10);
        java.lang.Class<?> wildcardClass21 = intArray16.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test1961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1961");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { (-1), 100 };
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 1);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray22, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray30, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) 10, (int) '4', 10, intArray30, true);
        int int36 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray4, 0);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (byte) 100);
        int[] intArray44 = new int[] { (-1), 100 };
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) (byte) 1);
        int[] intArray52 = new int[] { (-1), 100 };
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray46, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray54, false);
        int[] intArray61 = new int[] { '#' };
        int int63 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray61, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray46, (int) (short) -1, 1, 2, intArray61, true);
        int[] intArray67 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray61, 10);
        int[] intArray69 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray61, 100);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray38, 100, (int) (byte) 1, (int) (short) 1, intArray61, false);
        int[] intArray73 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray61, (int) (byte) 0);
        int int75 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray73, (int) ' ');
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[35]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 2 + "'", int75 == 2);
    }

    @Test
    public void test1962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1962");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 10);
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (short) 100);
        int[] intArray28 = new int[] { ' ', (byte) -1 };
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray36, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray44, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray28, (-1), (int) ' ', (int) (byte) 10, intArray44, false);
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, 100);
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 100);
        int int56 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray52, (-1), 2, (int) (byte) -1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, 0, 2, 0, intArray52, false);
        int int62 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (-1), (-1), 0);
        int[] intArray68 = new int[] { (-1), 100 };
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) (byte) 1);
        int[] intArray76 = new int[] { (-1), 100 };
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray76, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray70, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray78, false);
        int[] intArray82 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray78, (int) ' ');
        int[] intArray84 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray82, (int) (byte) 0);
        int int88 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray84, 0, 1, (-1));
        int int92 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray84, (int) (byte) 10, (int) (short) 1, 0);
        int int94 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray84, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) (byte) -1, 0, (int) (byte) 0, intArray84, false);
        int[] intArray98 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 2 + "'", int94 == 2);
        org.junit.Assert.assertNotNull(intArray98);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray98), "[-1, -1]");
    }

    @Test
    public void test1963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1963");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int int28 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray26, 0);
        int[] intArray33 = new int[] { 10 };
        int[] intArray35 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray33, (int) '4');
        int[] intArray40 = new int[] { '#' };
        int int42 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray40, (int) (short) 0);
        int int44 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray40, (int) (byte) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray35, 10, (int) (byte) 1, (int) (short) 0, intArray40, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, (int) (byte) 1, (int) (byte) 0, (int) (short) 1, intArray40, true);
        int[] intArray52 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, (int) (short) 0, (int) (short) 0, 1, intArray52, true);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[10]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[35]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
    }

    @Test
    public void test1964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1964");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 1, (int) (byte) 1, (int) (short) -1, intArray32, false);
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        int[] intArray50 = new int[] { (-1), 100 };
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray44, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray52, false);
        int[] intArray59 = new int[] { '#' };
        int int61 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray59, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray44, (int) (short) -1, 1, 2, intArray59, true);
        int[] intArray65 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray59, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, (int) (short) 100, 0, 1, intArray65, false);
        int[] intArray69 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 100);
        int int71 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray32, (-1));
        int int73 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray32, (int) ' ');
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[35]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[1, 1]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
    }

    @Test
    public void test1965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1965");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int int8 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, 0);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, 4);
        int int14 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray6, (int) (short) 0, (int) (short) 10, (int) (short) 1);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, 10);
        java.lang.Class<?> wildcardClass17 = intArray6.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test1966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1966");
        int[] intArray1 = new int[] { 10 };
        int[] intArray3 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray1, (int) '4');
        int[] intArray9 = new int[] { ' ', (byte) -1 };
        int[] intArray15 = new int[] { (-1), 100 };
        int[] intArray17 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray15, (int) (byte) 1);
        int[] intArray23 = new int[] { (-1), 100 };
        int[] intArray25 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray23, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray17, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray25, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray9, (-1), (int) ' ', (int) (byte) 10, intArray25, false);
        int[] intArray31 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray9, 100);
        int[] intArray33 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray31, (int) '4');
        int[] intArray39 = new int[] { (-1), 100 };
        int[] intArray41 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray39, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray33, 1, (int) (byte) 1, (int) (short) -1, intArray39, false);
        int[] intArray49 = new int[] { (-1), 100 };
        int[] intArray51 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray49, (int) (byte) 1);
        int[] intArray57 = new int[] { (-1), 100 };
        int[] intArray59 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray57, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray51, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray59, false);
        int[] intArray66 = new int[] { '#' };
        int int68 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray66, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray51, (int) (short) -1, 1, 2, intArray66, true);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray39, (int) (short) 100, 0, 1, intArray72, false);
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray39, (int) (byte) 100);
        int int80 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray39, (int) '#', (int) (short) 100, (-1));
        int[] intArray82 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray39, (int) (short) 100);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray3, 100, (int) ' ', 0, intArray82, true);
        int[] intArray86 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray82, (int) (byte) -1);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[10]");
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[35]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[1, 1]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[1, 1]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1]");
    }

    @Test
    public void test1967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1967");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { ' ', (byte) -1 };
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray36, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, (-1), (int) ' ', (int) (byte) 10, intArray36, false);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (int) 'a', 100, (int) (byte) 1, intArray56, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, 10, (int) (short) 0, (int) (short) -1, intArray36, true);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, 0);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, 10);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 100);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 0);
        int int76 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, (int) (byte) 0);
        int int78 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, 100);
        int[] intArray80 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, 100);
        int int84 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray36, 2, (int) (short) 10, (int) (short) -1);
        java.lang.Class<?> wildcardClass85 = intArray36.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2 + "'", int76 == 2);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 2 + "'", int78 == 2);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test1968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1968");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, 10);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) 'a');
        int int12 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, 0);
        int[] intArray18 = new int[] { ' ', (byte) -1 };
        int[] intArray24 = new int[] { (-1), 100 };
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 1);
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray26, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray34, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (-1), (int) ' ', (int) (byte) 10, intArray34, false);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 100);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) '4');
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray42, 1, (int) (byte) 1, (int) (short) -1, intArray48, false);
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (short) 10);
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (short) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray8, (int) (short) 100, (int) (short) 1, 0, intArray56, false);
        // The following exception was thrown during execution in test generation
        try {
            int int62 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray8, (int) 'a', (int) (byte) 1, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
    }

    @Test
    public void test1969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1969");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) ' ');
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray6, (int) (short) 1, (-1), (int) (byte) 0);
        int int14 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray6, 10, (int) 'a', (int) (short) 10);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (int) '#');
        int[] intArray22 = new int[] { (-1), 100 };
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, (int) (byte) 1);
        int[] intArray30 = new int[] { (-1), 100 };
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray30, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray24, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray32, false);
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) ' ');
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        int[] intArray50 = new int[] { (-1), 100 };
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray44, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray52, false);
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) 'a');
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) ' ');
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) (byte) 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray36, (int) (byte) 1, (int) 'a', 0, intArray58, true);
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) (short) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray16, (int) 'a', (int) (byte) 1, (int) (byte) 0, intArray64, false);
        int[] intArray72 = new int[] { (-1), 100 };
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (int) (byte) 1);
        int[] intArray80 = new int[] { (-1), 100 };
        int[] intArray82 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray80, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray74, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray82, false);
        int[] intArray86 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray82, (int) ' ');
        int[] intArray88 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray82, (int) '4');
        int int92 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray88, (int) ' ', 100, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray16, (int) (short) 10, 3, (int) ' ', intArray88, false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
    }

    @Test
    public void test1970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1970");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) 'a', 100, (int) (byte) 1, intArray38, false);
        int int46 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, (int) (short) 1);
        int[] intArray52 = new int[] { (-1), 100 };
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) (byte) 1);
        int[] intArray60 = new int[] { (-1), 100 };
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray54, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray62, false);
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, (int) 'a');
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) ' ');
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) (byte) 10);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) (byte) 1);
        int int74 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray70, (int) (byte) 100);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray38, (int) (byte) 0, (int) ' ', (int) (byte) 1, intArray70, true);
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, 0);
        java.lang.Class<?> wildcardClass79 = intArray78.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2 + "'", int74 == 2);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test1971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1971");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 0);
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) '#');
        int int22 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray16, (int) ' ');
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, 4);
        java.lang.Class<?> wildcardClass25 = intArray24.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test1972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1972");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 10);
        int int24 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray20, (int) (byte) 100, 100, 10);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray20, (int) (byte) 0);
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray20, (int) (byte) 0, (int) (short) 1, (int) (short) 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
    }

    @Test
    public void test1973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1973");
        int[] intArray1 = new int[] { 10 };
        int[] intArray3 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray1, (int) '4');
        int[] intArray8 = new int[] { '#' };
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) (short) 0);
        int int12 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) (byte) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray3, 10, (int) (byte) 1, (int) (short) 0, intArray8, false);
        int[] intArray19 = new int[] { 10 };
        int[] intArray21 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, (int) '4');
        int[] intArray26 = new int[] { '#' };
        int int28 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray26, (int) (short) 0);
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray26, (int) (byte) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray21, 10, (int) (byte) 1, (int) (short) 0, intArray26, false);
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray3, 0, 0, 1, intArray34, false);
        int int38 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray3, (int) ' ');
        java.lang.Class<?> wildcardClass39 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[10]");
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[35]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[10]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[35]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test1974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1974");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { (-1), 100 };
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 1);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray22, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray30, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) 10, (int) '4', 10, intArray30, true);
        int[] intArray40 = new int[] { ' ', (byte) -1 };
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray40, (-1), (int) ' ', (int) (byte) 10, intArray56, false);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, 0);
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, (int) ' ');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, 2, (int) 'a', 4, intArray62, true);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, (int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            int int72 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray62, (-1), 4, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
    }

    @Test
    public void test1975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1975");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray19 = new int[] { '#' };
        int int21 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (short) -1, 1, 2, intArray19, true);
        int[] intArray25 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) '#');
        int int27 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray4, 100);
        int int29 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray4, (int) '4');
        int[] intArray35 = new int[] { (-1), 100 };
        int[] intArray37 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray35, (int) (byte) 1);
        int[] intArray43 = new int[] { (-1), 100 };
        int[] intArray45 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray43, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray37, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray45, false);
        int[] intArray49 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray45, (int) 'a');
        int[] intArray51 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray49, (int) ' ');
        int[] intArray60 = new int[] { (short) 100, (short) 0, 100, (byte) -1, 10 };
        int int64 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray60, 1, (int) (byte) 100, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray51, 100, (int) '#', (int) (short) 10, intArray60, false);
        int int68 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray51, 0);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray51, (int) (short) 1);
        int int72 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray51, 4);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, (int) (byte) 100, (int) (short) 1, 4, intArray51, false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[100, 0, 100, -1, 10]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2 + "'", int68 == 2);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 2 + "'", int72 == 2);
    }

    @Test
    public void test1976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1976");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 100);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) 'a');
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        int[] intArray44 = new int[] { (-1), 100 };
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray38, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray46, false);
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) 'a');
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) ' ');
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) (byte) 10);
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) (short) 100);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray28, (int) (byte) -1, (int) (byte) 10, (-1), intArray56, true);
        // The following exception was thrown during execution in test generation
        try {
            int int62 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray28, (int) (short) 0, (int) (short) 1, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
    }

    @Test
    public void test1977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1977");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 0);
        int[] intArray30 = new int[] { (-1), 100 };
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray30, (int) (byte) 1);
        int[] intArray38 = new int[] { (-1), 100 };
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray32, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray40, false);
        int[] intArray47 = new int[] { '#' };
        int int49 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray47, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray32, (int) (short) -1, 1, 2, intArray47, true);
        int[] intArray53 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray47, 10);
        int[] intArray55 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray47, 0);
        int[] intArray57 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray47, (int) '#');
        int[] intArray59 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray47, (int) (byte) 100);
        int int61 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray47, (int) (short) 10);
        int[] intArray67 = new int[] { (-1), 100 };
        int[] intArray69 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray67, (int) (byte) 1);
        int[] intArray71 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray67, (int) ' ');
        int[] intArray73 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray67, (int) (short) 100);
        int int75 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray67, 1);
        int int79 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray67, (-1), 1, 2);
        int[] intArray81 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray67, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray47, 3, (int) (short) 10, (int) (byte) -1, intArray67, true);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray24, (-1), 100, (int) (byte) 0, intArray67, true);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[35]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[0, 0]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[1, 1]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1]");
    }

    @Test
    public void test1978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1978");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 1);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (short) 1);
        int int28 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) 'a');
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, 0);
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, 0);
        java.lang.Class<?> wildcardClass33 = intArray32.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test1979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1979");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (int) (byte) -1);
        int[] intArray12 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray8, (-1), (int) (short) 1, (int) (byte) -1, intArray12, true);
        int[] intArray20 = new int[] { ' ', (byte) -1 };
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray36, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, (-1), (int) ' ', (int) (byte) 10, intArray36, false);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, 1);
        int int44 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray42, (int) (short) 1);
        int[] intArray50 = new int[] { (-1), 100 };
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) (byte) 1);
        int[] intArray58 = new int[] { (-1), 100 };
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray52, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray60, false);
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) 'a');
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) (short) 100);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray42, (int) '#', (int) 'a', (int) '#', intArray66, false);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray12, 100, 4, (int) (short) 0, intArray70, false);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2 + "'", int44 == 2);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
    }

    @Test
    public void test1980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1980");
        int[] intArray1 = new int[] { 10 };
        int[] intArray3 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray1, (int) '4');
        int[] intArray8 = new int[] { '#' };
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) (short) 0);
        int int12 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) (byte) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray3, 10, (int) (byte) 1, (int) (short) 0, intArray8, false);
        int[] intArray19 = new int[] { 10 };
        int[] intArray21 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, (int) '4');
        int[] intArray26 = new int[] { '#' };
        int int28 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray26, (int) (short) 0);
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray26, (int) (byte) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray21, 10, (int) (byte) 1, (int) (short) 0, intArray26, false);
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray3, 0, 0, 1, intArray34, false);
        int int38 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray3, (int) ' ');
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray3, (int) ' ');
        int[] intArray44 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray3, (int) (byte) 10, (int) (byte) -1, (int) (short) 10, intArray44, true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[10]");
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[35]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[10]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[35]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
    }

    @Test
    public void test1981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1981");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (-1));
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, 10);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) ' ');
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (short) 100);
        int int36 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray28, 1);
        int int40 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray28, (-1), 1, 2);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, 0);
        int int44 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray28, (int) (byte) 10);
        int int48 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray28, 4, (int) (byte) 100, 4);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, 0, 10, 0, intArray28, false);
        int int54 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray20, (int) '#', (int) '4', (int) (byte) 1);
        int[] intArray60 = new int[] { (-1), 100 };
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) (byte) 1);
        int[] intArray68 = new int[] { (-1), 100 };
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray62, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray70, false);
        int[] intArray77 = new int[] { '#' };
        int int79 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray77, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray62, (int) (short) -1, 1, 2, intArray77, true);
        int[] intArray83 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray77, 10);
        int[] intArray85 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray77, 0);
        int[] intArray87 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray77, (int) '#');
        int[] intArray89 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray77, (int) (byte) 100);
        int int91 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray77, (int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, 3, (int) '#', (int) (short) 100, intArray77, true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[35]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[0, 0]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
    }

    @Test
    public void test1982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1982");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray19 = new int[] { '#' };
        int int21 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (short) -1, 1, 2, intArray19, true);
        int[] intArray25 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 10);
        int[] intArray27 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, (int) 'a');
        int int29 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) 10);
        int[] intArray31 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, (-1));
        java.lang.Class<?> wildcardClass32 = intArray19.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test1983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1983");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray22 = new int[] { (-1), 100 };
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, (int) (byte) 1);
        int[] intArray30 = new int[] { (-1), 100 };
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray30, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray24, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray32, false);
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) 'a');
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) ' ');
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray16, (int) (byte) 1, (int) 'a', 0, intArray38, true);
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            int int48 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray38, (int) '4', 2, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
    }

    @Test
    public void test1984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1984");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (-1));
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) '#');
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) 'a');
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) ' ');
        int[] intArray53 = new int[] { (short) 100, (short) 0, 100, (byte) -1, 10 };
        int int57 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray53, 1, (int) (byte) 100, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray44, 100, (int) '#', (int) (short) 10, intArray53, false);
        int int61 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray44, 0);
        int[] intArray63 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) (short) 1);
        int[] intArray69 = new int[] { (-1), 100 };
        int[] intArray71 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray69, (int) (byte) 1);
        int[] intArray77 = new int[] { (-1), 100 };
        int[] intArray79 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray77, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray71, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray79, false);
        int[] intArray86 = new int[] { '#' };
        int int88 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray86, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray71, (int) (short) -1, 1, 2, intArray86, true);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray44, (int) (short) 10, 2, (int) (byte) 1, intArray71, true);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray22, 100, (int) ' ', (-1), intArray71, true);
        int[] intArray96 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, (int) (byte) 1);
        int[] intArray98 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray96, (int) (short) 100);
        java.lang.Class<?> wildcardClass99 = intArray96.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[100, 0, 100, -1, 10]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2 + "'", int61 == 2);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[35]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray98);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray98), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test1985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1985");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 100);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) 'a');
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, 1);
        int int34 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray30, (int) (byte) 0, 0, 0);
        int[] intArray39 = new int[] { 10 };
        int[] intArray41 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray39, (int) '4');
        int[] intArray46 = new int[] { '#' };
        int int48 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray46, (int) (short) 0);
        int int50 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray46, (int) (byte) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray41, 10, (int) (byte) 1, (int) (short) 0, intArray46, false);
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, 100, (int) (short) 100, 0, intArray46, true);
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, 4);
        // The following exception was thrown during execution in test generation
        try {
            int int62 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray58, (int) ' ', (int) (short) -1, 4);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[35]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
    }

    @Test
    public void test1986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1986");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 100);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 1);
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) '4');
        int int32 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray2, (int) (byte) 1);
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 100);
        int int36 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray2, 100);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
    }

    @Test
    public void test1987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1987");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, 10);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) 'a');
        int int12 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, 0);
        int[] intArray14 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (short) 10);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, 2);
        java.lang.Class<?> wildcardClass17 = intArray16.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test1988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1988");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray27 = new int[] { (short) 100, (short) 0, 100, (byte) -1, 10 };
        int int31 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray27, 1, (int) (byte) 100, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, 100, (int) '#', (int) (short) 10, intArray27, false);
        int int35 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, 0);
        int[] intArray41 = new int[] { (-1), 100 };
        int[] intArray43 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray41, (int) (byte) 1);
        int[] intArray49 = new int[] { (-1), 100 };
        int[] intArray51 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray49, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray43, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray51, false);
        int[] intArray55 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray51, (int) ' ');
        int[] intArray57 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray55, (int) (byte) 0);
        int[] intArray59 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray57, (int) (byte) 1);
        int int63 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray57, (int) ' ', 10, 0);
        int[] intArray65 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray57, (int) (short) 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, 0, (int) (short) 100, (int) '#', intArray65, false);
        int[] intArray73 = new int[] { (-1), 100 };
        int[] intArray75 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray73, (int) (byte) 1);
        int[] intArray77 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray73, (int) ' ');
        int int81 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray77, (int) (short) 1, (-1), (int) (byte) 0);
        int[] intArray85 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray77, 2, (int) '4', (int) (short) 0, intArray85, true);
        int int91 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray77, (int) (short) -1, (int) ' ', (int) (byte) 1);
        int[] intArray93 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray77, (int) '#');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, 0, 2, (int) (short) -1, intArray77, false);
        int int97 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray77, 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[100, 0, 100, -1, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 2 + "'", int97 == 2);
    }

    @Test
    public void test1989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1989");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 1);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (short) 1);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            int int32 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray24, (int) '4', (int) (byte) 1, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
    }

    @Test
    public void test1990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1990");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray22 = new int[] { ' ', (byte) -1 };
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray22, (-1), (int) ' ', (int) (byte) 10, intArray38, false);
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray50, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray58, false);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray38, (int) 'a', 100, (int) (byte) 1, intArray58, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray12, (int) (short) 100, (int) 'a', (int) (short) 0, intArray38, true);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (-1));
        int int70 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray68, (int) '4');
        // The following exception was thrown during execution in test generation
        try {
            int int74 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray68, (int) (byte) 10, 2, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2 + "'", int70 == 2);
    }

    @Test
    public void test1991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1991");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 10);
        int[] intArray26 = new int[] { ' ', (byte) -1 };
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        int[] intArray40 = new int[] { (-1), 100 };
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray34, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray42, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, (-1), (int) ' ', (int) (byte) 10, intArray42, false);
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, 100);
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) '4');
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray50, 1, (int) (byte) 1, (int) (short) -1, intArray56, false);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (short) 10);
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, (int) (short) 0, (int) '#', (int) (byte) 1, intArray64, true);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, 1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
    }

    @Test
    public void test1992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1992");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int int8 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, 0);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, (int) (short) -1);
        int[] intArray16 = new int[] { ' ', (byte) -1 };
        int[] intArray22 = new int[] { (-1), 100 };
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, (int) (byte) 1);
        int[] intArray30 = new int[] { (-1), 100 };
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray30, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray24, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray32, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray16, (-1), (int) ' ', (int) (byte) 10, intArray32, false);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, 100);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) '4');
        int[] intArray46 = new int[] { ' ', (byte) -1 };
        int[] intArray52 = new int[] { (-1), 100 };
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) (byte) 1);
        int[] intArray60 = new int[] { (-1), 100 };
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray54, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray62, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray46, (-1), (int) ' ', (int) (byte) 10, intArray62, false);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, 100);
        int int70 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray46, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray38, 10, (int) 'a', (-1), intArray46, true);
        int int74 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray46, (int) ' ');
        int int76 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray46, (int) '4');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray6, (int) (short) 0, (int) (short) 10, (int) (byte) 0, intArray46, false);
        int[] intArray80 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) 'a');
        int[] intArray82 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, 100);
        int int86 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray46, (int) '#', 1, (int) (short) 1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2 + "'", int74 == 2);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2 + "'", int76 == 2);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 2 + "'", int86 == 2);
    }

    @Test
    public void test1993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1993");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 100);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) 'a');
        int[] intArray34 = new int[] { ' ', (byte) -1 };
        int[] intArray40 = new int[] { (-1), 100 };
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) (byte) 1);
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray42, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray50, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray34, (-1), (int) ' ', (int) (byte) 10, intArray50, false);
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, 100);
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) '4');
        int[] intArray64 = new int[] { (-1), 100 };
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray58, 1, (int) (byte) 1, (int) (short) -1, intArray64, false);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) (short) 10);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) (short) 1);
        int[] intArray78 = new int[] { (-1), 100 };
        int[] intArray80 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray78, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray64, (int) (byte) 10, (int) (short) 1, 1, intArray78, false);
        int int84 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray78, (int) '#');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray28, 10, (int) '#', (int) (byte) 1, intArray78, true);
        java.lang.Class<?> wildcardClass87 = intArray28.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1);
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test1994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1994");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int int24 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) (short) 1);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) '#');
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 2);
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 4);
        java.lang.Class<?> wildcardClass31 = intArray18.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test1995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1995");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, 10);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) 'a');
        int int12 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, 0);
        int[] intArray14 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (short) 10);
        int int18 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray8, (int) (byte) 10, (int) (short) 0, (int) (byte) 0);
        int[] intArray24 = new int[] { (-1), 100 };
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 1);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (short) 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray8, (-1), 0, 1, intArray28, true);
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) 'a');
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) -1);
        int int36 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray34, (int) '4');
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[0, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
    }

    @Test
    public void test1996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1996");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 1);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (short) 1);
        int int28 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) 'a');
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, 0);
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) ' ');
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (short) 1);
        int int36 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray34, (int) '4');
        int int40 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray34, (int) (short) 10, (int) (byte) 1, (int) (short) 0);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, 10);
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            int int48 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray34, (int) '4', 0, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[0, 1]");
    }

    @Test
    public void test1997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1997");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 0);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (byte) 0);
        java.lang.Class<?> wildcardClass27 = intArray24.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test1998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1998");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) 'a', 100, (int) (byte) 1, intArray38, false);
        int int46 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, (int) (short) 1);
        int[] intArray52 = new int[] { (-1), 100 };
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) (byte) 1);
        int[] intArray60 = new int[] { (-1), 100 };
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray54, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray62, false);
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, (int) 'a');
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) ' ');
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) (byte) 10);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) (byte) 1);
        int int74 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray70, (int) (byte) 100);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray38, (int) (byte) 0, (int) ' ', (int) (byte) 1, intArray70, true);
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, 0);
        int int82 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray70, (int) (short) 0, (int) '4', 1);
        java.lang.Class<?> wildcardClass83 = intArray70.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2 + "'", int74 == 2);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test1999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1999");
        int[] intArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int4 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray0, (int) (byte) 0, 0, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test2000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test2000");
        int[] intArray0 = null;
        int int4 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray0, (int) (byte) 1, (int) 'a', 2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }
}


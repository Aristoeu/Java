package Combination;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest2 {

    public static boolean debug = false;

    @Test
    public void test1001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1001");
        java.lang.Class[][] classArray1 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray2 = (java.lang.Class<?>[][]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>[]>> wildcardClassArraySetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (byte) 1);
        java.util.List<java.util.TreeSet<java.lang.reflect.Type[]>> typeArraySetList6 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.Type[][]) wildcardClassArray2, 5);
        java.util.List<java.util.TreeSet<java.lang.Object>> objSetList8 = com.thealgorithms.backtracking.Combination.combination((java.lang.Object[]) wildcardClassArray2, (int) (short) 0);
        java.util.List<java.util.TreeSet<java.lang.Class<?>[]>> wildcardClassArraySetList10 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (short) 0);
        java.lang.Class<?> wildcardClass11 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList4);
        org.junit.Assert.assertNotNull(typeArraySetList6);
        org.junit.Assert.assertNull(objSetList8);
        org.junit.Assert.assertNull(wildcardClassArraySetList10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1002");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>>> wildcardClassSetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (byte) 0);
        java.util.List<java.util.TreeSet<java.lang.invoke.TypeDescriptor>> typeDescriptorSetList6 = com.thealgorithms.backtracking.Combination.combination((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2, (int) (byte) 100);
        java.util.List<java.util.TreeSet<java.lang.invoke.TypeDescriptor>> typeDescriptorSetList8 = com.thealgorithms.backtracking.Combination.combination((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2, (int) (short) 10);
        java.util.List<java.util.TreeSet<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>>> wildcardClassOfFieldSetList10 = com.thealgorithms.backtracking.Combination.combination((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) wildcardClassArray2, (int) ' ');
        java.util.List<java.util.TreeSet<java.lang.reflect.AnnotatedElement>> annotatedElementSetList12 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2, 0);
        java.lang.Class<?> wildcardClass13 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNull(wildcardClassSetList4);
        org.junit.Assert.assertNotNull(typeDescriptorSetList6);
        org.junit.Assert.assertNotNull(typeDescriptorSetList8);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldSetList10);
        org.junit.Assert.assertNull(annotatedElementSetList12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1003");
        java.lang.Class[][][][] classArray1 = new java.lang.Class[0][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][]>> wildcardClassArraySetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (byte) 100);
        java.util.List<java.util.TreeSet<java.lang.reflect.Type[][][]>> typeArraySetList6 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.Type[][][][]) wildcardClassArray2, 3);
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][]>> wildcardClassArraySetList8 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (short) 10);
        java.lang.Class<?> wildcardClass9 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList4);
        org.junit.Assert.assertNotNull(typeArraySetList6);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1004");
        java.util.List[][][] listArray1 = new java.util.List[0][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[][][] strSetListArray2 = (java.util.List<java.util.TreeSet<java.lang.String>>[][][]) listArray1;
        java.util.List[][][] listArray4 = new java.util.List[0][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[][][] strSetListArray5 = (java.util.List<java.util.TreeSet<java.lang.String>>[][][]) listArray4;
        java.util.List[][][] listArray7 = new java.util.List[0][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[][][] strSetListArray8 = (java.util.List<java.util.TreeSet<java.lang.String>>[][][]) listArray7;
        java.util.List[][][] listArray10 = new java.util.List[0][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[][][] strSetListArray11 = (java.util.List<java.util.TreeSet<java.lang.String>>[][][]) listArray10;
        java.util.List[][][] listArray13 = new java.util.List[0][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[][][] strSetListArray14 = (java.util.List<java.util.TreeSet<java.lang.String>>[][][]) listArray13;
        java.util.List[][][][] listArray16 = new java.util.List[5][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[][][][] strSetListArray17 = (java.util.List<java.util.TreeSet<java.lang.String>>[][][][]) listArray16;
        strSetListArray17[0] = strSetListArray2;
        strSetListArray17[1] = strSetListArray5;
        strSetListArray17[2] = strSetListArray8;
        strSetListArray17[3] = strSetListArray11;
        strSetListArray17[4] = strSetListArray14;
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[][][]>> listArraySetList29 = com.thealgorithms.backtracking.Combination.combination(strSetListArray17, 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[][][]>> listArraySetList31 = com.thealgorithms.backtracking.Combination.combination(strSetListArray17, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strSetListArray2);
        org.junit.Assert.assertNotNull(listArray4);
        org.junit.Assert.assertNotNull(strSetListArray5);
        org.junit.Assert.assertNotNull(listArray7);
        org.junit.Assert.assertNotNull(strSetListArray8);
        org.junit.Assert.assertNotNull(listArray10);
        org.junit.Assert.assertNotNull(strSetListArray11);
        org.junit.Assert.assertNotNull(listArray13);
        org.junit.Assert.assertNotNull(strSetListArray14);
        org.junit.Assert.assertNotNull(listArray16);
        org.junit.Assert.assertNotNull(strSetListArray17);
        org.junit.Assert.assertNull(listArraySetList29);
    }

    @Test
    public void test1005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1005");
        java.util.List[] listArray1 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[] strSetListArray2 = (java.util.List<java.util.TreeSet<java.lang.String>>[]) listArray1;
        java.util.List[] listArray4 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[] strSetListArray5 = (java.util.List<java.util.TreeSet<java.lang.String>>[]) listArray4;
        java.util.List[][] listArray7 = new java.util.List[2][];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[][] strSetListArray8 = (java.util.List<java.util.TreeSet<java.lang.String>>[][]) listArray7;
        strSetListArray8[0] = strSetListArray2;
        strSetListArray8[1] = strSetListArray5;
        java.util.List[][][] listArray14 = new java.util.List[1][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[][][] strSetListArray15 = (java.util.List<java.util.TreeSet<java.lang.String>>[][][]) listArray14;
        strSetListArray15[0] = strSetListArray8;
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[][]>> listArraySetList19 = com.thealgorithms.backtracking.Combination.combination(strSetListArray15, (int) (short) 10);
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[][]>> listArraySetList21 = com.thealgorithms.backtracking.Combination.combination(strSetListArray15, (int) (short) 0);
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[][]>> listArraySetList23 = com.thealgorithms.backtracking.Combination.combination(strSetListArray15, 6);
        java.lang.Class<?> wildcardClass24 = listArraySetList23.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strSetListArray2);
        org.junit.Assert.assertNotNull(listArray4);
        org.junit.Assert.assertNotNull(strSetListArray5);
        org.junit.Assert.assertNotNull(listArray7);
        org.junit.Assert.assertNotNull(strSetListArray8);
        org.junit.Assert.assertNotNull(listArray14);
        org.junit.Assert.assertNotNull(strSetListArray15);
        org.junit.Assert.assertNotNull(listArraySetList19);
        org.junit.Assert.assertNull(listArraySetList21);
        org.junit.Assert.assertNotNull(listArraySetList23);
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test1006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1006");
        java.lang.String[][] strArray0 = new java.lang.String[][] {};
        java.lang.String[][][] strArray1 = new java.lang.String[][][] { strArray0 };
        java.util.List<java.util.TreeSet<java.lang.String[][]>> strArraySetList3 = com.thealgorithms.backtracking.Combination.combination(strArray1, (int) (byte) 100);
        java.util.List<java.util.TreeSet<java.io.Serializable>> serializableSetList5 = com.thealgorithms.backtracking.Combination.combination((java.io.Serializable[]) strArray1, 0);
        java.util.List<java.util.TreeSet<java.lang.String[][]>> strArraySetList7 = com.thealgorithms.backtracking.Combination.combination(strArray1, (int) '#');
        java.util.List<java.util.TreeSet<java.lang.String[][]>> strArraySetList9 = com.thealgorithms.backtracking.Combination.combination(strArray1, (int) (byte) 0);
        java.util.List<java.util.TreeSet<java.lang.String[][]>> strArraySetList11 = com.thealgorithms.backtracking.Combination.combination(strArray1, (int) (byte) 0);
        java.lang.Class<?> wildcardClass12 = strArray1.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArraySetList3);
        org.junit.Assert.assertNull(serializableSetList5);
        org.junit.Assert.assertNotNull(strArraySetList7);
        org.junit.Assert.assertNull(strArraySetList9);
        org.junit.Assert.assertNull(strArraySetList11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test1007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1007");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.util.TreeSet<java.lang.String>> strSetList4 = com.thealgorithms.backtracking.Combination.combination(strArray2, (int) '#');
        java.util.List<java.util.TreeSet<java.lang.CharSequence>> charSequenceSetList6 = com.thealgorithms.backtracking.Combination.combination((java.lang.CharSequence[]) strArray2, 10);
        java.util.List<java.util.TreeSet<java.lang.constant.Constable>> constableSetList8 = com.thealgorithms.backtracking.Combination.combination((java.lang.constant.Constable[]) strArray2, (int) (byte) 1);
        java.util.List<java.util.TreeSet<java.lang.Object>> objSetList10 = com.thealgorithms.backtracking.Combination.combination((java.lang.Object[]) strArray2, (int) (short) 0);
        java.util.List<java.util.TreeSet<java.lang.CharSequence>> charSequenceSetList12 = com.thealgorithms.backtracking.Combination.combination((java.lang.CharSequence[]) strArray2, 3);
        java.lang.Class<?> wildcardClass13 = charSequenceSetList12.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strSetList4);
        org.junit.Assert.assertNotNull(charSequenceSetList6);
        org.junit.Assert.assertNotNull(constableSetList8);
        org.junit.Assert.assertNull(objSetList10);
        org.junit.Assert.assertNotNull(charSequenceSetList12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1008");
        java.util.List[][] listArray1 = new java.util.List[0][];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[][] strSetListArray2 = (java.util.List<java.util.TreeSet<java.lang.String>>[][]) listArray1;
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[]>> listArraySetList4 = com.thealgorithms.backtracking.Combination.combination(strSetListArray2, (int) (short) -1);
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[]>> listArraySetList6 = com.thealgorithms.backtracking.Combination.combination(strSetListArray2, (-1));
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[]>> listArraySetList8 = com.thealgorithms.backtracking.Combination.combination(strSetListArray2, (-1));
        java.lang.Class<?> wildcardClass9 = listArraySetList8.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strSetListArray2);
        org.junit.Assert.assertNotNull(listArraySetList4);
        org.junit.Assert.assertNotNull(listArraySetList6);
        org.junit.Assert.assertNotNull(listArraySetList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1009");
        java.lang.reflect.Type[] typeArray0 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[][] typeArray2 = new java.lang.reflect.Type[][] { typeArray0, typeArray1 };
        java.util.List<java.util.TreeSet<java.lang.reflect.Type[]>> typeArraySetList4 = com.thealgorithms.backtracking.Combination.combination(typeArray2, 0);
        java.util.List<java.util.TreeSet<java.lang.reflect.Type[]>> typeArraySetList6 = com.thealgorithms.backtracking.Combination.combination(typeArray2, (int) (short) 0);
        java.lang.Class<?> wildcardClass7 = typeArray2.getClass();
        org.junit.Assert.assertNotNull(typeArray0);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNull(typeArraySetList4);
        org.junit.Assert.assertNull(typeArraySetList6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test1010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1010");
        java.lang.Class[][] classArray1 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray2 = (java.lang.Class<?>[][]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>[]>> wildcardClassArraySetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (byte) 1);
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration[]>> genericDeclarationArraySetList6 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray2, (int) (short) -1);
        java.util.List<java.util.TreeSet<java.lang.reflect.Type[]>> typeArraySetList8 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.Type[][]) wildcardClassArray2, (int) (short) 100);
        java.util.List<java.util.TreeSet<java.lang.reflect.Type[]>> typeArraySetList10 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.Type[][]) wildcardClassArray2, 0);
        java.util.List<java.util.TreeSet<java.lang.Object>> objSetList12 = com.thealgorithms.backtracking.Combination.combination((java.lang.Object[]) wildcardClassArray2, 100);
        java.lang.Class<?> wildcardClass13 = objSetList12.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList4);
        org.junit.Assert.assertNotNull(genericDeclarationArraySetList6);
        org.junit.Assert.assertNotNull(typeArraySetList8);
        org.junit.Assert.assertNull(typeArraySetList10);
        org.junit.Assert.assertNotNull(objSetList12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1011");
        java.lang.String[] strArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.TreeSet<java.lang.String>> strSetList2 = com.thealgorithms.backtracking.Combination.combination(strArray0, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1012");
        java.lang.Class[][][][][] classArray1 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][][]>> wildcardClassArraySetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (short) 10);
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][][]>> wildcardClassArraySetList6 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (byte) 10);
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][][]>> wildcardClassArraySetList8 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (short) 0);
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][][]>> wildcardClassArraySetList10 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, 3);
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][][]>> wildcardClassArraySetList12 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (byte) 10);
        java.lang.Class<?> wildcardClass13 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList4);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList6);
        org.junit.Assert.assertNull(wildcardClassArraySetList8);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList10);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1013");
        java.util.List[][][] listArray1 = new java.util.List[0][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[][][] strSetListArray2 = (java.util.List<java.util.TreeSet<java.lang.String>>[][][]) listArray1;
        java.util.List[][][] listArray4 = new java.util.List[0][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[][][] strSetListArray5 = (java.util.List<java.util.TreeSet<java.lang.String>>[][][]) listArray4;
        java.util.List[][][] listArray7 = new java.util.List[0][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[][][] strSetListArray8 = (java.util.List<java.util.TreeSet<java.lang.String>>[][][]) listArray7;
        java.util.List[][][] listArray10 = new java.util.List[0][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[][][] strSetListArray11 = (java.util.List<java.util.TreeSet<java.lang.String>>[][][]) listArray10;
        java.util.List[][][] listArray13 = new java.util.List[0][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[][][] strSetListArray14 = (java.util.List<java.util.TreeSet<java.lang.String>>[][][]) listArray13;
        java.util.List[][][] listArray16 = new java.util.List[0][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[][][] strSetListArray17 = (java.util.List<java.util.TreeSet<java.lang.String>>[][][]) listArray16;
        java.util.List[][][][] listArray19 = new java.util.List[6][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[][][][] strSetListArray20 = (java.util.List<java.util.TreeSet<java.lang.String>>[][][][]) listArray19;
        strSetListArray20[0] = strSetListArray2;
        strSetListArray20[1] = strSetListArray5;
        strSetListArray20[2] = strSetListArray8;
        strSetListArray20[3] = strSetListArray11;
        strSetListArray20[4] = strSetListArray14;
        strSetListArray20[5] = strSetListArray17;
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[][][]>> listArraySetList34 = com.thealgorithms.backtracking.Combination.combination(strSetListArray20, (int) (short) 0);
        java.lang.Class<?> wildcardClass35 = strSetListArray20.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strSetListArray2);
        org.junit.Assert.assertNotNull(listArray4);
        org.junit.Assert.assertNotNull(strSetListArray5);
        org.junit.Assert.assertNotNull(listArray7);
        org.junit.Assert.assertNotNull(strSetListArray8);
        org.junit.Assert.assertNotNull(listArray10);
        org.junit.Assert.assertNotNull(strSetListArray11);
        org.junit.Assert.assertNotNull(listArray13);
        org.junit.Assert.assertNotNull(strSetListArray14);
        org.junit.Assert.assertNotNull(listArray16);
        org.junit.Assert.assertNotNull(strSetListArray17);
        org.junit.Assert.assertNotNull(listArray19);
        org.junit.Assert.assertNotNull(strSetListArray20);
        org.junit.Assert.assertNull(listArraySetList34);
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test1014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1014");
        java.lang.String[][][][][] strArray0 = new java.lang.String[][][][][] {};
        java.util.List<java.util.TreeSet<java.lang.String[][][][]>> strArraySetList2 = com.thealgorithms.backtracking.Combination.combination(strArray0, 100);
        java.util.List<java.util.TreeSet<java.lang.String[][][][]>> strArraySetList4 = com.thealgorithms.backtracking.Combination.combination(strArray0, 4);
        java.util.List<java.util.TreeSet<java.lang.String[][][][]>> strArraySetList6 = com.thealgorithms.backtracking.Combination.combination(strArray0, 10);
        java.util.List<java.util.TreeSet<java.lang.String[][][][]>> strArraySetList8 = com.thealgorithms.backtracking.Combination.combination(strArray0, (-1));
        java.util.List<java.util.TreeSet<java.lang.String[][][][]>> strArraySetList10 = com.thealgorithms.backtracking.Combination.combination(strArray0, (int) (short) 100);
        java.lang.Class<?> wildcardClass11 = strArray0.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArraySetList2);
        org.junit.Assert.assertNotNull(strArraySetList4);
        org.junit.Assert.assertNotNull(strArraySetList6);
        org.junit.Assert.assertNotNull(strArraySetList8);
        org.junit.Assert.assertNotNull(strArraySetList10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1015");
        com.thealgorithms.backtracking.Combination combination0 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination[] combinationArray1 = new com.thealgorithms.backtracking.Combination[] { combination0 };
        java.util.List<java.util.TreeSet<com.thealgorithms.backtracking.Combination>> combinationSetList3 = com.thealgorithms.backtracking.Combination.combination(combinationArray1, (int) (byte) 100);
        java.lang.Class<?> wildcardClass4 = combinationSetList3.getClass();
        org.junit.Assert.assertNotNull(combinationArray1);
        org.junit.Assert.assertNotNull(combinationSetList3);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test1016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1016");
        com.thealgorithms.backtracking.Combination[][][] combinationArray0 = new com.thealgorithms.backtracking.Combination[][][] {};
        java.util.List<java.util.TreeSet<com.thealgorithms.backtracking.Combination[][]>> combinationArraySetList2 = com.thealgorithms.backtracking.Combination.combination(combinationArray0, (int) (byte) 1);
        java.util.List<java.util.TreeSet<com.thealgorithms.backtracking.Combination[][]>> combinationArraySetList4 = com.thealgorithms.backtracking.Combination.combination(combinationArray0, (int) (short) 100);
        java.lang.Class<?> wildcardClass5 = combinationArraySetList4.getClass();
        org.junit.Assert.assertNotNull(combinationArray0);
        org.junit.Assert.assertNotNull(combinationArraySetList2);
        org.junit.Assert.assertNotNull(combinationArraySetList4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test1017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1017");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.util.TreeSet<java.lang.String>> strSetList4 = com.thealgorithms.backtracking.Combination.combination(strArray2, (int) '#');
        java.util.List<java.util.TreeSet<java.lang.constant.ConstantDesc>> constantDescSetList6 = com.thealgorithms.backtracking.Combination.combination((java.lang.constant.ConstantDesc[]) strArray2, 1);
        java.util.List<java.util.TreeSet<java.lang.String>> strSetList8 = com.thealgorithms.backtracking.Combination.combination(strArray2, (int) (byte) -1);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "", "", "" };
        java.util.List<java.util.TreeSet<java.lang.Comparable<java.lang.String>>> strComparableSetList17 = com.thealgorithms.backtracking.Combination.combination((java.lang.Comparable<java.lang.String>[]) strArray15, (int) (byte) 1);
        java.util.List<java.util.TreeSet<java.io.Serializable>> serializableSetList19 = com.thealgorithms.backtracking.Combination.combination((java.io.Serializable[]) strArray15, (int) '4');
        java.util.List<java.util.TreeSet<java.lang.Object>> objSetList21 = com.thealgorithms.backtracking.Combination.combination((java.lang.Object[]) strArray15, (int) '#');
        java.util.List<java.util.TreeSet<java.lang.Comparable<java.lang.String>>> strComparableSetList23 = com.thealgorithms.backtracking.Combination.combination((java.lang.Comparable<java.lang.String>[]) strArray15, 100);
        java.util.List<java.util.TreeSet<java.lang.String>> strSetList25 = com.thealgorithms.backtracking.Combination.combination(strArray15, (int) '4');
        java.lang.String[] strArray28 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.util.TreeSet<java.lang.String>> strSetList30 = com.thealgorithms.backtracking.Combination.combination(strArray28, (int) '#');
        java.util.List<java.util.TreeSet<java.lang.CharSequence>> charSequenceSetList32 = com.thealgorithms.backtracking.Combination.combination((java.lang.CharSequence[]) strArray28, 10);
        java.util.List<java.util.TreeSet<java.lang.constant.Constable>> constableSetList34 = com.thealgorithms.backtracking.Combination.combination((java.lang.constant.Constable[]) strArray28, (int) (byte) 1);
        java.util.List<java.util.TreeSet<java.lang.String>> strSetList36 = com.thealgorithms.backtracking.Combination.combination(strArray28, (int) (short) 1);
        java.lang.String[] strArray39 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.util.TreeSet<java.lang.String>> strSetList41 = com.thealgorithms.backtracking.Combination.combination(strArray39, (int) '#');
        java.lang.String[] strArray44 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.util.TreeSet<java.lang.String>> strSetList46 = com.thealgorithms.backtracking.Combination.combination(strArray44, (int) '#');
        java.util.List[] listArray48 = new java.util.List[5];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[] strSetListArray49 = (java.util.List<java.util.TreeSet<java.lang.String>>[]) listArray48;
        strSetListArray49[0] = strSetList8;
        strSetListArray49[1] = strSetList25;
        strSetListArray49[2] = strSetList36;
        strSetListArray49[3] = strSetList41;
        strSetListArray49[4] = strSetList46;
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>>> setListSetList61 = com.thealgorithms.backtracking.Combination.combination(strSetListArray49, (int) (short) 0);
        java.util.List<java.util.TreeSet<java.util.Collection<java.util.TreeSet<java.lang.String>>>> setCollectionSetList63 = com.thealgorithms.backtracking.Combination.combination((java.util.Collection<java.util.TreeSet<java.lang.String>>[]) strSetListArray49, (int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass64 = setCollectionSetList63.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strSetList4);
        org.junit.Assert.assertNotNull(constantDescSetList6);
        org.junit.Assert.assertNotNull(strSetList8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strComparableSetList17);
        org.junit.Assert.assertNotNull(serializableSetList19);
        org.junit.Assert.assertNotNull(objSetList21);
        org.junit.Assert.assertNotNull(strComparableSetList23);
        org.junit.Assert.assertNotNull(strSetList25);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(strSetList30);
        org.junit.Assert.assertNotNull(charSequenceSetList32);
        org.junit.Assert.assertNotNull(constableSetList34);
        org.junit.Assert.assertNotNull(strSetList36);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(strSetList41);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(strSetList46);
        org.junit.Assert.assertNotNull(listArray48);
        org.junit.Assert.assertNotNull(strSetListArray49);
        org.junit.Assert.assertNull(setListSetList61);
        org.junit.Assert.assertNull(setCollectionSetList63);
    }

    @Test
    public void test1018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1018");
        java.lang.Class[][][][] classArray1 = new java.lang.Class[0][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][]>> wildcardClassArraySetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (byte) 100);
        java.util.List<java.util.TreeSet<java.lang.reflect.Type[][][]>> typeArraySetList6 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.Type[][][][]) wildcardClassArray2, 3);
        java.util.List<java.util.TreeSet<java.lang.reflect.Type[][][]>> typeArraySetList8 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.Type[][][][]) wildcardClassArray2, 100);
        java.util.List<java.util.TreeSet<java.lang.reflect.Type[][][]>> typeArraySetList10 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.Type[][][][]) wildcardClassArray2, (int) 'a');
        java.util.List<java.util.TreeSet<java.lang.reflect.Type[][][]>> typeArraySetList12 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.Type[][][][]) wildcardClassArray2, (-1));
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration[][][]>> genericDeclarationArraySetList14 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[][][][]) wildcardClassArray2, (int) (byte) -1);
        java.util.List<java.util.TreeSet<java.lang.reflect.Type[][][]>> typeArraySetList16 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.Type[][][][]) wildcardClassArray2, (int) ' ');
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][]>> wildcardClassArraySetList18 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) 'a');
        java.lang.Class<?> wildcardClass19 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList4);
        org.junit.Assert.assertNotNull(typeArraySetList6);
        org.junit.Assert.assertNotNull(typeArraySetList8);
        org.junit.Assert.assertNotNull(typeArraySetList10);
        org.junit.Assert.assertNotNull(typeArraySetList12);
        org.junit.Assert.assertNotNull(genericDeclarationArraySetList14);
        org.junit.Assert.assertNotNull(typeArraySetList16);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList18);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test1019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1019");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.util.TreeSet<java.lang.String>> strSetList4 = com.thealgorithms.backtracking.Combination.combination(strArray2, (int) '#');
        java.util.List<java.util.TreeSet<java.lang.constant.ConstantDesc>> constantDescSetList6 = com.thealgorithms.backtracking.Combination.combination((java.lang.constant.ConstantDesc[]) strArray2, 1);
        java.util.List<java.util.TreeSet<java.lang.String>> strSetList8 = com.thealgorithms.backtracking.Combination.combination(strArray2, (int) (byte) -1);
        java.lang.String[] strArray11 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.util.TreeSet<java.lang.String>> strSetList13 = com.thealgorithms.backtracking.Combination.combination(strArray11, (int) '#');
        java.util.List<java.util.TreeSet<java.lang.constant.ConstantDesc>> constantDescSetList15 = com.thealgorithms.backtracking.Combination.combination((java.lang.constant.ConstantDesc[]) strArray11, 1);
        java.util.List<java.util.TreeSet<java.lang.String>> strSetList17 = com.thealgorithms.backtracking.Combination.combination(strArray11, (int) (byte) -1);
        java.util.Collection[] collectionArray19 = new java.util.Collection[2];
        @SuppressWarnings("unchecked")
        java.util.Collection<java.util.TreeSet<java.lang.String>>[] strSetCollectionArray20 = (java.util.Collection<java.util.TreeSet<java.lang.String>>[]) collectionArray19;
        strSetCollectionArray20[0] = strSetList8;
        strSetCollectionArray20[1] = strSetList17;
        java.util.List<java.util.TreeSet<java.util.Collection<java.util.TreeSet<java.lang.String>>>> setCollectionSetList26 = com.thealgorithms.backtracking.Combination.combination(strSetCollectionArray20, 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.TreeSet<java.util.Collection<java.util.TreeSet<java.lang.String>>>> setCollectionSetList28 = com.thealgorithms.backtracking.Combination.combination(strSetCollectionArray20, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strSetList4);
        org.junit.Assert.assertNotNull(constantDescSetList6);
        org.junit.Assert.assertNotNull(strSetList8);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(strSetList13);
        org.junit.Assert.assertNotNull(constantDescSetList15);
        org.junit.Assert.assertNotNull(strSetList17);
        org.junit.Assert.assertNotNull(collectionArray19);
        org.junit.Assert.assertNotNull(strSetCollectionArray20);
        org.junit.Assert.assertNull(setCollectionSetList26);
    }

    @Test
    public void test1020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1020");
        java.lang.Class[][] classArray1 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray2 = (java.lang.Class<?>[][]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>[]>> wildcardClassArraySetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (byte) 1);
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration[]>> genericDeclarationArraySetList6 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray2, (int) (byte) 0);
        java.util.List<java.util.TreeSet<java.lang.Class<?>[]>> wildcardClassArraySetList8 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, 1);
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration[]>> genericDeclarationArraySetList10 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray2, (int) (byte) 0);
        java.util.List<java.util.TreeSet<java.lang.Object>> objSetList12 = com.thealgorithms.backtracking.Combination.combination((java.lang.Object[]) wildcardClassArray2, (int) 'a');
        java.lang.Class<?> wildcardClass13 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList4);
        org.junit.Assert.assertNull(genericDeclarationArraySetList6);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList8);
        org.junit.Assert.assertNull(genericDeclarationArraySetList10);
        org.junit.Assert.assertNotNull(objSetList12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1021");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.util.TreeSet<java.lang.String>> strSetList4 = com.thealgorithms.backtracking.Combination.combination(strArray2, (int) '#');
        java.util.List<java.util.TreeSet<java.lang.constant.ConstantDesc>> constantDescSetList6 = com.thealgorithms.backtracking.Combination.combination((java.lang.constant.ConstantDesc[]) strArray2, 1);
        java.util.List<java.util.TreeSet<java.lang.String>> strSetList8 = com.thealgorithms.backtracking.Combination.combination(strArray2, (int) (byte) -1);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "", "", "" };
        java.util.List<java.util.TreeSet<java.lang.Comparable<java.lang.String>>> strComparableSetList17 = com.thealgorithms.backtracking.Combination.combination((java.lang.Comparable<java.lang.String>[]) strArray15, (int) (byte) 1);
        java.util.List<java.util.TreeSet<java.io.Serializable>> serializableSetList19 = com.thealgorithms.backtracking.Combination.combination((java.io.Serializable[]) strArray15, (int) '4');
        java.util.List<java.util.TreeSet<java.lang.String>> strSetList21 = com.thealgorithms.backtracking.Combination.combination(strArray15, 1);
        java.util.Collection[] collectionArray23 = new java.util.Collection[2];
        @SuppressWarnings("unchecked")
        java.util.Collection<java.util.TreeSet<java.lang.String>>[] strSetCollectionArray24 = (java.util.Collection<java.util.TreeSet<java.lang.String>>[]) collectionArray23;
        strSetCollectionArray24[0] = strSetList8;
        strSetCollectionArray24[1] = strSetList21;
        java.util.List<java.util.TreeSet<java.util.Collection<java.util.TreeSet<java.lang.String>>>> setCollectionSetList30 = com.thealgorithms.backtracking.Combination.combination(strSetCollectionArray24, (int) (short) 0);
        java.util.List<java.util.TreeSet<java.lang.Iterable<java.util.TreeSet<java.lang.String>>>> setIterableSetList32 = com.thealgorithms.backtracking.Combination.combination((java.lang.Iterable<java.util.TreeSet<java.lang.String>>[]) strSetCollectionArray24, (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.TreeSet<java.lang.Iterable<java.util.TreeSet<java.lang.String>>>> setIterableSetList34 = com.thealgorithms.backtracking.Combination.combination((java.lang.Iterable<java.util.TreeSet<java.lang.String>>[]) strSetCollectionArray24, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strSetList4);
        org.junit.Assert.assertNotNull(constantDescSetList6);
        org.junit.Assert.assertNotNull(strSetList8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strComparableSetList17);
        org.junit.Assert.assertNotNull(serializableSetList19);
        org.junit.Assert.assertNotNull(strSetList21);
        org.junit.Assert.assertNotNull(collectionArray23);
        org.junit.Assert.assertNotNull(strSetCollectionArray24);
        org.junit.Assert.assertNull(setCollectionSetList30);
        org.junit.Assert.assertNull(setIterableSetList32);
    }

    @Test
    public void test1022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1022");
        com.thealgorithms.backtracking.Combination[][][][][] combinationArray0 = new com.thealgorithms.backtracking.Combination[][][][][] {};
        java.util.List<java.util.TreeSet<com.thealgorithms.backtracking.Combination[][][][]>> combinationArraySetList2 = com.thealgorithms.backtracking.Combination.combination(combinationArray0, (int) (short) 0);
        java.util.List<java.util.TreeSet<com.thealgorithms.backtracking.Combination[][][][]>> combinationArraySetList4 = com.thealgorithms.backtracking.Combination.combination(combinationArray0, (int) (short) 1);
        java.util.List<java.util.TreeSet<com.thealgorithms.backtracking.Combination[][][][]>> combinationArraySetList6 = com.thealgorithms.backtracking.Combination.combination(combinationArray0, 100);
        java.util.List<java.util.TreeSet<com.thealgorithms.backtracking.Combination[][][][]>> combinationArraySetList8 = com.thealgorithms.backtracking.Combination.combination(combinationArray0, 10);
        java.lang.Class<?> wildcardClass9 = combinationArraySetList8.getClass();
        org.junit.Assert.assertNotNull(combinationArray0);
        org.junit.Assert.assertNull(combinationArraySetList2);
        org.junit.Assert.assertNotNull(combinationArraySetList4);
        org.junit.Assert.assertNotNull(combinationArraySetList6);
        org.junit.Assert.assertNotNull(combinationArraySetList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1023");
        java.lang.Class[][] classArray1 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray2 = (java.lang.Class<?>[][]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>[]>> wildcardClassArraySetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (byte) 1);
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration[]>> genericDeclarationArraySetList6 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray2, (int) (short) -1);
        java.util.List<java.util.TreeSet<java.lang.reflect.Type[]>> typeArraySetList8 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.Type[][]) wildcardClassArray2, (int) (short) 100);
        java.util.List<java.util.TreeSet<java.lang.reflect.Type[]>> typeArraySetList10 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.Type[][]) wildcardClassArray2, 0);
        java.util.List<java.util.TreeSet<java.lang.Object>> objSetList12 = com.thealgorithms.backtracking.Combination.combination((java.lang.Object[]) wildcardClassArray2, 100);
        java.lang.Class<?> wildcardClass13 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList4);
        org.junit.Assert.assertNotNull(genericDeclarationArraySetList6);
        org.junit.Assert.assertNotNull(typeArraySetList8);
        org.junit.Assert.assertNull(typeArraySetList10);
        org.junit.Assert.assertNotNull(objSetList12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1024");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>>> wildcardClassSetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (byte) 0);
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration>> genericDeclarationSetList6 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2, (int) (byte) 1);
        java.util.List<java.util.TreeSet<java.lang.invoke.TypeDescriptor>> typeDescriptorSetList8 = com.thealgorithms.backtracking.Combination.combination((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2, (int) ' ');
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration>> genericDeclarationSetList10 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2, 0);
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration>> genericDeclarationSetList12 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2, 0);
        java.util.List<java.util.TreeSet<java.lang.invoke.TypeDescriptor>> typeDescriptorSetList14 = com.thealgorithms.backtracking.Combination.combination((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2, 100);
        java.util.List<java.util.TreeSet<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>>> wildcardClassOfFieldSetList16 = com.thealgorithms.backtracking.Combination.combination((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) wildcardClassArray2, (int) '#');
        java.lang.Class<?> wildcardClass17 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNull(wildcardClassSetList4);
        org.junit.Assert.assertNotNull(genericDeclarationSetList6);
        org.junit.Assert.assertNotNull(typeDescriptorSetList8);
        org.junit.Assert.assertNull(genericDeclarationSetList10);
        org.junit.Assert.assertNull(genericDeclarationSetList12);
        org.junit.Assert.assertNotNull(typeDescriptorSetList14);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldSetList16);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test1025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1025");
        java.lang.Class[][][] classArray1 = new java.lang.Class[0][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray2 = (java.lang.Class<?>[][][]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][]>> wildcardClassArraySetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (byte) -1);
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][]>> wildcardClassArraySetList6 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) 'a');
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][]>> wildcardClassArraySetList8 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (short) 1);
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][]>> wildcardClassArraySetList10 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, 6);
        java.lang.Class<?> wildcardClass11 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList4);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList6);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList8);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1026");
        java.lang.String[][][][][] strArray0 = new java.lang.String[][][][][] {};
        java.util.List<java.util.TreeSet<java.lang.String[][][][]>> strArraySetList2 = com.thealgorithms.backtracking.Combination.combination(strArray0, 100);
        java.util.List<java.util.TreeSet<java.lang.String[][][][]>> strArraySetList4 = com.thealgorithms.backtracking.Combination.combination(strArray0, 4);
        java.util.List<java.util.TreeSet<java.lang.String[][][][]>> strArraySetList6 = com.thealgorithms.backtracking.Combination.combination(strArray0, 1);
        java.util.List<java.util.TreeSet<java.lang.String[][][][]>> strArraySetList8 = com.thealgorithms.backtracking.Combination.combination(strArray0, 1);
        java.lang.Class<?> wildcardClass9 = strArray0.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArraySetList2);
        org.junit.Assert.assertNotNull(strArraySetList4);
        org.junit.Assert.assertNotNull(strArraySetList6);
        org.junit.Assert.assertNotNull(strArraySetList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1027");
        java.lang.Class[][][] classArray1 = new java.lang.Class[0][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray2 = (java.lang.Class<?>[][][]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][]>> wildcardClassArraySetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (byte) -1);
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration[][]>> genericDeclarationArraySetList6 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[][][]) wildcardClassArray2, (-1));
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][]>> wildcardClassArraySetList8 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, 3);
        java.util.List<java.util.TreeSet<java.lang.reflect.Type[][]>> typeArraySetList10 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.Type[][][]) wildcardClassArray2, (int) 'a');
        java.lang.Class<?> wildcardClass11 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList4);
        org.junit.Assert.assertNotNull(genericDeclarationArraySetList6);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList8);
        org.junit.Assert.assertNotNull(typeArraySetList10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1028");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>>> wildcardClassSetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (byte) 0);
        java.util.List<java.util.TreeSet<java.lang.invoke.TypeDescriptor>> typeDescriptorSetList6 = com.thealgorithms.backtracking.Combination.combination((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2, 0);
        java.util.List<java.util.TreeSet<java.lang.reflect.AnnotatedElement>> annotatedElementSetList8 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2, (int) (byte) -1);
        java.util.List<java.util.TreeSet<java.lang.Class<?>>> wildcardClassSetList10 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, 0);
        java.util.List<java.util.TreeSet<java.lang.Class<?>>> wildcardClassSetList12 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (short) 100);
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration>> genericDeclarationSetList14 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2, (-1));
        java.lang.Class<?> wildcardClass15 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNull(wildcardClassSetList4);
        org.junit.Assert.assertNull(typeDescriptorSetList6);
        org.junit.Assert.assertNotNull(annotatedElementSetList8);
        org.junit.Assert.assertNull(wildcardClassSetList10);
        org.junit.Assert.assertNotNull(wildcardClassSetList12);
        org.junit.Assert.assertNotNull(genericDeclarationSetList14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test1029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1029");
        java.lang.Class[][] classArray1 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray2 = (java.lang.Class<?>[][]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>[]>> wildcardClassArraySetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (byte) 1);
        java.util.List<java.util.TreeSet<java.lang.Class<?>[]>> wildcardClassArraySetList6 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, 0);
        java.util.List<java.util.TreeSet<java.lang.reflect.Type[]>> typeArraySetList8 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.Type[][]) wildcardClassArray2, 5);
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration[]>> genericDeclarationArraySetList10 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray2, 2);
        java.lang.Class<?> wildcardClass11 = genericDeclarationArraySetList10.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList4);
        org.junit.Assert.assertNull(wildcardClassArraySetList6);
        org.junit.Assert.assertNotNull(typeArraySetList8);
        org.junit.Assert.assertNotNull(genericDeclarationArraySetList10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1030");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.util.TreeSet<java.lang.String>> strSetList4 = com.thealgorithms.backtracking.Combination.combination(strArray2, (int) '#');
        java.util.List<java.util.TreeSet<java.lang.CharSequence>> charSequenceSetList6 = com.thealgorithms.backtracking.Combination.combination((java.lang.CharSequence[]) strArray2, 10);
        java.util.List<java.util.TreeSet<java.lang.constant.ConstantDesc>> constantDescSetList8 = com.thealgorithms.backtracking.Combination.combination((java.lang.constant.ConstantDesc[]) strArray2, (int) (byte) -1);
        java.util.List<java.util.TreeSet<java.lang.CharSequence>> charSequenceSetList10 = com.thealgorithms.backtracking.Combination.combination((java.lang.CharSequence[]) strArray2, 1);
        java.lang.Class<?> wildcardClass11 = charSequenceSetList10.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strSetList4);
        org.junit.Assert.assertNotNull(charSequenceSetList6);
        org.junit.Assert.assertNotNull(constantDescSetList8);
        org.junit.Assert.assertNotNull(charSequenceSetList10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1031");
        com.thealgorithms.backtracking.Combination[][][][][] combinationArray0 = new com.thealgorithms.backtracking.Combination[][][][][] {};
        java.util.List<java.util.TreeSet<com.thealgorithms.backtracking.Combination[][][][]>> combinationArraySetList2 = com.thealgorithms.backtracking.Combination.combination(combinationArray0, (int) (short) 0);
        java.util.List<java.util.TreeSet<com.thealgorithms.backtracking.Combination[][][][]>> combinationArraySetList4 = com.thealgorithms.backtracking.Combination.combination(combinationArray0, (int) (short) 1);
        java.util.List<java.util.TreeSet<com.thealgorithms.backtracking.Combination[][][][]>> combinationArraySetList6 = com.thealgorithms.backtracking.Combination.combination(combinationArray0, 100);
        java.lang.Class<?> wildcardClass7 = combinationArraySetList6.getClass();
        org.junit.Assert.assertNotNull(combinationArray0);
        org.junit.Assert.assertNull(combinationArraySetList2);
        org.junit.Assert.assertNotNull(combinationArraySetList4);
        org.junit.Assert.assertNotNull(combinationArraySetList6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test1032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1032");
        java.lang.Class[][][] classArray1 = new java.lang.Class[0][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray2 = (java.lang.Class<?>[][][]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][]>> wildcardClassArraySetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (byte) -1);
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][]>> wildcardClassArraySetList6 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) 'a');
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][]>> wildcardClassArraySetList8 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (byte) -1);
        java.lang.Class<?> wildcardClass9 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList4);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList6);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1033");
        com.thealgorithms.backtracking.Combination[][][][][] combinationArray0 = new com.thealgorithms.backtracking.Combination[][][][][] {};
        com.thealgorithms.backtracking.Combination[][][][][] combinationArray1 = new com.thealgorithms.backtracking.Combination[][][][][] {};
        com.thealgorithms.backtracking.Combination[][][][][][] combinationArray2 = new com.thealgorithms.backtracking.Combination[][][][][][] { combinationArray0, combinationArray1 };
        com.thealgorithms.backtracking.Combination[][][][][] combinationArray3 = new com.thealgorithms.backtracking.Combination[][][][][] {};
        com.thealgorithms.backtracking.Combination[][][][][] combinationArray4 = new com.thealgorithms.backtracking.Combination[][][][][] {};
        com.thealgorithms.backtracking.Combination[][][][][][] combinationArray5 = new com.thealgorithms.backtracking.Combination[][][][][][] { combinationArray3, combinationArray4 };
        com.thealgorithms.backtracking.Combination[][][][][] combinationArray6 = new com.thealgorithms.backtracking.Combination[][][][][] {};
        com.thealgorithms.backtracking.Combination[][][][][] combinationArray7 = new com.thealgorithms.backtracking.Combination[][][][][] {};
        com.thealgorithms.backtracking.Combination[][][][][][] combinationArray8 = new com.thealgorithms.backtracking.Combination[][][][][][] { combinationArray6, combinationArray7 };
        com.thealgorithms.backtracking.Combination[][][][][][][] combinationArray9 = new com.thealgorithms.backtracking.Combination[][][][][][][] { combinationArray2, combinationArray5, combinationArray8 };
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.TreeSet<com.thealgorithms.backtracking.Combination[][][][][][]>> combinationArraySetList11 = com.thealgorithms.backtracking.Combination.combination(combinationArray9, 6);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(combinationArray0);
        org.junit.Assert.assertNotNull(combinationArray1);
        org.junit.Assert.assertNotNull(combinationArray2);
        org.junit.Assert.assertNotNull(combinationArray3);
        org.junit.Assert.assertNotNull(combinationArray4);
        org.junit.Assert.assertNotNull(combinationArray5);
        org.junit.Assert.assertNotNull(combinationArray6);
        org.junit.Assert.assertNotNull(combinationArray7);
        org.junit.Assert.assertNotNull(combinationArray8);
        org.junit.Assert.assertNotNull(combinationArray9);
    }

    @Test
    public void test1034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1034");
        java.lang.Class[][][] classArray1 = new java.lang.Class[0][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray2 = (java.lang.Class<?>[][][]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][]>> wildcardClassArraySetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (byte) -1);
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration[][]>> genericDeclarationArraySetList6 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[][][]) wildcardClassArray2, 5);
        java.util.List<java.util.TreeSet<java.lang.reflect.Type[][]>> typeArraySetList8 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.Type[][][]) wildcardClassArray2, 3);
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][]>> wildcardClassArraySetList10 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, 3);
        java.util.List<java.util.TreeSet<java.lang.reflect.Type[][]>> typeArraySetList12 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.Type[][][]) wildcardClassArray2, (int) (short) 1);
        java.lang.Class<?> wildcardClass13 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList4);
        org.junit.Assert.assertNotNull(genericDeclarationArraySetList6);
        org.junit.Assert.assertNotNull(typeArraySetList8);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList10);
        org.junit.Assert.assertNotNull(typeArraySetList12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1035");
        java.lang.reflect.Type[][] typeArray0 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][] typeArray1 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][] typeArray2 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][] typeArray3 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][] typeArray4 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][][] typeArray5 = new java.lang.reflect.Type[][][] { typeArray0, typeArray1, typeArray2, typeArray3, typeArray4 };
        java.util.List<java.util.TreeSet<java.lang.reflect.Type[][]>> typeArraySetList7 = com.thealgorithms.backtracking.Combination.combination(typeArray5, (int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass8 = typeArraySetList7.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(typeArray0);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(typeArray3);
        org.junit.Assert.assertNotNull(typeArray4);
        org.junit.Assert.assertNotNull(typeArray5);
        org.junit.Assert.assertNull(typeArraySetList7);
    }

    @Test
    public void test1036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1036");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>>> wildcardClassSetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (byte) 0);
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration>> genericDeclarationSetList6 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2, (int) (byte) 1);
        java.util.List<java.util.TreeSet<java.lang.invoke.TypeDescriptor>> typeDescriptorSetList8 = com.thealgorithms.backtracking.Combination.combination((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2, (int) ' ');
        java.util.List<java.util.TreeSet<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>>> wildcardClassOfFieldSetList10 = com.thealgorithms.backtracking.Combination.combination((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) wildcardClassArray2, 2);
        java.util.List<java.util.TreeSet<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>>> wildcardClassOfFieldSetList12 = com.thealgorithms.backtracking.Combination.combination((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) wildcardClassArray2, (-1));
        java.lang.Class<?> wildcardClass13 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNull(wildcardClassSetList4);
        org.junit.Assert.assertNotNull(genericDeclarationSetList6);
        org.junit.Assert.assertNotNull(typeDescriptorSetList8);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldSetList10);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldSetList12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1037");
        java.lang.Class<?>[][][][][] wildcardClassArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.TreeSet<java.lang.Class<?>[][][][]>> wildcardClassArraySetList2 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray0, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1038");
        java.lang.Class[][][] classArray1 = new java.lang.Class[0][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray2 = (java.lang.Class<?>[][][]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][]>> wildcardClassArraySetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (byte) -1);
        java.util.List<java.util.TreeSet<java.lang.reflect.Type[][]>> typeArraySetList6 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.Type[][][]) wildcardClassArray2, (int) (byte) 0);
        java.util.List<java.util.TreeSet<java.lang.reflect.Type[][]>> typeArraySetList8 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.Type[][][]) wildcardClassArray2, (int) '4');
        java.lang.Class<?> wildcardClass9 = typeArraySetList8.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList4);
        org.junit.Assert.assertNull(typeArraySetList6);
        org.junit.Assert.assertNotNull(typeArraySetList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1039");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>>> wildcardClassSetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (byte) 0);
        java.util.List<java.util.TreeSet<java.lang.Class<?>>> wildcardClassSetList6 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) 'a');
        java.lang.Class<?> wildcardClass7 = wildcardClassSetList6.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNull(wildcardClassSetList4);
        org.junit.Assert.assertNotNull(wildcardClassSetList6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test1040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1040");
        java.util.List[] listArray1 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[] strSetListArray2 = (java.util.List<java.util.TreeSet<java.lang.String>>[]) listArray1;
        java.util.List[] listArray4 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[] strSetListArray5 = (java.util.List<java.util.TreeSet<java.lang.String>>[]) listArray4;
        java.util.List[][] listArray7 = new java.util.List[2][];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[][] strSetListArray8 = (java.util.List<java.util.TreeSet<java.lang.String>>[][]) listArray7;
        strSetListArray8[0] = strSetListArray2;
        strSetListArray8[1] = strSetListArray5;
        java.util.List[][][] listArray14 = new java.util.List[1][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[][][] strSetListArray15 = (java.util.List<java.util.TreeSet<java.lang.String>>[][][]) listArray14;
        strSetListArray15[0] = strSetListArray8;
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[][]>> listArraySetList19 = com.thealgorithms.backtracking.Combination.combination(strSetListArray15, (int) (short) 10);
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[][]>> listArraySetList21 = com.thealgorithms.backtracking.Combination.combination(strSetListArray15, (int) '#');
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[][]>> listArraySetList23 = com.thealgorithms.backtracking.Combination.combination(strSetListArray15, (int) ' ');
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[][]>> listArraySetList25 = com.thealgorithms.backtracking.Combination.combination(strSetListArray15, 3);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.TreeSet<java.util.Collection[][]>> collectionArraySetList27 = com.thealgorithms.backtracking.Combination.combination((java.util.Collection[][][]) strSetListArray15, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strSetListArray2);
        org.junit.Assert.assertNotNull(listArray4);
        org.junit.Assert.assertNotNull(strSetListArray5);
        org.junit.Assert.assertNotNull(listArray7);
        org.junit.Assert.assertNotNull(strSetListArray8);
        org.junit.Assert.assertNotNull(listArray14);
        org.junit.Assert.assertNotNull(strSetListArray15);
        org.junit.Assert.assertNotNull(listArraySetList19);
        org.junit.Assert.assertNotNull(listArraySetList21);
        org.junit.Assert.assertNotNull(listArraySetList23);
        org.junit.Assert.assertNotNull(listArraySetList25);
    }

    @Test
    public void test1041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1041");
        java.lang.Class[][][] classArray1 = new java.lang.Class[0][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray2 = (java.lang.Class<?>[][][]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][]>> wildcardClassArraySetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (byte) -1);
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][]>> wildcardClassArraySetList6 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, 0);
        java.util.List<java.util.TreeSet<java.lang.reflect.Type[][]>> typeArraySetList8 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.Type[][][]) wildcardClassArray2, (int) (byte) 100);
        java.util.List<java.util.TreeSet<java.lang.reflect.Type[][]>> typeArraySetList10 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.Type[][][]) wildcardClassArray2, (int) (byte) -1);
        java.lang.Class<?> wildcardClass11 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList4);
        org.junit.Assert.assertNull(wildcardClassArraySetList6);
        org.junit.Assert.assertNotNull(typeArraySetList8);
        org.junit.Assert.assertNotNull(typeArraySetList10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1042");
        com.thealgorithms.backtracking.Combination[][][] combinationArray0 = new com.thealgorithms.backtracking.Combination[][][] {};
        java.util.List<java.util.TreeSet<com.thealgorithms.backtracking.Combination[][]>> combinationArraySetList2 = com.thealgorithms.backtracking.Combination.combination(combinationArray0, (int) (byte) 1);
        java.util.List<java.util.TreeSet<com.thealgorithms.backtracking.Combination[][]>> combinationArraySetList4 = com.thealgorithms.backtracking.Combination.combination(combinationArray0, (int) (short) 1);
        java.util.List<java.util.TreeSet<com.thealgorithms.backtracking.Combination[][]>> combinationArraySetList6 = com.thealgorithms.backtracking.Combination.combination(combinationArray0, 0);
        java.util.List<java.util.TreeSet<com.thealgorithms.backtracking.Combination[][]>> combinationArraySetList8 = com.thealgorithms.backtracking.Combination.combination(combinationArray0, (int) 'a');
        java.lang.Class<?> wildcardClass9 = combinationArraySetList8.getClass();
        org.junit.Assert.assertNotNull(combinationArray0);
        org.junit.Assert.assertNotNull(combinationArraySetList2);
        org.junit.Assert.assertNotNull(combinationArraySetList4);
        org.junit.Assert.assertNull(combinationArraySetList6);
        org.junit.Assert.assertNotNull(combinationArraySetList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1043");
        java.util.List[][] listArray1 = new java.util.List[0][];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[][] strSetListArray2 = (java.util.List<java.util.TreeSet<java.lang.String>>[][]) listArray1;
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[]>> listArraySetList4 = com.thealgorithms.backtracking.Combination.combination(strSetListArray2, (int) (short) -1);
        java.util.List<java.util.TreeSet<java.lang.Iterable<java.util.TreeSet<java.lang.String>>[]>> iterableArraySetList6 = com.thealgorithms.backtracking.Combination.combination((java.lang.Iterable<java.util.TreeSet<java.lang.String>>[][]) strSetListArray2, (int) '4');
        java.util.List<java.util.TreeSet<java.lang.Iterable<java.util.TreeSet<java.lang.String>>[]>> iterableArraySetList8 = com.thealgorithms.backtracking.Combination.combination((java.lang.Iterable<java.util.TreeSet<java.lang.String>>[][]) strSetListArray2, 5);
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[]>> listArraySetList10 = com.thealgorithms.backtracking.Combination.combination(strSetListArray2, (int) 'a');
        java.lang.Class<?> wildcardClass11 = listArraySetList10.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strSetListArray2);
        org.junit.Assert.assertNotNull(listArraySetList4);
        org.junit.Assert.assertNotNull(iterableArraySetList6);
        org.junit.Assert.assertNotNull(iterableArraySetList8);
        org.junit.Assert.assertNotNull(listArraySetList10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1044");
        java.util.List[] listArray1 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[] strSetListArray2 = (java.util.List<java.util.TreeSet<java.lang.String>>[]) listArray1;
        java.util.List[] listArray4 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[] strSetListArray5 = (java.util.List<java.util.TreeSet<java.lang.String>>[]) listArray4;
        java.util.List[][] listArray7 = new java.util.List[2][];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[][] strSetListArray8 = (java.util.List<java.util.TreeSet<java.lang.String>>[][]) listArray7;
        strSetListArray8[0] = strSetListArray2;
        strSetListArray8[1] = strSetListArray5;
        java.util.List[][][] listArray14 = new java.util.List[1][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[][][] strSetListArray15 = (java.util.List<java.util.TreeSet<java.lang.String>>[][][]) listArray14;
        strSetListArray15[0] = strSetListArray8;
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[][]>> listArraySetList19 = com.thealgorithms.backtracking.Combination.combination(strSetListArray15, (int) (short) 10);
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[][]>> listArraySetList21 = com.thealgorithms.backtracking.Combination.combination(strSetListArray15, (int) '#');
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[][]>> listArraySetList23 = com.thealgorithms.backtracking.Combination.combination(strSetListArray15, 4);
        java.util.List<java.util.TreeSet<java.util.Collection[][]>> collectionArraySetList25 = com.thealgorithms.backtracking.Combination.combination((java.util.Collection[][][]) strSetListArray15, 100);
        java.lang.Class<?> wildcardClass26 = strSetListArray15.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strSetListArray2);
        org.junit.Assert.assertNotNull(listArray4);
        org.junit.Assert.assertNotNull(strSetListArray5);
        org.junit.Assert.assertNotNull(listArray7);
        org.junit.Assert.assertNotNull(strSetListArray8);
        org.junit.Assert.assertNotNull(listArray14);
        org.junit.Assert.assertNotNull(strSetListArray15);
        org.junit.Assert.assertNotNull(listArraySetList19);
        org.junit.Assert.assertNotNull(listArraySetList21);
        org.junit.Assert.assertNotNull(listArraySetList23);
        org.junit.Assert.assertNotNull(collectionArraySetList25);
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test1045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1045");
        java.lang.Class[][][][] classArray1 = new java.lang.Class[0][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][]>> wildcardClassArraySetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (byte) 100);
        java.util.List<java.util.TreeSet<java.lang.reflect.Type[][][]>> typeArraySetList6 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.Type[][][][]) wildcardClassArray2, 3);
        java.util.List<java.util.TreeSet<java.lang.reflect.Type[][][]>> typeArraySetList8 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.Type[][][][]) wildcardClassArray2, 100);
        java.util.List<java.util.TreeSet<java.lang.Object>> objSetList10 = com.thealgorithms.backtracking.Combination.combination((java.lang.Object[]) wildcardClassArray2, 3);
        java.lang.Class<?> wildcardClass11 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList4);
        org.junit.Assert.assertNotNull(typeArraySetList6);
        org.junit.Assert.assertNotNull(typeArraySetList8);
        org.junit.Assert.assertNotNull(objSetList10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1046");
        java.lang.String[][][][][][] strArray0 = new java.lang.String[][][][][][] {};
        java.util.List<java.util.TreeSet<java.lang.String[][][][][]>> strArraySetList2 = com.thealgorithms.backtracking.Combination.combination(strArray0, (int) ' ');
        java.util.List<java.util.TreeSet<java.lang.String[][][][][]>> strArraySetList4 = com.thealgorithms.backtracking.Combination.combination(strArray0, (int) (byte) 0);
        java.util.List<java.util.TreeSet<java.lang.String[][][][][]>> strArraySetList6 = com.thealgorithms.backtracking.Combination.combination(strArray0, (int) (byte) 100);
        java.lang.Class<?> wildcardClass7 = strArray0.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArraySetList2);
        org.junit.Assert.assertNull(strArraySetList4);
        org.junit.Assert.assertNotNull(strArraySetList6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test1047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1047");
        java.lang.Class[][][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][][]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][][][][][][]>> wildcardClassArraySetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, 2);
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][][][][][][]>> wildcardClassArraySetList6 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, 0);
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][][][][][][]>> wildcardClassArraySetList8 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) ' ');
        java.lang.Class<?> wildcardClass9 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList4);
        org.junit.Assert.assertNull(wildcardClassArraySetList6);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1048");
        com.thealgorithms.backtracking.Combination combination0 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination1 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination2 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination3 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination4 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination5 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination[] combinationArray6 = new com.thealgorithms.backtracking.Combination[] { combination0, combination1, combination2, combination3, combination4, combination5 };
        com.thealgorithms.backtracking.Combination combination7 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination8 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination9 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination10 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination11 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination12 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination[] combinationArray13 = new com.thealgorithms.backtracking.Combination[] { combination7, combination8, combination9, combination10, combination11, combination12 };
        com.thealgorithms.backtracking.Combination[][] combinationArray14 = new com.thealgorithms.backtracking.Combination[][] { combinationArray6, combinationArray13 };
        com.thealgorithms.backtracking.Combination combination15 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination16 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination17 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination18 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination19 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination20 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination[] combinationArray21 = new com.thealgorithms.backtracking.Combination[] { combination15, combination16, combination17, combination18, combination19, combination20 };
        com.thealgorithms.backtracking.Combination combination22 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination23 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination24 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination25 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination26 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination27 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination[] combinationArray28 = new com.thealgorithms.backtracking.Combination[] { combination22, combination23, combination24, combination25, combination26, combination27 };
        com.thealgorithms.backtracking.Combination[][] combinationArray29 = new com.thealgorithms.backtracking.Combination[][] { combinationArray21, combinationArray28 };
        com.thealgorithms.backtracking.Combination combination30 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination31 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination32 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination33 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination34 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination35 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination[] combinationArray36 = new com.thealgorithms.backtracking.Combination[] { combination30, combination31, combination32, combination33, combination34, combination35 };
        com.thealgorithms.backtracking.Combination combination37 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination38 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination39 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination40 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination41 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination42 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination[] combinationArray43 = new com.thealgorithms.backtracking.Combination[] { combination37, combination38, combination39, combination40, combination41, combination42 };
        com.thealgorithms.backtracking.Combination[][] combinationArray44 = new com.thealgorithms.backtracking.Combination[][] { combinationArray36, combinationArray43 };
        com.thealgorithms.backtracking.Combination combination45 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination46 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination47 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination48 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination49 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination50 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination[] combinationArray51 = new com.thealgorithms.backtracking.Combination[] { combination45, combination46, combination47, combination48, combination49, combination50 };
        com.thealgorithms.backtracking.Combination combination52 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination53 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination54 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination55 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination56 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination57 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination[] combinationArray58 = new com.thealgorithms.backtracking.Combination[] { combination52, combination53, combination54, combination55, combination56, combination57 };
        com.thealgorithms.backtracking.Combination[][] combinationArray59 = new com.thealgorithms.backtracking.Combination[][] { combinationArray51, combinationArray58 };
        com.thealgorithms.backtracking.Combination combination60 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination61 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination62 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination63 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination64 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination65 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination[] combinationArray66 = new com.thealgorithms.backtracking.Combination[] { combination60, combination61, combination62, combination63, combination64, combination65 };
        com.thealgorithms.backtracking.Combination combination67 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination68 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination69 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination70 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination71 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination72 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination[] combinationArray73 = new com.thealgorithms.backtracking.Combination[] { combination67, combination68, combination69, combination70, combination71, combination72 };
        com.thealgorithms.backtracking.Combination[][] combinationArray74 = new com.thealgorithms.backtracking.Combination[][] { combinationArray66, combinationArray73 };
        com.thealgorithms.backtracking.Combination[][][] combinationArray75 = new com.thealgorithms.backtracking.Combination[][][] { combinationArray14, combinationArray29, combinationArray44, combinationArray59, combinationArray74 };
        com.thealgorithms.backtracking.Combination[][][][] combinationArray76 = new com.thealgorithms.backtracking.Combination[][][][] { combinationArray75 };
        java.util.List<java.util.TreeSet<com.thealgorithms.backtracking.Combination[][][]>> combinationArraySetList78 = com.thealgorithms.backtracking.Combination.combination(combinationArray76, 2);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.TreeSet<com.thealgorithms.backtracking.Combination[][][]>> combinationArraySetList80 = com.thealgorithms.backtracking.Combination.combination(combinationArray76, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(combinationArray6);
        org.junit.Assert.assertNotNull(combinationArray13);
        org.junit.Assert.assertNotNull(combinationArray14);
        org.junit.Assert.assertNotNull(combinationArray21);
        org.junit.Assert.assertNotNull(combinationArray28);
        org.junit.Assert.assertNotNull(combinationArray29);
        org.junit.Assert.assertNotNull(combinationArray36);
        org.junit.Assert.assertNotNull(combinationArray43);
        org.junit.Assert.assertNotNull(combinationArray44);
        org.junit.Assert.assertNotNull(combinationArray51);
        org.junit.Assert.assertNotNull(combinationArray58);
        org.junit.Assert.assertNotNull(combinationArray59);
        org.junit.Assert.assertNotNull(combinationArray66);
        org.junit.Assert.assertNotNull(combinationArray73);
        org.junit.Assert.assertNotNull(combinationArray74);
        org.junit.Assert.assertNotNull(combinationArray75);
        org.junit.Assert.assertNotNull(combinationArray76);
        org.junit.Assert.assertNotNull(combinationArraySetList78);
    }

    @Test
    public void test1049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1049");
        java.lang.Class[][][][] classArray1 = new java.lang.Class[0][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][]>> wildcardClassArraySetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (byte) 100);
        java.util.List<java.util.TreeSet<java.lang.reflect.Type[][][]>> typeArraySetList6 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.Type[][][][]) wildcardClassArray2, 3);
        java.util.List<java.util.TreeSet<java.lang.reflect.Type[][][]>> typeArraySetList8 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.Type[][][][]) wildcardClassArray2, 100);
        java.util.List<java.util.TreeSet<java.lang.Object>> objSetList10 = com.thealgorithms.backtracking.Combination.combination((java.lang.Object[]) wildcardClassArray2, 3);
        java.lang.Class<?> wildcardClass11 = objSetList10.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList4);
        org.junit.Assert.assertNotNull(typeArraySetList6);
        org.junit.Assert.assertNotNull(typeArraySetList8);
        org.junit.Assert.assertNotNull(objSetList10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1050");
        java.lang.invoke.TypeDescriptor.OfField[] ofFieldArray1 = new java.lang.invoke.TypeDescriptor.OfField[0];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[] wildcardClassOfFieldArray2 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) ofFieldArray1;
        java.util.List<java.util.TreeSet<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>>> wildcardClassOfFieldSetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassOfFieldArray2, (int) (byte) 10);
        java.lang.Class<?> wildcardClass5 = wildcardClassOfFieldArray2.getClass();
        org.junit.Assert.assertNotNull(ofFieldArray1);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray2);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldSetList4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test1051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1051");
        java.lang.Class[][][][] classArray1 = new java.lang.Class[0][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][]>> wildcardClassArraySetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (byte) 100);
        java.util.List<java.util.TreeSet<java.lang.reflect.Type[][][]>> typeArraySetList6 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.Type[][][][]) wildcardClassArray2, 3);
        java.util.List<java.util.TreeSet<java.lang.reflect.Type[][][]>> typeArraySetList8 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.Type[][][][]) wildcardClassArray2, 100);
        java.util.List<java.util.TreeSet<java.lang.reflect.Type[][][]>> typeArraySetList10 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.Type[][][][]) wildcardClassArray2, (int) 'a');
        java.util.List<java.util.TreeSet<java.lang.reflect.Type[][][]>> typeArraySetList12 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.Type[][][][]) wildcardClassArray2, (-1));
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration[][][]>> genericDeclarationArraySetList14 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[][][][]) wildcardClassArray2, (int) (byte) -1);
        java.util.List<java.util.TreeSet<java.lang.reflect.Type[][][]>> typeArraySetList16 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.Type[][][][]) wildcardClassArray2, (int) ' ');
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][]>> wildcardClassArraySetList18 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) 'a');
        java.lang.Class<?> wildcardClass19 = wildcardClassArraySetList18.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList4);
        org.junit.Assert.assertNotNull(typeArraySetList6);
        org.junit.Assert.assertNotNull(typeArraySetList8);
        org.junit.Assert.assertNotNull(typeArraySetList10);
        org.junit.Assert.assertNotNull(typeArraySetList12);
        org.junit.Assert.assertNotNull(genericDeclarationArraySetList14);
        org.junit.Assert.assertNotNull(typeArraySetList16);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList18);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test1052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1052");
        java.lang.String[][][][][][] strArray0 = new java.lang.String[][][][][][] {};
        java.lang.String[][][][][][] strArray1 = new java.lang.String[][][][][][] {};
        java.lang.String[][][][][][] strArray2 = new java.lang.String[][][][][][] {};
        java.lang.String[][][][][][][] strArray3 = new java.lang.String[][][][][][][] { strArray0, strArray1, strArray2 };
        java.lang.String[][][][][][] strArray4 = new java.lang.String[][][][][][] {};
        java.lang.String[][][][][][] strArray5 = new java.lang.String[][][][][][] {};
        java.lang.String[][][][][][] strArray6 = new java.lang.String[][][][][][] {};
        java.lang.String[][][][][][][] strArray7 = new java.lang.String[][][][][][][] { strArray4, strArray5, strArray6 };
        java.lang.String[][][][][][] strArray8 = new java.lang.String[][][][][][] {};
        java.lang.String[][][][][][] strArray9 = new java.lang.String[][][][][][] {};
        java.lang.String[][][][][][] strArray10 = new java.lang.String[][][][][][] {};
        java.lang.String[][][][][][][] strArray11 = new java.lang.String[][][][][][][] { strArray8, strArray9, strArray10 };
        java.lang.String[][][][][][] strArray12 = new java.lang.String[][][][][][] {};
        java.lang.String[][][][][][] strArray13 = new java.lang.String[][][][][][] {};
        java.lang.String[][][][][][] strArray14 = new java.lang.String[][][][][][] {};
        java.lang.String[][][][][][][] strArray15 = new java.lang.String[][][][][][][] { strArray12, strArray13, strArray14 };
        java.lang.String[][][][][][] strArray16 = new java.lang.String[][][][][][] {};
        java.lang.String[][][][][][] strArray17 = new java.lang.String[][][][][][] {};
        java.lang.String[][][][][][] strArray18 = new java.lang.String[][][][][][] {};
        java.lang.String[][][][][][][] strArray19 = new java.lang.String[][][][][][][] { strArray16, strArray17, strArray18 };
        java.lang.String[][][][][][][][] strArray20 = new java.lang.String[][][][][][][][] { strArray3, strArray7, strArray11, strArray15, strArray19 };
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.TreeSet<java.lang.String[][][][][][][]>> strArraySetList22 = com.thealgorithms.backtracking.Combination.combination(strArray20, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strArray20);
    }

    @Test
    public void test1053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1053");
        java.lang.Class[][][][][][][] classArray1 = new java.lang.Class[0][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][][][][]>> wildcardClassArraySetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, 1);
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][][][][]>> wildcardClassArraySetList6 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) '#');
        java.lang.Class<?> wildcardClass7 = wildcardClassArraySetList6.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList4);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test1054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1054");
        java.lang.reflect.GenericDeclaration[][][][] genericDeclarationArray0 = new java.lang.reflect.GenericDeclaration[][][][] {};
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration[][][]>> genericDeclarationArraySetList2 = com.thealgorithms.backtracking.Combination.combination(genericDeclarationArray0, (int) (short) 0);
        java.lang.Class<?> wildcardClass3 = genericDeclarationArray0.getClass();
        org.junit.Assert.assertNotNull(genericDeclarationArray0);
        org.junit.Assert.assertNull(genericDeclarationArraySetList2);
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test1055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1055");
        java.util.List[][][] listArray1 = new java.util.List[0][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[][][] strSetListArray2 = (java.util.List<java.util.TreeSet<java.lang.String>>[][][]) listArray1;
        java.util.List[][][] listArray4 = new java.util.List[0][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[][][] strSetListArray5 = (java.util.List<java.util.TreeSet<java.lang.String>>[][][]) listArray4;
        java.util.List[][][] listArray7 = new java.util.List[0][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[][][] strSetListArray8 = (java.util.List<java.util.TreeSet<java.lang.String>>[][][]) listArray7;
        java.util.List[][][] listArray10 = new java.util.List[0][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[][][] strSetListArray11 = (java.util.List<java.util.TreeSet<java.lang.String>>[][][]) listArray10;
        java.util.List[][][] listArray13 = new java.util.List[0][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[][][] strSetListArray14 = (java.util.List<java.util.TreeSet<java.lang.String>>[][][]) listArray13;
        java.util.List[][][][] listArray16 = new java.util.List[5][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[][][][] strSetListArray17 = (java.util.List<java.util.TreeSet<java.lang.String>>[][][][]) listArray16;
        strSetListArray17[0] = strSetListArray2;
        strSetListArray17[1] = strSetListArray5;
        strSetListArray17[2] = strSetListArray8;
        strSetListArray17[3] = strSetListArray11;
        strSetListArray17[4] = strSetListArray14;
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[][][]>> listArraySetList29 = com.thealgorithms.backtracking.Combination.combination(strSetListArray17, 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[][][]>> listArraySetList31 = com.thealgorithms.backtracking.Combination.combination(strSetListArray17, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strSetListArray2);
        org.junit.Assert.assertNotNull(listArray4);
        org.junit.Assert.assertNotNull(strSetListArray5);
        org.junit.Assert.assertNotNull(listArray7);
        org.junit.Assert.assertNotNull(strSetListArray8);
        org.junit.Assert.assertNotNull(listArray10);
        org.junit.Assert.assertNotNull(strSetListArray11);
        org.junit.Assert.assertNotNull(listArray13);
        org.junit.Assert.assertNotNull(strSetListArray14);
        org.junit.Assert.assertNotNull(listArray16);
        org.junit.Assert.assertNotNull(strSetListArray17);
        org.junit.Assert.assertNull(listArraySetList29);
    }

    @Test
    public void test1056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1056");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>>> wildcardClassSetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (byte) 0);
        java.util.List<java.util.TreeSet<java.lang.invoke.TypeDescriptor>> typeDescriptorSetList6 = com.thealgorithms.backtracking.Combination.combination((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2, 0);
        java.util.List<java.util.TreeSet<java.lang.reflect.AnnotatedElement>> annotatedElementSetList8 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2, (int) '4');
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration>> genericDeclarationSetList10 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2, (int) (byte) 0);
        java.util.List<java.util.TreeSet<java.lang.Object>> objSetList12 = com.thealgorithms.backtracking.Combination.combination((java.lang.Object[]) wildcardClassArray2, (int) '#');
        java.lang.Class<?> wildcardClass13 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNull(wildcardClassSetList4);
        org.junit.Assert.assertNull(typeDescriptorSetList6);
        org.junit.Assert.assertNotNull(annotatedElementSetList8);
        org.junit.Assert.assertNull(genericDeclarationSetList10);
        org.junit.Assert.assertNotNull(objSetList12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1057");
        java.lang.Class<?>[][][][][][][][][] wildcardClassArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.TreeSet<java.lang.Class<?>[][][][][][][][]>> wildcardClassArraySetList2 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray0, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1058");
        java.lang.reflect.GenericDeclaration[][] genericDeclarationArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration[]>> genericDeclarationArraySetList2 = com.thealgorithms.backtracking.Combination.combination(genericDeclarationArray0, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1059");
        java.lang.Class[][] classArray1 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray2 = (java.lang.Class<?>[][]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>[]>> wildcardClassArraySetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (byte) 1);
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration[]>> genericDeclarationArraySetList6 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray2, (int) (byte) 0);
        java.util.List<java.util.TreeSet<java.lang.Class<?>[]>> wildcardClassArraySetList8 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, 1);
        java.util.List<java.util.TreeSet<java.lang.constant.Constable[]>> constableArraySetList10 = com.thealgorithms.backtracking.Combination.combination((java.lang.constant.Constable[][]) wildcardClassArray2, (int) (short) 10);
        java.util.List<java.util.TreeSet<java.lang.Class<?>[]>> wildcardClassArraySetList12 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (byte) 0);
        java.util.List<java.util.TreeSet<java.io.Serializable>> serializableSetList14 = com.thealgorithms.backtracking.Combination.combination((java.io.Serializable[]) wildcardClassArray2, 2);
        java.lang.Class<?> wildcardClass15 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList4);
        org.junit.Assert.assertNull(genericDeclarationArraySetList6);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList8);
        org.junit.Assert.assertNotNull(constableArraySetList10);
        org.junit.Assert.assertNull(wildcardClassArraySetList12);
        org.junit.Assert.assertNotNull(serializableSetList14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test1060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1060");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "", "", "", "" };
        java.util.List<java.util.TreeSet<java.lang.Comparable<java.lang.String>>> strComparableSetList8 = com.thealgorithms.backtracking.Combination.combination((java.lang.Comparable<java.lang.String>[]) strArray6, (int) (byte) 1);
        java.util.List<java.util.TreeSet<java.lang.constant.Constable>> constableSetList10 = com.thealgorithms.backtracking.Combination.combination((java.lang.constant.Constable[]) strArray6, (int) (short) 0);
        java.util.List<java.util.TreeSet<java.lang.String>> strSetList12 = com.thealgorithms.backtracking.Combination.combination(strArray6, (int) (byte) -1);
        java.lang.Class<?> wildcardClass13 = strArray6.getClass();
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strComparableSetList8);
        org.junit.Assert.assertNull(constableSetList10);
        org.junit.Assert.assertNotNull(strSetList12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1061");
        java.util.List[] listArray1 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[] strSetListArray2 = (java.util.List<java.util.TreeSet<java.lang.String>>[]) listArray1;
        java.util.List[] listArray4 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[] strSetListArray5 = (java.util.List<java.util.TreeSet<java.lang.String>>[]) listArray4;
        java.util.List[][] listArray7 = new java.util.List[2][];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[][] strSetListArray8 = (java.util.List<java.util.TreeSet<java.lang.String>>[][]) listArray7;
        strSetListArray8[0] = strSetListArray2;
        strSetListArray8[1] = strSetListArray5;
        java.util.List[][][] listArray14 = new java.util.List[1][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[][][] strSetListArray15 = (java.util.List<java.util.TreeSet<java.lang.String>>[][][]) listArray14;
        strSetListArray15[0] = strSetListArray8;
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[][]>> listArraySetList19 = com.thealgorithms.backtracking.Combination.combination(strSetListArray15, (int) (short) 10);
        java.util.List<java.util.TreeSet<java.util.Collection[][]>> collectionArraySetList21 = com.thealgorithms.backtracking.Combination.combination((java.util.Collection[][][]) strSetListArray15, 100);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[][]>> listArraySetList23 = com.thealgorithms.backtracking.Combination.combination(strSetListArray15, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strSetListArray2);
        org.junit.Assert.assertNotNull(listArray4);
        org.junit.Assert.assertNotNull(strSetListArray5);
        org.junit.Assert.assertNotNull(listArray7);
        org.junit.Assert.assertNotNull(strSetListArray8);
        org.junit.Assert.assertNotNull(listArray14);
        org.junit.Assert.assertNotNull(strSetListArray15);
        org.junit.Assert.assertNotNull(listArraySetList19);
        org.junit.Assert.assertNotNull(collectionArraySetList21);
    }

    @Test
    public void test1062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1062");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "", "", "", "" };
        java.util.List<java.util.TreeSet<java.lang.Comparable<java.lang.String>>> strComparableSetList8 = com.thealgorithms.backtracking.Combination.combination((java.lang.Comparable<java.lang.String>[]) strArray6, (int) (byte) 1);
        java.util.List<java.util.TreeSet<java.lang.Comparable<java.lang.String>>> strComparableSetList10 = com.thealgorithms.backtracking.Combination.combination((java.lang.Comparable<java.lang.String>[]) strArray6, (int) (byte) 1);
        java.util.List<java.util.TreeSet<java.lang.Comparable<java.lang.String>>> strComparableSetList12 = com.thealgorithms.backtracking.Combination.combination((java.lang.Comparable<java.lang.String>[]) strArray6, (int) (byte) -1);
        java.util.List<java.util.TreeSet<java.lang.constant.ConstantDesc>> constantDescSetList14 = com.thealgorithms.backtracking.Combination.combination((java.lang.constant.ConstantDesc[]) strArray6, (int) (short) 1);
        java.lang.Class<?> wildcardClass15 = strArray6.getClass();
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strComparableSetList8);
        org.junit.Assert.assertNotNull(strComparableSetList10);
        org.junit.Assert.assertNotNull(strComparableSetList12);
        org.junit.Assert.assertNotNull(constantDescSetList14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test1063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1063");
        java.util.List[][] listArray1 = new java.util.List[0][];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[][] strSetListArray2 = (java.util.List<java.util.TreeSet<java.lang.String>>[][]) listArray1;
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[]>> listArraySetList4 = com.thealgorithms.backtracking.Combination.combination(strSetListArray2, (int) (short) -1);
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[]>> listArraySetList6 = com.thealgorithms.backtracking.Combination.combination(strSetListArray2, (-1));
        java.util.List<java.util.TreeSet<java.util.Collection[]>> collectionArraySetList8 = com.thealgorithms.backtracking.Combination.combination((java.util.Collection[][]) strSetListArray2, (int) (short) 10);
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[]>> listArraySetList10 = com.thealgorithms.backtracking.Combination.combination(strSetListArray2, 3);
        java.util.List<java.util.TreeSet<java.util.Collection[]>> collectionArraySetList12 = com.thealgorithms.backtracking.Combination.combination((java.util.Collection[][]) strSetListArray2, 100);
        java.lang.Class<?> wildcardClass13 = collectionArraySetList12.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strSetListArray2);
        org.junit.Assert.assertNotNull(listArraySetList4);
        org.junit.Assert.assertNotNull(listArraySetList6);
        org.junit.Assert.assertNotNull(collectionArraySetList8);
        org.junit.Assert.assertNotNull(listArraySetList10);
        org.junit.Assert.assertNotNull(collectionArraySetList12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1064");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.util.TreeSet<java.lang.String>> strSetList4 = com.thealgorithms.backtracking.Combination.combination(strArray2, (int) '#');
        java.util.List<java.util.TreeSet<java.lang.CharSequence>> charSequenceSetList6 = com.thealgorithms.backtracking.Combination.combination((java.lang.CharSequence[]) strArray2, 10);
        java.util.List<java.util.TreeSet<java.lang.String>> strSetList8 = com.thealgorithms.backtracking.Combination.combination(strArray2, 0);
        java.util.List<java.util.TreeSet<java.lang.String>> strSetList10 = com.thealgorithms.backtracking.Combination.combination(strArray2, (int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass11 = strSetList10.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strSetList4);
        org.junit.Assert.assertNotNull(charSequenceSetList6);
        org.junit.Assert.assertNull(strSetList8);
        org.junit.Assert.assertNull(strSetList10);
    }

    @Test
    public void test1065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1065");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "", "", "", "" };
        java.util.List<java.util.TreeSet<java.lang.Comparable<java.lang.String>>> strComparableSetList8 = com.thealgorithms.backtracking.Combination.combination((java.lang.Comparable<java.lang.String>[]) strArray6, (int) (byte) 1);
        java.util.List<java.util.TreeSet<java.io.Serializable>> serializableSetList10 = com.thealgorithms.backtracking.Combination.combination((java.io.Serializable[]) strArray6, (int) '4');
        java.util.List<java.util.TreeSet<java.lang.Object>> objSetList12 = com.thealgorithms.backtracking.Combination.combination((java.lang.Object[]) strArray6, (int) '#');
        java.util.List<java.util.TreeSet<java.lang.Comparable<java.lang.String>>> strComparableSetList14 = com.thealgorithms.backtracking.Combination.combination((java.lang.Comparable<java.lang.String>[]) strArray6, 100);
        java.util.List<java.util.TreeSet<java.lang.String>> strSetList16 = com.thealgorithms.backtracking.Combination.combination(strArray6, (int) '4');
        java.util.List<java.util.TreeSet<java.lang.CharSequence>> charSequenceSetList18 = com.thealgorithms.backtracking.Combination.combination((java.lang.CharSequence[]) strArray6, 5);
        java.lang.Class<?> wildcardClass19 = charSequenceSetList18.getClass();
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strComparableSetList8);
        org.junit.Assert.assertNotNull(serializableSetList10);
        org.junit.Assert.assertNotNull(objSetList12);
        org.junit.Assert.assertNotNull(strComparableSetList14);
        org.junit.Assert.assertNotNull(strSetList16);
        org.junit.Assert.assertNotNull(charSequenceSetList18);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test1066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1066");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "", "", "", "" };
        java.util.List<java.util.TreeSet<java.lang.Comparable<java.lang.String>>> strComparableSetList8 = com.thealgorithms.backtracking.Combination.combination((java.lang.Comparable<java.lang.String>[]) strArray6, (int) (byte) 1);
        java.util.List<java.util.TreeSet<java.lang.Comparable<java.lang.String>>> strComparableSetList10 = com.thealgorithms.backtracking.Combination.combination((java.lang.Comparable<java.lang.String>[]) strArray6, (int) (byte) 1);
        java.util.List<java.util.TreeSet<java.lang.Comparable<java.lang.String>>> strComparableSetList12 = com.thealgorithms.backtracking.Combination.combination((java.lang.Comparable<java.lang.String>[]) strArray6, (int) (byte) -1);
        java.util.List<java.util.TreeSet<java.lang.String>> strSetList14 = com.thealgorithms.backtracking.Combination.combination(strArray6, (int) (byte) -1);
        java.lang.Class<?> wildcardClass15 = strSetList14.getClass();
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strComparableSetList8);
        org.junit.Assert.assertNotNull(strComparableSetList10);
        org.junit.Assert.assertNotNull(strComparableSetList12);
        org.junit.Assert.assertNotNull(strSetList14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test1067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1067");
        java.lang.Class[][][] classArray1 = new java.lang.Class[0][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray2 = (java.lang.Class<?>[][][]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][]>> wildcardClassArraySetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (byte) -1);
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][]>> wildcardClassArraySetList6 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, 10);
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][]>> wildcardClassArraySetList8 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) ' ');
        java.lang.Class<?> wildcardClass9 = wildcardClassArraySetList8.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList4);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList6);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1068");
        java.lang.Class[][] classArray1 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray2 = (java.lang.Class<?>[][]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>[]>> wildcardClassArraySetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (byte) 1);
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration[]>> genericDeclarationArraySetList6 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray2, (int) (short) -1);
        java.util.List<java.util.TreeSet<java.lang.reflect.Type[]>> typeArraySetList8 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.Type[][]) wildcardClassArray2, (int) (short) 100);
        java.util.List<java.util.TreeSet<java.lang.reflect.Type[]>> typeArraySetList10 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.Type[][]) wildcardClassArray2, 0);
        java.util.List<java.util.TreeSet<java.lang.Object>> objSetList12 = com.thealgorithms.backtracking.Combination.combination((java.lang.Object[]) wildcardClassArray2, 100);
        java.util.List<java.util.TreeSet<java.io.Serializable>> serializableSetList14 = com.thealgorithms.backtracking.Combination.combination((java.io.Serializable[]) wildcardClassArray2, 5);
        java.lang.Class<?> wildcardClass15 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList4);
        org.junit.Assert.assertNotNull(genericDeclarationArraySetList6);
        org.junit.Assert.assertNotNull(typeArraySetList8);
        org.junit.Assert.assertNull(typeArraySetList10);
        org.junit.Assert.assertNotNull(objSetList12);
        org.junit.Assert.assertNotNull(serializableSetList14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test1069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1069");
        java.lang.Class[][][][][][][] classArray1 = new java.lang.Class[0][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][][][][]>> wildcardClassArraySetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, 1);
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][][][][]>> wildcardClassArraySetList6 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) 'a');
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][][][][]>> wildcardClassArraySetList8 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (short) -1);
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][][][][]>> wildcardClassArraySetList10 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (short) 100);
        java.lang.Class<?> wildcardClass11 = wildcardClassArraySetList10.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList4);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList6);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList8);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1070");
        java.lang.Class[][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][][][][][]>> wildcardClassArraySetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, 2);
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][][][][][]>> wildcardClassArraySetList6 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (byte) 100);
        java.lang.Class<?> wildcardClass7 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList4);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test1071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1071");
        java.util.List[][][][] listArray1 = new java.util.List[0][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[][][][] strSetListArray2 = (java.util.List<java.util.TreeSet<java.lang.String>>[][][][]) listArray1;
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[][][]>> listArraySetList4 = com.thealgorithms.backtracking.Combination.combination(strSetListArray2, (int) (byte) 100);
        java.lang.Class<?> wildcardClass5 = strSetListArray2.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strSetListArray2);
        org.junit.Assert.assertNotNull(listArraySetList4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test1072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1072");
        java.util.List[][] listArray1 = new java.util.List[0][];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[][] strSetListArray2 = (java.util.List<java.util.TreeSet<java.lang.String>>[][]) listArray1;
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[]>> listArraySetList4 = com.thealgorithms.backtracking.Combination.combination(strSetListArray2, (int) (short) -1);
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[]>> listArraySetList6 = com.thealgorithms.backtracking.Combination.combination(strSetListArray2, (-1));
        java.util.List<java.util.TreeSet<java.util.Collection[]>> collectionArraySetList8 = com.thealgorithms.backtracking.Combination.combination((java.util.Collection[][]) strSetListArray2, (int) (short) 10);
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[]>> listArraySetList10 = com.thealgorithms.backtracking.Combination.combination(strSetListArray2, 3);
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[]>> listArraySetList12 = com.thealgorithms.backtracking.Combination.combination(strSetListArray2, (int) (short) 10);
        java.lang.Class<?> wildcardClass13 = strSetListArray2.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strSetListArray2);
        org.junit.Assert.assertNotNull(listArraySetList4);
        org.junit.Assert.assertNotNull(listArraySetList6);
        org.junit.Assert.assertNotNull(collectionArraySetList8);
        org.junit.Assert.assertNotNull(listArraySetList10);
        org.junit.Assert.assertNotNull(listArraySetList12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1073");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.util.TreeSet<java.lang.String>> strSetList4 = com.thealgorithms.backtracking.Combination.combination(strArray2, (int) '#');
        java.lang.String[] strArray7 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.util.TreeSet<java.lang.String>> strSetList9 = com.thealgorithms.backtracking.Combination.combination(strArray7, (int) '#');
        java.util.List[] listArray11 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[] strSetListArray12 = (java.util.List<java.util.TreeSet<java.lang.String>>[]) listArray11;
        strSetListArray12[0] = strSetList4;
        strSetListArray12[1] = strSetList9;
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>>> setListSetList18 = com.thealgorithms.backtracking.Combination.combination(strSetListArray12, (int) (byte) 0);
        java.util.List<java.util.TreeSet<java.util.Collection<java.util.TreeSet<java.lang.String>>>> setCollectionSetList20 = com.thealgorithms.backtracking.Combination.combination((java.util.Collection<java.util.TreeSet<java.lang.String>>[]) strSetListArray12, (int) (short) 0);
        java.util.List<java.util.TreeSet<java.util.Collection<java.util.TreeSet<java.lang.String>>>> setCollectionSetList22 = com.thealgorithms.backtracking.Combination.combination((java.util.Collection<java.util.TreeSet<java.lang.String>>[]) strSetListArray12, (int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.TreeSet<java.util.Collection<java.util.TreeSet<java.lang.String>>>> setCollectionSetList24 = com.thealgorithms.backtracking.Combination.combination((java.util.Collection<java.util.TreeSet<java.lang.String>>[]) strSetListArray12, 5);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strSetList4);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strSetList9);
        org.junit.Assert.assertNotNull(listArray11);
        org.junit.Assert.assertNotNull(strSetListArray12);
        org.junit.Assert.assertNull(setListSetList18);
        org.junit.Assert.assertNull(setCollectionSetList20);
        org.junit.Assert.assertNull(setCollectionSetList22);
    }

    @Test
    public void test1074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1074");
        java.util.Collection[][] collectionArray0 = new java.util.Collection[][] {};
        java.util.List<java.util.TreeSet<java.util.Collection[]>> collectionArraySetList2 = com.thealgorithms.backtracking.Combination.combination(collectionArray0, (int) (byte) 0);
        java.util.List<java.util.TreeSet<java.util.Collection[]>> collectionArraySetList4 = com.thealgorithms.backtracking.Combination.combination(collectionArray0, (int) (byte) -1);
        java.util.List<java.util.TreeSet<java.io.Serializable>> serializableSetList6 = com.thealgorithms.backtracking.Combination.combination((java.io.Serializable[]) collectionArray0, (int) '4');
        java.lang.Class<?> wildcardClass7 = collectionArray0.getClass();
        org.junit.Assert.assertNotNull(collectionArray0);
        org.junit.Assert.assertNull(collectionArraySetList2);
        org.junit.Assert.assertNotNull(collectionArraySetList4);
        org.junit.Assert.assertNotNull(serializableSetList6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test1075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1075");
        java.util.List[][] listArray1 = new java.util.List[0][];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[][] strSetListArray2 = (java.util.List<java.util.TreeSet<java.lang.String>>[][]) listArray1;
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[]>> listArraySetList4 = com.thealgorithms.backtracking.Combination.combination(strSetListArray2, (int) (short) -1);
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[]>> listArraySetList6 = com.thealgorithms.backtracking.Combination.combination(strSetListArray2, (-1));
        java.util.List<java.util.TreeSet<java.util.Collection[]>> collectionArraySetList8 = com.thealgorithms.backtracking.Combination.combination((java.util.Collection[][]) strSetListArray2, 5);
        java.util.List<java.util.TreeSet<java.lang.Iterable<java.util.TreeSet<java.lang.String>>[]>> iterableArraySetList10 = com.thealgorithms.backtracking.Combination.combination((java.lang.Iterable<java.util.TreeSet<java.lang.String>>[][]) strSetListArray2, 100);
        java.lang.Class<?> wildcardClass11 = iterableArraySetList10.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strSetListArray2);
        org.junit.Assert.assertNotNull(listArraySetList4);
        org.junit.Assert.assertNotNull(listArraySetList6);
        org.junit.Assert.assertNotNull(collectionArraySetList8);
        org.junit.Assert.assertNotNull(iterableArraySetList10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1076");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>>> wildcardClassSetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (byte) 0);
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration>> genericDeclarationSetList6 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2, (int) (byte) 1);
        java.util.List<java.util.TreeSet<java.lang.invoke.TypeDescriptor>> typeDescriptorSetList8 = com.thealgorithms.backtracking.Combination.combination((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2, (int) ' ');
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration>> genericDeclarationSetList10 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2, 0);
        java.util.List<java.util.TreeSet<java.lang.invoke.TypeDescriptor>> typeDescriptorSetList12 = com.thealgorithms.backtracking.Combination.combination((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2, (int) (short) 0);
        java.util.List<java.util.TreeSet<java.lang.Class<?>>> wildcardClassSetList14 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, 4);
        java.util.List<java.util.TreeSet<java.lang.constant.Constable>> constableSetList16 = com.thealgorithms.backtracking.Combination.combination((java.lang.constant.Constable[]) wildcardClassArray2, 0);
        java.lang.Class<?> wildcardClass17 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNull(wildcardClassSetList4);
        org.junit.Assert.assertNotNull(genericDeclarationSetList6);
        org.junit.Assert.assertNotNull(typeDescriptorSetList8);
        org.junit.Assert.assertNull(genericDeclarationSetList10);
        org.junit.Assert.assertNull(typeDescriptorSetList12);
        org.junit.Assert.assertNotNull(wildcardClassSetList14);
        org.junit.Assert.assertNull(constableSetList16);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test1077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1077");
        java.lang.Class[][][][] classArray1 = new java.lang.Class[0][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][]>> wildcardClassArraySetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (byte) 100);
        java.util.List<java.util.TreeSet<java.lang.reflect.Type[][][]>> typeArraySetList6 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.Type[][][][]) wildcardClassArray2, 3);
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][]>> wildcardClassArraySetList8 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, 0);
        java.util.List<java.util.TreeSet<java.lang.reflect.Type[][][]>> typeArraySetList10 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.Type[][][][]) wildcardClassArray2, 0);
        java.util.List<java.util.TreeSet<java.lang.reflect.Type[][][]>> typeArraySetList12 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.Type[][][][]) wildcardClassArray2, 5);
        java.lang.Class<?> wildcardClass13 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList4);
        org.junit.Assert.assertNotNull(typeArraySetList6);
        org.junit.Assert.assertNull(wildcardClassArraySetList8);
        org.junit.Assert.assertNull(typeArraySetList10);
        org.junit.Assert.assertNotNull(typeArraySetList12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1078");
        java.util.List[] listArray1 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[] strSetListArray2 = (java.util.List<java.util.TreeSet<java.lang.String>>[]) listArray1;
        java.util.List[] listArray4 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[] strSetListArray5 = (java.util.List<java.util.TreeSet<java.lang.String>>[]) listArray4;
        java.util.List[][] listArray7 = new java.util.List[2][];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[][] strSetListArray8 = (java.util.List<java.util.TreeSet<java.lang.String>>[][]) listArray7;
        strSetListArray8[0] = strSetListArray2;
        strSetListArray8[1] = strSetListArray5;
        java.util.List[][][] listArray14 = new java.util.List[1][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[][][] strSetListArray15 = (java.util.List<java.util.TreeSet<java.lang.String>>[][][]) listArray14;
        strSetListArray15[0] = strSetListArray8;
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[][]>> listArraySetList19 = com.thealgorithms.backtracking.Combination.combination(strSetListArray15, (int) (short) 10);
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[][]>> listArraySetList21 = com.thealgorithms.backtracking.Combination.combination(strSetListArray15, (int) '#');
        java.util.List<java.util.TreeSet<java.util.Collection[][]>> collectionArraySetList23 = com.thealgorithms.backtracking.Combination.combination((java.util.Collection[][][]) strSetListArray15, 0);
        java.util.List<java.util.TreeSet<java.util.Collection[][]>> collectionArraySetList25 = com.thealgorithms.backtracking.Combination.combination((java.util.Collection[][][]) strSetListArray15, (int) (byte) 100);
        java.lang.Class<?> wildcardClass26 = collectionArraySetList25.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strSetListArray2);
        org.junit.Assert.assertNotNull(listArray4);
        org.junit.Assert.assertNotNull(strSetListArray5);
        org.junit.Assert.assertNotNull(listArray7);
        org.junit.Assert.assertNotNull(strSetListArray8);
        org.junit.Assert.assertNotNull(listArray14);
        org.junit.Assert.assertNotNull(strSetListArray15);
        org.junit.Assert.assertNotNull(listArraySetList19);
        org.junit.Assert.assertNotNull(listArraySetList21);
        org.junit.Assert.assertNull(collectionArraySetList23);
        org.junit.Assert.assertNotNull(collectionArraySetList25);
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test1079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1079");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[1][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        wildcardClassArray5[0] = classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>[]>> wildcardClassArraySetList9 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray5, 10);
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration[]>> genericDeclarationArraySetList11 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray5, 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration[]>> genericDeclarationArraySetList13 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray5, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList9);
        org.junit.Assert.assertNull(genericDeclarationArraySetList11);
    }

    @Test
    public void test1080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1080");
        java.util.List[][] listArray1 = new java.util.List[0][];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[][] strSetListArray2 = (java.util.List<java.util.TreeSet<java.lang.String>>[][]) listArray1;
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[]>> listArraySetList4 = com.thealgorithms.backtracking.Combination.combination(strSetListArray2, (int) (short) -1);
        java.util.List<java.util.TreeSet<java.lang.Iterable<java.util.TreeSet<java.lang.String>>[]>> iterableArraySetList6 = com.thealgorithms.backtracking.Combination.combination((java.lang.Iterable<java.util.TreeSet<java.lang.String>>[][]) strSetListArray2, 2);
        java.util.List<java.util.TreeSet<java.util.Collection[]>> collectionArraySetList8 = com.thealgorithms.backtracking.Combination.combination((java.util.Collection[][]) strSetListArray2, (-1));
        java.lang.Class<?> wildcardClass9 = collectionArraySetList8.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strSetListArray2);
        org.junit.Assert.assertNotNull(listArraySetList4);
        org.junit.Assert.assertNotNull(iterableArraySetList6);
        org.junit.Assert.assertNotNull(collectionArraySetList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1081");
        java.lang.Class[][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][][][][][]>> wildcardClassArraySetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, 2);
        java.lang.Class<?> wildcardClass5 = wildcardClassArraySetList4.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test1082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1082");
        java.lang.Class[][][][] classArray1 = new java.lang.Class[0][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][]>> wildcardClassArraySetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (byte) 100);
        java.util.List<java.util.TreeSet<java.lang.reflect.Type[][][]>> typeArraySetList6 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.Type[][][][]) wildcardClassArray2, 0);
        java.util.List<java.util.TreeSet<java.lang.reflect.Type[][][]>> typeArraySetList8 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.Type[][][][]) wildcardClassArray2, (int) ' ');
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList4);
        org.junit.Assert.assertNull(typeArraySetList6);
        org.junit.Assert.assertNotNull(typeArraySetList8);
    }

    @Test
    public void test1083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1083");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.util.TreeSet<java.lang.String>> strSetList4 = com.thealgorithms.backtracking.Combination.combination(strArray2, (int) '#');
        java.util.List<java.util.TreeSet<java.lang.constant.ConstantDesc>> constantDescSetList6 = com.thealgorithms.backtracking.Combination.combination((java.lang.constant.ConstantDesc[]) strArray2, 1);
        java.util.List<java.util.TreeSet<java.lang.String>> strSetList8 = com.thealgorithms.backtracking.Combination.combination(strArray2, (int) (byte) -1);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "", "", "" };
        java.util.List<java.util.TreeSet<java.lang.Comparable<java.lang.String>>> strComparableSetList17 = com.thealgorithms.backtracking.Combination.combination((java.lang.Comparable<java.lang.String>[]) strArray15, (int) (byte) 1);
        java.util.List<java.util.TreeSet<java.io.Serializable>> serializableSetList19 = com.thealgorithms.backtracking.Combination.combination((java.io.Serializable[]) strArray15, (int) '4');
        java.util.List<java.util.TreeSet<java.lang.Object>> objSetList21 = com.thealgorithms.backtracking.Combination.combination((java.lang.Object[]) strArray15, (int) '#');
        java.util.List<java.util.TreeSet<java.lang.Comparable<java.lang.String>>> strComparableSetList23 = com.thealgorithms.backtracking.Combination.combination((java.lang.Comparable<java.lang.String>[]) strArray15, 100);
        java.util.List<java.util.TreeSet<java.lang.String>> strSetList25 = com.thealgorithms.backtracking.Combination.combination(strArray15, (int) '4');
        java.lang.String[] strArray28 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.util.TreeSet<java.lang.String>> strSetList30 = com.thealgorithms.backtracking.Combination.combination(strArray28, (int) '#');
        java.util.List<java.util.TreeSet<java.lang.CharSequence>> charSequenceSetList32 = com.thealgorithms.backtracking.Combination.combination((java.lang.CharSequence[]) strArray28, 10);
        java.util.List<java.util.TreeSet<java.lang.constant.Constable>> constableSetList34 = com.thealgorithms.backtracking.Combination.combination((java.lang.constant.Constable[]) strArray28, (int) (byte) 1);
        java.util.List<java.util.TreeSet<java.lang.String>> strSetList36 = com.thealgorithms.backtracking.Combination.combination(strArray28, (int) (short) 1);
        java.lang.String[] strArray39 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.util.TreeSet<java.lang.String>> strSetList41 = com.thealgorithms.backtracking.Combination.combination(strArray39, (int) '#');
        java.lang.String[] strArray44 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.util.TreeSet<java.lang.String>> strSetList46 = com.thealgorithms.backtracking.Combination.combination(strArray44, (int) '#');
        java.util.List[] listArray48 = new java.util.List[5];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[] strSetListArray49 = (java.util.List<java.util.TreeSet<java.lang.String>>[]) listArray48;
        strSetListArray49[0] = strSetList8;
        strSetListArray49[1] = strSetList25;
        strSetListArray49[2] = strSetList36;
        strSetListArray49[3] = strSetList41;
        strSetListArray49[4] = strSetList46;
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>>> setListSetList61 = com.thealgorithms.backtracking.Combination.combination(strSetListArray49, (int) (short) 0);
        java.util.List<java.util.TreeSet<java.util.Collection<java.util.TreeSet<java.lang.String>>>> setCollectionSetList63 = com.thealgorithms.backtracking.Combination.combination((java.util.Collection<java.util.TreeSet<java.lang.String>>[]) strSetListArray49, (int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.TreeSet<java.util.Collection<java.util.TreeSet<java.lang.String>>>> setCollectionSetList65 = com.thealgorithms.backtracking.Combination.combination((java.util.Collection<java.util.TreeSet<java.lang.String>>[]) strSetListArray49, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strSetList4);
        org.junit.Assert.assertNotNull(constantDescSetList6);
        org.junit.Assert.assertNotNull(strSetList8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strComparableSetList17);
        org.junit.Assert.assertNotNull(serializableSetList19);
        org.junit.Assert.assertNotNull(objSetList21);
        org.junit.Assert.assertNotNull(strComparableSetList23);
        org.junit.Assert.assertNotNull(strSetList25);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(strSetList30);
        org.junit.Assert.assertNotNull(charSequenceSetList32);
        org.junit.Assert.assertNotNull(constableSetList34);
        org.junit.Assert.assertNotNull(strSetList36);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(strSetList41);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(strSetList46);
        org.junit.Assert.assertNotNull(listArray48);
        org.junit.Assert.assertNotNull(strSetListArray49);
        org.junit.Assert.assertNull(setListSetList61);
        org.junit.Assert.assertNull(setCollectionSetList63);
    }

    @Test
    public void test1084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1084");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.util.TreeSet<java.lang.String>> strSetList4 = com.thealgorithms.backtracking.Combination.combination(strArray2, (int) '#');
        java.util.List<java.util.TreeSet<java.lang.CharSequence>> charSequenceSetList6 = com.thealgorithms.backtracking.Combination.combination((java.lang.CharSequence[]) strArray2, 10);
        java.util.List<java.util.TreeSet<java.lang.constant.Constable>> constableSetList8 = com.thealgorithms.backtracking.Combination.combination((java.lang.constant.Constable[]) strArray2, (int) (byte) 1);
        java.util.List<java.util.TreeSet<java.lang.String>> strSetList10 = com.thealgorithms.backtracking.Combination.combination(strArray2, (int) (short) 1);
        java.util.List<java.util.TreeSet<java.lang.constant.ConstantDesc>> constantDescSetList12 = com.thealgorithms.backtracking.Combination.combination((java.lang.constant.ConstantDesc[]) strArray2, (int) (short) 1);
        java.util.List<java.util.TreeSet<java.lang.constant.ConstantDesc>> constantDescSetList14 = com.thealgorithms.backtracking.Combination.combination((java.lang.constant.ConstantDesc[]) strArray2, (int) (short) -1);
        java.util.List<java.util.TreeSet<java.lang.String>> strSetList16 = com.thealgorithms.backtracking.Combination.combination(strArray2, 100);
        java.util.List<java.util.TreeSet<java.lang.CharSequence>> charSequenceSetList18 = com.thealgorithms.backtracking.Combination.combination((java.lang.CharSequence[]) strArray2, 10);
        java.lang.Class<?> wildcardClass19 = strArray2.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strSetList4);
        org.junit.Assert.assertNotNull(charSequenceSetList6);
        org.junit.Assert.assertNotNull(constableSetList8);
        org.junit.Assert.assertNotNull(strSetList10);
        org.junit.Assert.assertNotNull(constantDescSetList12);
        org.junit.Assert.assertNotNull(constantDescSetList14);
        org.junit.Assert.assertNotNull(strSetList16);
        org.junit.Assert.assertNotNull(charSequenceSetList18);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test1085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1085");
        java.util.List[] listArray1 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[] strSetListArray2 = (java.util.List<java.util.TreeSet<java.lang.String>>[]) listArray1;
        java.util.List[] listArray4 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[] strSetListArray5 = (java.util.List<java.util.TreeSet<java.lang.String>>[]) listArray4;
        java.util.List[][] listArray7 = new java.util.List[2][];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[][] strSetListArray8 = (java.util.List<java.util.TreeSet<java.lang.String>>[][]) listArray7;
        strSetListArray8[0] = strSetListArray2;
        strSetListArray8[1] = strSetListArray5;
        java.util.List[][][] listArray14 = new java.util.List[1][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[][][] strSetListArray15 = (java.util.List<java.util.TreeSet<java.lang.String>>[][][]) listArray14;
        strSetListArray15[0] = strSetListArray8;
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[][]>> listArraySetList19 = com.thealgorithms.backtracking.Combination.combination(strSetListArray15, (int) (short) 10);
        java.util.List<java.util.TreeSet<java.util.Collection[][]>> collectionArraySetList21 = com.thealgorithms.backtracking.Combination.combination((java.util.Collection[][][]) strSetListArray15, 100);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[][]>> listArraySetList23 = com.thealgorithms.backtracking.Combination.combination(strSetListArray15, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strSetListArray2);
        org.junit.Assert.assertNotNull(listArray4);
        org.junit.Assert.assertNotNull(strSetListArray5);
        org.junit.Assert.assertNotNull(listArray7);
        org.junit.Assert.assertNotNull(strSetListArray8);
        org.junit.Assert.assertNotNull(listArray14);
        org.junit.Assert.assertNotNull(strSetListArray15);
        org.junit.Assert.assertNotNull(listArraySetList19);
        org.junit.Assert.assertNotNull(collectionArraySetList21);
    }

    @Test
    public void test1086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1086");
        java.lang.String[][] strArray0 = new java.lang.String[][] {};
        java.lang.String[][][] strArray1 = new java.lang.String[][][] { strArray0 };
        java.util.List<java.util.TreeSet<java.lang.String[][]>> strArraySetList3 = com.thealgorithms.backtracking.Combination.combination(strArray1, (int) (byte) 100);
        java.util.List<java.util.TreeSet<java.lang.String[][]>> strArraySetList5 = com.thealgorithms.backtracking.Combination.combination(strArray1, 6);
        java.util.List<java.util.TreeSet<java.lang.String[][]>> strArraySetList7 = com.thealgorithms.backtracking.Combination.combination(strArray1, (int) '4');
        java.lang.Class<?> wildcardClass8 = strArraySetList7.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArraySetList3);
        org.junit.Assert.assertNotNull(strArraySetList5);
        org.junit.Assert.assertNotNull(strArraySetList7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test1087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1087");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[1][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        wildcardClassArray5[0] = classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>[]>> wildcardClassArraySetList9 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray5, 10);
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration[]>> genericDeclarationArraySetList11 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray5, 0);
        java.util.List<java.util.TreeSet<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]>> ofFieldArraySetList13 = com.thealgorithms.backtracking.Combination.combination((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]) wildcardClassArray5, 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.TreeSet<java.lang.Class<?>[]>> wildcardClassArraySetList15 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray5, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList9);
        org.junit.Assert.assertNull(genericDeclarationArraySetList11);
        org.junit.Assert.assertNull(ofFieldArraySetList13);
    }

    @Test
    public void test1088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1088");
        com.thealgorithms.backtracking.Combination[][] combinationArray0 = new com.thealgorithms.backtracking.Combination[][] {};
        java.util.List<java.util.TreeSet<com.thealgorithms.backtracking.Combination[]>> combinationArraySetList2 = com.thealgorithms.backtracking.Combination.combination(combinationArray0, (int) (short) 0);
        java.util.List<java.util.TreeSet<com.thealgorithms.backtracking.Combination[]>> combinationArraySetList4 = com.thealgorithms.backtracking.Combination.combination(combinationArray0, (int) (short) 0);
        java.util.List<java.util.TreeSet<com.thealgorithms.backtracking.Combination[]>> combinationArraySetList6 = com.thealgorithms.backtracking.Combination.combination(combinationArray0, 6);
        java.lang.Class<?> wildcardClass7 = combinationArraySetList6.getClass();
        org.junit.Assert.assertNotNull(combinationArray0);
        org.junit.Assert.assertNull(combinationArraySetList2);
        org.junit.Assert.assertNull(combinationArraySetList4);
        org.junit.Assert.assertNotNull(combinationArraySetList6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test1089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1089");
        java.lang.Class[][][] classArray1 = new java.lang.Class[0][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray2 = (java.lang.Class<?>[][][]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][]>> wildcardClassArraySetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (byte) -1);
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][]>> wildcardClassArraySetList6 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, 0);
        java.util.List<java.util.TreeSet<java.lang.reflect.Type[][]>> typeArraySetList8 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.Type[][][]) wildcardClassArray2, (int) (byte) 100);
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration[][]>> genericDeclarationArraySetList10 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[][][]) wildcardClassArray2, (int) (short) 10);
        java.lang.Class<?> wildcardClass11 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList4);
        org.junit.Assert.assertNull(wildcardClassArraySetList6);
        org.junit.Assert.assertNotNull(typeArraySetList8);
        org.junit.Assert.assertNotNull(genericDeclarationArraySetList10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1090");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>>> wildcardClassSetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (byte) 0);
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration>> genericDeclarationSetList6 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2, (int) (byte) 1);
        java.util.List<java.util.TreeSet<java.lang.invoke.TypeDescriptor>> typeDescriptorSetList8 = com.thealgorithms.backtracking.Combination.combination((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2, (int) ' ');
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration>> genericDeclarationSetList10 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2, (int) '#');
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration>> genericDeclarationSetList12 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2, 1);
        java.util.List<java.util.TreeSet<java.lang.Class<?>>> wildcardClassSetList14 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (byte) 100);
        java.util.List<java.util.TreeSet<java.io.Serializable>> serializableSetList16 = com.thealgorithms.backtracking.Combination.combination((java.io.Serializable[]) wildcardClassArray2, 4);
        java.lang.Class<?> wildcardClass17 = serializableSetList16.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNull(wildcardClassSetList4);
        org.junit.Assert.assertNotNull(genericDeclarationSetList6);
        org.junit.Assert.assertNotNull(typeDescriptorSetList8);
        org.junit.Assert.assertNotNull(genericDeclarationSetList10);
        org.junit.Assert.assertNotNull(genericDeclarationSetList12);
        org.junit.Assert.assertNotNull(wildcardClassSetList14);
        org.junit.Assert.assertNotNull(serializableSetList16);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test1091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1091");
        java.lang.Class[][][][] classArray1 = new java.lang.Class[0][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][]>> wildcardClassArraySetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (byte) 100);
        java.util.List<java.util.TreeSet<java.lang.reflect.Type[][][]>> typeArraySetList6 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.Type[][][][]) wildcardClassArray2, 3);
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration[][][]>> genericDeclarationArraySetList8 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[][][][]) wildcardClassArray2, (int) ' ');
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][]>> wildcardClassArraySetList10 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) '#');
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][]>> wildcardClassArraySetList12 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (byte) 1);
        java.util.List<java.util.TreeSet<java.lang.reflect.Type[][][]>> typeArraySetList14 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.Type[][][][]) wildcardClassArray2, (int) (byte) 1);
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration[][][]>> genericDeclarationArraySetList16 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[][][][]) wildcardClassArray2, (int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass17 = genericDeclarationArraySetList16.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList4);
        org.junit.Assert.assertNotNull(typeArraySetList6);
        org.junit.Assert.assertNotNull(genericDeclarationArraySetList8);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList10);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList12);
        org.junit.Assert.assertNotNull(typeArraySetList14);
        org.junit.Assert.assertNull(genericDeclarationArraySetList16);
    }

    @Test
    public void test1092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1092");
        com.thealgorithms.backtracking.Combination[][][] combinationArray0 = new com.thealgorithms.backtracking.Combination[][][] {};
        java.util.List<java.util.TreeSet<com.thealgorithms.backtracking.Combination[][]>> combinationArraySetList2 = com.thealgorithms.backtracking.Combination.combination(combinationArray0, (int) (byte) 1);
        java.util.List<java.util.TreeSet<com.thealgorithms.backtracking.Combination[][]>> combinationArraySetList4 = com.thealgorithms.backtracking.Combination.combination(combinationArray0, (int) (short) 100);
        java.util.List<java.util.TreeSet<com.thealgorithms.backtracking.Combination[][]>> combinationArraySetList6 = com.thealgorithms.backtracking.Combination.combination(combinationArray0, (int) (byte) 10);
        java.util.List<java.util.TreeSet<com.thealgorithms.backtracking.Combination[][]>> combinationArraySetList8 = com.thealgorithms.backtracking.Combination.combination(combinationArray0, (int) '4');
        java.lang.Class<?> wildcardClass9 = combinationArraySetList8.getClass();
        org.junit.Assert.assertNotNull(combinationArray0);
        org.junit.Assert.assertNotNull(combinationArraySetList2);
        org.junit.Assert.assertNotNull(combinationArraySetList4);
        org.junit.Assert.assertNotNull(combinationArraySetList6);
        org.junit.Assert.assertNotNull(combinationArraySetList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1093");
        java.lang.Class[][][] classArray1 = new java.lang.Class[0][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray2 = (java.lang.Class<?>[][][]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][]>> wildcardClassArraySetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (byte) -1);
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][]>> wildcardClassArraySetList6 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) 'a');
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][]>> wildcardClassArraySetList8 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (byte) -1);
        java.util.List<java.util.TreeSet<java.lang.reflect.Type[][]>> typeArraySetList10 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.Type[][][]) wildcardClassArray2, (int) '#');
        java.lang.Class<?> wildcardClass11 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList4);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList6);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList8);
        org.junit.Assert.assertNotNull(typeArraySetList10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1094");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>>> wildcardClassSetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (byte) 0);
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration>> genericDeclarationSetList6 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2, (int) (byte) 1);
        java.util.List<java.util.TreeSet<java.lang.invoke.TypeDescriptor>> typeDescriptorSetList8 = com.thealgorithms.backtracking.Combination.combination((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2, (int) ' ');
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration>> genericDeclarationSetList10 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2, 0);
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration>> genericDeclarationSetList12 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2, 0);
        java.util.List<java.util.TreeSet<java.lang.invoke.TypeDescriptor>> typeDescriptorSetList14 = com.thealgorithms.backtracking.Combination.combination((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2, 100);
        java.util.List<java.util.TreeSet<java.lang.Class<?>>> wildcardClassSetList16 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) '#');
        java.util.List<java.util.TreeSet<java.lang.reflect.Type>> typeSetList18 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.Type[]) wildcardClassArray2, 10);
        java.lang.Class<?> wildcardClass19 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNull(wildcardClassSetList4);
        org.junit.Assert.assertNotNull(genericDeclarationSetList6);
        org.junit.Assert.assertNotNull(typeDescriptorSetList8);
        org.junit.Assert.assertNull(genericDeclarationSetList10);
        org.junit.Assert.assertNull(genericDeclarationSetList12);
        org.junit.Assert.assertNotNull(typeDescriptorSetList14);
        org.junit.Assert.assertNotNull(wildcardClassSetList16);
        org.junit.Assert.assertNotNull(typeSetList18);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test1095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1095");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>>> wildcardClassSetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (byte) 0);
        java.util.List<java.util.TreeSet<java.lang.invoke.TypeDescriptor>> typeDescriptorSetList6 = com.thealgorithms.backtracking.Combination.combination((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2, 0);
        java.util.List<java.util.TreeSet<java.lang.reflect.AnnotatedElement>> annotatedElementSetList8 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2, (int) '4');
        java.util.List<java.util.TreeSet<java.lang.invoke.TypeDescriptor>> typeDescriptorSetList10 = com.thealgorithms.backtracking.Combination.combination((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2, (int) (byte) 1);
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration>> genericDeclarationSetList12 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2, (int) ' ');
        java.util.List<java.util.TreeSet<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>>> wildcardClassOfFieldSetList14 = com.thealgorithms.backtracking.Combination.combination((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) wildcardClassArray2, (-1));
        java.lang.Class<?> wildcardClass15 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNull(wildcardClassSetList4);
        org.junit.Assert.assertNull(typeDescriptorSetList6);
        org.junit.Assert.assertNotNull(annotatedElementSetList8);
        org.junit.Assert.assertNotNull(typeDescriptorSetList10);
        org.junit.Assert.assertNotNull(genericDeclarationSetList12);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldSetList14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test1096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1096");
        com.thealgorithms.backtracking.Combination[][][][][] combinationArray0 = null;
        java.util.List<java.util.TreeSet<com.thealgorithms.backtracking.Combination[][][][]>> combinationArraySetList2 = com.thealgorithms.backtracking.Combination.combination(combinationArray0, 0);
        org.junit.Assert.assertNull(combinationArraySetList2);
    }

    @Test
    public void test1097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1097");
        java.lang.String[][] strArray0 = new java.lang.String[][] {};
        java.util.List<java.util.TreeSet<java.lang.String[]>> strArraySetList2 = com.thealgorithms.backtracking.Combination.combination(strArray0, (int) (byte) -1);
        java.util.List<java.util.TreeSet<java.io.Serializable>> serializableSetList4 = com.thealgorithms.backtracking.Combination.combination((java.io.Serializable[]) strArray0, (int) (short) 0);
        java.util.List<java.util.TreeSet<java.lang.CharSequence[]>> charSequenceArraySetList6 = com.thealgorithms.backtracking.Combination.combination((java.lang.CharSequence[][]) strArray0, (int) (short) 0);
        java.util.List<java.util.TreeSet<java.lang.constant.Constable[]>> constableArraySetList8 = com.thealgorithms.backtracking.Combination.combination((java.lang.constant.Constable[][]) strArray0, (int) (byte) 100);
        java.util.List<java.util.TreeSet<java.lang.CharSequence[]>> charSequenceArraySetList10 = com.thealgorithms.backtracking.Combination.combination((java.lang.CharSequence[][]) strArray0, (int) (short) -1);
        java.util.List<java.util.TreeSet<java.lang.CharSequence[]>> charSequenceArraySetList12 = com.thealgorithms.backtracking.Combination.combination((java.lang.CharSequence[][]) strArray0, 10);
        java.lang.Class<?> wildcardClass13 = charSequenceArraySetList12.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArraySetList2);
        org.junit.Assert.assertNull(serializableSetList4);
        org.junit.Assert.assertNull(charSequenceArraySetList6);
        org.junit.Assert.assertNotNull(constableArraySetList8);
        org.junit.Assert.assertNotNull(charSequenceArraySetList10);
        org.junit.Assert.assertNotNull(charSequenceArraySetList12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1098");
        com.thealgorithms.backtracking.Combination[][][] combinationArray0 = new com.thealgorithms.backtracking.Combination[][][] {};
        java.util.List<java.util.TreeSet<com.thealgorithms.backtracking.Combination[][]>> combinationArraySetList2 = com.thealgorithms.backtracking.Combination.combination(combinationArray0, (-1));
        java.lang.Class<?> wildcardClass3 = combinationArray0.getClass();
        org.junit.Assert.assertNotNull(combinationArray0);
        org.junit.Assert.assertNotNull(combinationArraySetList2);
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test1099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1099");
        java.lang.String[][][][][][][] strArray0 = new java.lang.String[][][][][][][] {};
        java.util.List<java.util.TreeSet<java.lang.String[][][][][][]>> strArraySetList2 = com.thealgorithms.backtracking.Combination.combination(strArray0, (int) ' ');
        java.util.List<java.util.TreeSet<java.lang.String[][][][][][]>> strArraySetList4 = com.thealgorithms.backtracking.Combination.combination(strArray0, (int) ' ');
        java.lang.Class<?> wildcardClass5 = strArray0.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArraySetList2);
        org.junit.Assert.assertNotNull(strArraySetList4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test1100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1100");
        java.lang.Class[][][][] classArray1 = new java.lang.Class[0][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][]>> wildcardClassArraySetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (byte) 100);
        java.util.List<java.util.TreeSet<java.lang.reflect.Type[][][]>> typeArraySetList6 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.Type[][][][]) wildcardClassArray2, 3);
        java.util.List<java.util.TreeSet<java.lang.reflect.Type[][][]>> typeArraySetList8 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.Type[][][][]) wildcardClassArray2, 100);
        java.util.List<java.util.TreeSet<java.lang.reflect.Type[][][]>> typeArraySetList10 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.Type[][][][]) wildcardClassArray2, 100);
        java.lang.Class<?> wildcardClass11 = typeArraySetList10.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList4);
        org.junit.Assert.assertNotNull(typeArraySetList6);
        org.junit.Assert.assertNotNull(typeArraySetList8);
        org.junit.Assert.assertNotNull(typeArraySetList10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1101");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>>> wildcardClassSetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (byte) 0);
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration>> genericDeclarationSetList6 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2, (int) (byte) 1);
        java.util.List<java.util.TreeSet<java.lang.reflect.AnnotatedElement>> annotatedElementSetList8 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2, (int) (short) -1);
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration>> genericDeclarationSetList10 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2, (int) (short) 0);
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration>> genericDeclarationSetList12 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2, 0);
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration>> genericDeclarationSetList14 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2, (int) (byte) 1);
        java.util.List<java.util.TreeSet<java.lang.reflect.Type>> typeSetList16 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.Type[]) wildcardClassArray2, 0);
        java.lang.Class<?> wildcardClass17 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNull(wildcardClassSetList4);
        org.junit.Assert.assertNotNull(genericDeclarationSetList6);
        org.junit.Assert.assertNotNull(annotatedElementSetList8);
        org.junit.Assert.assertNull(genericDeclarationSetList10);
        org.junit.Assert.assertNull(genericDeclarationSetList12);
        org.junit.Assert.assertNotNull(genericDeclarationSetList14);
        org.junit.Assert.assertNull(typeSetList16);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test1102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1102");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.util.TreeSet<java.lang.String>> strSetList4 = com.thealgorithms.backtracking.Combination.combination(strArray2, (int) '#');
        java.util.List<java.util.TreeSet<java.lang.CharSequence>> charSequenceSetList6 = com.thealgorithms.backtracking.Combination.combination((java.lang.CharSequence[]) strArray2, 10);
        java.util.List<java.util.TreeSet<java.lang.constant.Constable>> constableSetList8 = com.thealgorithms.backtracking.Combination.combination((java.lang.constant.Constable[]) strArray2, (int) (byte) 1);
        java.util.List<java.util.TreeSet<java.lang.String>> strSetList10 = com.thealgorithms.backtracking.Combination.combination(strArray2, (int) (short) 1);
        java.util.List<java.util.TreeSet<java.lang.constant.ConstantDesc>> constantDescSetList12 = com.thealgorithms.backtracking.Combination.combination((java.lang.constant.ConstantDesc[]) strArray2, (int) (short) 1);
        java.util.List<java.util.TreeSet<java.lang.constant.ConstantDesc>> constantDescSetList14 = com.thealgorithms.backtracking.Combination.combination((java.lang.constant.ConstantDesc[]) strArray2, (int) (short) -1);
        java.util.List<java.util.TreeSet<java.lang.String>> strSetList16 = com.thealgorithms.backtracking.Combination.combination(strArray2, 100);
        java.util.List<java.util.TreeSet<java.lang.CharSequence>> charSequenceSetList18 = com.thealgorithms.backtracking.Combination.combination((java.lang.CharSequence[]) strArray2, 10);
        java.util.List<java.util.TreeSet<java.lang.String>> strSetList20 = com.thealgorithms.backtracking.Combination.combination(strArray2, 10);
        java.util.List<java.util.TreeSet<java.lang.Comparable<java.lang.String>>> strComparableSetList22 = com.thealgorithms.backtracking.Combination.combination((java.lang.Comparable<java.lang.String>[]) strArray2, (int) ' ');
        java.lang.Class<?> wildcardClass23 = strComparableSetList22.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strSetList4);
        org.junit.Assert.assertNotNull(charSequenceSetList6);
        org.junit.Assert.assertNotNull(constableSetList8);
        org.junit.Assert.assertNotNull(strSetList10);
        org.junit.Assert.assertNotNull(constantDescSetList12);
        org.junit.Assert.assertNotNull(constantDescSetList14);
        org.junit.Assert.assertNotNull(strSetList16);
        org.junit.Assert.assertNotNull(charSequenceSetList18);
        org.junit.Assert.assertNotNull(strSetList20);
        org.junit.Assert.assertNotNull(strComparableSetList22);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test1103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1103");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.util.TreeSet<java.lang.String>> strSetList4 = com.thealgorithms.backtracking.Combination.combination(strArray2, (int) '#');
        java.util.List<java.util.TreeSet<java.lang.CharSequence>> charSequenceSetList6 = com.thealgorithms.backtracking.Combination.combination((java.lang.CharSequence[]) strArray2, (int) (byte) 1);
        java.util.List<java.util.TreeSet<java.lang.Object>> objSetList8 = com.thealgorithms.backtracking.Combination.combination((java.lang.Object[]) strArray2, (int) (short) 1);
        java.util.List<java.util.TreeSet<java.lang.constant.ConstantDesc>> constantDescSetList10 = com.thealgorithms.backtracking.Combination.combination((java.lang.constant.ConstantDesc[]) strArray2, 2);
        java.lang.Class<?> wildcardClass11 = constantDescSetList10.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strSetList4);
        org.junit.Assert.assertNotNull(charSequenceSetList6);
        org.junit.Assert.assertNotNull(objSetList8);
        org.junit.Assert.assertNotNull(constantDescSetList10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1104");
        java.lang.Class[][] classArray1 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray2 = (java.lang.Class<?>[][]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>[]>> wildcardClassArraySetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (byte) 1);
        java.util.List<java.util.TreeSet<java.lang.Class<?>[]>> wildcardClassArraySetList6 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, 0);
        java.util.List<java.util.TreeSet<java.lang.reflect.Type[]>> typeArraySetList8 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.Type[][]) wildcardClassArray2, 5);
        java.util.List<java.util.TreeSet<java.lang.reflect.Type[]>> typeArraySetList10 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.Type[][]) wildcardClassArray2, (int) (short) 10);
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration[]>> genericDeclarationArraySetList12 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray2, 6);
        java.lang.Class<?> wildcardClass13 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList4);
        org.junit.Assert.assertNull(wildcardClassArraySetList6);
        org.junit.Assert.assertNotNull(typeArraySetList8);
        org.junit.Assert.assertNotNull(typeArraySetList10);
        org.junit.Assert.assertNotNull(genericDeclarationArraySetList12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1105");
        com.thealgorithms.backtracking.Combination[][][][] combinationArray0 = new com.thealgorithms.backtracking.Combination[][][][] {};
        java.util.List<java.util.TreeSet<com.thealgorithms.backtracking.Combination[][][]>> combinationArraySetList2 = com.thealgorithms.backtracking.Combination.combination(combinationArray0, (int) ' ');
        java.util.List<java.util.TreeSet<com.thealgorithms.backtracking.Combination[][][]>> combinationArraySetList4 = com.thealgorithms.backtracking.Combination.combination(combinationArray0, (int) (byte) 100);
        java.util.List<java.util.TreeSet<com.thealgorithms.backtracking.Combination[][][]>> combinationArraySetList6 = com.thealgorithms.backtracking.Combination.combination(combinationArray0, 3);
        java.lang.Class<?> wildcardClass7 = combinationArray0.getClass();
        org.junit.Assert.assertNotNull(combinationArray0);
        org.junit.Assert.assertNotNull(combinationArraySetList2);
        org.junit.Assert.assertNotNull(combinationArraySetList4);
        org.junit.Assert.assertNotNull(combinationArraySetList6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test1106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1106");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>>> wildcardClassSetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (byte) 0);
        java.util.List<java.util.TreeSet<java.lang.invoke.TypeDescriptor>> typeDescriptorSetList6 = com.thealgorithms.backtracking.Combination.combination((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2, (int) (byte) 100);
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration>> genericDeclarationSetList8 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2, 10);
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration>> genericDeclarationSetList10 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2, (int) (byte) 10);
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration>> genericDeclarationSetList12 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2, (int) (byte) -1);
        java.lang.Class<?> wildcardClass13 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNull(wildcardClassSetList4);
        org.junit.Assert.assertNotNull(typeDescriptorSetList6);
        org.junit.Assert.assertNotNull(genericDeclarationSetList8);
        org.junit.Assert.assertNotNull(genericDeclarationSetList10);
        org.junit.Assert.assertNotNull(genericDeclarationSetList12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1107");
        com.thealgorithms.backtracking.Combination combination0 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination1 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination2 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination3 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination4 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination5 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination[] combinationArray6 = new com.thealgorithms.backtracking.Combination[] { combination0, combination1, combination2, combination3, combination4, combination5 };
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.TreeSet<com.thealgorithms.backtracking.Combination>> combinationSetList8 = com.thealgorithms.backtracking.Combination.combination(combinationArray6, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(combinationArray6);
    }

    @Test
    public void test1108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1108");
        java.lang.Class[][] classArray1 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray2 = (java.lang.Class<?>[][]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>[]>> wildcardClassArraySetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (byte) 1);
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration[]>> genericDeclarationArraySetList6 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray2, (int) (short) -1);
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration[]>> genericDeclarationArraySetList8 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray2, 100);
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration[]>> genericDeclarationArraySetList10 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray2, 100);
        java.lang.Class<?> wildcardClass11 = genericDeclarationArraySetList10.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList4);
        org.junit.Assert.assertNotNull(genericDeclarationArraySetList6);
        org.junit.Assert.assertNotNull(genericDeclarationArraySetList8);
        org.junit.Assert.assertNotNull(genericDeclarationArraySetList10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1109");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "", "", "", "" };
        java.util.List<java.util.TreeSet<java.lang.Comparable<java.lang.String>>> strComparableSetList8 = com.thealgorithms.backtracking.Combination.combination((java.lang.Comparable<java.lang.String>[]) strArray6, (int) (byte) 1);
        java.util.List<java.util.TreeSet<java.io.Serializable>> serializableSetList10 = com.thealgorithms.backtracking.Combination.combination((java.io.Serializable[]) strArray6, (int) '4');
        java.util.List<java.util.TreeSet<java.lang.String>> strSetList12 = com.thealgorithms.backtracking.Combination.combination(strArray6, 1);
        java.util.List<java.util.TreeSet<java.lang.constant.ConstantDesc>> constantDescSetList14 = com.thealgorithms.backtracking.Combination.combination((java.lang.constant.ConstantDesc[]) strArray6, (int) (short) 100);
        java.util.List<java.util.TreeSet<java.lang.Object>> objSetList16 = com.thealgorithms.backtracking.Combination.combination((java.lang.Object[]) strArray6, (int) (short) 10);
        java.util.List<java.util.TreeSet<java.lang.Object>> objSetList18 = com.thealgorithms.backtracking.Combination.combination((java.lang.Object[]) strArray6, 3);
        java.util.List<java.util.TreeSet<java.lang.constant.ConstantDesc>> constantDescSetList20 = com.thealgorithms.backtracking.Combination.combination((java.lang.constant.ConstantDesc[]) strArray6, 1);
        java.lang.Class<?> wildcardClass21 = strArray6.getClass();
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strComparableSetList8);
        org.junit.Assert.assertNotNull(serializableSetList10);
        org.junit.Assert.assertNotNull(strSetList12);
        org.junit.Assert.assertNotNull(constantDescSetList14);
        org.junit.Assert.assertNotNull(objSetList16);
        org.junit.Assert.assertNotNull(objSetList18);
        org.junit.Assert.assertNotNull(constantDescSetList20);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test1110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1110");
        java.util.List[][][][][][] listArray1 = new java.util.List[0][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[][][][][][] strSetListArray2 = (java.util.List<java.util.TreeSet<java.lang.String>>[][][][][][]) listArray1;
        java.util.List[][][][][][] listArray4 = new java.util.List[0][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[][][][][][] strSetListArray5 = (java.util.List<java.util.TreeSet<java.lang.String>>[][][][][][]) listArray4;
        java.util.List[][][][][][] listArray7 = new java.util.List[0][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[][][][][][] strSetListArray8 = (java.util.List<java.util.TreeSet<java.lang.String>>[][][][][][]) listArray7;
        java.util.List[][][][][][] listArray10 = new java.util.List[0][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[][][][][][] strSetListArray11 = (java.util.List<java.util.TreeSet<java.lang.String>>[][][][][][]) listArray10;
        java.util.List[][][][][][] listArray13 = new java.util.List[0][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[][][][][][] strSetListArray14 = (java.util.List<java.util.TreeSet<java.lang.String>>[][][][][][]) listArray13;
        java.util.List[][][][][][] listArray16 = new java.util.List[0][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[][][][][][] strSetListArray17 = (java.util.List<java.util.TreeSet<java.lang.String>>[][][][][][]) listArray16;
        java.util.List[][][][][][][] listArray19 = new java.util.List[6][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[][][][][][][] strSetListArray20 = (java.util.List<java.util.TreeSet<java.lang.String>>[][][][][][][]) listArray19;
        strSetListArray20[0] = strSetListArray2;
        strSetListArray20[1] = strSetListArray5;
        strSetListArray20[2] = strSetListArray8;
        strSetListArray20[3] = strSetListArray11;
        strSetListArray20[4] = strSetListArray14;
        strSetListArray20[5] = strSetListArray17;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[][][][][][]>> listArraySetList34 = com.thealgorithms.backtracking.Combination.combination(strSetListArray20, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strSetListArray2);
        org.junit.Assert.assertNotNull(listArray4);
        org.junit.Assert.assertNotNull(strSetListArray5);
        org.junit.Assert.assertNotNull(listArray7);
        org.junit.Assert.assertNotNull(strSetListArray8);
        org.junit.Assert.assertNotNull(listArray10);
        org.junit.Assert.assertNotNull(strSetListArray11);
        org.junit.Assert.assertNotNull(listArray13);
        org.junit.Assert.assertNotNull(strSetListArray14);
        org.junit.Assert.assertNotNull(listArray16);
        org.junit.Assert.assertNotNull(strSetListArray17);
        org.junit.Assert.assertNotNull(listArray19);
        org.junit.Assert.assertNotNull(strSetListArray20);
    }

    @Test
    public void test1111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1111");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.util.TreeSet<java.lang.String>> strSetList4 = com.thealgorithms.backtracking.Combination.combination(strArray2, (int) '#');
        java.util.List<java.util.TreeSet<java.lang.CharSequence>> charSequenceSetList6 = com.thealgorithms.backtracking.Combination.combination((java.lang.CharSequence[]) strArray2, 10);
        java.util.List<java.util.TreeSet<java.lang.constant.Constable>> constableSetList8 = com.thealgorithms.backtracking.Combination.combination((java.lang.constant.Constable[]) strArray2, (int) (byte) 1);
        java.util.List<java.util.TreeSet<java.lang.Object>> objSetList10 = com.thealgorithms.backtracking.Combination.combination((java.lang.Object[]) strArray2, (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass11 = objSetList10.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strSetList4);
        org.junit.Assert.assertNotNull(charSequenceSetList6);
        org.junit.Assert.assertNotNull(constableSetList8);
        org.junit.Assert.assertNull(objSetList10);
    }

    @Test
    public void test1112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1112");
        java.lang.Class[][][][][] classArray1 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][][]>> wildcardClassArraySetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (short) 10);
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][][]>> wildcardClassArraySetList6 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (byte) 10);
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][][]>> wildcardClassArraySetList8 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (short) 0);
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][][]>> wildcardClassArraySetList10 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, 3);
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][][]>> wildcardClassArraySetList12 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, 10);
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][][]>> wildcardClassArraySetList14 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, 3);
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][][]>> wildcardClassArraySetList16 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, 5);
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration[][][][]>> genericDeclarationArraySetList18 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[][][][][]) wildcardClassArray2, (int) ' ');
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration[][][][]>> genericDeclarationArraySetList20 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[][][][][]) wildcardClassArray2, (int) (byte) 100);
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration[][][][]>> genericDeclarationArraySetList22 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[][][][][]) wildcardClassArray2, 0);
        java.lang.Class<?> wildcardClass23 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList4);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList6);
        org.junit.Assert.assertNull(wildcardClassArraySetList8);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList10);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList12);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList14);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList16);
        org.junit.Assert.assertNotNull(genericDeclarationArraySetList18);
        org.junit.Assert.assertNotNull(genericDeclarationArraySetList20);
        org.junit.Assert.assertNull(genericDeclarationArraySetList22);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test1113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1113");
        java.lang.Class[][][][] classArray1 = new java.lang.Class[0][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][]>> wildcardClassArraySetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (byte) 100);
        java.util.List<java.util.TreeSet<java.lang.reflect.Type[][][]>> typeArraySetList6 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.Type[][][][]) wildcardClassArray2, 3);
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][]>> wildcardClassArraySetList8 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (-1));
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration[][][]>> genericDeclarationArraySetList10 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[][][][]) wildcardClassArray2, (int) 'a');
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration[][][]>> genericDeclarationArraySetList12 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[][][][]) wildcardClassArray2, 10);
        java.lang.Class<?> wildcardClass13 = genericDeclarationArraySetList12.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList4);
        org.junit.Assert.assertNotNull(typeArraySetList6);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList8);
        org.junit.Assert.assertNotNull(genericDeclarationArraySetList10);
        org.junit.Assert.assertNotNull(genericDeclarationArraySetList12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1114");
        com.thealgorithms.backtracking.Combination[][][][] combinationArray0 = new com.thealgorithms.backtracking.Combination[][][][] {};
        java.util.List<java.util.TreeSet<com.thealgorithms.backtracking.Combination[][][]>> combinationArraySetList2 = com.thealgorithms.backtracking.Combination.combination(combinationArray0, (int) ' ');
        java.util.List<java.util.TreeSet<com.thealgorithms.backtracking.Combination[][][]>> combinationArraySetList4 = com.thealgorithms.backtracking.Combination.combination(combinationArray0, 1);
        java.util.List<java.util.TreeSet<com.thealgorithms.backtracking.Combination[][][]>> combinationArraySetList6 = com.thealgorithms.backtracking.Combination.combination(combinationArray0, (int) (short) -1);
        java.util.List<java.util.TreeSet<com.thealgorithms.backtracking.Combination[][][]>> combinationArraySetList8 = com.thealgorithms.backtracking.Combination.combination(combinationArray0, (int) '#');
        java.lang.Class<?> wildcardClass9 = combinationArraySetList8.getClass();
        org.junit.Assert.assertNotNull(combinationArray0);
        org.junit.Assert.assertNotNull(combinationArraySetList2);
        org.junit.Assert.assertNotNull(combinationArraySetList4);
        org.junit.Assert.assertNotNull(combinationArraySetList6);
        org.junit.Assert.assertNotNull(combinationArraySetList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1115");
        java.lang.String[][][][][] strArray0 = new java.lang.String[][][][][] {};
        java.util.List<java.util.TreeSet<java.lang.String[][][][]>> strArraySetList2 = com.thealgorithms.backtracking.Combination.combination(strArray0, 100);
        java.util.List<java.util.TreeSet<java.lang.String[][][][]>> strArraySetList4 = com.thealgorithms.backtracking.Combination.combination(strArray0, 4);
        java.util.List<java.util.TreeSet<java.lang.String[][][][]>> strArraySetList6 = com.thealgorithms.backtracking.Combination.combination(strArray0, 4);
        java.lang.Class<?> wildcardClass7 = strArray0.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArraySetList2);
        org.junit.Assert.assertNotNull(strArraySetList4);
        org.junit.Assert.assertNotNull(strArraySetList6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test1116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1116");
        java.lang.Class<?>[] wildcardClassArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.TreeSet<java.lang.Class<?>>> wildcardClassSetList2 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray0, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1117");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[1][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        wildcardClassArray5[0] = classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>[]>> wildcardClassArraySetList9 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray5, 10);
        java.util.List<java.util.TreeSet<java.lang.reflect.Type[]>> typeArraySetList11 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.Type[][]) wildcardClassArray5, (int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.TreeSet<java.lang.Object>> objSetList13 = com.thealgorithms.backtracking.Combination.combination((java.lang.Object[]) wildcardClassArray5, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList9);
        org.junit.Assert.assertNull(typeArraySetList11);
    }

    @Test
    public void test1118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1118");
        com.thealgorithms.backtracking.Combination combination0 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination[] combinationArray1 = new com.thealgorithms.backtracking.Combination[] { combination0 };
        java.util.List<java.util.TreeSet<com.thealgorithms.backtracking.Combination>> combinationSetList3 = com.thealgorithms.backtracking.Combination.combination(combinationArray1, (int) (byte) 100);
        java.util.List<java.util.TreeSet<com.thealgorithms.backtracking.Combination>> combinationSetList5 = com.thealgorithms.backtracking.Combination.combination(combinationArray1, (int) (byte) 100);
        java.util.List<java.util.TreeSet<com.thealgorithms.backtracking.Combination>> combinationSetList7 = com.thealgorithms.backtracking.Combination.combination(combinationArray1, 2);
        java.util.List<java.util.TreeSet<com.thealgorithms.backtracking.Combination>> combinationSetList9 = com.thealgorithms.backtracking.Combination.combination(combinationArray1, 4);
        java.util.List<java.util.TreeSet<com.thealgorithms.backtracking.Combination>> combinationSetList11 = com.thealgorithms.backtracking.Combination.combination(combinationArray1, 6);
        java.lang.Class<?> wildcardClass12 = combinationSetList11.getClass();
        org.junit.Assert.assertNotNull(combinationArray1);
        org.junit.Assert.assertNotNull(combinationSetList3);
        org.junit.Assert.assertNotNull(combinationSetList5);
        org.junit.Assert.assertNotNull(combinationSetList7);
        org.junit.Assert.assertNotNull(combinationSetList9);
        org.junit.Assert.assertNotNull(combinationSetList11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test1119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1119");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>>> wildcardClassSetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (byte) 0);
        java.util.List<java.util.TreeSet<java.lang.invoke.TypeDescriptor>> typeDescriptorSetList6 = com.thealgorithms.backtracking.Combination.combination((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2, (int) (byte) 100);
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration>> genericDeclarationSetList8 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2, 10);
        java.lang.Class<?> wildcardClass9 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNull(wildcardClassSetList4);
        org.junit.Assert.assertNotNull(typeDescriptorSetList6);
        org.junit.Assert.assertNotNull(genericDeclarationSetList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1120");
        java.lang.Class[][][][][] classArray1 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][][]>> wildcardClassArraySetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (short) 10);
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][][]>> wildcardClassArraySetList6 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (byte) 10);
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration[][][][]>> genericDeclarationArraySetList8 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[][][][][]) wildcardClassArray2, (int) (short) 10);
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][][]>> wildcardClassArraySetList10 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, 4);
        java.lang.Class<?> wildcardClass11 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList4);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList6);
        org.junit.Assert.assertNotNull(genericDeclarationArraySetList8);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1121");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>>> wildcardClassSetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (byte) 0);
        java.util.List<java.util.TreeSet<java.lang.invoke.TypeDescriptor>> typeDescriptorSetList6 = com.thealgorithms.backtracking.Combination.combination((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2, (int) (byte) 100);
        java.util.List<java.util.TreeSet<java.lang.invoke.TypeDescriptor>> typeDescriptorSetList8 = com.thealgorithms.backtracking.Combination.combination((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2, (int) (short) 10);
        java.util.List<java.util.TreeSet<java.lang.reflect.Type>> typeSetList10 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.Type[]) wildcardClassArray2, (int) (byte) 1);
        java.util.List<java.util.TreeSet<java.lang.reflect.AnnotatedElement>> annotatedElementSetList12 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2, (int) (short) 10);
        java.lang.Class<?> wildcardClass13 = annotatedElementSetList12.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNull(wildcardClassSetList4);
        org.junit.Assert.assertNotNull(typeDescriptorSetList6);
        org.junit.Assert.assertNotNull(typeDescriptorSetList8);
        org.junit.Assert.assertNotNull(typeSetList10);
        org.junit.Assert.assertNotNull(annotatedElementSetList12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1122");
        java.lang.String[][] strArray0 = new java.lang.String[][] {};
        java.lang.String[][][] strArray1 = new java.lang.String[][][] { strArray0 };
        java.util.List<java.util.TreeSet<java.lang.String[][]>> strArraySetList3 = com.thealgorithms.backtracking.Combination.combination(strArray1, (int) (byte) 100);
        java.util.List<java.util.TreeSet<java.lang.String[][]>> strArraySetList5 = com.thealgorithms.backtracking.Combination.combination(strArray1, 6);
        java.lang.Class<?> wildcardClass6 = strArray1.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArraySetList3);
        org.junit.Assert.assertNotNull(strArraySetList5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test1123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1123");
        java.util.List[] listArray1 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[] strSetListArray2 = (java.util.List<java.util.TreeSet<java.lang.String>>[]) listArray1;
        java.util.List[] listArray4 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[] strSetListArray5 = (java.util.List<java.util.TreeSet<java.lang.String>>[]) listArray4;
        java.util.List[][] listArray7 = new java.util.List[2][];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[][] strSetListArray8 = (java.util.List<java.util.TreeSet<java.lang.String>>[][]) listArray7;
        strSetListArray8[0] = strSetListArray2;
        strSetListArray8[1] = strSetListArray5;
        java.util.List[][][] listArray14 = new java.util.List[1][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[][][] strSetListArray15 = (java.util.List<java.util.TreeSet<java.lang.String>>[][][]) listArray14;
        strSetListArray15[0] = strSetListArray8;
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[][]>> listArraySetList19 = com.thealgorithms.backtracking.Combination.combination(strSetListArray15, (int) (short) 10);
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[][]>> listArraySetList21 = com.thealgorithms.backtracking.Combination.combination(strSetListArray15, (int) '#');
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[][]>> listArraySetList23 = com.thealgorithms.backtracking.Combination.combination(strSetListArray15, 4);
        java.util.List<java.util.TreeSet<java.util.Collection[][]>> collectionArraySetList25 = com.thealgorithms.backtracking.Combination.combination((java.util.Collection[][][]) strSetListArray15, (int) (byte) 0);
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[][]>> listArraySetList27 = com.thealgorithms.backtracking.Combination.combination(strSetListArray15, 10);
        java.util.List<java.util.TreeSet<java.util.Collection[][]>> collectionArraySetList29 = com.thealgorithms.backtracking.Combination.combination((java.util.Collection[][][]) strSetListArray15, (int) ' ');
        java.lang.Class<?> wildcardClass30 = strSetListArray15.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strSetListArray2);
        org.junit.Assert.assertNotNull(listArray4);
        org.junit.Assert.assertNotNull(strSetListArray5);
        org.junit.Assert.assertNotNull(listArray7);
        org.junit.Assert.assertNotNull(strSetListArray8);
        org.junit.Assert.assertNotNull(listArray14);
        org.junit.Assert.assertNotNull(strSetListArray15);
        org.junit.Assert.assertNotNull(listArraySetList19);
        org.junit.Assert.assertNotNull(listArraySetList21);
        org.junit.Assert.assertNotNull(listArraySetList23);
        org.junit.Assert.assertNull(collectionArraySetList25);
        org.junit.Assert.assertNotNull(listArraySetList27);
        org.junit.Assert.assertNotNull(collectionArraySetList29);
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test1124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1124");
        java.lang.Class[][][][][] classArray1 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][]) classArray1;
        java.lang.Class[][][][][] classArray4 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][]) classArray4;
        java.lang.Class[][][][][] classArray7 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray8 = (java.lang.Class<?>[][][][][]) classArray7;
        java.lang.Class[][][][][] classArray10 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray11 = (java.lang.Class<?>[][][][][]) classArray10;
        java.lang.Class[][][][][][] classArray13 = new java.lang.Class[4][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray14 = (java.lang.Class<?>[][][][][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.lang.Class[][][][][] classArray24 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray25 = (java.lang.Class<?>[][][][][]) classArray24;
        java.lang.Class[][][][][] classArray27 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray28 = (java.lang.Class<?>[][][][][]) classArray27;
        java.lang.Class[][][][][] classArray30 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray31 = (java.lang.Class<?>[][][][][]) classArray30;
        java.lang.Class[][][][][] classArray33 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray34 = (java.lang.Class<?>[][][][][]) classArray33;
        java.lang.Class[][][][][][] classArray36 = new java.lang.Class[4][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray37 = (java.lang.Class<?>[][][][][][]) classArray36;
        wildcardClassArray37[0] = wildcardClassArray25;
        wildcardClassArray37[1] = wildcardClassArray28;
        wildcardClassArray37[2] = wildcardClassArray31;
        wildcardClassArray37[3] = wildcardClassArray34;
        java.lang.Class[][][][][] classArray47 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray48 = (java.lang.Class<?>[][][][][]) classArray47;
        java.lang.Class[][][][][] classArray50 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray51 = (java.lang.Class<?>[][][][][]) classArray50;
        java.lang.Class[][][][][] classArray53 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray54 = (java.lang.Class<?>[][][][][]) classArray53;
        java.lang.Class[][][][][] classArray56 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray57 = (java.lang.Class<?>[][][][][]) classArray56;
        java.lang.Class[][][][][][] classArray59 = new java.lang.Class[4][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray60 = (java.lang.Class<?>[][][][][][]) classArray59;
        wildcardClassArray60[0] = wildcardClassArray48;
        wildcardClassArray60[1] = wildcardClassArray51;
        wildcardClassArray60[2] = wildcardClassArray54;
        wildcardClassArray60[3] = wildcardClassArray57;
        java.lang.Class[][][][][][][] classArray70 = new java.lang.Class[3][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][] wildcardClassArray71 = (java.lang.Class<?>[][][][][][][]) classArray70;
        wildcardClassArray71[0] = wildcardClassArray14;
        wildcardClassArray71[1] = wildcardClassArray37;
        wildcardClassArray71[2] = wildcardClassArray60;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.TreeSet<java.lang.Class<?>[][][][][][]>> wildcardClassArraySetList79 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray71, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(classArray24);
        org.junit.Assert.assertNotNull(wildcardClassArray25);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(wildcardClassArray28);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertNotNull(wildcardClassArray31);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(wildcardClassArray34);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNotNull(wildcardClassArray37);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(wildcardClassArray48);
        org.junit.Assert.assertNotNull(classArray50);
        org.junit.Assert.assertNotNull(wildcardClassArray51);
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(wildcardClassArray54);
        org.junit.Assert.assertNotNull(classArray56);
        org.junit.Assert.assertNotNull(wildcardClassArray57);
        org.junit.Assert.assertNotNull(classArray59);
        org.junit.Assert.assertNotNull(wildcardClassArray60);
        org.junit.Assert.assertNotNull(classArray70);
        org.junit.Assert.assertNotNull(wildcardClassArray71);
    }

    @Test
    public void test1125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1125");
        java.lang.Class[][][][] classArray1 = new java.lang.Class[0][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][]>> wildcardClassArraySetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (byte) 100);
        java.util.List<java.util.TreeSet<java.lang.reflect.Type[][][]>> typeArraySetList6 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.Type[][][][]) wildcardClassArray2, 3);
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][]>> wildcardClassArraySetList8 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, 0);
        java.util.List<java.util.TreeSet<java.lang.reflect.Type[][][]>> typeArraySetList10 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.Type[][][][]) wildcardClassArray2, (int) '4');
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration[][][]>> genericDeclarationArraySetList12 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[][][][]) wildcardClassArray2, (int) (byte) 1);
        java.lang.Class<?> wildcardClass13 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList4);
        org.junit.Assert.assertNotNull(typeArraySetList6);
        org.junit.Assert.assertNull(wildcardClassArraySetList8);
        org.junit.Assert.assertNotNull(typeArraySetList10);
        org.junit.Assert.assertNotNull(genericDeclarationArraySetList12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1126");
        java.util.List[] listArray1 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[] strSetListArray2 = (java.util.List<java.util.TreeSet<java.lang.String>>[]) listArray1;
        java.util.List[] listArray4 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[] strSetListArray5 = (java.util.List<java.util.TreeSet<java.lang.String>>[]) listArray4;
        java.util.List[][] listArray7 = new java.util.List[2][];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[][] strSetListArray8 = (java.util.List<java.util.TreeSet<java.lang.String>>[][]) listArray7;
        strSetListArray8[0] = strSetListArray2;
        strSetListArray8[1] = strSetListArray5;
        java.util.List[][][] listArray14 = new java.util.List[1][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[][][] strSetListArray15 = (java.util.List<java.util.TreeSet<java.lang.String>>[][][]) listArray14;
        strSetListArray15[0] = strSetListArray8;
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[][]>> listArraySetList19 = com.thealgorithms.backtracking.Combination.combination(strSetListArray15, (int) (short) 10);
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[][]>> listArraySetList21 = com.thealgorithms.backtracking.Combination.combination(strSetListArray15, (int) '#');
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[][]>> listArraySetList23 = com.thealgorithms.backtracking.Combination.combination(strSetListArray15, 4);
        java.lang.Class<?> wildcardClass24 = strSetListArray15.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strSetListArray2);
        org.junit.Assert.assertNotNull(listArray4);
        org.junit.Assert.assertNotNull(strSetListArray5);
        org.junit.Assert.assertNotNull(listArray7);
        org.junit.Assert.assertNotNull(strSetListArray8);
        org.junit.Assert.assertNotNull(listArray14);
        org.junit.Assert.assertNotNull(strSetListArray15);
        org.junit.Assert.assertNotNull(listArraySetList19);
        org.junit.Assert.assertNotNull(listArraySetList21);
        org.junit.Assert.assertNotNull(listArraySetList23);
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test1127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1127");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>>> wildcardClassSetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (byte) 0);
        java.util.List<java.util.TreeSet<java.lang.invoke.TypeDescriptor>> typeDescriptorSetList6 = com.thealgorithms.backtracking.Combination.combination((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2, 0);
        java.util.List<java.util.TreeSet<java.lang.reflect.AnnotatedElement>> annotatedElementSetList8 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2, (int) '4');
        java.util.List<java.util.TreeSet<java.lang.invoke.TypeDescriptor>> typeDescriptorSetList10 = com.thealgorithms.backtracking.Combination.combination((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2, (int) (byte) 1);
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration>> genericDeclarationSetList12 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2, (int) ' ');
        java.util.List<java.util.TreeSet<java.lang.reflect.Type>> typeSetList14 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.Type[]) wildcardClassArray2, (int) '4');
        java.util.List<java.util.TreeSet<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>>> wildcardClassOfFieldSetList16 = com.thealgorithms.backtracking.Combination.combination((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) wildcardClassArray2, (int) (byte) 1);
        java.lang.Class<?> wildcardClass17 = wildcardClassOfFieldSetList16.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNull(wildcardClassSetList4);
        org.junit.Assert.assertNull(typeDescriptorSetList6);
        org.junit.Assert.assertNotNull(annotatedElementSetList8);
        org.junit.Assert.assertNotNull(typeDescriptorSetList10);
        org.junit.Assert.assertNotNull(genericDeclarationSetList12);
        org.junit.Assert.assertNotNull(typeSetList14);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldSetList16);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test1128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1128");
        java.lang.String[][] strArray0 = new java.lang.String[][] {};
        java.lang.String[][][] strArray1 = new java.lang.String[][][] { strArray0 };
        java.util.List<java.util.TreeSet<java.lang.String[][]>> strArraySetList3 = com.thealgorithms.backtracking.Combination.combination(strArray1, (int) (byte) 100);
        java.util.List<java.util.TreeSet<java.lang.String[][]>> strArraySetList5 = com.thealgorithms.backtracking.Combination.combination(strArray1, 6);
        java.lang.Class<?> wildcardClass6 = strArraySetList5.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArraySetList3);
        org.junit.Assert.assertNotNull(strArraySetList5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test1129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1129");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>>> wildcardClassSetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (byte) 0);
        java.util.List<java.util.TreeSet<java.lang.invoke.TypeDescriptor>> typeDescriptorSetList6 = com.thealgorithms.backtracking.Combination.combination((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2, 0);
        java.util.List<java.util.TreeSet<java.lang.reflect.AnnotatedElement>> annotatedElementSetList8 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2, (int) '4');
        java.util.List<java.util.TreeSet<java.lang.invoke.TypeDescriptor>> typeDescriptorSetList10 = com.thealgorithms.backtracking.Combination.combination((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2, (int) (byte) 1);
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration>> genericDeclarationSetList12 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2, (int) ' ');
        java.util.List<java.util.TreeSet<java.lang.reflect.Type>> typeSetList14 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.Type[]) wildcardClassArray2, (int) '4');
        java.util.List<java.util.TreeSet<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>>> wildcardClassOfFieldSetList16 = com.thealgorithms.backtracking.Combination.combination((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) wildcardClassArray2, (int) (byte) 1);
        java.lang.Class<?> wildcardClass17 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNull(wildcardClassSetList4);
        org.junit.Assert.assertNull(typeDescriptorSetList6);
        org.junit.Assert.assertNotNull(annotatedElementSetList8);
        org.junit.Assert.assertNotNull(typeDescriptorSetList10);
        org.junit.Assert.assertNotNull(genericDeclarationSetList12);
        org.junit.Assert.assertNotNull(typeSetList14);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldSetList16);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test1130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1130");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[1][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        wildcardClassArray5[0] = classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>[]>> wildcardClassArraySetList9 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray5, 10);
        java.util.List<java.util.TreeSet<java.lang.Class<?>[]>> wildcardClassArraySetList11 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray5, (int) (short) 0);
        java.util.List<java.util.TreeSet<java.lang.constant.Constable[]>> constableArraySetList13 = com.thealgorithms.backtracking.Combination.combination((java.lang.constant.Constable[][]) wildcardClassArray5, 4);
        java.lang.Class<?> wildcardClass14 = wildcardClassArray5.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList9);
        org.junit.Assert.assertNull(wildcardClassArraySetList11);
        org.junit.Assert.assertNotNull(constableArraySetList13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test1131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1131");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.util.TreeSet<java.lang.String>> strSetList4 = com.thealgorithms.backtracking.Combination.combination(strArray2, (int) '#');
        java.util.List<java.util.TreeSet<java.lang.CharSequence>> charSequenceSetList6 = com.thealgorithms.backtracking.Combination.combination((java.lang.CharSequence[]) strArray2, 10);
        java.util.List<java.util.TreeSet<java.lang.constant.Constable>> constableSetList8 = com.thealgorithms.backtracking.Combination.combination((java.lang.constant.Constable[]) strArray2, (int) (byte) 1);
        java.util.List<java.util.TreeSet<java.lang.String>> strSetList10 = com.thealgorithms.backtracking.Combination.combination(strArray2, (int) (short) 1);
        java.util.List<java.util.TreeSet<java.lang.CharSequence>> charSequenceSetList12 = com.thealgorithms.backtracking.Combination.combination((java.lang.CharSequence[]) strArray2, (-1));
        java.util.List<java.util.TreeSet<java.lang.constant.Constable>> constableSetList14 = com.thealgorithms.backtracking.Combination.combination((java.lang.constant.Constable[]) strArray2, 10);
        java.lang.Class<?> wildcardClass15 = constableSetList14.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strSetList4);
        org.junit.Assert.assertNotNull(charSequenceSetList6);
        org.junit.Assert.assertNotNull(constableSetList8);
        org.junit.Assert.assertNotNull(strSetList10);
        org.junit.Assert.assertNotNull(charSequenceSetList12);
        org.junit.Assert.assertNotNull(constableSetList14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test1132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1132");
        java.lang.Class[][][][] classArray1 = new java.lang.Class[0][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][]>> wildcardClassArraySetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (byte) 100);
        java.util.List<java.util.TreeSet<java.lang.reflect.Type[][][]>> typeArraySetList6 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.Type[][][][]) wildcardClassArray2, 3);
        java.util.List<java.util.TreeSet<java.lang.reflect.Type[][][]>> typeArraySetList8 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.Type[][][][]) wildcardClassArray2, 100);
        java.util.List<java.util.TreeSet<java.lang.reflect.Type[][][]>> typeArraySetList10 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.Type[][][][]) wildcardClassArray2, (int) 'a');
        java.util.List<java.util.TreeSet<java.lang.reflect.Type[][][]>> typeArraySetList12 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.Type[][][][]) wildcardClassArray2, (-1));
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration[][][]>> genericDeclarationArraySetList14 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[][][][]) wildcardClassArray2, (int) (byte) -1);
        java.util.List<java.util.TreeSet<java.lang.reflect.Type[][][]>> typeArraySetList16 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.Type[][][][]) wildcardClassArray2, (int) ' ');
        java.lang.Class<?> wildcardClass17 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList4);
        org.junit.Assert.assertNotNull(typeArraySetList6);
        org.junit.Assert.assertNotNull(typeArraySetList8);
        org.junit.Assert.assertNotNull(typeArraySetList10);
        org.junit.Assert.assertNotNull(typeArraySetList12);
        org.junit.Assert.assertNotNull(genericDeclarationArraySetList14);
        org.junit.Assert.assertNotNull(typeArraySetList16);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test1133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1133");
        java.util.List<java.util.TreeSet<java.lang.String>>[][][] strSetListArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[][]>> listArraySetList2 = com.thealgorithms.backtracking.Combination.combination(strSetListArray0, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1134");
        java.lang.String[][][][][][] strArray0 = new java.lang.String[][][][][][] {};
        java.util.List<java.util.TreeSet<java.lang.String[][][][][]>> strArraySetList2 = com.thealgorithms.backtracking.Combination.combination(strArray0, (int) ' ');
        java.util.List<java.util.TreeSet<java.lang.String[][][][][]>> strArraySetList4 = com.thealgorithms.backtracking.Combination.combination(strArray0, (int) (byte) 0);
        java.util.List<java.util.TreeSet<java.lang.String[][][][][]>> strArraySetList6 = com.thealgorithms.backtracking.Combination.combination(strArray0, (int) (byte) 10);
        java.util.List<java.util.TreeSet<java.lang.String[][][][][]>> strArraySetList8 = com.thealgorithms.backtracking.Combination.combination(strArray0, 6);
        java.util.List<java.util.TreeSet<java.lang.String[][][][][]>> strArraySetList10 = com.thealgorithms.backtracking.Combination.combination(strArray0, (int) (byte) -1);
        java.lang.Class<?> wildcardClass11 = strArray0.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArraySetList2);
        org.junit.Assert.assertNull(strArraySetList4);
        org.junit.Assert.assertNotNull(strArraySetList6);
        org.junit.Assert.assertNotNull(strArraySetList8);
        org.junit.Assert.assertNotNull(strArraySetList10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1135");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>>> wildcardClassSetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (byte) 0);
        java.util.List<java.util.TreeSet<java.lang.invoke.TypeDescriptor>> typeDescriptorSetList6 = com.thealgorithms.backtracking.Combination.combination((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2, 0);
        java.util.List<java.util.TreeSet<java.lang.reflect.AnnotatedElement>> annotatedElementSetList8 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2, (int) (byte) -1);
        java.util.List<java.util.TreeSet<java.lang.Class<?>>> wildcardClassSetList10 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, 0);
        java.util.List<java.util.TreeSet<java.lang.Class<?>>> wildcardClassSetList12 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (short) 100);
        java.lang.Class<?> wildcardClass13 = wildcardClassSetList12.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNull(wildcardClassSetList4);
        org.junit.Assert.assertNull(typeDescriptorSetList6);
        org.junit.Assert.assertNotNull(annotatedElementSetList8);
        org.junit.Assert.assertNull(wildcardClassSetList10);
        org.junit.Assert.assertNotNull(wildcardClassSetList12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1136");
        java.lang.Class[][][][] classArray1 = new java.lang.Class[0][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][]>> wildcardClassArraySetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (byte) 100);
        java.util.List<java.util.TreeSet<java.lang.reflect.Type[][][]>> typeArraySetList6 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.Type[][][][]) wildcardClassArray2, 3);
        java.util.List<java.util.TreeSet<java.lang.reflect.Type[][][]>> typeArraySetList8 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.Type[][][][]) wildcardClassArray2, 100);
        java.util.List<java.util.TreeSet<java.lang.reflect.Type[][][]>> typeArraySetList10 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.Type[][][][]) wildcardClassArray2, (int) 'a');
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][]>> wildcardClassArraySetList12 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (short) 1);
        java.util.List<java.util.TreeSet<java.lang.reflect.Type[][][]>> typeArraySetList14 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.Type[][][][]) wildcardClassArray2, 6);
        java.lang.Class<?> wildcardClass15 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList4);
        org.junit.Assert.assertNotNull(typeArraySetList6);
        org.junit.Assert.assertNotNull(typeArraySetList8);
        org.junit.Assert.assertNotNull(typeArraySetList10);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList12);
        org.junit.Assert.assertNotNull(typeArraySetList14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test1137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1137");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.util.TreeSet<java.lang.String>> strSetList4 = com.thealgorithms.backtracking.Combination.combination(strArray2, (int) '#');
        java.util.List<java.util.TreeSet<java.lang.constant.ConstantDesc>> constantDescSetList6 = com.thealgorithms.backtracking.Combination.combination((java.lang.constant.ConstantDesc[]) strArray2, 1);
        java.util.List<java.util.TreeSet<java.lang.CharSequence>> charSequenceSetList8 = com.thealgorithms.backtracking.Combination.combination((java.lang.CharSequence[]) strArray2, 0);
        java.util.List<java.util.TreeSet<java.lang.Comparable<java.lang.String>>> strComparableSetList10 = com.thealgorithms.backtracking.Combination.combination((java.lang.Comparable<java.lang.String>[]) strArray2, (int) (byte) 10);
        java.util.List<java.util.TreeSet<java.lang.Comparable<java.lang.String>>> strComparableSetList12 = com.thealgorithms.backtracking.Combination.combination((java.lang.Comparable<java.lang.String>[]) strArray2, (int) (short) -1);
        java.util.List<java.util.TreeSet<java.lang.String>> strSetList14 = com.thealgorithms.backtracking.Combination.combination(strArray2, (-1));
        java.lang.Class<?> wildcardClass15 = strArray2.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strSetList4);
        org.junit.Assert.assertNotNull(constantDescSetList6);
        org.junit.Assert.assertNull(charSequenceSetList8);
        org.junit.Assert.assertNotNull(strComparableSetList10);
        org.junit.Assert.assertNotNull(strComparableSetList12);
        org.junit.Assert.assertNotNull(strSetList14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test1138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1138");
        java.lang.String[][] strArray0 = new java.lang.String[][] {};
        java.util.List<java.util.TreeSet<java.lang.String[]>> strArraySetList2 = com.thealgorithms.backtracking.Combination.combination(strArray0, (int) (byte) -1);
        java.util.List<java.util.TreeSet<java.io.Serializable>> serializableSetList4 = com.thealgorithms.backtracking.Combination.combination((java.io.Serializable[]) strArray0, (int) (short) 0);
        java.util.List<java.util.TreeSet<java.lang.String[]>> strArraySetList6 = com.thealgorithms.backtracking.Combination.combination(strArray0, 0);
        java.util.List<java.util.TreeSet<java.lang.String[]>> strArraySetList8 = com.thealgorithms.backtracking.Combination.combination(strArray0, (-1));
        java.util.List<java.util.TreeSet<java.lang.CharSequence[]>> charSequenceArraySetList10 = com.thealgorithms.backtracking.Combination.combination((java.lang.CharSequence[][]) strArray0, (-1));
        java.util.List<java.util.TreeSet<java.lang.CharSequence[]>> charSequenceArraySetList12 = com.thealgorithms.backtracking.Combination.combination((java.lang.CharSequence[][]) strArray0, (int) (short) -1);
        java.lang.Class<?> wildcardClass13 = strArray0.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArraySetList2);
        org.junit.Assert.assertNull(serializableSetList4);
        org.junit.Assert.assertNull(strArraySetList6);
        org.junit.Assert.assertNotNull(strArraySetList8);
        org.junit.Assert.assertNotNull(charSequenceArraySetList10);
        org.junit.Assert.assertNotNull(charSequenceArraySetList12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1139");
        java.lang.constant.ConstantDesc[] constantDescArray4 = new java.lang.constant.ConstantDesc[] { 3, 100L, 10L, 10.0d };
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.TreeSet<java.lang.constant.ConstantDesc>> constantDescSetList6 = com.thealgorithms.backtracking.Combination.combination(constantDescArray4, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: class java.lang.Integer cannot be cast to class java.lang.Long (java.lang.Integer and java.lang.Long are in module java.base of loader 'bootstrap')");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(constantDescArray4);
    }

    @Test
    public void test1140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1140");
        java.lang.String[][] strArray0 = new java.lang.String[][] {};
        java.lang.String[][][] strArray1 = new java.lang.String[][][] { strArray0 };
        java.util.List<java.util.TreeSet<java.lang.String[][]>> strArraySetList3 = com.thealgorithms.backtracking.Combination.combination(strArray1, (int) (byte) 100);
        java.util.List<java.util.TreeSet<java.io.Serializable>> serializableSetList5 = com.thealgorithms.backtracking.Combination.combination((java.io.Serializable[]) strArray1, 0);
        java.util.List<java.util.TreeSet<java.lang.String[][]>> strArraySetList7 = com.thealgorithms.backtracking.Combination.combination(strArray1, (int) '#');
        java.util.List<java.util.TreeSet<java.lang.String[][]>> strArraySetList9 = com.thealgorithms.backtracking.Combination.combination(strArray1, 0);
        java.util.List<java.util.TreeSet<java.lang.String[][]>> strArraySetList11 = com.thealgorithms.backtracking.Combination.combination(strArray1, 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.TreeSet<java.lang.String[][]>> strArraySetList13 = com.thealgorithms.backtracking.Combination.combination(strArray1, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArraySetList3);
        org.junit.Assert.assertNull(serializableSetList5);
        org.junit.Assert.assertNotNull(strArraySetList7);
        org.junit.Assert.assertNull(strArraySetList9);
        org.junit.Assert.assertNull(strArraySetList11);
    }

    @Test
    public void test1141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1141");
        com.thealgorithms.backtracking.Combination[][][][][] combinationArray0 = new com.thealgorithms.backtracking.Combination[][][][][] {};
        java.util.List<java.util.TreeSet<com.thealgorithms.backtracking.Combination[][][][]>> combinationArraySetList2 = com.thealgorithms.backtracking.Combination.combination(combinationArray0, (int) (short) 0);
        java.util.List<java.util.TreeSet<com.thealgorithms.backtracking.Combination[][][][]>> combinationArraySetList4 = com.thealgorithms.backtracking.Combination.combination(combinationArray0, (int) (short) 1);
        java.util.List<java.util.TreeSet<com.thealgorithms.backtracking.Combination[][][][]>> combinationArraySetList6 = com.thealgorithms.backtracking.Combination.combination(combinationArray0, (int) ' ');
        org.junit.Assert.assertNotNull(combinationArray0);
        org.junit.Assert.assertNull(combinationArraySetList2);
        org.junit.Assert.assertNotNull(combinationArraySetList4);
        org.junit.Assert.assertNotNull(combinationArraySetList6);
    }

    @Test
    public void test1142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1142");
        com.thealgorithms.backtracking.Combination[][][] combinationArray0 = new com.thealgorithms.backtracking.Combination[][][] {};
        java.util.List<java.util.TreeSet<com.thealgorithms.backtracking.Combination[][]>> combinationArraySetList2 = com.thealgorithms.backtracking.Combination.combination(combinationArray0, (-1));
        java.lang.Class<?> wildcardClass3 = combinationArraySetList2.getClass();
        org.junit.Assert.assertNotNull(combinationArray0);
        org.junit.Assert.assertNotNull(combinationArraySetList2);
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test1143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1143");
        java.lang.Class[][][][] classArray1 = new java.lang.Class[0][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][]>> wildcardClassArraySetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (byte) 100);
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][]>> wildcardClassArraySetList6 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (byte) -1);
        java.util.List<java.util.TreeSet<java.lang.reflect.Type[][][]>> typeArraySetList8 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.Type[][][][]) wildcardClassArray2, (int) (byte) 0);
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration[][][]>> genericDeclarationArraySetList10 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[][][][]) wildcardClassArray2, (int) (byte) 10);
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][]>> wildcardClassArraySetList12 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, 0);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList4);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList6);
        org.junit.Assert.assertNull(typeArraySetList8);
        org.junit.Assert.assertNotNull(genericDeclarationArraySetList10);
        org.junit.Assert.assertNull(wildcardClassArraySetList12);
    }

    @Test
    public void test1144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1144");
        java.lang.String[][][][][] strArray0 = new java.lang.String[][][][][] {};
        java.util.List<java.util.TreeSet<java.lang.String[][][][]>> strArraySetList2 = com.thealgorithms.backtracking.Combination.combination(strArray0, 100);
        java.util.List<java.util.TreeSet<java.lang.String[][][][]>> strArraySetList4 = com.thealgorithms.backtracking.Combination.combination(strArray0, 4);
        java.util.List<java.util.TreeSet<java.lang.String[][][][]>> strArraySetList6 = com.thealgorithms.backtracking.Combination.combination(strArray0, 10);
        java.util.List<java.util.TreeSet<java.lang.String[][][][]>> strArraySetList8 = com.thealgorithms.backtracking.Combination.combination(strArray0, (int) (short) -1);
        java.lang.Class<?> wildcardClass9 = strArraySetList8.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArraySetList2);
        org.junit.Assert.assertNotNull(strArraySetList4);
        org.junit.Assert.assertNotNull(strArraySetList6);
        org.junit.Assert.assertNotNull(strArraySetList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1145");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.util.TreeSet<java.lang.String>> strSetList4 = com.thealgorithms.backtracking.Combination.combination(strArray2, (int) '#');
        java.lang.String[] strArray7 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.util.TreeSet<java.lang.String>> strSetList9 = com.thealgorithms.backtracking.Combination.combination(strArray7, (int) '#');
        java.util.List[] listArray11 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[] strSetListArray12 = (java.util.List<java.util.TreeSet<java.lang.String>>[]) listArray11;
        strSetListArray12[0] = strSetList4;
        strSetListArray12[1] = strSetList9;
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>>> setListSetList18 = com.thealgorithms.backtracking.Combination.combination(strSetListArray12, (int) (byte) 0);
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>>> setListSetList20 = com.thealgorithms.backtracking.Combination.combination(strSetListArray12, (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>>> setListSetList22 = com.thealgorithms.backtracking.Combination.combination(strSetListArray12, 5);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strSetList4);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strSetList9);
        org.junit.Assert.assertNotNull(listArray11);
        org.junit.Assert.assertNotNull(strSetListArray12);
        org.junit.Assert.assertNull(setListSetList18);
        org.junit.Assert.assertNull(setListSetList20);
    }

    @Test
    public void test1146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1146");
        java.util.List[][] listArray1 = new java.util.List[0][];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[][] strSetListArray2 = (java.util.List<java.util.TreeSet<java.lang.String>>[][]) listArray1;
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[]>> listArraySetList4 = com.thealgorithms.backtracking.Combination.combination(strSetListArray2, (int) (short) -1);
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[]>> listArraySetList6 = com.thealgorithms.backtracking.Combination.combination(strSetListArray2, (-1));
        java.util.List<java.util.TreeSet<java.util.Collection[]>> collectionArraySetList8 = com.thealgorithms.backtracking.Combination.combination((java.util.Collection[][]) strSetListArray2, 5);
        java.lang.Class<?> wildcardClass9 = strSetListArray2.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strSetListArray2);
        org.junit.Assert.assertNotNull(listArraySetList4);
        org.junit.Assert.assertNotNull(listArraySetList6);
        org.junit.Assert.assertNotNull(collectionArraySetList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1147");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "", "", "", "" };
        java.util.List<java.util.TreeSet<java.lang.Comparable<java.lang.String>>> strComparableSetList8 = com.thealgorithms.backtracking.Combination.combination((java.lang.Comparable<java.lang.String>[]) strArray6, (int) (byte) 1);
        java.util.List<java.util.TreeSet<java.lang.Comparable<java.lang.String>>> strComparableSetList10 = com.thealgorithms.backtracking.Combination.combination((java.lang.Comparable<java.lang.String>[]) strArray6, (int) (byte) 1);
        java.util.List<java.util.TreeSet<java.lang.Comparable<java.lang.String>>> strComparableSetList12 = com.thealgorithms.backtracking.Combination.combination((java.lang.Comparable<java.lang.String>[]) strArray6, (int) (byte) -1);
        java.util.List<java.util.TreeSet<java.lang.constant.ConstantDesc>> constantDescSetList14 = com.thealgorithms.backtracking.Combination.combination((java.lang.constant.ConstantDesc[]) strArray6, (int) (short) 1);
        java.lang.Class<?> wildcardClass15 = constantDescSetList14.getClass();
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strComparableSetList8);
        org.junit.Assert.assertNotNull(strComparableSetList10);
        org.junit.Assert.assertNotNull(strComparableSetList12);
        org.junit.Assert.assertNotNull(constantDescSetList14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test1148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1148");
        java.lang.String[] strArray0 = new java.lang.String[] {};
        java.lang.String[] strArray1 = new java.lang.String[] {};
        java.lang.String[] strArray2 = new java.lang.String[] {};
        java.lang.String[] strArray3 = new java.lang.String[] {};
        java.lang.String[] strArray4 = new java.lang.String[] {};
        java.lang.String[] strArray5 = new java.lang.String[] {};
        java.lang.String[][] strArray6 = new java.lang.String[][] { strArray0, strArray1, strArray2, strArray3, strArray4, strArray5 };
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.TreeSet<java.lang.String[]>> strArraySetList8 = com.thealgorithms.backtracking.Combination.combination(strArray6, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArray6);
    }

    @Test
    public void test1149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1149");
        java.lang.String[][] strArray0 = new java.lang.String[][] {};
        java.util.List<java.util.TreeSet<java.lang.String[]>> strArraySetList2 = com.thealgorithms.backtracking.Combination.combination(strArray0, (int) (byte) -1);
        java.util.List<java.util.TreeSet<java.lang.String[]>> strArraySetList4 = com.thealgorithms.backtracking.Combination.combination(strArray0, (-1));
        java.util.List<java.util.TreeSet<java.lang.constant.Constable[]>> constableArraySetList6 = com.thealgorithms.backtracking.Combination.combination((java.lang.constant.Constable[][]) strArray0, (int) 'a');
        java.util.List<java.util.TreeSet<java.lang.CharSequence[]>> charSequenceArraySetList8 = com.thealgorithms.backtracking.Combination.combination((java.lang.CharSequence[][]) strArray0, 1);
        java.util.List<java.util.TreeSet<java.lang.String[]>> strArraySetList10 = com.thealgorithms.backtracking.Combination.combination(strArray0, (int) (short) 100);
        java.util.List<java.util.TreeSet<java.lang.constant.Constable[]>> constableArraySetList12 = com.thealgorithms.backtracking.Combination.combination((java.lang.constant.Constable[][]) strArray0, 0);
        java.util.List<java.util.TreeSet<java.lang.String[]>> strArraySetList14 = com.thealgorithms.backtracking.Combination.combination(strArray0, (int) '4');
        java.lang.Class<?> wildcardClass15 = strArray0.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArraySetList2);
        org.junit.Assert.assertNotNull(strArraySetList4);
        org.junit.Assert.assertNotNull(constableArraySetList6);
        org.junit.Assert.assertNotNull(charSequenceArraySetList8);
        org.junit.Assert.assertNotNull(strArraySetList10);
        org.junit.Assert.assertNull(constableArraySetList12);
        org.junit.Assert.assertNotNull(strArraySetList14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test1150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1150");
        java.util.List[] listArray1 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[] strSetListArray2 = (java.util.List<java.util.TreeSet<java.lang.String>>[]) listArray1;
        java.util.List[] listArray4 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[] strSetListArray5 = (java.util.List<java.util.TreeSet<java.lang.String>>[]) listArray4;
        java.util.List[][] listArray7 = new java.util.List[2][];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[][] strSetListArray8 = (java.util.List<java.util.TreeSet<java.lang.String>>[][]) listArray7;
        strSetListArray8[0] = strSetListArray2;
        strSetListArray8[1] = strSetListArray5;
        java.util.List[][][] listArray14 = new java.util.List[1][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[][][] strSetListArray15 = (java.util.List<java.util.TreeSet<java.lang.String>>[][][]) listArray14;
        strSetListArray15[0] = strSetListArray8;
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[][]>> listArraySetList19 = com.thealgorithms.backtracking.Combination.combination(strSetListArray15, (int) (short) 10);
        java.util.List<java.util.TreeSet<java.util.Collection[][]>> collectionArraySetList21 = com.thealgorithms.backtracking.Combination.combination((java.util.Collection[][][]) strSetListArray15, 100);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.TreeSet<java.util.Collection[][]>> collectionArraySetList23 = com.thealgorithms.backtracking.Combination.combination((java.util.Collection[][][]) strSetListArray15, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strSetListArray2);
        org.junit.Assert.assertNotNull(listArray4);
        org.junit.Assert.assertNotNull(strSetListArray5);
        org.junit.Assert.assertNotNull(listArray7);
        org.junit.Assert.assertNotNull(strSetListArray8);
        org.junit.Assert.assertNotNull(listArray14);
        org.junit.Assert.assertNotNull(strSetListArray15);
        org.junit.Assert.assertNotNull(listArraySetList19);
        org.junit.Assert.assertNotNull(collectionArraySetList21);
    }

    @Test
    public void test1151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1151");
        java.lang.Class[][][][][][][] classArray1 = new java.lang.Class[0][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][][][][]>> wildcardClassArraySetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, 1);
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][][][][]>> wildcardClassArraySetList6 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, 3);
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][][][][]>> wildcardClassArraySetList8 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, 4);
        java.lang.Class<?> wildcardClass9 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList4);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList6);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1152");
        com.thealgorithms.backtracking.Combination combination0 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination[] combinationArray1 = new com.thealgorithms.backtracking.Combination[] { combination0 };
        com.thealgorithms.backtracking.Combination combination2 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination[] combinationArray3 = new com.thealgorithms.backtracking.Combination[] { combination2 };
        com.thealgorithms.backtracking.Combination combination4 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination[] combinationArray5 = new com.thealgorithms.backtracking.Combination[] { combination4 };
        com.thealgorithms.backtracking.Combination combination6 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination[] combinationArray7 = new com.thealgorithms.backtracking.Combination[] { combination6 };
        com.thealgorithms.backtracking.Combination combination8 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination[] combinationArray9 = new com.thealgorithms.backtracking.Combination[] { combination8 };
        com.thealgorithms.backtracking.Combination combination10 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination[] combinationArray11 = new com.thealgorithms.backtracking.Combination[] { combination10 };
        com.thealgorithms.backtracking.Combination[][] combinationArray12 = new com.thealgorithms.backtracking.Combination[][] { combinationArray1, combinationArray3, combinationArray5, combinationArray7, combinationArray9, combinationArray11 };
        java.util.List<java.util.TreeSet<com.thealgorithms.backtracking.Combination[]>> combinationArraySetList14 = com.thealgorithms.backtracking.Combination.combination(combinationArray12, 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.TreeSet<com.thealgorithms.backtracking.Combination[]>> combinationArraySetList16 = com.thealgorithms.backtracking.Combination.combination(combinationArray12, 3);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(combinationArray1);
        org.junit.Assert.assertNotNull(combinationArray3);
        org.junit.Assert.assertNotNull(combinationArray5);
        org.junit.Assert.assertNotNull(combinationArray7);
        org.junit.Assert.assertNotNull(combinationArray9);
        org.junit.Assert.assertNotNull(combinationArray11);
        org.junit.Assert.assertNotNull(combinationArray12);
        org.junit.Assert.assertNull(combinationArraySetList14);
    }

    @Test
    public void test1153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1153");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.util.TreeSet<java.lang.String>> strSetList4 = com.thealgorithms.backtracking.Combination.combination(strArray2, (int) '#');
        java.util.List<java.util.TreeSet<java.lang.constant.ConstantDesc>> constantDescSetList6 = com.thealgorithms.backtracking.Combination.combination((java.lang.constant.ConstantDesc[]) strArray2, 1);
        java.util.List<java.util.TreeSet<java.lang.CharSequence>> charSequenceSetList8 = com.thealgorithms.backtracking.Combination.combination((java.lang.CharSequence[]) strArray2, 0);
        java.util.List<java.util.TreeSet<java.lang.Comparable<java.lang.String>>> strComparableSetList10 = com.thealgorithms.backtracking.Combination.combination((java.lang.Comparable<java.lang.String>[]) strArray2, (int) (byte) 10);
        java.util.List<java.util.TreeSet<java.lang.constant.Constable>> constableSetList12 = com.thealgorithms.backtracking.Combination.combination((java.lang.constant.Constable[]) strArray2, 4);
        java.lang.Class<?> wildcardClass13 = strArray2.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strSetList4);
        org.junit.Assert.assertNotNull(constantDescSetList6);
        org.junit.Assert.assertNull(charSequenceSetList8);
        org.junit.Assert.assertNotNull(strComparableSetList10);
        org.junit.Assert.assertNotNull(constableSetList12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1154");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>>> wildcardClassSetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (byte) 0);
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration>> genericDeclarationSetList6 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2, (int) (byte) 1);
        java.util.List<java.util.TreeSet<java.lang.invoke.TypeDescriptor>> typeDescriptorSetList8 = com.thealgorithms.backtracking.Combination.combination((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2, (int) ' ');
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration>> genericDeclarationSetList10 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2, 0);
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration>> genericDeclarationSetList12 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2, 0);
        java.util.List<java.util.TreeSet<java.lang.reflect.AnnotatedElement>> annotatedElementSetList14 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2, (int) (short) 100);
        java.util.List<java.util.TreeSet<java.lang.reflect.Type>> typeSetList16 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.Type[]) wildcardClassArray2, (int) '#');
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration>> genericDeclarationSetList18 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2, (int) (byte) -1);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNull(wildcardClassSetList4);
        org.junit.Assert.assertNotNull(genericDeclarationSetList6);
        org.junit.Assert.assertNotNull(typeDescriptorSetList8);
        org.junit.Assert.assertNull(genericDeclarationSetList10);
        org.junit.Assert.assertNull(genericDeclarationSetList12);
        org.junit.Assert.assertNotNull(annotatedElementSetList14);
        org.junit.Assert.assertNotNull(typeSetList16);
        org.junit.Assert.assertNotNull(genericDeclarationSetList18);
    }

    @Test
    public void test1155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1155");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[1][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        wildcardClassArray5[0] = classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>[]>> wildcardClassArraySetList9 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray5, 10);
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration[]>> genericDeclarationArraySetList11 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray5, 0);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass12 = genericDeclarationArraySetList11.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList9);
        org.junit.Assert.assertNull(genericDeclarationArraySetList11);
    }

    @Test
    public void test1156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1156");
        java.util.List[][] listArray1 = new java.util.List[0][];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[][] strSetListArray2 = (java.util.List<java.util.TreeSet<java.lang.String>>[][]) listArray1;
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[]>> listArraySetList4 = com.thealgorithms.backtracking.Combination.combination(strSetListArray2, (int) (short) -1);
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[]>> listArraySetList6 = com.thealgorithms.backtracking.Combination.combination(strSetListArray2, (-1));
        java.util.List<java.util.TreeSet<java.lang.Iterable<java.util.TreeSet<java.lang.String>>[]>> iterableArraySetList8 = com.thealgorithms.backtracking.Combination.combination((java.lang.Iterable<java.util.TreeSet<java.lang.String>>[][]) strSetListArray2, (int) '4');
        java.util.List<java.util.TreeSet<java.util.Collection[]>> collectionArraySetList10 = com.thealgorithms.backtracking.Combination.combination((java.util.Collection[][]) strSetListArray2, 100);
        java.util.List<java.util.TreeSet<java.lang.Iterable<java.util.TreeSet<java.lang.String>>[]>> iterableArraySetList12 = com.thealgorithms.backtracking.Combination.combination((java.lang.Iterable<java.util.TreeSet<java.lang.String>>[][]) strSetListArray2, (int) (byte) -1);
        java.util.List<java.util.TreeSet<java.util.Collection[]>> collectionArraySetList14 = com.thealgorithms.backtracking.Combination.combination((java.util.Collection[][]) strSetListArray2, (int) ' ');
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[]>> listArraySetList16 = com.thealgorithms.backtracking.Combination.combination(strSetListArray2, (int) (short) -1);
        java.lang.Class<?> wildcardClass17 = strSetListArray2.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strSetListArray2);
        org.junit.Assert.assertNotNull(listArraySetList4);
        org.junit.Assert.assertNotNull(listArraySetList6);
        org.junit.Assert.assertNotNull(iterableArraySetList8);
        org.junit.Assert.assertNotNull(collectionArraySetList10);
        org.junit.Assert.assertNotNull(iterableArraySetList12);
        org.junit.Assert.assertNotNull(collectionArraySetList14);
        org.junit.Assert.assertNotNull(listArraySetList16);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test1157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1157");
        java.util.List[][][][] listArray1 = new java.util.List[0][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[][][][] strSetListArray2 = (java.util.List<java.util.TreeSet<java.lang.String>>[][][][]) listArray1;
        java.util.List[][][][][] listArray4 = new java.util.List[1][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[][][][][] strSetListArray5 = (java.util.List<java.util.TreeSet<java.lang.String>>[][][][][]) listArray4;
        strSetListArray5[0] = strSetListArray2;
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[][][][]>> listArraySetList9 = com.thealgorithms.backtracking.Combination.combination(strSetListArray5, 5);
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[][][][]>> listArraySetList11 = com.thealgorithms.backtracking.Combination.combination(strSetListArray5, (int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[][][][]>> listArraySetList13 = com.thealgorithms.backtracking.Combination.combination(strSetListArray5, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strSetListArray2);
        org.junit.Assert.assertNotNull(listArray4);
        org.junit.Assert.assertNotNull(strSetListArray5);
        org.junit.Assert.assertNotNull(listArraySetList9);
        org.junit.Assert.assertNotNull(listArraySetList11);
    }

    @Test
    public void test1158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1158");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>>> wildcardClassSetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (byte) 0);
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration>> genericDeclarationSetList6 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2, (int) (byte) 1);
        java.util.List<java.util.TreeSet<java.lang.invoke.TypeDescriptor>> typeDescriptorSetList8 = com.thealgorithms.backtracking.Combination.combination((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2, (int) ' ');
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration>> genericDeclarationSetList10 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2, 0);
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration>> genericDeclarationSetList12 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2, 0);
        java.util.List<java.util.TreeSet<java.lang.invoke.TypeDescriptor>> typeDescriptorSetList14 = com.thealgorithms.backtracking.Combination.combination((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2, (int) (byte) 0);
        java.util.List<java.util.TreeSet<java.lang.reflect.AnnotatedElement>> annotatedElementSetList16 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2, (int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass17 = annotatedElementSetList16.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNull(wildcardClassSetList4);
        org.junit.Assert.assertNotNull(genericDeclarationSetList6);
        org.junit.Assert.assertNotNull(typeDescriptorSetList8);
        org.junit.Assert.assertNull(genericDeclarationSetList10);
        org.junit.Assert.assertNull(genericDeclarationSetList12);
        org.junit.Assert.assertNull(typeDescriptorSetList14);
        org.junit.Assert.assertNull(annotatedElementSetList16);
    }

    @Test
    public void test1159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1159");
        java.lang.String[][][][][] strArray0 = new java.lang.String[][][][][] {};
        java.util.List<java.util.TreeSet<java.lang.String[][][][]>> strArraySetList2 = com.thealgorithms.backtracking.Combination.combination(strArray0, 100);
        java.util.List<java.util.TreeSet<java.lang.String[][][][]>> strArraySetList4 = com.thealgorithms.backtracking.Combination.combination(strArray0, 4);
        java.util.List<java.util.TreeSet<java.lang.String[][][][]>> strArraySetList6 = com.thealgorithms.backtracking.Combination.combination(strArray0, 10);
        java.util.List<java.util.TreeSet<java.lang.String[][][][]>> strArraySetList8 = com.thealgorithms.backtracking.Combination.combination(strArray0, (-1));
        java.util.List<java.util.TreeSet<java.lang.String[][][][]>> strArraySetList10 = com.thealgorithms.backtracking.Combination.combination(strArray0, (int) (short) 100);
        java.lang.Class<?> wildcardClass11 = strArraySetList10.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArraySetList2);
        org.junit.Assert.assertNotNull(strArraySetList4);
        org.junit.Assert.assertNotNull(strArraySetList6);
        org.junit.Assert.assertNotNull(strArraySetList8);
        org.junit.Assert.assertNotNull(strArraySetList10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1160");
        java.util.List[] listArray1 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[] strSetListArray2 = (java.util.List<java.util.TreeSet<java.lang.String>>[]) listArray1;
        java.util.List[] listArray4 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[] strSetListArray5 = (java.util.List<java.util.TreeSet<java.lang.String>>[]) listArray4;
        java.util.List[][] listArray7 = new java.util.List[2][];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[][] strSetListArray8 = (java.util.List<java.util.TreeSet<java.lang.String>>[][]) listArray7;
        strSetListArray8[0] = strSetListArray2;
        strSetListArray8[1] = strSetListArray5;
        java.util.List[][][] listArray14 = new java.util.List[1][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[][][] strSetListArray15 = (java.util.List<java.util.TreeSet<java.lang.String>>[][][]) listArray14;
        strSetListArray15[0] = strSetListArray8;
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[][]>> listArraySetList19 = com.thealgorithms.backtracking.Combination.combination(strSetListArray15, (int) (short) 10);
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[][]>> listArraySetList21 = com.thealgorithms.backtracking.Combination.combination(strSetListArray15, (int) (short) 0);
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[][]>> listArraySetList23 = com.thealgorithms.backtracking.Combination.combination(strSetListArray15, 6);
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[][]>> listArraySetList25 = com.thealgorithms.backtracking.Combination.combination(strSetListArray15, (int) 'a');
        java.lang.Class<?> wildcardClass26 = listArraySetList25.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strSetListArray2);
        org.junit.Assert.assertNotNull(listArray4);
        org.junit.Assert.assertNotNull(strSetListArray5);
        org.junit.Assert.assertNotNull(listArray7);
        org.junit.Assert.assertNotNull(strSetListArray8);
        org.junit.Assert.assertNotNull(listArray14);
        org.junit.Assert.assertNotNull(strSetListArray15);
        org.junit.Assert.assertNotNull(listArraySetList19);
        org.junit.Assert.assertNull(listArraySetList21);
        org.junit.Assert.assertNotNull(listArraySetList23);
        org.junit.Assert.assertNotNull(listArraySetList25);
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test1161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1161");
        java.lang.Class[][] classArray1 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray2 = (java.lang.Class<?>[][]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>[]>> wildcardClassArraySetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (byte) 1);
        java.util.List<java.util.TreeSet<java.lang.Class<?>[]>> wildcardClassArraySetList6 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, 0);
        java.util.List<java.util.TreeSet<java.lang.Class<?>[]>> wildcardClassArraySetList8 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, 5);
        java.util.List<java.util.TreeSet<java.lang.Class<?>[]>> wildcardClassArraySetList10 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) '4');
        java.lang.Class<?> wildcardClass11 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList4);
        org.junit.Assert.assertNull(wildcardClassArraySetList6);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList8);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1162");
        java.lang.Class[][][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][][]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][][][][][][]>> wildcardClassArraySetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, 2);
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][][][][][][]>> wildcardClassArraySetList6 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, 2);
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][][][][][][]>> wildcardClassArraySetList8 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, 1);
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][][][][][][]>> wildcardClassArraySetList10 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (short) 1);
        java.lang.Class<?> wildcardClass11 = wildcardClassArraySetList10.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList4);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList6);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList8);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1163");
        java.lang.Class[][][][][] classArray1 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][][]>> wildcardClassArraySetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (short) 10);
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][][]>> wildcardClassArraySetList6 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (byte) 10);
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][][]>> wildcardClassArraySetList8 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (-1));
        java.lang.Class<?> wildcardClass9 = wildcardClassArraySetList8.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList4);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList6);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1164");
        java.util.List[][][][][][] listArray1 = new java.util.List[0][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[][][][][][] strSetListArray2 = (java.util.List<java.util.TreeSet<java.lang.String>>[][][][][][]) listArray1;
        java.util.List[][][][][][] listArray4 = new java.util.List[0][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[][][][][][] strSetListArray5 = (java.util.List<java.util.TreeSet<java.lang.String>>[][][][][][]) listArray4;
        java.util.List[][][][][][] listArray7 = new java.util.List[0][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[][][][][][] strSetListArray8 = (java.util.List<java.util.TreeSet<java.lang.String>>[][][][][][]) listArray7;
        java.util.List[][][][][][] listArray10 = new java.util.List[0][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[][][][][][] strSetListArray11 = (java.util.List<java.util.TreeSet<java.lang.String>>[][][][][][]) listArray10;
        java.util.List[][][][][][] listArray13 = new java.util.List[0][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[][][][][][] strSetListArray14 = (java.util.List<java.util.TreeSet<java.lang.String>>[][][][][][]) listArray13;
        java.util.List[][][][][][] listArray16 = new java.util.List[0][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[][][][][][] strSetListArray17 = (java.util.List<java.util.TreeSet<java.lang.String>>[][][][][][]) listArray16;
        java.util.List[][][][][][][] listArray19 = new java.util.List[6][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[][][][][][][] strSetListArray20 = (java.util.List<java.util.TreeSet<java.lang.String>>[][][][][][][]) listArray19;
        strSetListArray20[0] = strSetListArray2;
        strSetListArray20[1] = strSetListArray5;
        strSetListArray20[2] = strSetListArray8;
        strSetListArray20[3] = strSetListArray11;
        strSetListArray20[4] = strSetListArray14;
        strSetListArray20[5] = strSetListArray17;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[][][][][][]>> listArraySetList34 = com.thealgorithms.backtracking.Combination.combination(strSetListArray20, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strSetListArray2);
        org.junit.Assert.assertNotNull(listArray4);
        org.junit.Assert.assertNotNull(strSetListArray5);
        org.junit.Assert.assertNotNull(listArray7);
        org.junit.Assert.assertNotNull(strSetListArray8);
        org.junit.Assert.assertNotNull(listArray10);
        org.junit.Assert.assertNotNull(strSetListArray11);
        org.junit.Assert.assertNotNull(listArray13);
        org.junit.Assert.assertNotNull(strSetListArray14);
        org.junit.Assert.assertNotNull(listArray16);
        org.junit.Assert.assertNotNull(strSetListArray17);
        org.junit.Assert.assertNotNull(listArray19);
        org.junit.Assert.assertNotNull(strSetListArray20);
    }

    @Test
    public void test1165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1165");
        java.lang.String[][] strArray0 = new java.lang.String[][] {};
        java.util.List<java.util.TreeSet<java.lang.String[]>> strArraySetList2 = com.thealgorithms.backtracking.Combination.combination(strArray0, (int) (byte) -1);
        java.util.List<java.util.TreeSet<java.lang.String[]>> strArraySetList4 = com.thealgorithms.backtracking.Combination.combination(strArray0, (-1));
        java.util.List<java.util.TreeSet<java.lang.constant.Constable[]>> constableArraySetList6 = com.thealgorithms.backtracking.Combination.combination((java.lang.constant.Constable[][]) strArray0, (int) 'a');
        java.util.List<java.util.TreeSet<java.lang.CharSequence[]>> charSequenceArraySetList8 = com.thealgorithms.backtracking.Combination.combination((java.lang.CharSequence[][]) strArray0, 1);
        java.util.List<java.util.TreeSet<java.lang.constant.Constable[]>> constableArraySetList10 = com.thealgorithms.backtracking.Combination.combination((java.lang.constant.Constable[][]) strArray0, 10);
        java.util.List<java.util.TreeSet<java.lang.CharSequence[]>> charSequenceArraySetList12 = com.thealgorithms.backtracking.Combination.combination((java.lang.CharSequence[][]) strArray0, (int) (short) -1);
        java.lang.Class<?> wildcardClass13 = charSequenceArraySetList12.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArraySetList2);
        org.junit.Assert.assertNotNull(strArraySetList4);
        org.junit.Assert.assertNotNull(constableArraySetList6);
        org.junit.Assert.assertNotNull(charSequenceArraySetList8);
        org.junit.Assert.assertNotNull(constableArraySetList10);
        org.junit.Assert.assertNotNull(charSequenceArraySetList12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1166");
        java.util.List[][][] listArray1 = new java.util.List[0][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[][][] strSetListArray2 = (java.util.List<java.util.TreeSet<java.lang.String>>[][][]) listArray1;
        java.util.List[][][] listArray4 = new java.util.List[0][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[][][] strSetListArray5 = (java.util.List<java.util.TreeSet<java.lang.String>>[][][]) listArray4;
        java.util.List[][][] listArray7 = new java.util.List[0][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[][][] strSetListArray8 = (java.util.List<java.util.TreeSet<java.lang.String>>[][][]) listArray7;
        java.util.List[][][] listArray10 = new java.util.List[0][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[][][] strSetListArray11 = (java.util.List<java.util.TreeSet<java.lang.String>>[][][]) listArray10;
        java.util.List[][][] listArray13 = new java.util.List[0][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[][][] strSetListArray14 = (java.util.List<java.util.TreeSet<java.lang.String>>[][][]) listArray13;
        java.util.List[][][][] listArray16 = new java.util.List[5][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[][][][] strSetListArray17 = (java.util.List<java.util.TreeSet<java.lang.String>>[][][][]) listArray16;
        strSetListArray17[0] = strSetListArray2;
        strSetListArray17[1] = strSetListArray5;
        strSetListArray17[2] = strSetListArray8;
        strSetListArray17[3] = strSetListArray11;
        strSetListArray17[4] = strSetListArray14;
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[][][]>> listArraySetList29 = com.thealgorithms.backtracking.Combination.combination(strSetListArray17, 0);
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[][][]>> listArraySetList31 = com.thealgorithms.backtracking.Combination.combination(strSetListArray17, 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[][][]>> listArraySetList33 = com.thealgorithms.backtracking.Combination.combination(strSetListArray17, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strSetListArray2);
        org.junit.Assert.assertNotNull(listArray4);
        org.junit.Assert.assertNotNull(strSetListArray5);
        org.junit.Assert.assertNotNull(listArray7);
        org.junit.Assert.assertNotNull(strSetListArray8);
        org.junit.Assert.assertNotNull(listArray10);
        org.junit.Assert.assertNotNull(strSetListArray11);
        org.junit.Assert.assertNotNull(listArray13);
        org.junit.Assert.assertNotNull(strSetListArray14);
        org.junit.Assert.assertNotNull(listArray16);
        org.junit.Assert.assertNotNull(strSetListArray17);
        org.junit.Assert.assertNull(listArraySetList29);
        org.junit.Assert.assertNull(listArraySetList31);
    }

    @Test
    public void test1167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1167");
        java.lang.Class[][][][][][][] classArray1 = new java.lang.Class[0][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][][][][]>> wildcardClassArraySetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, 1);
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][][][][]>> wildcardClassArraySetList6 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) '#');
        java.util.List<java.util.TreeSet<java.lang.Object>> objSetList8 = com.thealgorithms.backtracking.Combination.combination((java.lang.Object[]) wildcardClassArray2, 0);
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][][][][]>> wildcardClassArraySetList10 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (byte) 1);
        java.lang.Class<?> wildcardClass11 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList4);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList6);
        org.junit.Assert.assertNull(objSetList8);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1168");
        java.lang.Class[][][][][] classArray1 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][][]>> wildcardClassArraySetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (short) 10);
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration[][][][]>> genericDeclarationArraySetList6 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[][][][][]) wildcardClassArray2, (int) (short) 1);
        java.lang.Class<?> wildcardClass7 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList4);
        org.junit.Assert.assertNotNull(genericDeclarationArraySetList6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test1169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1169");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>>> wildcardClassSetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (byte) 0);
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration>> genericDeclarationSetList6 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2, (int) (byte) 1);
        java.util.List<java.util.TreeSet<java.lang.invoke.TypeDescriptor>> typeDescriptorSetList8 = com.thealgorithms.backtracking.Combination.combination((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2, (int) ' ');
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration>> genericDeclarationSetList10 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2, 0);
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration>> genericDeclarationSetList12 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2, 0);
        java.util.List<java.util.TreeSet<java.lang.invoke.TypeDescriptor>> typeDescriptorSetList14 = com.thealgorithms.backtracking.Combination.combination((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2, 100);
        java.util.List<java.util.TreeSet<java.lang.Class<?>>> wildcardClassSetList16 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) '#');
        java.util.List<java.util.TreeSet<java.lang.reflect.Type>> typeSetList18 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.Type[]) wildcardClassArray2, 10);
        java.util.List<java.util.TreeSet<java.lang.invoke.TypeDescriptor>> typeDescriptorSetList20 = com.thealgorithms.backtracking.Combination.combination((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2, (int) 'a');
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration>> genericDeclarationSetList22 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2, 5);
        java.lang.Class<?> wildcardClass23 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNull(wildcardClassSetList4);
        org.junit.Assert.assertNotNull(genericDeclarationSetList6);
        org.junit.Assert.assertNotNull(typeDescriptorSetList8);
        org.junit.Assert.assertNull(genericDeclarationSetList10);
        org.junit.Assert.assertNull(genericDeclarationSetList12);
        org.junit.Assert.assertNotNull(typeDescriptorSetList14);
        org.junit.Assert.assertNotNull(wildcardClassSetList16);
        org.junit.Assert.assertNotNull(typeSetList18);
        org.junit.Assert.assertNotNull(typeDescriptorSetList20);
        org.junit.Assert.assertNotNull(genericDeclarationSetList22);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test1170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1170");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>>> wildcardClassSetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (byte) 0);
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration>> genericDeclarationSetList6 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2, (int) (byte) 1);
        java.util.List<java.util.TreeSet<java.lang.invoke.TypeDescriptor>> typeDescriptorSetList8 = com.thealgorithms.backtracking.Combination.combination((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2, (int) ' ');
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration>> genericDeclarationSetList10 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2, 0);
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration>> genericDeclarationSetList12 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2, 0);
        java.util.List<java.util.TreeSet<java.lang.invoke.TypeDescriptor>> typeDescriptorSetList14 = com.thealgorithms.backtracking.Combination.combination((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2, 100);
        java.util.List<java.util.TreeSet<java.lang.Class<?>>> wildcardClassSetList16 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) '#');
        java.util.List<java.util.TreeSet<java.lang.reflect.Type>> typeSetList18 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.Type[]) wildcardClassArray2, 10);
        java.util.List<java.util.TreeSet<java.lang.reflect.AnnotatedElement>> annotatedElementSetList20 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2, (int) (byte) -1);
        java.lang.Class<?> wildcardClass21 = annotatedElementSetList20.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNull(wildcardClassSetList4);
        org.junit.Assert.assertNotNull(genericDeclarationSetList6);
        org.junit.Assert.assertNotNull(typeDescriptorSetList8);
        org.junit.Assert.assertNull(genericDeclarationSetList10);
        org.junit.Assert.assertNull(genericDeclarationSetList12);
        org.junit.Assert.assertNotNull(typeDescriptorSetList14);
        org.junit.Assert.assertNotNull(wildcardClassSetList16);
        org.junit.Assert.assertNotNull(typeSetList18);
        org.junit.Assert.assertNotNull(annotatedElementSetList20);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test1171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1171");
        com.thealgorithms.backtracking.Combination combination0 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination[] combinationArray1 = new com.thealgorithms.backtracking.Combination[] { combination0 };
        com.thealgorithms.backtracking.Combination combination2 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination[] combinationArray3 = new com.thealgorithms.backtracking.Combination[] { combination2 };
        com.thealgorithms.backtracking.Combination combination4 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination[] combinationArray5 = new com.thealgorithms.backtracking.Combination[] { combination4 };
        com.thealgorithms.backtracking.Combination combination6 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination[] combinationArray7 = new com.thealgorithms.backtracking.Combination[] { combination6 };
        com.thealgorithms.backtracking.Combination combination8 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination[] combinationArray9 = new com.thealgorithms.backtracking.Combination[] { combination8 };
        com.thealgorithms.backtracking.Combination combination10 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination[] combinationArray11 = new com.thealgorithms.backtracking.Combination[] { combination10 };
        com.thealgorithms.backtracking.Combination[][] combinationArray12 = new com.thealgorithms.backtracking.Combination[][] { combinationArray1, combinationArray3, combinationArray5, combinationArray7, combinationArray9, combinationArray11 };
        java.util.List<java.util.TreeSet<com.thealgorithms.backtracking.Combination[]>> combinationArraySetList14 = com.thealgorithms.backtracking.Combination.combination(combinationArray12, 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.TreeSet<com.thealgorithms.backtracking.Combination[]>> combinationArraySetList16 = com.thealgorithms.backtracking.Combination.combination(combinationArray12, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(combinationArray1);
        org.junit.Assert.assertNotNull(combinationArray3);
        org.junit.Assert.assertNotNull(combinationArray5);
        org.junit.Assert.assertNotNull(combinationArray7);
        org.junit.Assert.assertNotNull(combinationArray9);
        org.junit.Assert.assertNotNull(combinationArray11);
        org.junit.Assert.assertNotNull(combinationArray12);
        org.junit.Assert.assertNull(combinationArraySetList14);
    }

    @Test
    public void test1172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1172");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[1][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        wildcardClassArray5[0] = classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>[]>> wildcardClassArraySetList9 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray5, 10);
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration[]>> genericDeclarationArraySetList11 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray5, 0);
        java.util.List<java.util.TreeSet<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]>> ofFieldArraySetList13 = com.thealgorithms.backtracking.Combination.combination((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]) wildcardClassArray5, 0);
        java.util.List<java.util.TreeSet<java.lang.Class<?>[]>> wildcardClassArraySetList15 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray5, 3);
        java.lang.Class<?> wildcardClass16 = wildcardClassArraySetList15.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList9);
        org.junit.Assert.assertNull(genericDeclarationArraySetList11);
        org.junit.Assert.assertNull(ofFieldArraySetList13);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList15);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test1173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1173");
        java.lang.String[][][] strArray0 = new java.lang.String[][][] {};
        java.lang.String[][][] strArray1 = new java.lang.String[][][] {};
        java.lang.String[][][] strArray2 = new java.lang.String[][][] {};
        java.lang.String[][][][] strArray3 = new java.lang.String[][][][] { strArray0, strArray1, strArray2 };
        java.lang.String[][][][][] strArray4 = new java.lang.String[][][][][] { strArray3 };
        java.lang.String[][][] strArray5 = new java.lang.String[][][] {};
        java.lang.String[][][] strArray6 = new java.lang.String[][][] {};
        java.lang.String[][][] strArray7 = new java.lang.String[][][] {};
        java.lang.String[][][][] strArray8 = new java.lang.String[][][][] { strArray5, strArray6, strArray7 };
        java.lang.String[][][][][] strArray9 = new java.lang.String[][][][][] { strArray8 };
        java.lang.String[][][] strArray10 = new java.lang.String[][][] {};
        java.lang.String[][][] strArray11 = new java.lang.String[][][] {};
        java.lang.String[][][] strArray12 = new java.lang.String[][][] {};
        java.lang.String[][][][] strArray13 = new java.lang.String[][][][] { strArray10, strArray11, strArray12 };
        java.lang.String[][][][][] strArray14 = new java.lang.String[][][][][] { strArray13 };
        java.lang.String[][][] strArray15 = new java.lang.String[][][] {};
        java.lang.String[][][] strArray16 = new java.lang.String[][][] {};
        java.lang.String[][][] strArray17 = new java.lang.String[][][] {};
        java.lang.String[][][][] strArray18 = new java.lang.String[][][][] { strArray15, strArray16, strArray17 };
        java.lang.String[][][][][] strArray19 = new java.lang.String[][][][][] { strArray18 };
        java.lang.String[][][][][][] strArray20 = new java.lang.String[][][][][][] { strArray4, strArray9, strArray14, strArray19 };
        java.lang.String[][][] strArray21 = new java.lang.String[][][] {};
        java.lang.String[][][] strArray22 = new java.lang.String[][][] {};
        java.lang.String[][][] strArray23 = new java.lang.String[][][] {};
        java.lang.String[][][][] strArray24 = new java.lang.String[][][][] { strArray21, strArray22, strArray23 };
        java.lang.String[][][][][] strArray25 = new java.lang.String[][][][][] { strArray24 };
        java.lang.String[][][] strArray26 = new java.lang.String[][][] {};
        java.lang.String[][][] strArray27 = new java.lang.String[][][] {};
        java.lang.String[][][] strArray28 = new java.lang.String[][][] {};
        java.lang.String[][][][] strArray29 = new java.lang.String[][][][] { strArray26, strArray27, strArray28 };
        java.lang.String[][][][][] strArray30 = new java.lang.String[][][][][] { strArray29 };
        java.lang.String[][][] strArray31 = new java.lang.String[][][] {};
        java.lang.String[][][] strArray32 = new java.lang.String[][][] {};
        java.lang.String[][][] strArray33 = new java.lang.String[][][] {};
        java.lang.String[][][][] strArray34 = new java.lang.String[][][][] { strArray31, strArray32, strArray33 };
        java.lang.String[][][][][] strArray35 = new java.lang.String[][][][][] { strArray34 };
        java.lang.String[][][] strArray36 = new java.lang.String[][][] {};
        java.lang.String[][][] strArray37 = new java.lang.String[][][] {};
        java.lang.String[][][] strArray38 = new java.lang.String[][][] {};
        java.lang.String[][][][] strArray39 = new java.lang.String[][][][] { strArray36, strArray37, strArray38 };
        java.lang.String[][][][][] strArray40 = new java.lang.String[][][][][] { strArray39 };
        java.lang.String[][][][][][] strArray41 = new java.lang.String[][][][][][] { strArray25, strArray30, strArray35, strArray40 };
        java.lang.String[][][] strArray42 = new java.lang.String[][][] {};
        java.lang.String[][][] strArray43 = new java.lang.String[][][] {};
        java.lang.String[][][] strArray44 = new java.lang.String[][][] {};
        java.lang.String[][][][] strArray45 = new java.lang.String[][][][] { strArray42, strArray43, strArray44 };
        java.lang.String[][][][][] strArray46 = new java.lang.String[][][][][] { strArray45 };
        java.lang.String[][][] strArray47 = new java.lang.String[][][] {};
        java.lang.String[][][] strArray48 = new java.lang.String[][][] {};
        java.lang.String[][][] strArray49 = new java.lang.String[][][] {};
        java.lang.String[][][][] strArray50 = new java.lang.String[][][][] { strArray47, strArray48, strArray49 };
        java.lang.String[][][][][] strArray51 = new java.lang.String[][][][][] { strArray50 };
        java.lang.String[][][] strArray52 = new java.lang.String[][][] {};
        java.lang.String[][][] strArray53 = new java.lang.String[][][] {};
        java.lang.String[][][] strArray54 = new java.lang.String[][][] {};
        java.lang.String[][][][] strArray55 = new java.lang.String[][][][] { strArray52, strArray53, strArray54 };
        java.lang.String[][][][][] strArray56 = new java.lang.String[][][][][] { strArray55 };
        java.lang.String[][][] strArray57 = new java.lang.String[][][] {};
        java.lang.String[][][] strArray58 = new java.lang.String[][][] {};
        java.lang.String[][][] strArray59 = new java.lang.String[][][] {};
        java.lang.String[][][][] strArray60 = new java.lang.String[][][][] { strArray57, strArray58, strArray59 };
        java.lang.String[][][][][] strArray61 = new java.lang.String[][][][][] { strArray60 };
        java.lang.String[][][][][][] strArray62 = new java.lang.String[][][][][][] { strArray46, strArray51, strArray56, strArray61 };
        java.lang.String[][][] strArray63 = new java.lang.String[][][] {};
        java.lang.String[][][] strArray64 = new java.lang.String[][][] {};
        java.lang.String[][][] strArray65 = new java.lang.String[][][] {};
        java.lang.String[][][][] strArray66 = new java.lang.String[][][][] { strArray63, strArray64, strArray65 };
        java.lang.String[][][][][] strArray67 = new java.lang.String[][][][][] { strArray66 };
        java.lang.String[][][] strArray68 = new java.lang.String[][][] {};
        java.lang.String[][][] strArray69 = new java.lang.String[][][] {};
        java.lang.String[][][] strArray70 = new java.lang.String[][][] {};
        java.lang.String[][][][] strArray71 = new java.lang.String[][][][] { strArray68, strArray69, strArray70 };
        java.lang.String[][][][][] strArray72 = new java.lang.String[][][][][] { strArray71 };
        java.lang.String[][][] strArray73 = new java.lang.String[][][] {};
        java.lang.String[][][] strArray74 = new java.lang.String[][][] {};
        java.lang.String[][][] strArray75 = new java.lang.String[][][] {};
        java.lang.String[][][][] strArray76 = new java.lang.String[][][][] { strArray73, strArray74, strArray75 };
        java.lang.String[][][][][] strArray77 = new java.lang.String[][][][][] { strArray76 };
        java.lang.String[][][] strArray78 = new java.lang.String[][][] {};
        java.lang.String[][][] strArray79 = new java.lang.String[][][] {};
        java.lang.String[][][] strArray80 = new java.lang.String[][][] {};
        java.lang.String[][][][] strArray81 = new java.lang.String[][][][] { strArray78, strArray79, strArray80 };
        java.lang.String[][][][][] strArray82 = new java.lang.String[][][][][] { strArray81 };
        java.lang.String[][][][][][] strArray83 = new java.lang.String[][][][][][] { strArray67, strArray72, strArray77, strArray82 };
        java.lang.String[][][][][][][] strArray84 = new java.lang.String[][][][][][][] { strArray20, strArray41, strArray62, strArray83 };
        java.util.List<java.util.TreeSet<java.lang.String[][][][][][]>> strArraySetList86 = com.thealgorithms.backtracking.Combination.combination(strArray84, (int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.TreeSet<java.lang.String[][][][][][]>> strArraySetList88 = com.thealgorithms.backtracking.Combination.combination(strArray84, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertNotNull(strArray81);
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertNotNull(strArray83);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertNull(strArraySetList86);
    }

    @Test
    public void test1174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1174");
        com.thealgorithms.backtracking.Combination[][][][][][] combinationArray0 = new com.thealgorithms.backtracking.Combination[][][][][][] {};
        com.thealgorithms.backtracking.Combination[][][][][][] combinationArray1 = new com.thealgorithms.backtracking.Combination[][][][][][] {};
        com.thealgorithms.backtracking.Combination[][][][][][][] combinationArray2 = new com.thealgorithms.backtracking.Combination[][][][][][][] { combinationArray0, combinationArray1 };
        com.thealgorithms.backtracking.Combination[][][][][][] combinationArray3 = new com.thealgorithms.backtracking.Combination[][][][][][] {};
        com.thealgorithms.backtracking.Combination[][][][][][] combinationArray4 = new com.thealgorithms.backtracking.Combination[][][][][][] {};
        com.thealgorithms.backtracking.Combination[][][][][][][] combinationArray5 = new com.thealgorithms.backtracking.Combination[][][][][][][] { combinationArray3, combinationArray4 };
        com.thealgorithms.backtracking.Combination[][][][][][] combinationArray6 = new com.thealgorithms.backtracking.Combination[][][][][][] {};
        com.thealgorithms.backtracking.Combination[][][][][][] combinationArray7 = new com.thealgorithms.backtracking.Combination[][][][][][] {};
        com.thealgorithms.backtracking.Combination[][][][][][][] combinationArray8 = new com.thealgorithms.backtracking.Combination[][][][][][][] { combinationArray6, combinationArray7 };
        com.thealgorithms.backtracking.Combination[][][][][][] combinationArray9 = new com.thealgorithms.backtracking.Combination[][][][][][] {};
        com.thealgorithms.backtracking.Combination[][][][][][] combinationArray10 = new com.thealgorithms.backtracking.Combination[][][][][][] {};
        com.thealgorithms.backtracking.Combination[][][][][][][] combinationArray11 = new com.thealgorithms.backtracking.Combination[][][][][][][] { combinationArray9, combinationArray10 };
        com.thealgorithms.backtracking.Combination[][][][][][] combinationArray12 = new com.thealgorithms.backtracking.Combination[][][][][][] {};
        com.thealgorithms.backtracking.Combination[][][][][][] combinationArray13 = new com.thealgorithms.backtracking.Combination[][][][][][] {};
        com.thealgorithms.backtracking.Combination[][][][][][][] combinationArray14 = new com.thealgorithms.backtracking.Combination[][][][][][][] { combinationArray12, combinationArray13 };
        com.thealgorithms.backtracking.Combination[][][][][][] combinationArray15 = new com.thealgorithms.backtracking.Combination[][][][][][] {};
        com.thealgorithms.backtracking.Combination[][][][][][] combinationArray16 = new com.thealgorithms.backtracking.Combination[][][][][][] {};
        com.thealgorithms.backtracking.Combination[][][][][][][] combinationArray17 = new com.thealgorithms.backtracking.Combination[][][][][][][] { combinationArray15, combinationArray16 };
        com.thealgorithms.backtracking.Combination[][][][][][][][] combinationArray18 = new com.thealgorithms.backtracking.Combination[][][][][][][][] { combinationArray2, combinationArray5, combinationArray8, combinationArray11, combinationArray14, combinationArray17 };
        com.thealgorithms.backtracking.Combination[][][][][][] combinationArray19 = new com.thealgorithms.backtracking.Combination[][][][][][] {};
        com.thealgorithms.backtracking.Combination[][][][][][] combinationArray20 = new com.thealgorithms.backtracking.Combination[][][][][][] {};
        com.thealgorithms.backtracking.Combination[][][][][][][] combinationArray21 = new com.thealgorithms.backtracking.Combination[][][][][][][] { combinationArray19, combinationArray20 };
        com.thealgorithms.backtracking.Combination[][][][][][] combinationArray22 = new com.thealgorithms.backtracking.Combination[][][][][][] {};
        com.thealgorithms.backtracking.Combination[][][][][][] combinationArray23 = new com.thealgorithms.backtracking.Combination[][][][][][] {};
        com.thealgorithms.backtracking.Combination[][][][][][][] combinationArray24 = new com.thealgorithms.backtracking.Combination[][][][][][][] { combinationArray22, combinationArray23 };
        com.thealgorithms.backtracking.Combination[][][][][][] combinationArray25 = new com.thealgorithms.backtracking.Combination[][][][][][] {};
        com.thealgorithms.backtracking.Combination[][][][][][] combinationArray26 = new com.thealgorithms.backtracking.Combination[][][][][][] {};
        com.thealgorithms.backtracking.Combination[][][][][][][] combinationArray27 = new com.thealgorithms.backtracking.Combination[][][][][][][] { combinationArray25, combinationArray26 };
        com.thealgorithms.backtracking.Combination[][][][][][] combinationArray28 = new com.thealgorithms.backtracking.Combination[][][][][][] {};
        com.thealgorithms.backtracking.Combination[][][][][][] combinationArray29 = new com.thealgorithms.backtracking.Combination[][][][][][] {};
        com.thealgorithms.backtracking.Combination[][][][][][][] combinationArray30 = new com.thealgorithms.backtracking.Combination[][][][][][][] { combinationArray28, combinationArray29 };
        com.thealgorithms.backtracking.Combination[][][][][][] combinationArray31 = new com.thealgorithms.backtracking.Combination[][][][][][] {};
        com.thealgorithms.backtracking.Combination[][][][][][] combinationArray32 = new com.thealgorithms.backtracking.Combination[][][][][][] {};
        com.thealgorithms.backtracking.Combination[][][][][][][] combinationArray33 = new com.thealgorithms.backtracking.Combination[][][][][][][] { combinationArray31, combinationArray32 };
        com.thealgorithms.backtracking.Combination[][][][][][] combinationArray34 = new com.thealgorithms.backtracking.Combination[][][][][][] {};
        com.thealgorithms.backtracking.Combination[][][][][][] combinationArray35 = new com.thealgorithms.backtracking.Combination[][][][][][] {};
        com.thealgorithms.backtracking.Combination[][][][][][][] combinationArray36 = new com.thealgorithms.backtracking.Combination[][][][][][][] { combinationArray34, combinationArray35 };
        com.thealgorithms.backtracking.Combination[][][][][][][][] combinationArray37 = new com.thealgorithms.backtracking.Combination[][][][][][][][] { combinationArray21, combinationArray24, combinationArray27, combinationArray30, combinationArray33, combinationArray36 };
        com.thealgorithms.backtracking.Combination[][][][][][][][][] combinationArray38 = new com.thealgorithms.backtracking.Combination[][][][][][][][][] { combinationArray18, combinationArray37 };
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.TreeSet<com.thealgorithms.backtracking.Combination[][][][][][][][]>> combinationArraySetList40 = com.thealgorithms.backtracking.Combination.combination(combinationArray38, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(combinationArray0);
        org.junit.Assert.assertNotNull(combinationArray1);
        org.junit.Assert.assertNotNull(combinationArray2);
        org.junit.Assert.assertNotNull(combinationArray3);
        org.junit.Assert.assertNotNull(combinationArray4);
        org.junit.Assert.assertNotNull(combinationArray5);
        org.junit.Assert.assertNotNull(combinationArray6);
        org.junit.Assert.assertNotNull(combinationArray7);
        org.junit.Assert.assertNotNull(combinationArray8);
        org.junit.Assert.assertNotNull(combinationArray9);
        org.junit.Assert.assertNotNull(combinationArray10);
        org.junit.Assert.assertNotNull(combinationArray11);
        org.junit.Assert.assertNotNull(combinationArray12);
        org.junit.Assert.assertNotNull(combinationArray13);
        org.junit.Assert.assertNotNull(combinationArray14);
        org.junit.Assert.assertNotNull(combinationArray15);
        org.junit.Assert.assertNotNull(combinationArray16);
        org.junit.Assert.assertNotNull(combinationArray17);
        org.junit.Assert.assertNotNull(combinationArray18);
        org.junit.Assert.assertNotNull(combinationArray19);
        org.junit.Assert.assertNotNull(combinationArray20);
        org.junit.Assert.assertNotNull(combinationArray21);
        org.junit.Assert.assertNotNull(combinationArray22);
        org.junit.Assert.assertNotNull(combinationArray23);
        org.junit.Assert.assertNotNull(combinationArray24);
        org.junit.Assert.assertNotNull(combinationArray25);
        org.junit.Assert.assertNotNull(combinationArray26);
        org.junit.Assert.assertNotNull(combinationArray27);
        org.junit.Assert.assertNotNull(combinationArray28);
        org.junit.Assert.assertNotNull(combinationArray29);
        org.junit.Assert.assertNotNull(combinationArray30);
        org.junit.Assert.assertNotNull(combinationArray31);
        org.junit.Assert.assertNotNull(combinationArray32);
        org.junit.Assert.assertNotNull(combinationArray33);
        org.junit.Assert.assertNotNull(combinationArray34);
        org.junit.Assert.assertNotNull(combinationArray35);
        org.junit.Assert.assertNotNull(combinationArray36);
        org.junit.Assert.assertNotNull(combinationArray37);
        org.junit.Assert.assertNotNull(combinationArray38);
    }

    @Test
    public void test1175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1175");
        com.thealgorithms.backtracking.Combination[][][][][] combinationArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.TreeSet<com.thealgorithms.backtracking.Combination[][][][]>> combinationArraySetList2 = com.thealgorithms.backtracking.Combination.combination(combinationArray0, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1176");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "", "", "", "" };
        java.util.List<java.util.TreeSet<java.lang.Comparable<java.lang.String>>> strComparableSetList8 = com.thealgorithms.backtracking.Combination.combination((java.lang.Comparable<java.lang.String>[]) strArray6, (int) (byte) 1);
        java.util.List<java.util.TreeSet<java.io.Serializable>> serializableSetList10 = com.thealgorithms.backtracking.Combination.combination((java.io.Serializable[]) strArray6, (int) '4');
        java.util.List<java.util.TreeSet<java.lang.String>> strSetList12 = com.thealgorithms.backtracking.Combination.combination(strArray6, 1);
        java.lang.String[] strArray19 = new java.lang.String[] { "", "", "", "", "", "" };
        java.util.List<java.util.TreeSet<java.lang.Comparable<java.lang.String>>> strComparableSetList21 = com.thealgorithms.backtracking.Combination.combination((java.lang.Comparable<java.lang.String>[]) strArray19, (int) (byte) 1);
        java.util.List<java.util.TreeSet<java.io.Serializable>> serializableSetList23 = com.thealgorithms.backtracking.Combination.combination((java.io.Serializable[]) strArray19, (int) '4');
        java.util.List<java.util.TreeSet<java.lang.String>> strSetList25 = com.thealgorithms.backtracking.Combination.combination(strArray19, 1);
        java.util.Collection[] collectionArray27 = new java.util.Collection[2];
        @SuppressWarnings("unchecked")
        java.util.Collection<java.util.TreeSet<java.lang.String>>[] strSetCollectionArray28 = (java.util.Collection<java.util.TreeSet<java.lang.String>>[]) collectionArray27;
        strSetCollectionArray28[0] = strSetList12;
        strSetCollectionArray28[1] = strSetList25;
        java.util.List<java.util.TreeSet<java.util.Collection<java.util.TreeSet<java.lang.String>>>> setCollectionSetList34 = com.thealgorithms.backtracking.Combination.combination(strSetCollectionArray28, 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.TreeSet<java.lang.Iterable<java.util.TreeSet<java.lang.String>>>> setIterableSetList36 = com.thealgorithms.backtracking.Combination.combination((java.lang.Iterable<java.util.TreeSet<java.lang.String>>[]) strSetCollectionArray28, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strComparableSetList8);
        org.junit.Assert.assertNotNull(serializableSetList10);
        org.junit.Assert.assertNotNull(strSetList12);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strComparableSetList21);
        org.junit.Assert.assertNotNull(serializableSetList23);
        org.junit.Assert.assertNotNull(strSetList25);
        org.junit.Assert.assertNotNull(collectionArray27);
        org.junit.Assert.assertNotNull(strSetCollectionArray28);
        org.junit.Assert.assertNull(setCollectionSetList34);
    }

    @Test
    public void test1177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1177");
        java.lang.Class[][][][][] classArray1 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][][]>> wildcardClassArraySetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (short) 10);
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][][]>> wildcardClassArraySetList6 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (byte) 10);
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][][]>> wildcardClassArraySetList8 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (short) 0);
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][][]>> wildcardClassArraySetList10 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, 5);
        java.lang.Class<?> wildcardClass11 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList4);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList6);
        org.junit.Assert.assertNull(wildcardClassArraySetList8);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1178");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "", "", "", "" };
        java.util.List<java.util.TreeSet<java.lang.Comparable<java.lang.String>>> strComparableSetList8 = com.thealgorithms.backtracking.Combination.combination((java.lang.Comparable<java.lang.String>[]) strArray6, (int) (byte) 1);
        java.util.List<java.util.TreeSet<java.io.Serializable>> serializableSetList10 = com.thealgorithms.backtracking.Combination.combination((java.io.Serializable[]) strArray6, (int) '4');
        java.util.List<java.util.TreeSet<java.lang.Object>> objSetList12 = com.thealgorithms.backtracking.Combination.combination((java.lang.Object[]) strArray6, (int) '#');
        java.util.List<java.util.TreeSet<java.lang.Comparable<java.lang.String>>> strComparableSetList14 = com.thealgorithms.backtracking.Combination.combination((java.lang.Comparable<java.lang.String>[]) strArray6, 100);
        java.util.List<java.util.TreeSet<java.lang.CharSequence>> charSequenceSetList16 = com.thealgorithms.backtracking.Combination.combination((java.lang.CharSequence[]) strArray6, 1);
        java.lang.Class<?> wildcardClass17 = charSequenceSetList16.getClass();
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strComparableSetList8);
        org.junit.Assert.assertNotNull(serializableSetList10);
        org.junit.Assert.assertNotNull(objSetList12);
        org.junit.Assert.assertNotNull(strComparableSetList14);
        org.junit.Assert.assertNotNull(charSequenceSetList16);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test1179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1179");
        java.lang.Class[][][][] classArray1 = new java.lang.Class[0][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][]>> wildcardClassArraySetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (byte) 100);
        java.util.List<java.util.TreeSet<java.lang.reflect.Type[][][]>> typeArraySetList6 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.Type[][][][]) wildcardClassArray2, 3);
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][]>> wildcardClassArraySetList8 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (-1));
        java.util.List<java.util.TreeSet<java.lang.reflect.Type[][][]>> typeArraySetList10 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.Type[][][][]) wildcardClassArray2, (int) (byte) 10);
        java.lang.Class<?> wildcardClass11 = typeArraySetList10.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList4);
        org.junit.Assert.assertNotNull(typeArraySetList6);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList8);
        org.junit.Assert.assertNotNull(typeArraySetList10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1180");
        java.util.List[][] listArray1 = new java.util.List[0][];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[][] strSetListArray2 = (java.util.List<java.util.TreeSet<java.lang.String>>[][]) listArray1;
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[]>> listArraySetList4 = com.thealgorithms.backtracking.Combination.combination(strSetListArray2, (int) (short) -1);
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[]>> listArraySetList6 = com.thealgorithms.backtracking.Combination.combination(strSetListArray2, 6);
        java.lang.Class<?> wildcardClass7 = strSetListArray2.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strSetListArray2);
        org.junit.Assert.assertNotNull(listArraySetList4);
        org.junit.Assert.assertNotNull(listArraySetList6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test1181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1181");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.util.TreeSet<java.lang.String>> strSetList4 = com.thealgorithms.backtracking.Combination.combination(strArray2, (int) '#');
        java.util.List<java.util.TreeSet<java.lang.constant.ConstantDesc>> constantDescSetList6 = com.thealgorithms.backtracking.Combination.combination((java.lang.constant.ConstantDesc[]) strArray2, (int) (short) 0);
        java.util.List<java.util.TreeSet<java.lang.String>> strSetList8 = com.thealgorithms.backtracking.Combination.combination(strArray2, (int) (byte) 100);
        java.lang.Class<?> wildcardClass9 = strSetList8.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strSetList4);
        org.junit.Assert.assertNull(constantDescSetList6);
        org.junit.Assert.assertNotNull(strSetList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1182");
        java.util.List[] listArray1 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[] strSetListArray2 = (java.util.List<java.util.TreeSet<java.lang.String>>[]) listArray1;
        java.util.List[] listArray4 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[] strSetListArray5 = (java.util.List<java.util.TreeSet<java.lang.String>>[]) listArray4;
        java.util.List[][] listArray7 = new java.util.List[2][];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[][] strSetListArray8 = (java.util.List<java.util.TreeSet<java.lang.String>>[][]) listArray7;
        strSetListArray8[0] = strSetListArray2;
        strSetListArray8[1] = strSetListArray5;
        java.util.List[][][] listArray14 = new java.util.List[1][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[][][] strSetListArray15 = (java.util.List<java.util.TreeSet<java.lang.String>>[][][]) listArray14;
        strSetListArray15[0] = strSetListArray8;
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[][]>> listArraySetList19 = com.thealgorithms.backtracking.Combination.combination(strSetListArray15, (int) (short) 10);
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[][]>> listArraySetList21 = com.thealgorithms.backtracking.Combination.combination(strSetListArray15, (int) '#');
        java.util.List<java.util.TreeSet<java.util.Collection[][]>> collectionArraySetList23 = com.thealgorithms.backtracking.Combination.combination((java.util.Collection[][][]) strSetListArray15, 0);
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[][]>> listArraySetList25 = com.thealgorithms.backtracking.Combination.combination(strSetListArray15, (int) '4');
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strSetListArray2);
        org.junit.Assert.assertNotNull(listArray4);
        org.junit.Assert.assertNotNull(strSetListArray5);
        org.junit.Assert.assertNotNull(listArray7);
        org.junit.Assert.assertNotNull(strSetListArray8);
        org.junit.Assert.assertNotNull(listArray14);
        org.junit.Assert.assertNotNull(strSetListArray15);
        org.junit.Assert.assertNotNull(listArraySetList19);
        org.junit.Assert.assertNotNull(listArraySetList21);
        org.junit.Assert.assertNull(collectionArraySetList23);
        org.junit.Assert.assertNotNull(listArraySetList25);
    }

    @Test
    public void test1183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1183");
        java.util.List[][] listArray1 = new java.util.List[0][];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[][] strSetListArray2 = (java.util.List<java.util.TreeSet<java.lang.String>>[][]) listArray1;
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[]>> listArraySetList4 = com.thealgorithms.backtracking.Combination.combination(strSetListArray2, (int) (short) -1);
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[]>> listArraySetList6 = com.thealgorithms.backtracking.Combination.combination(strSetListArray2, (-1));
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[]>> listArraySetList8 = com.thealgorithms.backtracking.Combination.combination(strSetListArray2, (int) 'a');
        java.util.List<java.util.TreeSet<java.lang.Iterable<java.util.TreeSet<java.lang.String>>[]>> iterableArraySetList10 = com.thealgorithms.backtracking.Combination.combination((java.lang.Iterable<java.util.TreeSet<java.lang.String>>[][]) strSetListArray2, (-1));
        java.util.List<java.util.TreeSet<java.util.Collection[]>> collectionArraySetList12 = com.thealgorithms.backtracking.Combination.combination((java.util.Collection[][]) strSetListArray2, (int) (byte) -1);
        java.util.List<java.util.TreeSet<java.lang.Iterable<java.util.TreeSet<java.lang.String>>[]>> iterableArraySetList14 = com.thealgorithms.backtracking.Combination.combination((java.lang.Iterable<java.util.TreeSet<java.lang.String>>[][]) strSetListArray2, (int) (byte) -1);
        java.lang.Class<?> wildcardClass15 = iterableArraySetList14.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strSetListArray2);
        org.junit.Assert.assertNotNull(listArraySetList4);
        org.junit.Assert.assertNotNull(listArraySetList6);
        org.junit.Assert.assertNotNull(listArraySetList8);
        org.junit.Assert.assertNotNull(iterableArraySetList10);
        org.junit.Assert.assertNotNull(collectionArraySetList12);
        org.junit.Assert.assertNotNull(iterableArraySetList14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test1184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1184");
        java.lang.reflect.Type[] typeArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.TreeSet<java.lang.reflect.Type>> typeSetList2 = com.thealgorithms.backtracking.Combination.combination(typeArray0, 4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1185");
        java.lang.Class[][] classArray1 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray2 = (java.lang.Class<?>[][]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>[]>> wildcardClassArraySetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (byte) 1);
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration[]>> genericDeclarationArraySetList6 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray2, (int) (byte) -1);
        java.util.List<java.util.TreeSet<java.lang.constant.Constable[]>> constableArraySetList8 = com.thealgorithms.backtracking.Combination.combination((java.lang.constant.Constable[][]) wildcardClassArray2, (int) ' ');
        java.util.List<java.util.TreeSet<java.lang.reflect.Type[]>> typeArraySetList10 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.Type[][]) wildcardClassArray2, (int) (short) -1);
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration[]>> genericDeclarationArraySetList12 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray2, (-1));
        java.lang.Class<?> wildcardClass13 = genericDeclarationArraySetList12.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList4);
        org.junit.Assert.assertNotNull(genericDeclarationArraySetList6);
        org.junit.Assert.assertNotNull(constableArraySetList8);
        org.junit.Assert.assertNotNull(typeArraySetList10);
        org.junit.Assert.assertNotNull(genericDeclarationArraySetList12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1186");
        com.thealgorithms.backtracking.Combination combination0 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination1 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination2 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination3 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination4 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination[] combinationArray5 = new com.thealgorithms.backtracking.Combination[] { combination0, combination1, combination2, combination3, combination4 };
        java.util.List<java.util.TreeSet<com.thealgorithms.backtracking.Combination>> combinationSetList7 = com.thealgorithms.backtracking.Combination.combination(combinationArray5, 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.TreeSet<com.thealgorithms.backtracking.Combination>> combinationSetList9 = com.thealgorithms.backtracking.Combination.combination(combinationArray5, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(combinationArray5);
        org.junit.Assert.assertNull(combinationSetList7);
    }

    @Test
    public void test1187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1187");
        java.lang.Class[][][][] classArray1 = new java.lang.Class[0][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][]>> wildcardClassArraySetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (byte) 100);
        java.util.List<java.util.TreeSet<java.lang.reflect.Type[][][]>> typeArraySetList6 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.Type[][][][]) wildcardClassArray2, 3);
        java.util.List<java.util.TreeSet<java.lang.reflect.Type[][][]>> typeArraySetList8 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.Type[][][][]) wildcardClassArray2, 100);
        java.util.List<java.util.TreeSet<java.lang.reflect.Type[][][]>> typeArraySetList10 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.Type[][][][]) wildcardClassArray2, (int) 'a');
        java.util.List<java.util.TreeSet<java.lang.reflect.Type[][][]>> typeArraySetList12 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.Type[][][][]) wildcardClassArray2, (-1));
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration[][][]>> genericDeclarationArraySetList14 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[][][][]) wildcardClassArray2, (int) (byte) -1);
        java.lang.Class<?> wildcardClass15 = genericDeclarationArraySetList14.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList4);
        org.junit.Assert.assertNotNull(typeArraySetList6);
        org.junit.Assert.assertNotNull(typeArraySetList8);
        org.junit.Assert.assertNotNull(typeArraySetList10);
        org.junit.Assert.assertNotNull(typeArraySetList12);
        org.junit.Assert.assertNotNull(genericDeclarationArraySetList14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test1188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1188");
        java.lang.Class[][][][][] classArray1 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][][]>> wildcardClassArraySetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (short) 10);
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][][]>> wildcardClassArraySetList6 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (byte) 10);
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][][]>> wildcardClassArraySetList8 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (-1));
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration[][][][]>> genericDeclarationArraySetList10 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[][][][][]) wildcardClassArray2, 0);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass11 = genericDeclarationArraySetList10.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList4);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList6);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList8);
        org.junit.Assert.assertNull(genericDeclarationArraySetList10);
    }

    @Test
    public void test1189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1189");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>>> wildcardClassSetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (byte) 0);
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration>> genericDeclarationSetList6 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2, (int) (byte) 1);
        java.util.List<java.util.TreeSet<java.lang.invoke.TypeDescriptor>> typeDescriptorSetList8 = com.thealgorithms.backtracking.Combination.combination((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2, (int) ' ');
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration>> genericDeclarationSetList10 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2, (int) '#');
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration>> genericDeclarationSetList12 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2, (int) (short) 1);
        java.util.List<java.util.TreeSet<java.lang.reflect.Type>> typeSetList14 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.Type[]) wildcardClassArray2, 0);
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration>> genericDeclarationSetList16 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2, (int) '4');
        java.lang.Class<?> wildcardClass17 = genericDeclarationSetList16.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNull(wildcardClassSetList4);
        org.junit.Assert.assertNotNull(genericDeclarationSetList6);
        org.junit.Assert.assertNotNull(typeDescriptorSetList8);
        org.junit.Assert.assertNotNull(genericDeclarationSetList10);
        org.junit.Assert.assertNotNull(genericDeclarationSetList12);
        org.junit.Assert.assertNull(typeSetList14);
        org.junit.Assert.assertNotNull(genericDeclarationSetList16);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test1190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1190");
        java.util.List[][] listArray1 = new java.util.List[0][];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[][] strSetListArray2 = (java.util.List<java.util.TreeSet<java.lang.String>>[][]) listArray1;
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[]>> listArraySetList4 = com.thealgorithms.backtracking.Combination.combination(strSetListArray2, (int) (short) -1);
        java.util.List<java.util.TreeSet<java.lang.Iterable<java.util.TreeSet<java.lang.String>>[]>> iterableArraySetList6 = com.thealgorithms.backtracking.Combination.combination((java.lang.Iterable<java.util.TreeSet<java.lang.String>>[][]) strSetListArray2, 2);
        java.util.List<java.util.TreeSet<java.util.Collection[]>> collectionArraySetList8 = com.thealgorithms.backtracking.Combination.combination((java.util.Collection[][]) strSetListArray2, (-1));
        java.util.List<java.util.TreeSet<java.lang.Iterable<java.util.TreeSet<java.lang.String>>[]>> iterableArraySetList10 = com.thealgorithms.backtracking.Combination.combination((java.lang.Iterable<java.util.TreeSet<java.lang.String>>[][]) strSetListArray2, (int) (byte) 100);
        java.util.List<java.util.TreeSet<java.util.Collection[]>> collectionArraySetList12 = com.thealgorithms.backtracking.Combination.combination((java.util.Collection[][]) strSetListArray2, 1);
        java.lang.Class<?> wildcardClass13 = strSetListArray2.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strSetListArray2);
        org.junit.Assert.assertNotNull(listArraySetList4);
        org.junit.Assert.assertNotNull(iterableArraySetList6);
        org.junit.Assert.assertNotNull(collectionArraySetList8);
        org.junit.Assert.assertNotNull(iterableArraySetList10);
        org.junit.Assert.assertNotNull(collectionArraySetList12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1191");
        java.lang.Class[][] classArray1 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray2 = (java.lang.Class<?>[][]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>[]>> wildcardClassArraySetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (byte) 1);
        java.util.List<java.util.TreeSet<java.lang.Class<?>[]>> wildcardClassArraySetList6 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, 0);
        java.util.List<java.util.TreeSet<java.lang.reflect.Type[]>> typeArraySetList8 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.Type[][]) wildcardClassArray2, 5);
        java.util.List<java.util.TreeSet<java.lang.reflect.Type[]>> typeArraySetList10 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.Type[][]) wildcardClassArray2, (int) (short) 0);
        java.util.List<java.util.TreeSet<java.lang.Class<?>[]>> wildcardClassArraySetList12 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, 3);
        java.util.List<java.util.TreeSet<java.lang.constant.Constable[]>> constableArraySetList14 = com.thealgorithms.backtracking.Combination.combination((java.lang.constant.Constable[][]) wildcardClassArray2, (int) (byte) 1);
        java.util.List<java.util.TreeSet<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]>> ofFieldArraySetList16 = com.thealgorithms.backtracking.Combination.combination((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]) wildcardClassArray2, (int) (byte) 1);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList4);
        org.junit.Assert.assertNull(wildcardClassArraySetList6);
        org.junit.Assert.assertNotNull(typeArraySetList8);
        org.junit.Assert.assertNull(typeArraySetList10);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList12);
        org.junit.Assert.assertNotNull(constableArraySetList14);
        org.junit.Assert.assertNotNull(ofFieldArraySetList16);
    }

    @Test
    public void test1192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1192");
        com.thealgorithms.backtracking.Combination combination0 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination1 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination2 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination3 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination4 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination5 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination[] combinationArray6 = new com.thealgorithms.backtracking.Combination[] { combination0, combination1, combination2, combination3, combination4, combination5 };
        com.thealgorithms.backtracking.Combination combination7 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination8 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination9 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination10 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination11 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination12 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination[] combinationArray13 = new com.thealgorithms.backtracking.Combination[] { combination7, combination8, combination9, combination10, combination11, combination12 };
        com.thealgorithms.backtracking.Combination[][] combinationArray14 = new com.thealgorithms.backtracking.Combination[][] { combinationArray6, combinationArray13 };
        com.thealgorithms.backtracking.Combination combination15 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination16 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination17 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination18 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination19 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination20 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination[] combinationArray21 = new com.thealgorithms.backtracking.Combination[] { combination15, combination16, combination17, combination18, combination19, combination20 };
        com.thealgorithms.backtracking.Combination combination22 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination23 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination24 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination25 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination26 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination27 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination[] combinationArray28 = new com.thealgorithms.backtracking.Combination[] { combination22, combination23, combination24, combination25, combination26, combination27 };
        com.thealgorithms.backtracking.Combination[][] combinationArray29 = new com.thealgorithms.backtracking.Combination[][] { combinationArray21, combinationArray28 };
        com.thealgorithms.backtracking.Combination combination30 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination31 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination32 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination33 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination34 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination35 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination[] combinationArray36 = new com.thealgorithms.backtracking.Combination[] { combination30, combination31, combination32, combination33, combination34, combination35 };
        com.thealgorithms.backtracking.Combination combination37 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination38 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination39 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination40 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination41 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination42 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination[] combinationArray43 = new com.thealgorithms.backtracking.Combination[] { combination37, combination38, combination39, combination40, combination41, combination42 };
        com.thealgorithms.backtracking.Combination[][] combinationArray44 = new com.thealgorithms.backtracking.Combination[][] { combinationArray36, combinationArray43 };
        com.thealgorithms.backtracking.Combination combination45 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination46 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination47 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination48 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination49 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination50 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination[] combinationArray51 = new com.thealgorithms.backtracking.Combination[] { combination45, combination46, combination47, combination48, combination49, combination50 };
        com.thealgorithms.backtracking.Combination combination52 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination53 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination54 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination55 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination56 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination57 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination[] combinationArray58 = new com.thealgorithms.backtracking.Combination[] { combination52, combination53, combination54, combination55, combination56, combination57 };
        com.thealgorithms.backtracking.Combination[][] combinationArray59 = new com.thealgorithms.backtracking.Combination[][] { combinationArray51, combinationArray58 };
        com.thealgorithms.backtracking.Combination combination60 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination61 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination62 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination63 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination64 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination65 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination[] combinationArray66 = new com.thealgorithms.backtracking.Combination[] { combination60, combination61, combination62, combination63, combination64, combination65 };
        com.thealgorithms.backtracking.Combination combination67 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination68 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination69 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination70 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination71 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination72 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination[] combinationArray73 = new com.thealgorithms.backtracking.Combination[] { combination67, combination68, combination69, combination70, combination71, combination72 };
        com.thealgorithms.backtracking.Combination[][] combinationArray74 = new com.thealgorithms.backtracking.Combination[][] { combinationArray66, combinationArray73 };
        com.thealgorithms.backtracking.Combination[][][] combinationArray75 = new com.thealgorithms.backtracking.Combination[][][] { combinationArray14, combinationArray29, combinationArray44, combinationArray59, combinationArray74 };
        com.thealgorithms.backtracking.Combination[][][][] combinationArray76 = new com.thealgorithms.backtracking.Combination[][][][] { combinationArray75 };
        java.util.List<java.util.TreeSet<com.thealgorithms.backtracking.Combination[][][]>> combinationArraySetList78 = com.thealgorithms.backtracking.Combination.combination(combinationArray76, 2);
        java.util.List<java.util.TreeSet<com.thealgorithms.backtracking.Combination[][][]>> combinationArraySetList80 = com.thealgorithms.backtracking.Combination.combination(combinationArray76, 0);
        org.junit.Assert.assertNotNull(combinationArray6);
        org.junit.Assert.assertNotNull(combinationArray13);
        org.junit.Assert.assertNotNull(combinationArray14);
        org.junit.Assert.assertNotNull(combinationArray21);
        org.junit.Assert.assertNotNull(combinationArray28);
        org.junit.Assert.assertNotNull(combinationArray29);
        org.junit.Assert.assertNotNull(combinationArray36);
        org.junit.Assert.assertNotNull(combinationArray43);
        org.junit.Assert.assertNotNull(combinationArray44);
        org.junit.Assert.assertNotNull(combinationArray51);
        org.junit.Assert.assertNotNull(combinationArray58);
        org.junit.Assert.assertNotNull(combinationArray59);
        org.junit.Assert.assertNotNull(combinationArray66);
        org.junit.Assert.assertNotNull(combinationArray73);
        org.junit.Assert.assertNotNull(combinationArray74);
        org.junit.Assert.assertNotNull(combinationArray75);
        org.junit.Assert.assertNotNull(combinationArray76);
        org.junit.Assert.assertNotNull(combinationArraySetList78);
        org.junit.Assert.assertNull(combinationArraySetList80);
    }

    @Test
    public void test1193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1193");
        java.lang.Class[][][][][][][] classArray1 = new java.lang.Class[0][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][][][][]>> wildcardClassArraySetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, 1);
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][][][][]>> wildcardClassArraySetList6 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, 1);
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][][][][]>> wildcardClassArraySetList8 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (short) 10);
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][][][][]>> wildcardClassArraySetList10 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) 'a');
        java.lang.Class<?> wildcardClass11 = wildcardClassArraySetList10.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList4);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList6);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList8);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1194");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.util.TreeSet<java.lang.String>> strSetList4 = com.thealgorithms.backtracking.Combination.combination(strArray2, (int) '#');
        java.util.List<java.util.TreeSet<java.lang.CharSequence>> charSequenceSetList6 = com.thealgorithms.backtracking.Combination.combination((java.lang.CharSequence[]) strArray2, 10);
        java.util.List<java.util.TreeSet<java.lang.constant.Constable>> constableSetList8 = com.thealgorithms.backtracking.Combination.combination((java.lang.constant.Constable[]) strArray2, (int) (byte) 1);
        java.lang.Class<?> wildcardClass9 = strArray2.getClass();
        java.lang.reflect.GenericDeclaration[] genericDeclarationArray10 = new java.lang.reflect.GenericDeclaration[] { wildcardClass9 };
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration>> genericDeclarationSetList12 = com.thealgorithms.backtracking.Combination.combination(genericDeclarationArray10, 0);
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration>> genericDeclarationSetList14 = com.thealgorithms.backtracking.Combination.combination(genericDeclarationArray10, (int) (short) 0);
        java.util.List<java.util.TreeSet<java.lang.reflect.AnnotatedElement>> annotatedElementSetList16 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.AnnotatedElement[]) genericDeclarationArray10, 0);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass17 = annotatedElementSetList16.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strSetList4);
        org.junit.Assert.assertNotNull(charSequenceSetList6);
        org.junit.Assert.assertNotNull(constableSetList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(genericDeclarationArray10);
        org.junit.Assert.assertNull(genericDeclarationSetList12);
        org.junit.Assert.assertNull(genericDeclarationSetList14);
        org.junit.Assert.assertNull(annotatedElementSetList16);
    }

    @Test
    public void test1195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1195");
        java.lang.Class[][][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][][]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][][][][][][]>> wildcardClassArraySetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, 2);
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][][][][][][]>> wildcardClassArraySetList6 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, 2);
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][][][][][][]>> wildcardClassArraySetList8 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, 1);
        java.lang.Class<?> wildcardClass9 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList4);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList6);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1196");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>>> wildcardClassSetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (byte) 0);
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration>> genericDeclarationSetList6 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2, (int) (byte) 1);
        java.util.List<java.util.TreeSet<java.lang.invoke.TypeDescriptor>> typeDescriptorSetList8 = com.thealgorithms.backtracking.Combination.combination((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2, (int) ' ');
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration>> genericDeclarationSetList10 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2, 0);
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration>> genericDeclarationSetList12 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2, (int) ' ');
        java.util.List<java.util.TreeSet<java.lang.invoke.TypeDescriptor>> typeDescriptorSetList14 = com.thealgorithms.backtracking.Combination.combination((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2, (int) ' ');
        java.util.List<java.util.TreeSet<java.lang.reflect.Type>> typeSetList16 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.Type[]) wildcardClassArray2, (int) (byte) 100);
        java.util.List<java.util.TreeSet<java.lang.invoke.TypeDescriptor>> typeDescriptorSetList18 = com.thealgorithms.backtracking.Combination.combination((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2, (int) (byte) -1);
        java.lang.Class<?> wildcardClass19 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNull(wildcardClassSetList4);
        org.junit.Assert.assertNotNull(genericDeclarationSetList6);
        org.junit.Assert.assertNotNull(typeDescriptorSetList8);
        org.junit.Assert.assertNull(genericDeclarationSetList10);
        org.junit.Assert.assertNotNull(genericDeclarationSetList12);
        org.junit.Assert.assertNotNull(typeDescriptorSetList14);
        org.junit.Assert.assertNotNull(typeSetList16);
        org.junit.Assert.assertNotNull(typeDescriptorSetList18);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test1197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1197");
        java.util.List[] listArray1 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[] strSetListArray2 = (java.util.List<java.util.TreeSet<java.lang.String>>[]) listArray1;
        java.util.List[] listArray4 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[] strSetListArray5 = (java.util.List<java.util.TreeSet<java.lang.String>>[]) listArray4;
        java.util.List[][] listArray7 = new java.util.List[2][];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[][] strSetListArray8 = (java.util.List<java.util.TreeSet<java.lang.String>>[][]) listArray7;
        strSetListArray8[0] = strSetListArray2;
        strSetListArray8[1] = strSetListArray5;
        java.util.List[][][] listArray14 = new java.util.List[1][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[][][] strSetListArray15 = (java.util.List<java.util.TreeSet<java.lang.String>>[][][]) listArray14;
        strSetListArray15[0] = strSetListArray8;
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[][]>> listArraySetList19 = com.thealgorithms.backtracking.Combination.combination(strSetListArray15, (int) (short) 10);
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[][]>> listArraySetList21 = com.thealgorithms.backtracking.Combination.combination(strSetListArray15, (int) '#');
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[][]>> listArraySetList23 = com.thealgorithms.backtracking.Combination.combination(strSetListArray15, (int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[][]>> listArraySetList25 = com.thealgorithms.backtracking.Combination.combination(strSetListArray15, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strSetListArray2);
        org.junit.Assert.assertNotNull(listArray4);
        org.junit.Assert.assertNotNull(strSetListArray5);
        org.junit.Assert.assertNotNull(listArray7);
        org.junit.Assert.assertNotNull(strSetListArray8);
        org.junit.Assert.assertNotNull(listArray14);
        org.junit.Assert.assertNotNull(strSetListArray15);
        org.junit.Assert.assertNotNull(listArraySetList19);
        org.junit.Assert.assertNotNull(listArraySetList21);
        org.junit.Assert.assertNotNull(listArraySetList23);
    }

    @Test
    public void test1198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1198");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>>> wildcardClassSetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (byte) 0);
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration>> genericDeclarationSetList6 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2, (int) (byte) 1);
        java.util.List<java.util.TreeSet<java.lang.invoke.TypeDescriptor>> typeDescriptorSetList8 = com.thealgorithms.backtracking.Combination.combination((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2, (int) ' ');
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration>> genericDeclarationSetList10 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2, 0);
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration>> genericDeclarationSetList12 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2, 0);
        java.util.List<java.util.TreeSet<java.lang.invoke.TypeDescriptor>> typeDescriptorSetList14 = com.thealgorithms.backtracking.Combination.combination((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2, 100);
        java.util.List<java.util.TreeSet<java.lang.Class<?>>> wildcardClassSetList16 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) '#');
        java.util.List<java.util.TreeSet<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>>> wildcardClassOfFieldSetList18 = com.thealgorithms.backtracking.Combination.combination((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) wildcardClassArray2, (int) (byte) -1);
        java.util.List<java.util.TreeSet<java.lang.invoke.TypeDescriptor>> typeDescriptorSetList20 = com.thealgorithms.backtracking.Combination.combination((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2, 5);
        java.lang.Class<?> wildcardClass21 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNull(wildcardClassSetList4);
        org.junit.Assert.assertNotNull(genericDeclarationSetList6);
        org.junit.Assert.assertNotNull(typeDescriptorSetList8);
        org.junit.Assert.assertNull(genericDeclarationSetList10);
        org.junit.Assert.assertNull(genericDeclarationSetList12);
        org.junit.Assert.assertNotNull(typeDescriptorSetList14);
        org.junit.Assert.assertNotNull(wildcardClassSetList16);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldSetList18);
        org.junit.Assert.assertNotNull(typeDescriptorSetList20);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test1199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1199");
        java.lang.Class[][][][] classArray1 = new java.lang.Class[0][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][]>> wildcardClassArraySetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (byte) 100);
        java.util.List<java.util.TreeSet<java.lang.reflect.Type[][][]>> typeArraySetList6 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.Type[][][][]) wildcardClassArray2, 3);
        java.util.List<java.util.TreeSet<java.lang.reflect.Type[][][]>> typeArraySetList8 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.Type[][][][]) wildcardClassArray2, 100);
        java.util.List<java.util.TreeSet<java.lang.reflect.Type[][][]>> typeArraySetList10 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.Type[][][][]) wildcardClassArray2, (int) 'a');
        java.util.List<java.util.TreeSet<java.lang.reflect.Type[][][]>> typeArraySetList12 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.Type[][][][]) wildcardClassArray2, (-1));
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration[][][]>> genericDeclarationArraySetList14 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[][][][]) wildcardClassArray2, (int) (byte) 0);
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][]>> wildcardClassArraySetList16 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, 4);
        java.lang.Class<?> wildcardClass17 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList4);
        org.junit.Assert.assertNotNull(typeArraySetList6);
        org.junit.Assert.assertNotNull(typeArraySetList8);
        org.junit.Assert.assertNotNull(typeArraySetList10);
        org.junit.Assert.assertNotNull(typeArraySetList12);
        org.junit.Assert.assertNull(genericDeclarationArraySetList14);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList16);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test1200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1200");
        java.util.List[] listArray1 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[] strSetListArray2 = (java.util.List<java.util.TreeSet<java.lang.String>>[]) listArray1;
        java.util.List[] listArray4 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[] strSetListArray5 = (java.util.List<java.util.TreeSet<java.lang.String>>[]) listArray4;
        java.util.List[][] listArray7 = new java.util.List[2][];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[][] strSetListArray8 = (java.util.List<java.util.TreeSet<java.lang.String>>[][]) listArray7;
        strSetListArray8[0] = strSetListArray2;
        strSetListArray8[1] = strSetListArray5;
        java.util.List[][][] listArray14 = new java.util.List[1][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[][][] strSetListArray15 = (java.util.List<java.util.TreeSet<java.lang.String>>[][][]) listArray14;
        strSetListArray15[0] = strSetListArray8;
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[][]>> listArraySetList19 = com.thealgorithms.backtracking.Combination.combination(strSetListArray15, (int) (short) 10);
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[][]>> listArraySetList21 = com.thealgorithms.backtracking.Combination.combination(strSetListArray15, (int) '#');
        java.util.List<java.util.TreeSet<java.util.Collection[][]>> collectionArraySetList23 = com.thealgorithms.backtracking.Combination.combination((java.util.Collection[][][]) strSetListArray15, 0);
        java.util.List<java.util.TreeSet<java.util.Collection[][]>> collectionArraySetList25 = com.thealgorithms.backtracking.Combination.combination((java.util.Collection[][][]) strSetListArray15, (int) (byte) 100);
        java.lang.Class<?> wildcardClass26 = strSetListArray15.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strSetListArray2);
        org.junit.Assert.assertNotNull(listArray4);
        org.junit.Assert.assertNotNull(strSetListArray5);
        org.junit.Assert.assertNotNull(listArray7);
        org.junit.Assert.assertNotNull(strSetListArray8);
        org.junit.Assert.assertNotNull(listArray14);
        org.junit.Assert.assertNotNull(strSetListArray15);
        org.junit.Assert.assertNotNull(listArraySetList19);
        org.junit.Assert.assertNotNull(listArraySetList21);
        org.junit.Assert.assertNull(collectionArraySetList23);
        org.junit.Assert.assertNotNull(collectionArraySetList25);
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test1201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1201");
        java.lang.Class[][][][][] classArray1 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][][]>> wildcardClassArraySetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (short) 10);
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][][]>> wildcardClassArraySetList6 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (byte) 10);
        java.util.List<java.util.TreeSet<java.lang.Object>> objSetList8 = com.thealgorithms.backtracking.Combination.combination((java.lang.Object[]) wildcardClassArray2, 10);
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][][]>> wildcardClassArraySetList10 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (byte) 10);
        java.lang.Class<?> wildcardClass11 = wildcardClassArraySetList10.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList4);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList6);
        org.junit.Assert.assertNotNull(objSetList8);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1202");
        java.lang.Class[][][] classArray1 = new java.lang.Class[0][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray2 = (java.lang.Class<?>[][][]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][]>> wildcardClassArraySetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (byte) -1);
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration[][]>> genericDeclarationArraySetList6 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[][][]) wildcardClassArray2, (-1));
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][]>> wildcardClassArraySetList8 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, 3);
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][]>> wildcardClassArraySetList10 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (short) 100);
        java.util.List<java.util.TreeSet<java.lang.reflect.Type[][]>> typeArraySetList12 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.Type[][][]) wildcardClassArray2, 3);
        java.lang.Class<?> wildcardClass13 = typeArraySetList12.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList4);
        org.junit.Assert.assertNotNull(genericDeclarationArraySetList6);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList8);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList10);
        org.junit.Assert.assertNotNull(typeArraySetList12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1203");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>>> wildcardClassSetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (byte) 0);
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration>> genericDeclarationSetList6 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2, (int) (byte) 1);
        java.util.List<java.util.TreeSet<java.lang.invoke.TypeDescriptor>> typeDescriptorSetList8 = com.thealgorithms.backtracking.Combination.combination((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2, (int) ' ');
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration>> genericDeclarationSetList10 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2, 0);
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration>> genericDeclarationSetList12 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2, (int) ' ');
        java.lang.Class<?> wildcardClass13 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNull(wildcardClassSetList4);
        org.junit.Assert.assertNotNull(genericDeclarationSetList6);
        org.junit.Assert.assertNotNull(typeDescriptorSetList8);
        org.junit.Assert.assertNull(genericDeclarationSetList10);
        org.junit.Assert.assertNotNull(genericDeclarationSetList12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1204");
        com.thealgorithms.backtracking.Combination combination0 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination[] combinationArray1 = new com.thealgorithms.backtracking.Combination[] { combination0 };
        java.util.List<java.util.TreeSet<com.thealgorithms.backtracking.Combination>> combinationSetList3 = com.thealgorithms.backtracking.Combination.combination(combinationArray1, (int) (byte) 100);
        java.util.List<java.util.TreeSet<com.thealgorithms.backtracking.Combination>> combinationSetList5 = com.thealgorithms.backtracking.Combination.combination(combinationArray1, (int) (byte) 100);
        java.util.List<java.util.TreeSet<com.thealgorithms.backtracking.Combination>> combinationSetList7 = com.thealgorithms.backtracking.Combination.combination(combinationArray1, 2);
        java.util.List<java.util.TreeSet<com.thealgorithms.backtracking.Combination>> combinationSetList9 = com.thealgorithms.backtracking.Combination.combination(combinationArray1, 4);
        java.util.List<java.util.TreeSet<com.thealgorithms.backtracking.Combination>> combinationSetList11 = com.thealgorithms.backtracking.Combination.combination(combinationArray1, 6);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.TreeSet<com.thealgorithms.backtracking.Combination>> combinationSetList13 = com.thealgorithms.backtracking.Combination.combination(combinationArray1, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(combinationArray1);
        org.junit.Assert.assertNotNull(combinationSetList3);
        org.junit.Assert.assertNotNull(combinationSetList5);
        org.junit.Assert.assertNotNull(combinationSetList7);
        org.junit.Assert.assertNotNull(combinationSetList9);
        org.junit.Assert.assertNotNull(combinationSetList11);
    }

    @Test
    public void test1205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1205");
        java.lang.Class[][][][] classArray1 = new java.lang.Class[0][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][]>> wildcardClassArraySetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (byte) 100);
        java.util.List<java.util.TreeSet<java.lang.reflect.Type[][][]>> typeArraySetList6 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.Type[][][][]) wildcardClassArray2, 3);
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][]>> wildcardClassArraySetList8 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (short) 10);
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration[][][]>> genericDeclarationArraySetList10 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[][][][]) wildcardClassArray2, (int) '#');
        java.lang.Class<?> wildcardClass11 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList4);
        org.junit.Assert.assertNotNull(typeArraySetList6);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList8);
        org.junit.Assert.assertNotNull(genericDeclarationArraySetList10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1206");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>>> wildcardClassSetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (byte) 0);
        java.util.List<java.util.TreeSet<java.lang.invoke.TypeDescriptor>> typeDescriptorSetList6 = com.thealgorithms.backtracking.Combination.combination((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2, 0);
        java.util.List<java.util.TreeSet<java.lang.reflect.AnnotatedElement>> annotatedElementSetList8 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2, (int) (byte) -1);
        java.util.List<java.util.TreeSet<java.lang.reflect.Type>> typeSetList10 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.Type[]) wildcardClassArray2, 2);
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration>> genericDeclarationSetList12 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2, (int) (byte) 0);
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration>> genericDeclarationSetList14 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2, (int) (byte) 1);
        java.lang.Class<?> wildcardClass15 = genericDeclarationSetList14.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNull(wildcardClassSetList4);
        org.junit.Assert.assertNull(typeDescriptorSetList6);
        org.junit.Assert.assertNotNull(annotatedElementSetList8);
        org.junit.Assert.assertNotNull(typeSetList10);
        org.junit.Assert.assertNull(genericDeclarationSetList12);
        org.junit.Assert.assertNotNull(genericDeclarationSetList14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test1207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1207");
        com.thealgorithms.backtracking.Combination[][][][][][][][][][] combinationArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.TreeSet<com.thealgorithms.backtracking.Combination[][][][][][][][][]>> combinationArraySetList2 = com.thealgorithms.backtracking.Combination.combination(combinationArray0, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1208");
        java.lang.Class[][][][][] classArray1 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][][]>> wildcardClassArraySetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (short) 10);
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][][]>> wildcardClassArraySetList6 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (byte) 10);
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration[][][][]>> genericDeclarationArraySetList8 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[][][][][]) wildcardClassArray2, (int) (short) 10);
        java.lang.Class<?> wildcardClass9 = genericDeclarationArraySetList8.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList4);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList6);
        org.junit.Assert.assertNotNull(genericDeclarationArraySetList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1209");
        com.thealgorithms.backtracking.Combination[][][] combinationArray0 = new com.thealgorithms.backtracking.Combination[][][] {};
        java.util.List<java.util.TreeSet<com.thealgorithms.backtracking.Combination[][]>> combinationArraySetList2 = com.thealgorithms.backtracking.Combination.combination(combinationArray0, (int) (byte) 1);
        java.util.List<java.util.TreeSet<com.thealgorithms.backtracking.Combination[][]>> combinationArraySetList4 = com.thealgorithms.backtracking.Combination.combination(combinationArray0, (int) (short) 100);
        java.lang.Class<?> wildcardClass5 = combinationArray0.getClass();
        org.junit.Assert.assertNotNull(combinationArray0);
        org.junit.Assert.assertNotNull(combinationArraySetList2);
        org.junit.Assert.assertNotNull(combinationArraySetList4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test1210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1210");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "", "", "", "" };
        java.util.List<java.util.TreeSet<java.lang.Comparable<java.lang.String>>> strComparableSetList8 = com.thealgorithms.backtracking.Combination.combination((java.lang.Comparable<java.lang.String>[]) strArray6, (int) (byte) 1);
        java.util.List<java.util.TreeSet<java.lang.Comparable<java.lang.String>>> strComparableSetList10 = com.thealgorithms.backtracking.Combination.combination((java.lang.Comparable<java.lang.String>[]) strArray6, (int) (byte) 1);
        java.util.List<java.util.TreeSet<java.lang.Comparable<java.lang.String>>> strComparableSetList12 = com.thealgorithms.backtracking.Combination.combination((java.lang.Comparable<java.lang.String>[]) strArray6, (int) (byte) -1);
        java.util.List<java.util.TreeSet<java.lang.String>> strSetList14 = com.thealgorithms.backtracking.Combination.combination(strArray6, (int) (byte) -1);
        java.util.List<java.util.TreeSet<java.lang.CharSequence>> charSequenceSetList16 = com.thealgorithms.backtracking.Combination.combination((java.lang.CharSequence[]) strArray6, (int) (short) 10);
        java.lang.Class<?> wildcardClass17 = charSequenceSetList16.getClass();
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strComparableSetList8);
        org.junit.Assert.assertNotNull(strComparableSetList10);
        org.junit.Assert.assertNotNull(strComparableSetList12);
        org.junit.Assert.assertNotNull(strSetList14);
        org.junit.Assert.assertNotNull(charSequenceSetList16);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test1211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1211");
        java.lang.Class[][] classArray1 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray2 = (java.lang.Class<?>[][]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>[]>> wildcardClassArraySetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (byte) 1);
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration[]>> genericDeclarationArraySetList6 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray2, (int) (byte) 0);
        java.util.List<java.util.TreeSet<java.lang.Class<?>[]>> wildcardClassArraySetList8 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, 1);
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration[]>> genericDeclarationArraySetList10 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray2, (int) (byte) 0);
        java.util.List<java.util.TreeSet<java.lang.Object>> objSetList12 = com.thealgorithms.backtracking.Combination.combination((java.lang.Object[]) wildcardClassArray2, (int) 'a');
        java.util.List<java.util.TreeSet<java.lang.reflect.Type[]>> typeArraySetList14 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.Type[][]) wildcardClassArray2, (int) (short) 0);
        java.util.List<java.util.TreeSet<java.lang.constant.Constable[]>> constableArraySetList16 = com.thealgorithms.backtracking.Combination.combination((java.lang.constant.Constable[][]) wildcardClassArray2, 3);
        java.lang.Class<?> wildcardClass17 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList4);
        org.junit.Assert.assertNull(genericDeclarationArraySetList6);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList8);
        org.junit.Assert.assertNull(genericDeclarationArraySetList10);
        org.junit.Assert.assertNotNull(objSetList12);
        org.junit.Assert.assertNull(typeArraySetList14);
        org.junit.Assert.assertNotNull(constableArraySetList16);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test1212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1212");
        java.lang.Class[][] classArray1 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray2 = (java.lang.Class<?>[][]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>[]>> wildcardClassArraySetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (byte) 1);
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration[]>> genericDeclarationArraySetList6 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray2, (int) (short) -1);
        java.util.List<java.util.TreeSet<java.lang.reflect.Type[]>> typeArraySetList8 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.Type[][]) wildcardClassArray2, (int) (short) 100);
        java.util.List<java.util.TreeSet<java.lang.reflect.Type[]>> typeArraySetList10 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.Type[][]) wildcardClassArray2, 0);
        java.util.List<java.util.TreeSet<java.lang.Object>> objSetList12 = com.thealgorithms.backtracking.Combination.combination((java.lang.Object[]) wildcardClassArray2, 100);
        java.util.List<java.util.TreeSet<java.lang.reflect.Type[]>> typeArraySetList14 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.Type[][]) wildcardClassArray2, 10);
        java.lang.Class<?> wildcardClass15 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList4);
        org.junit.Assert.assertNotNull(genericDeclarationArraySetList6);
        org.junit.Assert.assertNotNull(typeArraySetList8);
        org.junit.Assert.assertNull(typeArraySetList10);
        org.junit.Assert.assertNotNull(objSetList12);
        org.junit.Assert.assertNotNull(typeArraySetList14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test1213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1213");
        java.lang.String[][] strArray0 = new java.lang.String[][] {};
        java.util.List<java.util.TreeSet<java.lang.String[]>> strArraySetList2 = com.thealgorithms.backtracking.Combination.combination(strArray0, (int) (byte) -1);
        java.util.List<java.util.TreeSet<java.io.Serializable>> serializableSetList4 = com.thealgorithms.backtracking.Combination.combination((java.io.Serializable[]) strArray0, (int) (short) 0);
        java.util.List<java.util.TreeSet<java.lang.CharSequence[]>> charSequenceArraySetList6 = com.thealgorithms.backtracking.Combination.combination((java.lang.CharSequence[][]) strArray0, (int) (short) 0);
        java.util.List<java.util.TreeSet<java.lang.constant.Constable[]>> constableArraySetList8 = com.thealgorithms.backtracking.Combination.combination((java.lang.constant.Constable[][]) strArray0, (int) (byte) 100);
        java.util.List<java.util.TreeSet<java.lang.CharSequence[]>> charSequenceArraySetList10 = com.thealgorithms.backtracking.Combination.combination((java.lang.CharSequence[][]) strArray0, (int) (short) -1);
        java.lang.Class<?> wildcardClass11 = strArray0.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArraySetList2);
        org.junit.Assert.assertNull(serializableSetList4);
        org.junit.Assert.assertNull(charSequenceArraySetList6);
        org.junit.Assert.assertNotNull(constableArraySetList8);
        org.junit.Assert.assertNotNull(charSequenceArraySetList10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1214");
        java.lang.Class[][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][][][][][]>> wildcardClassArraySetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, 2);
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][][][][][]>> wildcardClassArraySetList6 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) '4');
        java.lang.Class<?> wildcardClass7 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList4);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test1215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1215");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.util.TreeSet<java.lang.String>> strSetList4 = com.thealgorithms.backtracking.Combination.combination(strArray2, (int) '#');
        java.util.List<java.util.TreeSet<java.lang.CharSequence>> charSequenceSetList6 = com.thealgorithms.backtracking.Combination.combination((java.lang.CharSequence[]) strArray2, 10);
        java.util.List<java.util.TreeSet<java.lang.constant.Constable>> constableSetList8 = com.thealgorithms.backtracking.Combination.combination((java.lang.constant.Constable[]) strArray2, (int) (byte) 1);
        java.util.List<java.util.TreeSet<java.lang.String>> strSetList10 = com.thealgorithms.backtracking.Combination.combination(strArray2, (int) (short) 1);
        java.util.List<java.util.TreeSet<java.io.Serializable>> serializableSetList12 = com.thealgorithms.backtracking.Combination.combination((java.io.Serializable[]) strArray2, (-1));
        java.util.List<java.util.TreeSet<java.lang.constant.Constable>> constableSetList14 = com.thealgorithms.backtracking.Combination.combination((java.lang.constant.Constable[]) strArray2, (int) (short) 1);
        java.util.List<java.util.TreeSet<java.lang.constant.ConstantDesc>> constantDescSetList16 = com.thealgorithms.backtracking.Combination.combination((java.lang.constant.ConstantDesc[]) strArray2, (int) (short) 0);
        java.util.List<java.util.TreeSet<java.lang.String>> strSetList18 = com.thealgorithms.backtracking.Combination.combination(strArray2, (int) (short) 1);
        java.lang.Class<?> wildcardClass19 = strSetList18.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strSetList4);
        org.junit.Assert.assertNotNull(charSequenceSetList6);
        org.junit.Assert.assertNotNull(constableSetList8);
        org.junit.Assert.assertNotNull(strSetList10);
        org.junit.Assert.assertNotNull(serializableSetList12);
        org.junit.Assert.assertNotNull(constableSetList14);
        org.junit.Assert.assertNull(constantDescSetList16);
        org.junit.Assert.assertNotNull(strSetList18);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test1216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1216");
        java.util.List[][][][][][] listArray1 = new java.util.List[0][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[][][][][][] strSetListArray2 = (java.util.List<java.util.TreeSet<java.lang.String>>[][][][][][]) listArray1;
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[][][][][]>> listArraySetList4 = com.thealgorithms.backtracking.Combination.combination(strSetListArray2, (int) (byte) 100);
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[][][][][]>> listArraySetList6 = com.thealgorithms.backtracking.Combination.combination(strSetListArray2, (int) (short) -1);
        java.lang.Class<?> wildcardClass7 = strSetListArray2.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strSetListArray2);
        org.junit.Assert.assertNotNull(listArraySetList4);
        org.junit.Assert.assertNotNull(listArraySetList6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test1217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1217");
        java.lang.Iterable[] iterableArray1 = new java.lang.Iterable[0];
        @SuppressWarnings("unchecked")
        java.lang.Iterable<java.util.TreeSet<java.lang.String>>[] strSetIterableArray2 = (java.lang.Iterable<java.util.TreeSet<java.lang.String>>[]) iterableArray1;
        java.util.List<java.util.TreeSet<java.lang.Iterable<java.util.TreeSet<java.lang.String>>>> setIterableSetList4 = com.thealgorithms.backtracking.Combination.combination(strSetIterableArray2, 100);
        java.util.List<java.util.TreeSet<java.lang.Iterable<java.util.TreeSet<java.lang.String>>>> setIterableSetList6 = com.thealgorithms.backtracking.Combination.combination(strSetIterableArray2, (int) (short) 0);
        java.util.List<java.util.TreeSet<java.lang.Iterable<java.util.TreeSet<java.lang.String>>>> setIterableSetList8 = com.thealgorithms.backtracking.Combination.combination(strSetIterableArray2, (int) (byte) 10);
        java.util.List<java.util.TreeSet<java.lang.Iterable<java.util.TreeSet<java.lang.String>>>> setIterableSetList10 = com.thealgorithms.backtracking.Combination.combination(strSetIterableArray2, 2);
        java.util.List<java.util.TreeSet<java.lang.Iterable<java.util.TreeSet<java.lang.String>>>> setIterableSetList12 = com.thealgorithms.backtracking.Combination.combination(strSetIterableArray2, 2);
        java.lang.Class<?> wildcardClass13 = setIterableSetList12.getClass();
        org.junit.Assert.assertNotNull(iterableArray1);
        org.junit.Assert.assertNotNull(strSetIterableArray2);
        org.junit.Assert.assertNotNull(setIterableSetList4);
        org.junit.Assert.assertNull(setIterableSetList6);
        org.junit.Assert.assertNotNull(setIterableSetList8);
        org.junit.Assert.assertNotNull(setIterableSetList10);
        org.junit.Assert.assertNotNull(setIterableSetList12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1218");
        java.lang.String[][] strArray0 = new java.lang.String[][] {};
        java.util.List<java.util.TreeSet<java.lang.String[]>> strArraySetList2 = com.thealgorithms.backtracking.Combination.combination(strArray0, (int) (byte) -1);
        java.util.List<java.util.TreeSet<java.lang.String[]>> strArraySetList4 = com.thealgorithms.backtracking.Combination.combination(strArray0, (int) (short) -1);
        java.util.List<java.util.TreeSet<java.lang.CharSequence[]>> charSequenceArraySetList6 = com.thealgorithms.backtracking.Combination.combination((java.lang.CharSequence[][]) strArray0, (int) (short) 0);
        java.lang.Class<?> wildcardClass7 = strArray0.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArraySetList2);
        org.junit.Assert.assertNotNull(strArraySetList4);
        org.junit.Assert.assertNull(charSequenceArraySetList6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test1219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1219");
        java.util.List[] listArray1 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[] strSetListArray2 = (java.util.List<java.util.TreeSet<java.lang.String>>[]) listArray1;
        java.util.List[] listArray4 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[] strSetListArray5 = (java.util.List<java.util.TreeSet<java.lang.String>>[]) listArray4;
        java.util.List[][] listArray7 = new java.util.List[2][];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[][] strSetListArray8 = (java.util.List<java.util.TreeSet<java.lang.String>>[][]) listArray7;
        strSetListArray8[0] = strSetListArray2;
        strSetListArray8[1] = strSetListArray5;
        java.util.List[][][] listArray14 = new java.util.List[1][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[][][] strSetListArray15 = (java.util.List<java.util.TreeSet<java.lang.String>>[][][]) listArray14;
        strSetListArray15[0] = strSetListArray8;
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[][]>> listArraySetList19 = com.thealgorithms.backtracking.Combination.combination(strSetListArray15, (int) (short) 10);
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[][]>> listArraySetList21 = com.thealgorithms.backtracking.Combination.combination(strSetListArray15, (int) '#');
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[][]>> listArraySetList23 = com.thealgorithms.backtracking.Combination.combination(strSetListArray15, 4);
        java.util.List<java.util.TreeSet<java.util.Collection[][]>> collectionArraySetList25 = com.thealgorithms.backtracking.Combination.combination((java.util.Collection[][][]) strSetListArray15, (int) (byte) 0);
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[][]>> listArraySetList27 = com.thealgorithms.backtracking.Combination.combination(strSetListArray15, 10);
        java.util.List<java.util.TreeSet<java.util.Collection[][]>> collectionArraySetList29 = com.thealgorithms.backtracking.Combination.combination((java.util.Collection[][][]) strSetListArray15, (int) ' ');
        java.lang.Class<?> wildcardClass30 = collectionArraySetList29.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strSetListArray2);
        org.junit.Assert.assertNotNull(listArray4);
        org.junit.Assert.assertNotNull(strSetListArray5);
        org.junit.Assert.assertNotNull(listArray7);
        org.junit.Assert.assertNotNull(strSetListArray8);
        org.junit.Assert.assertNotNull(listArray14);
        org.junit.Assert.assertNotNull(strSetListArray15);
        org.junit.Assert.assertNotNull(listArraySetList19);
        org.junit.Assert.assertNotNull(listArraySetList21);
        org.junit.Assert.assertNotNull(listArraySetList23);
        org.junit.Assert.assertNull(collectionArraySetList25);
        org.junit.Assert.assertNotNull(listArraySetList27);
        org.junit.Assert.assertNotNull(collectionArraySetList29);
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test1220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1220");
        com.thealgorithms.backtracking.Combination[][][][][][][][][][] combinationArray0 = new com.thealgorithms.backtracking.Combination[][][][][][][][][][] {};
        com.thealgorithms.backtracking.Combination[][][][][][][][][][] combinationArray1 = new com.thealgorithms.backtracking.Combination[][][][][][][][][][] {};
        com.thealgorithms.backtracking.Combination[][][][][][][][][][] combinationArray2 = new com.thealgorithms.backtracking.Combination[][][][][][][][][][] {};
        com.thealgorithms.backtracking.Combination[][][][][][][][][][] combinationArray3 = new com.thealgorithms.backtracking.Combination[][][][][][][][][][] {};
        com.thealgorithms.backtracking.Combination[][][][][][][][][][][] combinationArray4 = new com.thealgorithms.backtracking.Combination[][][][][][][][][][][] { combinationArray0, combinationArray1, combinationArray2, combinationArray3 };
        java.util.List<java.util.TreeSet<com.thealgorithms.backtracking.Combination[][][][][][][][][][]>> combinationArraySetList6 = com.thealgorithms.backtracking.Combination.combination(combinationArray4, (int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.TreeSet<com.thealgorithms.backtracking.Combination[][][][][][][][][][]>> combinationArraySetList8 = com.thealgorithms.backtracking.Combination.combination(combinationArray4, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(combinationArray0);
        org.junit.Assert.assertNotNull(combinationArray1);
        org.junit.Assert.assertNotNull(combinationArray2);
        org.junit.Assert.assertNotNull(combinationArray3);
        org.junit.Assert.assertNotNull(combinationArray4);
        org.junit.Assert.assertNull(combinationArraySetList6);
    }

    @Test
    public void test1221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1221");
        com.thealgorithms.backtracking.Combination[][][][][][][][][][] combinationArray0 = new com.thealgorithms.backtracking.Combination[][][][][][][][][][] {};
        com.thealgorithms.backtracking.Combination[][][][][][][][][][] combinationArray1 = new com.thealgorithms.backtracking.Combination[][][][][][][][][][] {};
        com.thealgorithms.backtracking.Combination[][][][][][][][][][] combinationArray2 = new com.thealgorithms.backtracking.Combination[][][][][][][][][][] {};
        com.thealgorithms.backtracking.Combination[][][][][][][][][][] combinationArray3 = new com.thealgorithms.backtracking.Combination[][][][][][][][][][] {};
        com.thealgorithms.backtracking.Combination[][][][][][][][][][][] combinationArray4 = new com.thealgorithms.backtracking.Combination[][][][][][][][][][][] { combinationArray0, combinationArray1, combinationArray2, combinationArray3 };
        java.util.List<java.util.TreeSet<com.thealgorithms.backtracking.Combination[][][][][][][][][][]>> combinationArraySetList6 = com.thealgorithms.backtracking.Combination.combination(combinationArray4, (int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.TreeSet<com.thealgorithms.backtracking.Combination[][][][][][][][][][]>> combinationArraySetList8 = com.thealgorithms.backtracking.Combination.combination(combinationArray4, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(combinationArray0);
        org.junit.Assert.assertNotNull(combinationArray1);
        org.junit.Assert.assertNotNull(combinationArray2);
        org.junit.Assert.assertNotNull(combinationArray3);
        org.junit.Assert.assertNotNull(combinationArray4);
        org.junit.Assert.assertNull(combinationArraySetList6);
    }

    @Test
    public void test1222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1222");
        java.lang.Class[][][][][][][] classArray1 = new java.lang.Class[0][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][][][][]>> wildcardClassArraySetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, 1);
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][][][][]>> wildcardClassArraySetList6 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, 1);
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][][][][]>> wildcardClassArraySetList8 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (short) 10);
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][][][][]>> wildcardClassArraySetList10 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) 'a');
        java.lang.Class<?> wildcardClass11 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList4);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList6);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList8);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1223");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.util.TreeSet<java.lang.String>> strSetList4 = com.thealgorithms.backtracking.Combination.combination(strArray2, (int) '#');
        java.util.List<java.util.TreeSet<java.lang.constant.ConstantDesc>> constantDescSetList6 = com.thealgorithms.backtracking.Combination.combination((java.lang.constant.ConstantDesc[]) strArray2, 1);
        java.util.List<java.util.TreeSet<java.lang.CharSequence>> charSequenceSetList8 = com.thealgorithms.backtracking.Combination.combination((java.lang.CharSequence[]) strArray2, 0);
        java.util.List<java.util.TreeSet<java.lang.Comparable<java.lang.String>>> strComparableSetList10 = com.thealgorithms.backtracking.Combination.combination((java.lang.Comparable<java.lang.String>[]) strArray2, (int) (byte) 10);
        java.util.List<java.util.TreeSet<java.lang.Comparable<java.lang.String>>> strComparableSetList12 = com.thealgorithms.backtracking.Combination.combination((java.lang.Comparable<java.lang.String>[]) strArray2, (int) (short) -1);
        java.util.List<java.util.TreeSet<java.lang.String>> strSetList14 = com.thealgorithms.backtracking.Combination.combination(strArray2, (-1));
        java.util.List<java.util.TreeSet<java.lang.constant.ConstantDesc>> constantDescSetList16 = com.thealgorithms.backtracking.Combination.combination((java.lang.constant.ConstantDesc[]) strArray2, 6);
        java.lang.Class<?> wildcardClass17 = constantDescSetList16.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strSetList4);
        org.junit.Assert.assertNotNull(constantDescSetList6);
        org.junit.Assert.assertNull(charSequenceSetList8);
        org.junit.Assert.assertNotNull(strComparableSetList10);
        org.junit.Assert.assertNotNull(strComparableSetList12);
        org.junit.Assert.assertNotNull(strSetList14);
        org.junit.Assert.assertNotNull(constantDescSetList16);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test1224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1224");
        java.lang.Class[][][][][] classArray1 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][][]>> wildcardClassArraySetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (short) 10);
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][][]>> wildcardClassArraySetList6 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (byte) 10);
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration[][][][]>> genericDeclarationArraySetList8 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[][][][][]) wildcardClassArray2, (int) (short) 10);
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration[][][][]>> genericDeclarationArraySetList10 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[][][][][]) wildcardClassArray2, (int) (short) 10);
        java.lang.Class<?> wildcardClass11 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList4);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList6);
        org.junit.Assert.assertNotNull(genericDeclarationArraySetList8);
        org.junit.Assert.assertNotNull(genericDeclarationArraySetList10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1225");
        java.lang.Class[][] classArray1 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray2 = (java.lang.Class<?>[][]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>[]>> wildcardClassArraySetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (byte) 1);
        java.util.List<java.util.TreeSet<java.lang.reflect.Type[]>> typeArraySetList6 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.Type[][]) wildcardClassArray2, 5);
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration[]>> genericDeclarationArraySetList8 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray2, (-1));
        java.lang.Class<?> wildcardClass9 = genericDeclarationArraySetList8.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList4);
        org.junit.Assert.assertNotNull(typeArraySetList6);
        org.junit.Assert.assertNotNull(genericDeclarationArraySetList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1226");
        java.util.List[][] listArray1 = new java.util.List[0][];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[][] strSetListArray2 = (java.util.List<java.util.TreeSet<java.lang.String>>[][]) listArray1;
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[]>> listArraySetList4 = com.thealgorithms.backtracking.Combination.combination(strSetListArray2, (int) (short) -1);
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[]>> listArraySetList6 = com.thealgorithms.backtracking.Combination.combination(strSetListArray2, 6);
        java.lang.Class<?> wildcardClass7 = listArraySetList6.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strSetListArray2);
        org.junit.Assert.assertNotNull(listArraySetList4);
        org.junit.Assert.assertNotNull(listArraySetList6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test1227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1227");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.util.TreeSet<java.lang.String>> strSetList4 = com.thealgorithms.backtracking.Combination.combination(strArray2, (int) '#');
        java.util.List<java.util.TreeSet<java.lang.constant.ConstantDesc>> constantDescSetList6 = com.thealgorithms.backtracking.Combination.combination((java.lang.constant.ConstantDesc[]) strArray2, 1);
        java.util.List<java.util.TreeSet<java.lang.String>> strSetList8 = com.thealgorithms.backtracking.Combination.combination(strArray2, (int) (byte) -1);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "", "", "" };
        java.util.List<java.util.TreeSet<java.lang.Comparable<java.lang.String>>> strComparableSetList17 = com.thealgorithms.backtracking.Combination.combination((java.lang.Comparable<java.lang.String>[]) strArray15, (int) (byte) 1);
        java.util.List<java.util.TreeSet<java.io.Serializable>> serializableSetList19 = com.thealgorithms.backtracking.Combination.combination((java.io.Serializable[]) strArray15, (int) '4');
        java.util.List<java.util.TreeSet<java.lang.Object>> objSetList21 = com.thealgorithms.backtracking.Combination.combination((java.lang.Object[]) strArray15, (int) '#');
        java.util.List<java.util.TreeSet<java.lang.Comparable<java.lang.String>>> strComparableSetList23 = com.thealgorithms.backtracking.Combination.combination((java.lang.Comparable<java.lang.String>[]) strArray15, 100);
        java.util.List<java.util.TreeSet<java.lang.String>> strSetList25 = com.thealgorithms.backtracking.Combination.combination(strArray15, (int) '4');
        java.lang.String[] strArray28 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.util.TreeSet<java.lang.String>> strSetList30 = com.thealgorithms.backtracking.Combination.combination(strArray28, (int) '#');
        java.util.List<java.util.TreeSet<java.lang.CharSequence>> charSequenceSetList32 = com.thealgorithms.backtracking.Combination.combination((java.lang.CharSequence[]) strArray28, 10);
        java.util.List<java.util.TreeSet<java.lang.constant.Constable>> constableSetList34 = com.thealgorithms.backtracking.Combination.combination((java.lang.constant.Constable[]) strArray28, (int) (byte) 1);
        java.util.List<java.util.TreeSet<java.lang.String>> strSetList36 = com.thealgorithms.backtracking.Combination.combination(strArray28, (int) (short) 1);
        java.lang.String[] strArray39 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.util.TreeSet<java.lang.String>> strSetList41 = com.thealgorithms.backtracking.Combination.combination(strArray39, (int) '#');
        java.lang.String[] strArray44 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.util.TreeSet<java.lang.String>> strSetList46 = com.thealgorithms.backtracking.Combination.combination(strArray44, (int) '#');
        java.util.List[] listArray48 = new java.util.List[5];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[] strSetListArray49 = (java.util.List<java.util.TreeSet<java.lang.String>>[]) listArray48;
        strSetListArray49[0] = strSetList8;
        strSetListArray49[1] = strSetList25;
        strSetListArray49[2] = strSetList36;
        strSetListArray49[3] = strSetList41;
        strSetListArray49[4] = strSetList46;
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>>> setListSetList61 = com.thealgorithms.backtracking.Combination.combination(strSetListArray49, (int) (short) 0);
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>>> setListSetList63 = com.thealgorithms.backtracking.Combination.combination(strSetListArray49, 0);
        java.util.List<java.util.TreeSet<java.util.Collection<java.util.TreeSet<java.lang.String>>>> setCollectionSetList65 = com.thealgorithms.backtracking.Combination.combination((java.util.Collection<java.util.TreeSet<java.lang.String>>[]) strSetListArray49, 0);
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>>> setListSetList67 = com.thealgorithms.backtracking.Combination.combination(strSetListArray49, 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.TreeSet<java.util.Collection<java.util.TreeSet<java.lang.String>>>> setCollectionSetList69 = com.thealgorithms.backtracking.Combination.combination((java.util.Collection<java.util.TreeSet<java.lang.String>>[]) strSetListArray49, 4);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strSetList4);
        org.junit.Assert.assertNotNull(constantDescSetList6);
        org.junit.Assert.assertNotNull(strSetList8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strComparableSetList17);
        org.junit.Assert.assertNotNull(serializableSetList19);
        org.junit.Assert.assertNotNull(objSetList21);
        org.junit.Assert.assertNotNull(strComparableSetList23);
        org.junit.Assert.assertNotNull(strSetList25);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(strSetList30);
        org.junit.Assert.assertNotNull(charSequenceSetList32);
        org.junit.Assert.assertNotNull(constableSetList34);
        org.junit.Assert.assertNotNull(strSetList36);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(strSetList41);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(strSetList46);
        org.junit.Assert.assertNotNull(listArray48);
        org.junit.Assert.assertNotNull(strSetListArray49);
        org.junit.Assert.assertNull(setListSetList61);
        org.junit.Assert.assertNull(setListSetList63);
        org.junit.Assert.assertNull(setCollectionSetList65);
        org.junit.Assert.assertNull(setListSetList67);
    }

    @Test
    public void test1228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1228");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.util.TreeSet<java.lang.String>> strSetList4 = com.thealgorithms.backtracking.Combination.combination(strArray2, (int) '#');
        java.util.List<java.util.TreeSet<java.lang.constant.ConstantDesc>> constantDescSetList6 = com.thealgorithms.backtracking.Combination.combination((java.lang.constant.ConstantDesc[]) strArray2, 1);
        java.util.List<java.util.TreeSet<java.lang.CharSequence>> charSequenceSetList8 = com.thealgorithms.backtracking.Combination.combination((java.lang.CharSequence[]) strArray2, 0);
        java.util.List<java.util.TreeSet<java.lang.Comparable<java.lang.String>>> strComparableSetList10 = com.thealgorithms.backtracking.Combination.combination((java.lang.Comparable<java.lang.String>[]) strArray2, (int) (byte) 10);
        java.util.List<java.util.TreeSet<java.lang.constant.ConstantDesc>> constantDescSetList12 = com.thealgorithms.backtracking.Combination.combination((java.lang.constant.ConstantDesc[]) strArray2, (int) (short) 1);
        java.lang.Class<?> wildcardClass13 = constantDescSetList12.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strSetList4);
        org.junit.Assert.assertNotNull(constantDescSetList6);
        org.junit.Assert.assertNull(charSequenceSetList8);
        org.junit.Assert.assertNotNull(strComparableSetList10);
        org.junit.Assert.assertNotNull(constantDescSetList12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1229");
        java.lang.Class[][] classArray1 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray2 = (java.lang.Class<?>[][]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>[]>> wildcardClassArraySetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (byte) 1);
        java.util.List<java.util.TreeSet<java.lang.Class<?>[]>> wildcardClassArraySetList6 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, 0);
        java.util.List<java.util.TreeSet<java.lang.reflect.Type[]>> typeArraySetList8 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.Type[][]) wildcardClassArray2, 5);
        java.util.List<java.util.TreeSet<java.lang.constant.Constable[]>> constableArraySetList10 = com.thealgorithms.backtracking.Combination.combination((java.lang.constant.Constable[][]) wildcardClassArray2, (int) ' ');
        java.lang.Class<?> wildcardClass11 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList4);
        org.junit.Assert.assertNull(wildcardClassArraySetList6);
        org.junit.Assert.assertNotNull(typeArraySetList8);
        org.junit.Assert.assertNotNull(constableArraySetList10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1230");
        java.lang.reflect.GenericDeclaration[][] genericDeclarationArray0 = new java.lang.reflect.GenericDeclaration[][] {};
        java.lang.reflect.GenericDeclaration[][] genericDeclarationArray1 = new java.lang.reflect.GenericDeclaration[][] {};
        java.lang.reflect.GenericDeclaration[][] genericDeclarationArray2 = new java.lang.reflect.GenericDeclaration[][] {};
        java.lang.reflect.GenericDeclaration[][][] genericDeclarationArray3 = new java.lang.reflect.GenericDeclaration[][][] { genericDeclarationArray0, genericDeclarationArray1, genericDeclarationArray2 };
        java.lang.reflect.GenericDeclaration[][][][] genericDeclarationArray4 = new java.lang.reflect.GenericDeclaration[][][][] { genericDeclarationArray3 };
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration[][][]>> genericDeclarationArraySetList6 = com.thealgorithms.backtracking.Combination.combination(genericDeclarationArray4, (int) 'a');
        java.lang.Class<?> wildcardClass7 = genericDeclarationArraySetList6.getClass();
        org.junit.Assert.assertNotNull(genericDeclarationArray0);
        org.junit.Assert.assertNotNull(genericDeclarationArray1);
        org.junit.Assert.assertNotNull(genericDeclarationArray2);
        org.junit.Assert.assertNotNull(genericDeclarationArray3);
        org.junit.Assert.assertNotNull(genericDeclarationArray4);
        org.junit.Assert.assertNotNull(genericDeclarationArraySetList6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test1231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1231");
        java.util.List[][][][][][] listArray1 = new java.util.List[0][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[][][][][][] strSetListArray2 = (java.util.List<java.util.TreeSet<java.lang.String>>[][][][][][]) listArray1;
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[][][][][]>> listArraySetList4 = com.thealgorithms.backtracking.Combination.combination(strSetListArray2, (int) (byte) 100);
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[][][][][]>> listArraySetList6 = com.thealgorithms.backtracking.Combination.combination(strSetListArray2, (int) (short) -1);
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[][][][][]>> listArraySetList8 = com.thealgorithms.backtracking.Combination.combination(strSetListArray2, (-1));
        java.lang.Class<?> wildcardClass9 = listArraySetList8.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strSetListArray2);
        org.junit.Assert.assertNotNull(listArraySetList4);
        org.junit.Assert.assertNotNull(listArraySetList6);
        org.junit.Assert.assertNotNull(listArraySetList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1232");
        java.lang.Class[][] classArray1 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray2 = (java.lang.Class<?>[][]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>[]>> wildcardClassArraySetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (byte) 1);
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration[]>> genericDeclarationArraySetList6 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray2, (int) (byte) -1);
        java.util.List<java.util.TreeSet<java.lang.constant.Constable[]>> constableArraySetList8 = com.thealgorithms.backtracking.Combination.combination((java.lang.constant.Constable[][]) wildcardClassArray2, (int) ' ');
        java.util.List<java.util.TreeSet<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]>> ofFieldArraySetList10 = com.thealgorithms.backtracking.Combination.combination((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]) wildcardClassArray2, (int) (byte) -1);
        java.lang.Class<?> wildcardClass11 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList4);
        org.junit.Assert.assertNotNull(genericDeclarationArraySetList6);
        org.junit.Assert.assertNotNull(constableArraySetList8);
        org.junit.Assert.assertNotNull(ofFieldArraySetList10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1233");
        java.lang.Class[][][][][] classArray1 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][][]>> wildcardClassArraySetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (-1));
        java.lang.Class<?> wildcardClass5 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test1234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1234");
        com.thealgorithms.backtracking.Combination[][][] combinationArray0 = new com.thealgorithms.backtracking.Combination[][][] {};
        java.util.List<java.util.TreeSet<com.thealgorithms.backtracking.Combination[][]>> combinationArraySetList2 = com.thealgorithms.backtracking.Combination.combination(combinationArray0, (int) (byte) 1);
        java.util.List<java.util.TreeSet<com.thealgorithms.backtracking.Combination[][]>> combinationArraySetList4 = com.thealgorithms.backtracking.Combination.combination(combinationArray0, (int) (short) 100);
        java.util.List<java.util.TreeSet<com.thealgorithms.backtracking.Combination[][]>> combinationArraySetList6 = com.thealgorithms.backtracking.Combination.combination(combinationArray0, (int) (byte) 10);
        java.util.List<java.util.TreeSet<com.thealgorithms.backtracking.Combination[][]>> combinationArraySetList8 = com.thealgorithms.backtracking.Combination.combination(combinationArray0, (int) '4');
        java.lang.Class<?> wildcardClass9 = combinationArray0.getClass();
        org.junit.Assert.assertNotNull(combinationArray0);
        org.junit.Assert.assertNotNull(combinationArraySetList2);
        org.junit.Assert.assertNotNull(combinationArraySetList4);
        org.junit.Assert.assertNotNull(combinationArraySetList6);
        org.junit.Assert.assertNotNull(combinationArraySetList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1235");
        java.lang.Iterable[] iterableArray1 = new java.lang.Iterable[0];
        @SuppressWarnings("unchecked")
        java.lang.Iterable<java.util.TreeSet<java.lang.String>>[] strSetIterableArray2 = (java.lang.Iterable<java.util.TreeSet<java.lang.String>>[]) iterableArray1;
        java.util.List<java.util.TreeSet<java.lang.Iterable<java.util.TreeSet<java.lang.String>>>> setIterableSetList4 = com.thealgorithms.backtracking.Combination.combination(strSetIterableArray2, 100);
        java.util.List<java.util.TreeSet<java.lang.Iterable<java.util.TreeSet<java.lang.String>>>> setIterableSetList6 = com.thealgorithms.backtracking.Combination.combination(strSetIterableArray2, (int) (short) 0);
        java.util.List<java.util.TreeSet<java.lang.Iterable<java.util.TreeSet<java.lang.String>>>> setIterableSetList8 = com.thealgorithms.backtracking.Combination.combination(strSetIterableArray2, (int) (byte) 10);
        java.util.List<java.util.TreeSet<java.lang.Iterable<java.util.TreeSet<java.lang.String>>>> setIterableSetList10 = com.thealgorithms.backtracking.Combination.combination(strSetIterableArray2, (int) (short) 100);
        java.util.List<java.util.TreeSet<java.lang.Iterable<java.util.TreeSet<java.lang.String>>>> setIterableSetList12 = com.thealgorithms.backtracking.Combination.combination(strSetIterableArray2, (int) (short) 100);
        java.util.List<java.util.TreeSet<java.lang.Iterable<java.util.TreeSet<java.lang.String>>>> setIterableSetList14 = com.thealgorithms.backtracking.Combination.combination(strSetIterableArray2, (int) 'a');
        java.lang.Class<?> wildcardClass15 = strSetIterableArray2.getClass();
        org.junit.Assert.assertNotNull(iterableArray1);
        org.junit.Assert.assertNotNull(strSetIterableArray2);
        org.junit.Assert.assertNotNull(setIterableSetList4);
        org.junit.Assert.assertNull(setIterableSetList6);
        org.junit.Assert.assertNotNull(setIterableSetList8);
        org.junit.Assert.assertNotNull(setIterableSetList10);
        org.junit.Assert.assertNotNull(setIterableSetList12);
        org.junit.Assert.assertNotNull(setIterableSetList14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test1236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1236");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.util.TreeSet<java.lang.String>> strSetList4 = com.thealgorithms.backtracking.Combination.combination(strArray2, (int) '#');
        java.util.List<java.util.TreeSet<java.lang.CharSequence>> charSequenceSetList6 = com.thealgorithms.backtracking.Combination.combination((java.lang.CharSequence[]) strArray2, 10);
        java.util.List<java.util.TreeSet<java.lang.constant.Constable>> constableSetList8 = com.thealgorithms.backtracking.Combination.combination((java.lang.constant.Constable[]) strArray2, (int) (byte) 1);
        java.util.List<java.util.TreeSet<java.lang.CharSequence>> charSequenceSetList10 = com.thealgorithms.backtracking.Combination.combination((java.lang.CharSequence[]) strArray2, (int) '#');
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strSetList4);
        org.junit.Assert.assertNotNull(charSequenceSetList6);
        org.junit.Assert.assertNotNull(constableSetList8);
        org.junit.Assert.assertNotNull(charSequenceSetList10);
    }

    @Test
    public void test1237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1237");
        java.lang.Class[][][][][][][] classArray1 = new java.lang.Class[0][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][][][][]>> wildcardClassArraySetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, 1);
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][][][][]>> wildcardClassArraySetList6 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) 'a');
        java.lang.Class<?> wildcardClass7 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList4);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test1238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1238");
        java.lang.String[] strArray1 = new java.lang.String[] { "hi!" };
        java.lang.String[][] strArray2 = new java.lang.String[][] { strArray1 };
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!" };
        java.lang.String[][] strArray5 = new java.lang.String[][] { strArray4 };
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!" };
        java.lang.String[][] strArray8 = new java.lang.String[][] { strArray7 };
        java.lang.String[] strArray10 = new java.lang.String[] { "hi!" };
        java.lang.String[][] strArray11 = new java.lang.String[][] { strArray10 };
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!" };
        java.lang.String[][] strArray14 = new java.lang.String[][] { strArray13 };
        java.lang.String[] strArray16 = new java.lang.String[] { "hi!" };
        java.lang.String[][] strArray17 = new java.lang.String[][] { strArray16 };
        java.lang.String[][][] strArray18 = new java.lang.String[][][] { strArray2, strArray5, strArray8, strArray11, strArray14, strArray17 };
        java.lang.String[][][][] strArray19 = new java.lang.String[][][][] { strArray18 };
        java.util.List<java.util.TreeSet<java.lang.String[][][]>> strArraySetList21 = com.thealgorithms.backtracking.Combination.combination(strArray19, (int) (byte) 0);
        java.util.List<java.util.TreeSet<java.lang.String[][][]>> strArraySetList23 = com.thealgorithms.backtracking.Combination.combination(strArray19, 0);
        java.util.List<java.util.TreeSet<java.lang.String[][][]>> strArraySetList25 = com.thealgorithms.backtracking.Combination.combination(strArray19, (int) '4');
        java.util.List<java.util.TreeSet<java.lang.String[][][]>> strArraySetList27 = com.thealgorithms.backtracking.Combination.combination(strArray19, (int) (byte) 100);
        java.util.List<java.util.TreeSet<java.lang.String[][][]>> strArraySetList29 = com.thealgorithms.backtracking.Combination.combination(strArray19, (int) (byte) 100);
        java.util.List<java.util.TreeSet<java.lang.String[][][]>> strArraySetList31 = com.thealgorithms.backtracking.Combination.combination(strArray19, 6);
        java.lang.Class<?> wildcardClass32 = strArray19.getClass();
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNull(strArraySetList21);
        org.junit.Assert.assertNull(strArraySetList23);
        org.junit.Assert.assertNotNull(strArraySetList25);
        org.junit.Assert.assertNotNull(strArraySetList27);
        org.junit.Assert.assertNotNull(strArraySetList29);
        org.junit.Assert.assertNotNull(strArraySetList31);
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test1239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1239");
        com.thealgorithms.backtracking.Combination[][][][][][][][][][] combinationArray0 = new com.thealgorithms.backtracking.Combination[][][][][][][][][][] {};
        com.thealgorithms.backtracking.Combination[][][][][][][][][][] combinationArray1 = new com.thealgorithms.backtracking.Combination[][][][][][][][][][] {};
        com.thealgorithms.backtracking.Combination[][][][][][][][][][] combinationArray2 = new com.thealgorithms.backtracking.Combination[][][][][][][][][][] {};
        com.thealgorithms.backtracking.Combination[][][][][][][][][][] combinationArray3 = new com.thealgorithms.backtracking.Combination[][][][][][][][][][] {};
        com.thealgorithms.backtracking.Combination[][][][][][][][][][][] combinationArray4 = new com.thealgorithms.backtracking.Combination[][][][][][][][][][][] { combinationArray0, combinationArray1, combinationArray2, combinationArray3 };
        com.thealgorithms.backtracking.Combination[][][][][][][][][][] combinationArray5 = new com.thealgorithms.backtracking.Combination[][][][][][][][][][] {};
        com.thealgorithms.backtracking.Combination[][][][][][][][][][] combinationArray6 = new com.thealgorithms.backtracking.Combination[][][][][][][][][][] {};
        com.thealgorithms.backtracking.Combination[][][][][][][][][][] combinationArray7 = new com.thealgorithms.backtracking.Combination[][][][][][][][][][] {};
        com.thealgorithms.backtracking.Combination[][][][][][][][][][] combinationArray8 = new com.thealgorithms.backtracking.Combination[][][][][][][][][][] {};
        com.thealgorithms.backtracking.Combination[][][][][][][][][][][] combinationArray9 = new com.thealgorithms.backtracking.Combination[][][][][][][][][][][] { combinationArray5, combinationArray6, combinationArray7, combinationArray8 };
        com.thealgorithms.backtracking.Combination[][][][][][][][][][] combinationArray10 = new com.thealgorithms.backtracking.Combination[][][][][][][][][][] {};
        com.thealgorithms.backtracking.Combination[][][][][][][][][][] combinationArray11 = new com.thealgorithms.backtracking.Combination[][][][][][][][][][] {};
        com.thealgorithms.backtracking.Combination[][][][][][][][][][] combinationArray12 = new com.thealgorithms.backtracking.Combination[][][][][][][][][][] {};
        com.thealgorithms.backtracking.Combination[][][][][][][][][][] combinationArray13 = new com.thealgorithms.backtracking.Combination[][][][][][][][][][] {};
        com.thealgorithms.backtracking.Combination[][][][][][][][][][][] combinationArray14 = new com.thealgorithms.backtracking.Combination[][][][][][][][][][][] { combinationArray10, combinationArray11, combinationArray12, combinationArray13 };
        com.thealgorithms.backtracking.Combination[][][][][][][][][][] combinationArray15 = new com.thealgorithms.backtracking.Combination[][][][][][][][][][] {};
        com.thealgorithms.backtracking.Combination[][][][][][][][][][] combinationArray16 = new com.thealgorithms.backtracking.Combination[][][][][][][][][][] {};
        com.thealgorithms.backtracking.Combination[][][][][][][][][][] combinationArray17 = new com.thealgorithms.backtracking.Combination[][][][][][][][][][] {};
        com.thealgorithms.backtracking.Combination[][][][][][][][][][] combinationArray18 = new com.thealgorithms.backtracking.Combination[][][][][][][][][][] {};
        com.thealgorithms.backtracking.Combination[][][][][][][][][][][] combinationArray19 = new com.thealgorithms.backtracking.Combination[][][][][][][][][][][] { combinationArray15, combinationArray16, combinationArray17, combinationArray18 };
        com.thealgorithms.backtracking.Combination[][][][][][][][][][] combinationArray20 = new com.thealgorithms.backtracking.Combination[][][][][][][][][][] {};
        com.thealgorithms.backtracking.Combination[][][][][][][][][][] combinationArray21 = new com.thealgorithms.backtracking.Combination[][][][][][][][][][] {};
        com.thealgorithms.backtracking.Combination[][][][][][][][][][] combinationArray22 = new com.thealgorithms.backtracking.Combination[][][][][][][][][][] {};
        com.thealgorithms.backtracking.Combination[][][][][][][][][][] combinationArray23 = new com.thealgorithms.backtracking.Combination[][][][][][][][][][] {};
        com.thealgorithms.backtracking.Combination[][][][][][][][][][][] combinationArray24 = new com.thealgorithms.backtracking.Combination[][][][][][][][][][][] { combinationArray20, combinationArray21, combinationArray22, combinationArray23 };
        com.thealgorithms.backtracking.Combination[][][][][][][][][][][][] combinationArray25 = new com.thealgorithms.backtracking.Combination[][][][][][][][][][][][] { combinationArray4, combinationArray9, combinationArray14, combinationArray19, combinationArray24 };
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.TreeSet<com.thealgorithms.backtracking.Combination[][][][][][][][][][][]>> combinationArraySetList27 = com.thealgorithms.backtracking.Combination.combination(combinationArray25, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(combinationArray0);
        org.junit.Assert.assertNotNull(combinationArray1);
        org.junit.Assert.assertNotNull(combinationArray2);
        org.junit.Assert.assertNotNull(combinationArray3);
        org.junit.Assert.assertNotNull(combinationArray4);
        org.junit.Assert.assertNotNull(combinationArray5);
        org.junit.Assert.assertNotNull(combinationArray6);
        org.junit.Assert.assertNotNull(combinationArray7);
        org.junit.Assert.assertNotNull(combinationArray8);
        org.junit.Assert.assertNotNull(combinationArray9);
        org.junit.Assert.assertNotNull(combinationArray10);
        org.junit.Assert.assertNotNull(combinationArray11);
        org.junit.Assert.assertNotNull(combinationArray12);
        org.junit.Assert.assertNotNull(combinationArray13);
        org.junit.Assert.assertNotNull(combinationArray14);
        org.junit.Assert.assertNotNull(combinationArray15);
        org.junit.Assert.assertNotNull(combinationArray16);
        org.junit.Assert.assertNotNull(combinationArray17);
        org.junit.Assert.assertNotNull(combinationArray18);
        org.junit.Assert.assertNotNull(combinationArray19);
        org.junit.Assert.assertNotNull(combinationArray20);
        org.junit.Assert.assertNotNull(combinationArray21);
        org.junit.Assert.assertNotNull(combinationArray22);
        org.junit.Assert.assertNotNull(combinationArray23);
        org.junit.Assert.assertNotNull(combinationArray24);
        org.junit.Assert.assertNotNull(combinationArray25);
    }

    @Test
    public void test1240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1240");
        java.lang.String[][] strArray0 = new java.lang.String[][] {};
        java.util.List<java.util.TreeSet<java.lang.String[]>> strArraySetList2 = com.thealgorithms.backtracking.Combination.combination(strArray0, (int) (byte) -1);
        java.util.List<java.util.TreeSet<java.lang.String[]>> strArraySetList4 = com.thealgorithms.backtracking.Combination.combination(strArray0, (-1));
        java.util.List<java.util.TreeSet<java.lang.constant.Constable[]>> constableArraySetList6 = com.thealgorithms.backtracking.Combination.combination((java.lang.constant.Constable[][]) strArray0, (int) 'a');
        java.util.List<java.util.TreeSet<java.lang.CharSequence[]>> charSequenceArraySetList8 = com.thealgorithms.backtracking.Combination.combination((java.lang.CharSequence[][]) strArray0, 1);
        java.util.List<java.util.TreeSet<java.lang.constant.Constable[]>> constableArraySetList10 = com.thealgorithms.backtracking.Combination.combination((java.lang.constant.Constable[][]) strArray0, 10);
        java.lang.Class<?> wildcardClass11 = constableArraySetList10.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArraySetList2);
        org.junit.Assert.assertNotNull(strArraySetList4);
        org.junit.Assert.assertNotNull(constableArraySetList6);
        org.junit.Assert.assertNotNull(charSequenceArraySetList8);
        org.junit.Assert.assertNotNull(constableArraySetList10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1241");
        java.util.List[][] listArray1 = new java.util.List[0][];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[][] strSetListArray2 = (java.util.List<java.util.TreeSet<java.lang.String>>[][]) listArray1;
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[]>> listArraySetList4 = com.thealgorithms.backtracking.Combination.combination(strSetListArray2, (int) (short) -1);
        java.util.List<java.util.TreeSet<java.lang.Iterable<java.util.TreeSet<java.lang.String>>[]>> iterableArraySetList6 = com.thealgorithms.backtracking.Combination.combination((java.lang.Iterable<java.util.TreeSet<java.lang.String>>[][]) strSetListArray2, 2);
        java.util.List<java.util.TreeSet<java.util.Collection[]>> collectionArraySetList8 = com.thealgorithms.backtracking.Combination.combination((java.util.Collection[][]) strSetListArray2, (-1));
        java.lang.Class<?> wildcardClass9 = strSetListArray2.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strSetListArray2);
        org.junit.Assert.assertNotNull(listArraySetList4);
        org.junit.Assert.assertNotNull(iterableArraySetList6);
        org.junit.Assert.assertNotNull(collectionArraySetList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1242");
        java.lang.String[][] strArray0 = new java.lang.String[][] {};
        java.lang.String[][][] strArray1 = new java.lang.String[][][] { strArray0 };
        java.util.List<java.util.TreeSet<java.lang.String[][]>> strArraySetList3 = com.thealgorithms.backtracking.Combination.combination(strArray1, (int) (byte) 100);
        java.util.List<java.util.TreeSet<java.io.Serializable>> serializableSetList5 = com.thealgorithms.backtracking.Combination.combination((java.io.Serializable[]) strArray1, 0);
        java.util.List<java.util.TreeSet<java.lang.String[][]>> strArraySetList7 = com.thealgorithms.backtracking.Combination.combination(strArray1, (int) '#');
        java.util.List<java.util.TreeSet<java.lang.String[][]>> strArraySetList9 = com.thealgorithms.backtracking.Combination.combination(strArray1, (int) (byte) 0);
        java.util.List<java.util.TreeSet<java.lang.String[][]>> strArraySetList11 = com.thealgorithms.backtracking.Combination.combination(strArray1, 5);
        java.lang.Class<?> wildcardClass12 = strArraySetList11.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArraySetList3);
        org.junit.Assert.assertNull(serializableSetList5);
        org.junit.Assert.assertNotNull(strArraySetList7);
        org.junit.Assert.assertNull(strArraySetList9);
        org.junit.Assert.assertNotNull(strArraySetList11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test1243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1243");
        java.util.List[][][] listArray1 = new java.util.List[0][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[][][] strSetListArray2 = (java.util.List<java.util.TreeSet<java.lang.String>>[][][]) listArray1;
        java.util.List[][][] listArray4 = new java.util.List[0][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[][][] strSetListArray5 = (java.util.List<java.util.TreeSet<java.lang.String>>[][][]) listArray4;
        java.util.List[][][] listArray7 = new java.util.List[0][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[][][] strSetListArray8 = (java.util.List<java.util.TreeSet<java.lang.String>>[][][]) listArray7;
        java.util.List[][][] listArray10 = new java.util.List[0][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[][][] strSetListArray11 = (java.util.List<java.util.TreeSet<java.lang.String>>[][][]) listArray10;
        java.util.List[][][] listArray13 = new java.util.List[0][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[][][] strSetListArray14 = (java.util.List<java.util.TreeSet<java.lang.String>>[][][]) listArray13;
        java.util.List[][][] listArray16 = new java.util.List[0][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[][][] strSetListArray17 = (java.util.List<java.util.TreeSet<java.lang.String>>[][][]) listArray16;
        java.util.List[][][][] listArray19 = new java.util.List[6][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[][][][] strSetListArray20 = (java.util.List<java.util.TreeSet<java.lang.String>>[][][][]) listArray19;
        strSetListArray20[0] = strSetListArray2;
        strSetListArray20[1] = strSetListArray5;
        strSetListArray20[2] = strSetListArray8;
        strSetListArray20[3] = strSetListArray11;
        strSetListArray20[4] = strSetListArray14;
        strSetListArray20[5] = strSetListArray17;
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[][][]>> listArraySetList34 = com.thealgorithms.backtracking.Combination.combination(strSetListArray20, (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[][][]>> listArraySetList36 = com.thealgorithms.backtracking.Combination.combination(strSetListArray20, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strSetListArray2);
        org.junit.Assert.assertNotNull(listArray4);
        org.junit.Assert.assertNotNull(strSetListArray5);
        org.junit.Assert.assertNotNull(listArray7);
        org.junit.Assert.assertNotNull(strSetListArray8);
        org.junit.Assert.assertNotNull(listArray10);
        org.junit.Assert.assertNotNull(strSetListArray11);
        org.junit.Assert.assertNotNull(listArray13);
        org.junit.Assert.assertNotNull(strSetListArray14);
        org.junit.Assert.assertNotNull(listArray16);
        org.junit.Assert.assertNotNull(strSetListArray17);
        org.junit.Assert.assertNotNull(listArray19);
        org.junit.Assert.assertNotNull(strSetListArray20);
        org.junit.Assert.assertNull(listArraySetList34);
    }

    @Test
    public void test1244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1244");
        java.util.Collection[][] collectionArray0 = new java.util.Collection[][] {};
        java.util.List<java.util.TreeSet<java.util.Collection[]>> collectionArraySetList2 = com.thealgorithms.backtracking.Combination.combination(collectionArray0, (int) (byte) 0);
        java.util.List<java.util.TreeSet<java.util.Collection[]>> collectionArraySetList4 = com.thealgorithms.backtracking.Combination.combination(collectionArray0, (int) (byte) -1);
        java.util.List<java.util.TreeSet<java.io.Serializable>> serializableSetList6 = com.thealgorithms.backtracking.Combination.combination((java.io.Serializable[]) collectionArray0, (int) '4');
        java.util.List<java.util.TreeSet<java.util.Collection[]>> collectionArraySetList8 = com.thealgorithms.backtracking.Combination.combination(collectionArray0, (int) '#');
        java.util.List<java.util.TreeSet<java.util.Collection[]>> collectionArraySetList10 = com.thealgorithms.backtracking.Combination.combination(collectionArray0, 10);
        java.util.List<java.util.TreeSet<java.util.Collection[]>> collectionArraySetList12 = com.thealgorithms.backtracking.Combination.combination(collectionArray0, 1);
        java.lang.Class<?> wildcardClass13 = collectionArraySetList12.getClass();
        org.junit.Assert.assertNotNull(collectionArray0);
        org.junit.Assert.assertNull(collectionArraySetList2);
        org.junit.Assert.assertNotNull(collectionArraySetList4);
        org.junit.Assert.assertNotNull(serializableSetList6);
        org.junit.Assert.assertNotNull(collectionArraySetList8);
        org.junit.Assert.assertNotNull(collectionArraySetList10);
        org.junit.Assert.assertNotNull(collectionArraySetList12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1245");
        com.thealgorithms.backtracking.Combination[][][][][][][][][] combinationArray0 = new com.thealgorithms.backtracking.Combination[][][][][][][][][] {};
        java.util.List<java.util.TreeSet<com.thealgorithms.backtracking.Combination[][][][][][][][]>> combinationArraySetList2 = com.thealgorithms.backtracking.Combination.combination(combinationArray0, (int) (byte) 100);
        java.util.List<java.util.TreeSet<com.thealgorithms.backtracking.Combination[][][][][][][][]>> combinationArraySetList4 = com.thealgorithms.backtracking.Combination.combination(combinationArray0, (int) (short) 0);
        java.util.List<java.util.TreeSet<com.thealgorithms.backtracking.Combination[][][][][][][][]>> combinationArraySetList6 = com.thealgorithms.backtracking.Combination.combination(combinationArray0, (int) '#');
        java.lang.Class<?> wildcardClass7 = combinationArraySetList6.getClass();
        org.junit.Assert.assertNotNull(combinationArray0);
        org.junit.Assert.assertNotNull(combinationArraySetList2);
        org.junit.Assert.assertNull(combinationArraySetList4);
        org.junit.Assert.assertNotNull(combinationArraySetList6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test1246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1246");
        java.util.List[][] listArray1 = new java.util.List[0][];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[][] strSetListArray2 = (java.util.List<java.util.TreeSet<java.lang.String>>[][]) listArray1;
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[]>> listArraySetList4 = com.thealgorithms.backtracking.Combination.combination(strSetListArray2, (int) (short) -1);
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[]>> listArraySetList6 = com.thealgorithms.backtracking.Combination.combination(strSetListArray2, (-1));
        java.util.List<java.util.TreeSet<java.lang.Iterable<java.util.TreeSet<java.lang.String>>[]>> iterableArraySetList8 = com.thealgorithms.backtracking.Combination.combination((java.lang.Iterable<java.util.TreeSet<java.lang.String>>[][]) strSetListArray2, (int) '4');
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[]>> listArraySetList10 = com.thealgorithms.backtracking.Combination.combination(strSetListArray2, 100);
        java.util.List<java.util.TreeSet<java.util.Collection[]>> collectionArraySetList12 = com.thealgorithms.backtracking.Combination.combination((java.util.Collection[][]) strSetListArray2, 100);
        java.lang.Class<?> wildcardClass13 = strSetListArray2.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strSetListArray2);
        org.junit.Assert.assertNotNull(listArraySetList4);
        org.junit.Assert.assertNotNull(listArraySetList6);
        org.junit.Assert.assertNotNull(iterableArraySetList8);
        org.junit.Assert.assertNotNull(listArraySetList10);
        org.junit.Assert.assertNotNull(collectionArraySetList12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1247");
        java.lang.Class[][][][] classArray1 = new java.lang.Class[0][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][]>> wildcardClassArraySetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (byte) 100);
        java.util.List<java.util.TreeSet<java.lang.reflect.Type[][][]>> typeArraySetList6 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.Type[][][][]) wildcardClassArray2, 3);
        java.util.List<java.util.TreeSet<java.lang.reflect.Type[][][]>> typeArraySetList8 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.Type[][][][]) wildcardClassArray2, 100);
        java.util.List<java.util.TreeSet<java.lang.reflect.Type[][][]>> typeArraySetList10 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.Type[][][][]) wildcardClassArray2, (int) 'a');
        java.util.List<java.util.TreeSet<java.lang.reflect.Type[][][]>> typeArraySetList12 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.Type[][][][]) wildcardClassArray2, (-1));
        java.util.List<java.util.TreeSet<java.lang.reflect.Type[][][]>> typeArraySetList14 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.Type[][][][]) wildcardClassArray2, 1);
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration[][][]>> genericDeclarationArraySetList16 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[][][][]) wildcardClassArray2, 5);
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][]>> wildcardClassArraySetList18 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) '4');
        java.lang.Class<?> wildcardClass19 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList4);
        org.junit.Assert.assertNotNull(typeArraySetList6);
        org.junit.Assert.assertNotNull(typeArraySetList8);
        org.junit.Assert.assertNotNull(typeArraySetList10);
        org.junit.Assert.assertNotNull(typeArraySetList12);
        org.junit.Assert.assertNotNull(typeArraySetList14);
        org.junit.Assert.assertNotNull(genericDeclarationArraySetList16);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList18);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test1248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1248");
        java.util.List[] listArray1 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[] strSetListArray2 = (java.util.List<java.util.TreeSet<java.lang.String>>[]) listArray1;
        java.util.List[] listArray4 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[] strSetListArray5 = (java.util.List<java.util.TreeSet<java.lang.String>>[]) listArray4;
        java.util.List[][] listArray7 = new java.util.List[2][];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[][] strSetListArray8 = (java.util.List<java.util.TreeSet<java.lang.String>>[][]) listArray7;
        strSetListArray8[0] = strSetListArray2;
        strSetListArray8[1] = strSetListArray5;
        java.util.List[][][] listArray14 = new java.util.List[1][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[][][] strSetListArray15 = (java.util.List<java.util.TreeSet<java.lang.String>>[][][]) listArray14;
        strSetListArray15[0] = strSetListArray8;
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[][]>> listArraySetList19 = com.thealgorithms.backtracking.Combination.combination(strSetListArray15, (int) (short) 10);
        java.util.List<java.util.TreeSet<java.util.Collection[][]>> collectionArraySetList21 = com.thealgorithms.backtracking.Combination.combination((java.util.Collection[][][]) strSetListArray15, (int) '#');
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[][]>> listArraySetList23 = com.thealgorithms.backtracking.Combination.combination(strSetListArray15, 4);
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[][]>> listArraySetList25 = com.thealgorithms.backtracking.Combination.combination(strSetListArray15, (int) (short) 100);
        java.lang.Class<?> wildcardClass26 = strSetListArray15.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strSetListArray2);
        org.junit.Assert.assertNotNull(listArray4);
        org.junit.Assert.assertNotNull(strSetListArray5);
        org.junit.Assert.assertNotNull(listArray7);
        org.junit.Assert.assertNotNull(strSetListArray8);
        org.junit.Assert.assertNotNull(listArray14);
        org.junit.Assert.assertNotNull(strSetListArray15);
        org.junit.Assert.assertNotNull(listArraySetList19);
        org.junit.Assert.assertNotNull(collectionArraySetList21);
        org.junit.Assert.assertNotNull(listArraySetList23);
        org.junit.Assert.assertNotNull(listArraySetList25);
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test1249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1249");
        java.lang.reflect.Type[][][] typeArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.TreeSet<java.lang.reflect.Type[][]>> typeArraySetList2 = com.thealgorithms.backtracking.Combination.combination(typeArray0, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1250");
        java.util.List[][][] listArray1 = new java.util.List[0][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[][][] strSetListArray2 = (java.util.List<java.util.TreeSet<java.lang.String>>[][][]) listArray1;
        java.util.List[][][] listArray4 = new java.util.List[0][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[][][] strSetListArray5 = (java.util.List<java.util.TreeSet<java.lang.String>>[][][]) listArray4;
        java.util.List[][][] listArray7 = new java.util.List[0][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[][][] strSetListArray8 = (java.util.List<java.util.TreeSet<java.lang.String>>[][][]) listArray7;
        java.util.List[][][] listArray10 = new java.util.List[0][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[][][] strSetListArray11 = (java.util.List<java.util.TreeSet<java.lang.String>>[][][]) listArray10;
        java.util.List[][][] listArray13 = new java.util.List[0][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[][][] strSetListArray14 = (java.util.List<java.util.TreeSet<java.lang.String>>[][][]) listArray13;
        java.util.List[][][] listArray16 = new java.util.List[0][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[][][] strSetListArray17 = (java.util.List<java.util.TreeSet<java.lang.String>>[][][]) listArray16;
        java.util.List[][][][] listArray19 = new java.util.List[6][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[][][][] strSetListArray20 = (java.util.List<java.util.TreeSet<java.lang.String>>[][][][]) listArray19;
        strSetListArray20[0] = strSetListArray2;
        strSetListArray20[1] = strSetListArray5;
        strSetListArray20[2] = strSetListArray8;
        strSetListArray20[3] = strSetListArray11;
        strSetListArray20[4] = strSetListArray14;
        strSetListArray20[5] = strSetListArray17;
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[][][]>> listArraySetList34 = com.thealgorithms.backtracking.Combination.combination(strSetListArray20, (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass35 = listArraySetList34.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strSetListArray2);
        org.junit.Assert.assertNotNull(listArray4);
        org.junit.Assert.assertNotNull(strSetListArray5);
        org.junit.Assert.assertNotNull(listArray7);
        org.junit.Assert.assertNotNull(strSetListArray8);
        org.junit.Assert.assertNotNull(listArray10);
        org.junit.Assert.assertNotNull(strSetListArray11);
        org.junit.Assert.assertNotNull(listArray13);
        org.junit.Assert.assertNotNull(strSetListArray14);
        org.junit.Assert.assertNotNull(listArray16);
        org.junit.Assert.assertNotNull(strSetListArray17);
        org.junit.Assert.assertNotNull(listArray19);
        org.junit.Assert.assertNotNull(strSetListArray20);
        org.junit.Assert.assertNull(listArraySetList34);
    }

    @Test
    public void test1251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1251");
        java.lang.reflect.GenericDeclaration[][] genericDeclarationArray0 = new java.lang.reflect.GenericDeclaration[][] {};
        java.lang.reflect.GenericDeclaration[][] genericDeclarationArray1 = new java.lang.reflect.GenericDeclaration[][] {};
        java.lang.reflect.GenericDeclaration[][] genericDeclarationArray2 = new java.lang.reflect.GenericDeclaration[][] {};
        java.lang.reflect.GenericDeclaration[][][] genericDeclarationArray3 = new java.lang.reflect.GenericDeclaration[][][] { genericDeclarationArray0, genericDeclarationArray1, genericDeclarationArray2 };
        java.lang.reflect.GenericDeclaration[][][][] genericDeclarationArray4 = new java.lang.reflect.GenericDeclaration[][][][] { genericDeclarationArray3 };
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration[][][]>> genericDeclarationArraySetList6 = com.thealgorithms.backtracking.Combination.combination(genericDeclarationArray4, (int) 'a');
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration[][][]>> genericDeclarationArraySetList8 = com.thealgorithms.backtracking.Combination.combination(genericDeclarationArray4, (int) ' ');
        java.lang.Class<?> wildcardClass9 = genericDeclarationArraySetList8.getClass();
        org.junit.Assert.assertNotNull(genericDeclarationArray0);
        org.junit.Assert.assertNotNull(genericDeclarationArray1);
        org.junit.Assert.assertNotNull(genericDeclarationArray2);
        org.junit.Assert.assertNotNull(genericDeclarationArray3);
        org.junit.Assert.assertNotNull(genericDeclarationArray4);
        org.junit.Assert.assertNotNull(genericDeclarationArraySetList6);
        org.junit.Assert.assertNotNull(genericDeclarationArraySetList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1252");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>>> wildcardClassSetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (byte) 0);
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration>> genericDeclarationSetList6 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2, (int) (byte) 1);
        java.util.List<java.util.TreeSet<java.lang.invoke.TypeDescriptor>> typeDescriptorSetList8 = com.thealgorithms.backtracking.Combination.combination((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2, (int) ' ');
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration>> genericDeclarationSetList10 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2, 0);
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration>> genericDeclarationSetList12 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2, (int) ' ');
        java.util.List<java.util.TreeSet<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>>> wildcardClassOfFieldSetList14 = com.thealgorithms.backtracking.Combination.combination((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) wildcardClassArray2, (int) ' ');
        java.lang.Class<?> wildcardClass15 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNull(wildcardClassSetList4);
        org.junit.Assert.assertNotNull(genericDeclarationSetList6);
        org.junit.Assert.assertNotNull(typeDescriptorSetList8);
        org.junit.Assert.assertNull(genericDeclarationSetList10);
        org.junit.Assert.assertNotNull(genericDeclarationSetList12);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldSetList14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test1253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1253");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>>> wildcardClassSetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (byte) 0);
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration>> genericDeclarationSetList6 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2, (int) (byte) 1);
        java.util.List<java.util.TreeSet<java.lang.invoke.TypeDescriptor>> typeDescriptorSetList8 = com.thealgorithms.backtracking.Combination.combination((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2, (int) ' ');
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration>> genericDeclarationSetList10 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2, 0);
        java.lang.Class<?> wildcardClass11 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNull(wildcardClassSetList4);
        org.junit.Assert.assertNotNull(genericDeclarationSetList6);
        org.junit.Assert.assertNotNull(typeDescriptorSetList8);
        org.junit.Assert.assertNull(genericDeclarationSetList10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1254");
        java.util.Collection[] collectionArray1 = new java.util.Collection[0];
        @SuppressWarnings("unchecked")
        java.util.Collection<java.util.TreeSet<java.lang.String>>[] strSetCollectionArray2 = (java.util.Collection<java.util.TreeSet<java.lang.String>>[]) collectionArray1;
        java.util.List<java.util.TreeSet<java.util.Collection<java.util.TreeSet<java.lang.String>>>> setCollectionSetList4 = com.thealgorithms.backtracking.Combination.combination((java.util.Collection<java.util.TreeSet<java.lang.String>>[]) collectionArray1, (-1));
        java.util.List<java.util.TreeSet<java.util.Collection<java.util.TreeSet<java.lang.String>>>> setCollectionSetList6 = com.thealgorithms.backtracking.Combination.combination((java.util.Collection<java.util.TreeSet<java.lang.String>>[]) collectionArray1, (int) '4');
        java.util.List<java.util.TreeSet<java.util.Collection<java.util.TreeSet<java.lang.String>>>> setCollectionSetList8 = com.thealgorithms.backtracking.Combination.combination((java.util.Collection<java.util.TreeSet<java.lang.String>>[]) collectionArray1, (int) (short) 10);
        java.lang.Class<?> wildcardClass9 = collectionArray1.getClass();
        org.junit.Assert.assertNotNull(collectionArray1);
        org.junit.Assert.assertNotNull(strSetCollectionArray2);
        org.junit.Assert.assertNotNull(setCollectionSetList4);
        org.junit.Assert.assertNotNull(setCollectionSetList6);
        org.junit.Assert.assertNotNull(setCollectionSetList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1255");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>>> wildcardClassSetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (byte) 0);
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration>> genericDeclarationSetList6 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2, (int) (byte) 1);
        java.util.List<java.util.TreeSet<java.lang.reflect.AnnotatedElement>> annotatedElementSetList8 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2, (int) (short) -1);
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration>> genericDeclarationSetList10 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2, (int) (short) 0);
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration>> genericDeclarationSetList12 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2, 0);
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration>> genericDeclarationSetList14 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2, (int) (byte) 1);
        java.util.List<java.util.TreeSet<java.lang.reflect.Type>> typeSetList16 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.Type[]) wildcardClassArray2, 0);
        java.util.List<java.util.TreeSet<java.lang.reflect.AnnotatedElement>> annotatedElementSetList18 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2, 0);
        java.lang.Class<?> wildcardClass19 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNull(wildcardClassSetList4);
        org.junit.Assert.assertNotNull(genericDeclarationSetList6);
        org.junit.Assert.assertNotNull(annotatedElementSetList8);
        org.junit.Assert.assertNull(genericDeclarationSetList10);
        org.junit.Assert.assertNull(genericDeclarationSetList12);
        org.junit.Assert.assertNotNull(genericDeclarationSetList14);
        org.junit.Assert.assertNull(typeSetList16);
        org.junit.Assert.assertNull(annotatedElementSetList18);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test1256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1256");
        java.util.List[][] listArray1 = new java.util.List[0][];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[][] strSetListArray2 = (java.util.List<java.util.TreeSet<java.lang.String>>[][]) listArray1;
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[]>> listArraySetList4 = com.thealgorithms.backtracking.Combination.combination(strSetListArray2, (int) (short) -1);
        java.util.List<java.util.TreeSet<java.lang.Iterable<java.util.TreeSet<java.lang.String>>[]>> iterableArraySetList6 = com.thealgorithms.backtracking.Combination.combination((java.lang.Iterable<java.util.TreeSet<java.lang.String>>[][]) strSetListArray2, 2);
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[]>> listArraySetList8 = com.thealgorithms.backtracking.Combination.combination(strSetListArray2, 10);
        java.lang.Class<?> wildcardClass9 = strSetListArray2.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strSetListArray2);
        org.junit.Assert.assertNotNull(listArraySetList4);
        org.junit.Assert.assertNotNull(iterableArraySetList6);
        org.junit.Assert.assertNotNull(listArraySetList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1257");
        java.lang.Class[][][][][][][] classArray1 = new java.lang.Class[0][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][][][][]>> wildcardClassArraySetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, 1);
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][][][][]>> wildcardClassArraySetList6 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) '#');
        java.util.List<java.util.TreeSet<java.lang.Object>> objSetList8 = com.thealgorithms.backtracking.Combination.combination((java.lang.Object[]) wildcardClassArray2, 0);
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][][][][]>> wildcardClassArraySetList10 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (byte) 1);
        java.lang.Class<?> wildcardClass11 = wildcardClassArraySetList10.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList4);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList6);
        org.junit.Assert.assertNull(objSetList8);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1258");
        com.thealgorithms.backtracking.Combination[][][][][][] combinationArray0 = new com.thealgorithms.backtracking.Combination[][][][][][] {};
        com.thealgorithms.backtracking.Combination[][][][][][] combinationArray1 = new com.thealgorithms.backtracking.Combination[][][][][][] {};
        com.thealgorithms.backtracking.Combination[][][][][][] combinationArray2 = new com.thealgorithms.backtracking.Combination[][][][][][] {};
        com.thealgorithms.backtracking.Combination[][][][][][][] combinationArray3 = new com.thealgorithms.backtracking.Combination[][][][][][][] { combinationArray0, combinationArray1, combinationArray2 };
        com.thealgorithms.backtracking.Combination[][][][][][][][] combinationArray4 = new com.thealgorithms.backtracking.Combination[][][][][][][][] { combinationArray3 };
        java.util.List<java.util.TreeSet<com.thealgorithms.backtracking.Combination[][][][][][][]>> combinationArraySetList6 = com.thealgorithms.backtracking.Combination.combination(combinationArray4, (int) '4');
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.TreeSet<com.thealgorithms.backtracking.Combination[][][][][][][]>> combinationArraySetList8 = com.thealgorithms.backtracking.Combination.combination(combinationArray4, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(combinationArray0);
        org.junit.Assert.assertNotNull(combinationArray1);
        org.junit.Assert.assertNotNull(combinationArray2);
        org.junit.Assert.assertNotNull(combinationArray3);
        org.junit.Assert.assertNotNull(combinationArray4);
        org.junit.Assert.assertNotNull(combinationArraySetList6);
    }

    @Test
    public void test1259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1259");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>>> wildcardClassSetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (byte) 0);
        java.util.List<java.util.TreeSet<java.lang.invoke.TypeDescriptor>> typeDescriptorSetList6 = com.thealgorithms.backtracking.Combination.combination((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2, (int) (byte) 100);
        java.util.List<java.util.TreeSet<java.lang.reflect.AnnotatedElement>> annotatedElementSetList8 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2, 3);
        java.util.List<java.util.TreeSet<java.lang.invoke.TypeDescriptor>> typeDescriptorSetList10 = com.thealgorithms.backtracking.Combination.combination((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2, 5);
        java.lang.Class<?> wildcardClass11 = typeDescriptorSetList10.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNull(wildcardClassSetList4);
        org.junit.Assert.assertNotNull(typeDescriptorSetList6);
        org.junit.Assert.assertNotNull(annotatedElementSetList8);
        org.junit.Assert.assertNotNull(typeDescriptorSetList10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1260");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.util.TreeSet<java.lang.String>> strSetList4 = com.thealgorithms.backtracking.Combination.combination(strArray2, (int) '#');
        java.util.List<java.util.TreeSet<java.lang.constant.ConstantDesc>> constantDescSetList6 = com.thealgorithms.backtracking.Combination.combination((java.lang.constant.ConstantDesc[]) strArray2, 1);
        java.util.List<java.util.TreeSet<java.lang.String>> strSetList8 = com.thealgorithms.backtracking.Combination.combination(strArray2, (int) (byte) -1);
        java.util.List<java.util.TreeSet<java.lang.Comparable<java.lang.String>>> strComparableSetList10 = com.thealgorithms.backtracking.Combination.combination((java.lang.Comparable<java.lang.String>[]) strArray2, 2);
        java.util.List<java.util.TreeSet<java.lang.CharSequence>> charSequenceSetList12 = com.thealgorithms.backtracking.Combination.combination((java.lang.CharSequence[]) strArray2, 1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strSetList4);
        org.junit.Assert.assertNotNull(constantDescSetList6);
        org.junit.Assert.assertNotNull(strSetList8);
        org.junit.Assert.assertNotNull(strComparableSetList10);
        org.junit.Assert.assertNotNull(charSequenceSetList12);
    }

    @Test
    public void test1261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1261");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.util.TreeSet<java.lang.String>> strSetList4 = com.thealgorithms.backtracking.Combination.combination(strArray2, (int) '#');
        java.util.List<java.util.TreeSet<java.lang.constant.ConstantDesc>> constantDescSetList6 = com.thealgorithms.backtracking.Combination.combination((java.lang.constant.ConstantDesc[]) strArray2, 1);
        java.util.List<java.util.TreeSet<java.lang.String>> strSetList8 = com.thealgorithms.backtracking.Combination.combination(strArray2, (int) (byte) -1);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "", "", "" };
        java.util.List<java.util.TreeSet<java.lang.Comparable<java.lang.String>>> strComparableSetList17 = com.thealgorithms.backtracking.Combination.combination((java.lang.Comparable<java.lang.String>[]) strArray15, (int) (byte) 1);
        java.util.List<java.util.TreeSet<java.io.Serializable>> serializableSetList19 = com.thealgorithms.backtracking.Combination.combination((java.io.Serializable[]) strArray15, (int) '4');
        java.util.List<java.util.TreeSet<java.lang.String>> strSetList21 = com.thealgorithms.backtracking.Combination.combination(strArray15, 1);
        java.util.Collection[] collectionArray23 = new java.util.Collection[2];
        @SuppressWarnings("unchecked")
        java.util.Collection<java.util.TreeSet<java.lang.String>>[] strSetCollectionArray24 = (java.util.Collection<java.util.TreeSet<java.lang.String>>[]) collectionArray23;
        strSetCollectionArray24[0] = strSetList8;
        strSetCollectionArray24[1] = strSetList21;
        java.util.List<java.util.TreeSet<java.util.Collection<java.util.TreeSet<java.lang.String>>>> setCollectionSetList30 = com.thealgorithms.backtracking.Combination.combination(strSetCollectionArray24, (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.TreeSet<java.lang.Iterable<java.util.TreeSet<java.lang.String>>>> setIterableSetList32 = com.thealgorithms.backtracking.Combination.combination((java.lang.Iterable<java.util.TreeSet<java.lang.String>>[]) strSetCollectionArray24, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strSetList4);
        org.junit.Assert.assertNotNull(constantDescSetList6);
        org.junit.Assert.assertNotNull(strSetList8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strComparableSetList17);
        org.junit.Assert.assertNotNull(serializableSetList19);
        org.junit.Assert.assertNotNull(strSetList21);
        org.junit.Assert.assertNotNull(collectionArray23);
        org.junit.Assert.assertNotNull(strSetCollectionArray24);
        org.junit.Assert.assertNull(setCollectionSetList30);
    }

    @Test
    public void test1262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1262");
        com.thealgorithms.backtracking.Combination[][][][][] combinationArray0 = new com.thealgorithms.backtracking.Combination[][][][][] {};
        java.util.List<java.util.TreeSet<com.thealgorithms.backtracking.Combination[][][][]>> combinationArraySetList2 = com.thealgorithms.backtracking.Combination.combination(combinationArray0, (int) (short) 0);
        java.util.List<java.util.TreeSet<com.thealgorithms.backtracking.Combination[][][][]>> combinationArraySetList4 = com.thealgorithms.backtracking.Combination.combination(combinationArray0, (int) (short) 1);
        java.util.List<java.util.TreeSet<com.thealgorithms.backtracking.Combination[][][][]>> combinationArraySetList6 = com.thealgorithms.backtracking.Combination.combination(combinationArray0, 100);
        java.util.List<java.util.TreeSet<com.thealgorithms.backtracking.Combination[][][][]>> combinationArraySetList8 = com.thealgorithms.backtracking.Combination.combination(combinationArray0, 10);
        java.util.List<java.util.TreeSet<com.thealgorithms.backtracking.Combination[][][][]>> combinationArraySetList10 = com.thealgorithms.backtracking.Combination.combination(combinationArray0, (int) '#');
        java.lang.Class<?> wildcardClass11 = combinationArray0.getClass();
        org.junit.Assert.assertNotNull(combinationArray0);
        org.junit.Assert.assertNull(combinationArraySetList2);
        org.junit.Assert.assertNotNull(combinationArraySetList4);
        org.junit.Assert.assertNotNull(combinationArraySetList6);
        org.junit.Assert.assertNotNull(combinationArraySetList8);
        org.junit.Assert.assertNotNull(combinationArraySetList10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1263");
        java.lang.reflect.GenericDeclaration[][][][] genericDeclarationArray0 = new java.lang.reflect.GenericDeclaration[][][][] {};
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration[][][]>> genericDeclarationArraySetList2 = com.thealgorithms.backtracking.Combination.combination(genericDeclarationArray0, (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass3 = genericDeclarationArraySetList2.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(genericDeclarationArray0);
        org.junit.Assert.assertNull(genericDeclarationArraySetList2);
    }

    @Test
    public void test1264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1264");
        java.lang.Class[][][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][][]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][][][][][][]>> wildcardClassArraySetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, 2);
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][][][][][][]>> wildcardClassArraySetList6 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (short) 100);
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][][][][][][]>> wildcardClassArraySetList8 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (byte) 100);
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][][][][][][]>> wildcardClassArraySetList10 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (byte) 100);
        java.lang.Class<?> wildcardClass11 = wildcardClassArraySetList10.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList4);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList6);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList8);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1265");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>>> wildcardClassSetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (byte) 0);
        java.util.List<java.util.TreeSet<java.lang.invoke.TypeDescriptor>> typeDescriptorSetList6 = com.thealgorithms.backtracking.Combination.combination((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2, 0);
        java.util.List<java.util.TreeSet<java.lang.reflect.AnnotatedElement>> annotatedElementSetList8 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2, (int) '4');
        java.util.List<java.util.TreeSet<java.lang.invoke.TypeDescriptor>> typeDescriptorSetList10 = com.thealgorithms.backtracking.Combination.combination((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2, (int) (byte) 1);
        java.util.List<java.util.TreeSet<java.lang.Class<?>>> wildcardClassSetList12 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, 3);
        java.util.List<java.util.TreeSet<java.lang.invoke.TypeDescriptor>> typeDescriptorSetList14 = com.thealgorithms.backtracking.Combination.combination((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2, 2);
        java.util.List<java.util.TreeSet<java.lang.invoke.TypeDescriptor>> typeDescriptorSetList16 = com.thealgorithms.backtracking.Combination.combination((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2, (int) (byte) 10);
        java.util.List<java.util.TreeSet<java.lang.constant.Constable>> constableSetList18 = com.thealgorithms.backtracking.Combination.combination((java.lang.constant.Constable[]) wildcardClassArray2, 10);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNull(wildcardClassSetList4);
        org.junit.Assert.assertNull(typeDescriptorSetList6);
        org.junit.Assert.assertNotNull(annotatedElementSetList8);
        org.junit.Assert.assertNotNull(typeDescriptorSetList10);
        org.junit.Assert.assertNotNull(wildcardClassSetList12);
        org.junit.Assert.assertNotNull(typeDescriptorSetList14);
        org.junit.Assert.assertNotNull(typeDescriptorSetList16);
        org.junit.Assert.assertNotNull(constableSetList18);
    }

    @Test
    public void test1266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1266");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.util.TreeSet<java.lang.String>> strSetList4 = com.thealgorithms.backtracking.Combination.combination(strArray2, (int) '#');
        java.util.List<java.util.TreeSet<java.lang.constant.ConstantDesc>> constantDescSetList6 = com.thealgorithms.backtracking.Combination.combination((java.lang.constant.ConstantDesc[]) strArray2, 1);
        java.util.List<java.util.TreeSet<java.lang.String>> strSetList8 = com.thealgorithms.backtracking.Combination.combination(strArray2, (int) (byte) -1);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "", "", "" };
        java.util.List<java.util.TreeSet<java.lang.Comparable<java.lang.String>>> strComparableSetList17 = com.thealgorithms.backtracking.Combination.combination((java.lang.Comparable<java.lang.String>[]) strArray15, (int) (byte) 1);
        java.util.List<java.util.TreeSet<java.io.Serializable>> serializableSetList19 = com.thealgorithms.backtracking.Combination.combination((java.io.Serializable[]) strArray15, (int) '4');
        java.util.List<java.util.TreeSet<java.lang.String>> strSetList21 = com.thealgorithms.backtracking.Combination.combination(strArray15, 1);
        java.util.Collection[] collectionArray23 = new java.util.Collection[2];
        @SuppressWarnings("unchecked")
        java.util.Collection<java.util.TreeSet<java.lang.String>>[] strSetCollectionArray24 = (java.util.Collection<java.util.TreeSet<java.lang.String>>[]) collectionArray23;
        strSetCollectionArray24[0] = strSetList8;
        strSetCollectionArray24[1] = strSetList21;
        java.util.List<java.util.TreeSet<java.util.Collection<java.util.TreeSet<java.lang.String>>>> setCollectionSetList30 = com.thealgorithms.backtracking.Combination.combination(strSetCollectionArray24, (int) (short) 0);
        java.util.List<java.util.TreeSet<java.lang.Iterable<java.util.TreeSet<java.lang.String>>>> setIterableSetList32 = com.thealgorithms.backtracking.Combination.combination((java.lang.Iterable<java.util.TreeSet<java.lang.String>>[]) strSetCollectionArray24, (int) (short) 0);
        java.lang.Class<?> wildcardClass33 = strSetCollectionArray24.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strSetList4);
        org.junit.Assert.assertNotNull(constantDescSetList6);
        org.junit.Assert.assertNotNull(strSetList8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strComparableSetList17);
        org.junit.Assert.assertNotNull(serializableSetList19);
        org.junit.Assert.assertNotNull(strSetList21);
        org.junit.Assert.assertNotNull(collectionArray23);
        org.junit.Assert.assertNotNull(strSetCollectionArray24);
        org.junit.Assert.assertNull(setCollectionSetList30);
        org.junit.Assert.assertNull(setIterableSetList32);
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test1267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1267");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "", "", "", "" };
        java.util.List<java.util.TreeSet<java.lang.Comparable<java.lang.String>>> strComparableSetList8 = com.thealgorithms.backtracking.Combination.combination((java.lang.Comparable<java.lang.String>[]) strArray6, (int) (byte) 1);
        java.util.List<java.util.TreeSet<java.io.Serializable>> serializableSetList10 = com.thealgorithms.backtracking.Combination.combination((java.io.Serializable[]) strArray6, (int) '4');
        java.util.List<java.util.TreeSet<java.lang.Object>> objSetList12 = com.thealgorithms.backtracking.Combination.combination((java.lang.Object[]) strArray6, (int) '#');
        java.util.List<java.util.TreeSet<java.lang.Comparable<java.lang.String>>> strComparableSetList14 = com.thealgorithms.backtracking.Combination.combination((java.lang.Comparable<java.lang.String>[]) strArray6, 100);
        java.util.List<java.util.TreeSet<java.lang.CharSequence>> charSequenceSetList16 = com.thealgorithms.backtracking.Combination.combination((java.lang.CharSequence[]) strArray6, 1);
        java.util.List<java.util.TreeSet<java.io.Serializable>> serializableSetList18 = com.thealgorithms.backtracking.Combination.combination((java.io.Serializable[]) strArray6, 10);
        java.util.List<java.util.TreeSet<java.lang.Comparable<java.lang.String>>> strComparableSetList20 = com.thealgorithms.backtracking.Combination.combination((java.lang.Comparable<java.lang.String>[]) strArray6, (int) 'a');
        java.lang.Class<?> wildcardClass21 = strComparableSetList20.getClass();
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strComparableSetList8);
        org.junit.Assert.assertNotNull(serializableSetList10);
        org.junit.Assert.assertNotNull(objSetList12);
        org.junit.Assert.assertNotNull(strComparableSetList14);
        org.junit.Assert.assertNotNull(charSequenceSetList16);
        org.junit.Assert.assertNotNull(serializableSetList18);
        org.junit.Assert.assertNotNull(strComparableSetList20);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test1268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1268");
        com.thealgorithms.backtracking.Combination[][] combinationArray0 = new com.thealgorithms.backtracking.Combination[][] {};
        java.util.List<java.util.TreeSet<com.thealgorithms.backtracking.Combination[]>> combinationArraySetList2 = com.thealgorithms.backtracking.Combination.combination(combinationArray0, (int) (short) 0);
        java.util.List<java.util.TreeSet<com.thealgorithms.backtracking.Combination[]>> combinationArraySetList4 = com.thealgorithms.backtracking.Combination.combination(combinationArray0, (int) (short) 0);
        java.util.List<java.util.TreeSet<com.thealgorithms.backtracking.Combination[]>> combinationArraySetList6 = com.thealgorithms.backtracking.Combination.combination(combinationArray0, 1);
        java.lang.Class<?> wildcardClass7 = combinationArraySetList6.getClass();
        org.junit.Assert.assertNotNull(combinationArray0);
        org.junit.Assert.assertNull(combinationArraySetList2);
        org.junit.Assert.assertNull(combinationArraySetList4);
        org.junit.Assert.assertNotNull(combinationArraySetList6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test1269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1269");
        com.thealgorithms.backtracking.Combination[][][][] combinationArray0 = new com.thealgorithms.backtracking.Combination[][][][] {};
        java.util.List<java.util.TreeSet<com.thealgorithms.backtracking.Combination[][][]>> combinationArraySetList2 = com.thealgorithms.backtracking.Combination.combination(combinationArray0, (int) ' ');
        java.util.List<java.util.TreeSet<com.thealgorithms.backtracking.Combination[][][]>> combinationArraySetList4 = com.thealgorithms.backtracking.Combination.combination(combinationArray0, 1);
        java.util.List<java.util.TreeSet<com.thealgorithms.backtracking.Combination[][][]>> combinationArraySetList6 = com.thealgorithms.backtracking.Combination.combination(combinationArray0, 0);
        org.junit.Assert.assertNotNull(combinationArray0);
        org.junit.Assert.assertNotNull(combinationArraySetList2);
        org.junit.Assert.assertNotNull(combinationArraySetList4);
        org.junit.Assert.assertNull(combinationArraySetList6);
    }

    @Test
    public void test1270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1270");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>>> wildcardClassSetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (byte) 0);
        java.util.List<java.util.TreeSet<java.lang.invoke.TypeDescriptor>> typeDescriptorSetList6 = com.thealgorithms.backtracking.Combination.combination((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2, 0);
        java.util.List<java.util.TreeSet<java.lang.Object>> objSetList8 = com.thealgorithms.backtracking.Combination.combination((java.lang.Object[]) wildcardClassArray2, (int) (byte) 0);
        java.util.List<java.util.TreeSet<java.lang.reflect.AnnotatedElement>> annotatedElementSetList10 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2, (int) (short) 1);
        java.util.List<java.util.TreeSet<java.lang.reflect.Type>> typeSetList12 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.Type[]) wildcardClassArray2, (int) (byte) 1);
        java.lang.Class<?> wildcardClass13 = typeSetList12.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNull(wildcardClassSetList4);
        org.junit.Assert.assertNull(typeDescriptorSetList6);
        org.junit.Assert.assertNull(objSetList8);
        org.junit.Assert.assertNotNull(annotatedElementSetList10);
        org.junit.Assert.assertNotNull(typeSetList12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1271");
        java.lang.Class[][][][][] classArray1 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][][]>> wildcardClassArraySetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (short) 10);
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][][]>> wildcardClassArraySetList6 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (byte) 10);
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][][]>> wildcardClassArraySetList8 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (short) 0);
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][][]>> wildcardClassArraySetList10 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, 3);
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][][]>> wildcardClassArraySetList12 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, 10);
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][][]>> wildcardClassArraySetList14 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, 3);
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][][]>> wildcardClassArraySetList16 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, 5);
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration[][][][]>> genericDeclarationArraySetList18 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[][][][][]) wildcardClassArray2, (int) ' ');
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration[][][][]>> genericDeclarationArraySetList20 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[][][][][]) wildcardClassArray2, (int) (byte) 100);
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration[][][][]>> genericDeclarationArraySetList22 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[][][][][]) wildcardClassArray2, (int) 'a');
        java.lang.Class<?> wildcardClass23 = genericDeclarationArraySetList22.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList4);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList6);
        org.junit.Assert.assertNull(wildcardClassArraySetList8);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList10);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList12);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList14);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList16);
        org.junit.Assert.assertNotNull(genericDeclarationArraySetList18);
        org.junit.Assert.assertNotNull(genericDeclarationArraySetList20);
        org.junit.Assert.assertNotNull(genericDeclarationArraySetList22);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test1272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1272");
        java.lang.Class[][][] classArray1 = new java.lang.Class[0][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray2 = (java.lang.Class<?>[][][]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][]>> wildcardClassArraySetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (byte) -1);
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][]>> wildcardClassArraySetList6 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, 0);
        java.util.List<java.util.TreeSet<java.lang.reflect.Type[][]>> typeArraySetList8 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.Type[][][]) wildcardClassArray2, (int) (byte) 100);
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][]>> wildcardClassArraySetList10 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (short) 100);
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][]>> wildcardClassArraySetList12 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, 0);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass13 = wildcardClassArraySetList12.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList4);
        org.junit.Assert.assertNull(wildcardClassArraySetList6);
        org.junit.Assert.assertNotNull(typeArraySetList8);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList10);
        org.junit.Assert.assertNull(wildcardClassArraySetList12);
    }

    @Test
    public void test1273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1273");
        com.thealgorithms.backtracking.Combination[][][][] combinationArray0 = new com.thealgorithms.backtracking.Combination[][][][] {};
        java.util.List<java.util.TreeSet<com.thealgorithms.backtracking.Combination[][][]>> combinationArraySetList2 = com.thealgorithms.backtracking.Combination.combination(combinationArray0, (int) ' ');
        java.util.List<java.util.TreeSet<com.thealgorithms.backtracking.Combination[][][]>> combinationArraySetList4 = com.thealgorithms.backtracking.Combination.combination(combinationArray0, 1);
        java.util.List<java.util.TreeSet<com.thealgorithms.backtracking.Combination[][][]>> combinationArraySetList6 = com.thealgorithms.backtracking.Combination.combination(combinationArray0, (int) '4');
        java.lang.Class<?> wildcardClass7 = combinationArray0.getClass();
        org.junit.Assert.assertNotNull(combinationArray0);
        org.junit.Assert.assertNotNull(combinationArraySetList2);
        org.junit.Assert.assertNotNull(combinationArraySetList4);
        org.junit.Assert.assertNotNull(combinationArraySetList6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test1274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1274");
        java.lang.String[][][][][][][] strArray0 = new java.lang.String[][][][][][][] {};
        java.util.List<java.util.TreeSet<java.lang.String[][][][][][]>> strArraySetList2 = com.thealgorithms.backtracking.Combination.combination(strArray0, (int) ' ');
        java.util.List<java.util.TreeSet<java.lang.String[][][][][][]>> strArraySetList4 = com.thealgorithms.backtracking.Combination.combination(strArray0, (int) ' ');
        java.lang.Class<?> wildcardClass5 = strArraySetList4.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArraySetList2);
        org.junit.Assert.assertNotNull(strArraySetList4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test1275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1275");
        java.lang.Class[][][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][][]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][][][][][][]>> wildcardClassArraySetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, 2);
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][][][][][][]>> wildcardClassArraySetList6 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (short) 100);
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][][][][][][]>> wildcardClassArraySetList8 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (byte) 10);
        java.lang.Class<?> wildcardClass9 = wildcardClassArraySetList8.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList4);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList6);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1276");
        java.util.Collection[][] collectionArray0 = new java.util.Collection[][] {};
        java.util.List<java.util.TreeSet<java.util.Collection[]>> collectionArraySetList2 = com.thealgorithms.backtracking.Combination.combination(collectionArray0, (int) (byte) 0);
        java.util.List<java.util.TreeSet<java.util.Collection[]>> collectionArraySetList4 = com.thealgorithms.backtracking.Combination.combination(collectionArray0, (int) (byte) -1);
        java.util.List<java.util.TreeSet<java.io.Serializable>> serializableSetList6 = com.thealgorithms.backtracking.Combination.combination((java.io.Serializable[]) collectionArray0, (int) '4');
        java.util.List<java.util.TreeSet<java.util.Collection[]>> collectionArraySetList8 = com.thealgorithms.backtracking.Combination.combination(collectionArray0, (int) (byte) 100);
        java.util.List<java.util.TreeSet<java.util.Collection[]>> collectionArraySetList10 = com.thealgorithms.backtracking.Combination.combination(collectionArray0, (int) (short) 10);
        java.lang.Class<?> wildcardClass11 = collectionArray0.getClass();
        org.junit.Assert.assertNotNull(collectionArray0);
        org.junit.Assert.assertNull(collectionArraySetList2);
        org.junit.Assert.assertNotNull(collectionArraySetList4);
        org.junit.Assert.assertNotNull(serializableSetList6);
        org.junit.Assert.assertNotNull(collectionArraySetList8);
        org.junit.Assert.assertNotNull(collectionArraySetList10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1277");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.util.TreeSet<java.lang.String>> strSetList4 = com.thealgorithms.backtracking.Combination.combination(strArray2, (int) '#');
        java.util.List<java.util.TreeSet<java.lang.CharSequence>> charSequenceSetList6 = com.thealgorithms.backtracking.Combination.combination((java.lang.CharSequence[]) strArray2, 10);
        java.util.List<java.util.TreeSet<java.lang.constant.Constable>> constableSetList8 = com.thealgorithms.backtracking.Combination.combination((java.lang.constant.Constable[]) strArray2, (int) (byte) 1);
        java.util.List<java.util.TreeSet<java.lang.String>> strSetList10 = com.thealgorithms.backtracking.Combination.combination(strArray2, (int) (short) 1);
        java.util.List<java.util.TreeSet<java.lang.constant.ConstantDesc>> constantDescSetList12 = com.thealgorithms.backtracking.Combination.combination((java.lang.constant.ConstantDesc[]) strArray2, (int) (short) 1);
        java.util.List<java.util.TreeSet<java.lang.constant.ConstantDesc>> constantDescSetList14 = com.thealgorithms.backtracking.Combination.combination((java.lang.constant.ConstantDesc[]) strArray2, (int) (short) -1);
        java.util.List<java.util.TreeSet<java.lang.String>> strSetList16 = com.thealgorithms.backtracking.Combination.combination(strArray2, 100);
        java.util.List<java.util.TreeSet<java.lang.CharSequence>> charSequenceSetList18 = com.thealgorithms.backtracking.Combination.combination((java.lang.CharSequence[]) strArray2, 10);
        java.util.List<java.util.TreeSet<java.lang.String>> strSetList20 = com.thealgorithms.backtracking.Combination.combination(strArray2, (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass21 = strSetList20.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strSetList4);
        org.junit.Assert.assertNotNull(charSequenceSetList6);
        org.junit.Assert.assertNotNull(constableSetList8);
        org.junit.Assert.assertNotNull(strSetList10);
        org.junit.Assert.assertNotNull(constantDescSetList12);
        org.junit.Assert.assertNotNull(constantDescSetList14);
        org.junit.Assert.assertNotNull(strSetList16);
        org.junit.Assert.assertNotNull(charSequenceSetList18);
        org.junit.Assert.assertNull(strSetList20);
    }

    @Test
    public void test1278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1278");
        java.util.List[][][][][][] listArray1 = new java.util.List[0][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[][][][][][] strSetListArray2 = (java.util.List<java.util.TreeSet<java.lang.String>>[][][][][][]) listArray1;
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[][][][][]>> listArraySetList4 = com.thealgorithms.backtracking.Combination.combination(strSetListArray2, (int) (byte) 100);
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[][][][][]>> listArraySetList6 = com.thealgorithms.backtracking.Combination.combination(strSetListArray2, (int) (short) -1);
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[][][][][]>> listArraySetList8 = com.thealgorithms.backtracking.Combination.combination(strSetListArray2, 5);
        java.lang.Class<?> wildcardClass9 = strSetListArray2.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strSetListArray2);
        org.junit.Assert.assertNotNull(listArraySetList4);
        org.junit.Assert.assertNotNull(listArraySetList6);
        org.junit.Assert.assertNotNull(listArraySetList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1279");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>>> wildcardClassSetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (byte) 0);
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration>> genericDeclarationSetList6 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2, (int) (byte) 1);
        java.util.List<java.util.TreeSet<java.lang.invoke.TypeDescriptor>> typeDescriptorSetList8 = com.thealgorithms.backtracking.Combination.combination((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2, (int) ' ');
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration>> genericDeclarationSetList10 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2, 0);
        java.util.List<java.util.TreeSet<java.lang.Class<?>>> wildcardClassSetList12 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (-1));
        java.util.List<java.util.TreeSet<java.lang.Class<?>>> wildcardClassSetList14 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) '#');
        java.util.List<java.util.TreeSet<java.lang.invoke.TypeDescriptor>> typeDescriptorSetList16 = com.thealgorithms.backtracking.Combination.combination((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2, 1);
        java.lang.Class<?> wildcardClass17 = typeDescriptorSetList16.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNull(wildcardClassSetList4);
        org.junit.Assert.assertNotNull(genericDeclarationSetList6);
        org.junit.Assert.assertNotNull(typeDescriptorSetList8);
        org.junit.Assert.assertNull(genericDeclarationSetList10);
        org.junit.Assert.assertNotNull(wildcardClassSetList12);
        org.junit.Assert.assertNotNull(wildcardClassSetList14);
        org.junit.Assert.assertNotNull(typeDescriptorSetList16);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test1280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1280");
        java.lang.String[] strArray1 = new java.lang.String[] { "hi!" };
        java.lang.String[][] strArray2 = new java.lang.String[][] { strArray1 };
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!" };
        java.lang.String[][] strArray5 = new java.lang.String[][] { strArray4 };
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!" };
        java.lang.String[][] strArray8 = new java.lang.String[][] { strArray7 };
        java.lang.String[] strArray10 = new java.lang.String[] { "hi!" };
        java.lang.String[][] strArray11 = new java.lang.String[][] { strArray10 };
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!" };
        java.lang.String[][] strArray14 = new java.lang.String[][] { strArray13 };
        java.lang.String[] strArray16 = new java.lang.String[] { "hi!" };
        java.lang.String[][] strArray17 = new java.lang.String[][] { strArray16 };
        java.lang.String[][][] strArray18 = new java.lang.String[][][] { strArray2, strArray5, strArray8, strArray11, strArray14, strArray17 };
        java.lang.String[][][][] strArray19 = new java.lang.String[][][][] { strArray18 };
        java.util.List<java.util.TreeSet<java.lang.String[][][]>> strArraySetList21 = com.thealgorithms.backtracking.Combination.combination(strArray19, (int) (byte) 0);
        java.util.List<java.util.TreeSet<java.lang.String[][][]>> strArraySetList23 = com.thealgorithms.backtracking.Combination.combination(strArray19, 4);
        java.lang.Class<?> wildcardClass24 = strArray19.getClass();
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNull(strArraySetList21);
        org.junit.Assert.assertNotNull(strArraySetList23);
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test1281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1281");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>>> wildcardClassSetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (byte) 0);
        java.util.List<java.util.TreeSet<java.lang.invoke.TypeDescriptor>> typeDescriptorSetList6 = com.thealgorithms.backtracking.Combination.combination((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2, 0);
        java.util.List<java.util.TreeSet<java.lang.reflect.AnnotatedElement>> annotatedElementSetList8 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2, (int) '4');
        java.util.List<java.util.TreeSet<java.lang.invoke.TypeDescriptor>> typeDescriptorSetList10 = com.thealgorithms.backtracking.Combination.combination((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2, (int) (byte) 1);
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration>> genericDeclarationSetList12 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2, (int) ' ');
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration>> genericDeclarationSetList14 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2, (-1));
        java.lang.Class<?> wildcardClass15 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNull(wildcardClassSetList4);
        org.junit.Assert.assertNull(typeDescriptorSetList6);
        org.junit.Assert.assertNotNull(annotatedElementSetList8);
        org.junit.Assert.assertNotNull(typeDescriptorSetList10);
        org.junit.Assert.assertNotNull(genericDeclarationSetList12);
        org.junit.Assert.assertNotNull(genericDeclarationSetList14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test1282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1282");
        java.lang.Class[][][] classArray1 = new java.lang.Class[0][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray2 = (java.lang.Class<?>[][][]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][]>> wildcardClassArraySetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (byte) -1);
        java.util.List<java.util.TreeSet<java.lang.reflect.Type[][]>> typeArraySetList6 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.Type[][][]) wildcardClassArray2, (int) (byte) 0);
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][]>> wildcardClassArraySetList8 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) 'a');
        java.lang.Class<?> wildcardClass9 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList4);
        org.junit.Assert.assertNull(typeArraySetList6);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1283");
        java.util.List[] listArray1 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[] strSetListArray2 = (java.util.List<java.util.TreeSet<java.lang.String>>[]) listArray1;
        java.util.List[] listArray4 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[] strSetListArray5 = (java.util.List<java.util.TreeSet<java.lang.String>>[]) listArray4;
        java.util.List[][] listArray7 = new java.util.List[2][];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[][] strSetListArray8 = (java.util.List<java.util.TreeSet<java.lang.String>>[][]) listArray7;
        strSetListArray8[0] = strSetListArray2;
        strSetListArray8[1] = strSetListArray5;
        java.util.List[][][] listArray14 = new java.util.List[1][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[][][] strSetListArray15 = (java.util.List<java.util.TreeSet<java.lang.String>>[][][]) listArray14;
        strSetListArray15[0] = strSetListArray8;
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[][]>> listArraySetList19 = com.thealgorithms.backtracking.Combination.combination(strSetListArray15, (int) (short) 10);
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[][]>> listArraySetList21 = com.thealgorithms.backtracking.Combination.combination(strSetListArray15, (int) '#');
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[][]>> listArraySetList23 = com.thealgorithms.backtracking.Combination.combination(strSetListArray15, 4);
        java.util.List<java.util.TreeSet<java.util.Collection[][]>> collectionArraySetList25 = com.thealgorithms.backtracking.Combination.combination((java.util.Collection[][][]) strSetListArray15, 100);
        java.lang.Class<?> wildcardClass26 = collectionArraySetList25.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strSetListArray2);
        org.junit.Assert.assertNotNull(listArray4);
        org.junit.Assert.assertNotNull(strSetListArray5);
        org.junit.Assert.assertNotNull(listArray7);
        org.junit.Assert.assertNotNull(strSetListArray8);
        org.junit.Assert.assertNotNull(listArray14);
        org.junit.Assert.assertNotNull(strSetListArray15);
        org.junit.Assert.assertNotNull(listArraySetList19);
        org.junit.Assert.assertNotNull(listArraySetList21);
        org.junit.Assert.assertNotNull(listArraySetList23);
        org.junit.Assert.assertNotNull(collectionArraySetList25);
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test1284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1284");
        java.lang.Class[][][][][] classArray1 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][]) classArray1;
        java.lang.Class[][][][][] classArray4 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][]) classArray4;
        java.lang.Class[][][][][] classArray7 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray8 = (java.lang.Class<?>[][][][][]) classArray7;
        java.lang.Class[][][][][] classArray10 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray11 = (java.lang.Class<?>[][][][][]) classArray10;
        java.lang.Class[][][][][] classArray13 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray14 = (java.lang.Class<?>[][][][][]) classArray13;
        java.lang.Class[][][][][][] classArray16 = new java.lang.Class[5][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray17 = (java.lang.Class<?>[][][][][][]) classArray16;
        wildcardClassArray17[0] = wildcardClassArray2;
        wildcardClassArray17[1] = wildcardClassArray5;
        wildcardClassArray17[2] = wildcardClassArray8;
        wildcardClassArray17[3] = wildcardClassArray11;
        wildcardClassArray17[4] = wildcardClassArray14;
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][][][]>> wildcardClassArraySetList29 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray17, 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.TreeSet<java.lang.Class<?>[][][][][]>> wildcardClassArraySetList31 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray17, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(classArray16);
        org.junit.Assert.assertNotNull(wildcardClassArray17);
        org.junit.Assert.assertNull(wildcardClassArraySetList29);
    }

    @Test
    public void test1285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1285");
        com.thealgorithms.backtracking.Combination combination0 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination1 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination2 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination3 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination4 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination5 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination[] combinationArray6 = new com.thealgorithms.backtracking.Combination[] { combination0, combination1, combination2, combination3, combination4, combination5 };
        com.thealgorithms.backtracking.Combination combination7 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination8 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination9 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination10 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination11 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination12 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination[] combinationArray13 = new com.thealgorithms.backtracking.Combination[] { combination7, combination8, combination9, combination10, combination11, combination12 };
        com.thealgorithms.backtracking.Combination[][] combinationArray14 = new com.thealgorithms.backtracking.Combination[][] { combinationArray6, combinationArray13 };
        com.thealgorithms.backtracking.Combination combination15 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination16 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination17 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination18 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination19 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination20 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination[] combinationArray21 = new com.thealgorithms.backtracking.Combination[] { combination15, combination16, combination17, combination18, combination19, combination20 };
        com.thealgorithms.backtracking.Combination combination22 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination23 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination24 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination25 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination26 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination27 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination[] combinationArray28 = new com.thealgorithms.backtracking.Combination[] { combination22, combination23, combination24, combination25, combination26, combination27 };
        com.thealgorithms.backtracking.Combination[][] combinationArray29 = new com.thealgorithms.backtracking.Combination[][] { combinationArray21, combinationArray28 };
        com.thealgorithms.backtracking.Combination combination30 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination31 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination32 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination33 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination34 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination35 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination[] combinationArray36 = new com.thealgorithms.backtracking.Combination[] { combination30, combination31, combination32, combination33, combination34, combination35 };
        com.thealgorithms.backtracking.Combination combination37 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination38 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination39 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination40 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination41 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination42 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination[] combinationArray43 = new com.thealgorithms.backtracking.Combination[] { combination37, combination38, combination39, combination40, combination41, combination42 };
        com.thealgorithms.backtracking.Combination[][] combinationArray44 = new com.thealgorithms.backtracking.Combination[][] { combinationArray36, combinationArray43 };
        com.thealgorithms.backtracking.Combination combination45 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination46 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination47 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination48 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination49 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination50 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination[] combinationArray51 = new com.thealgorithms.backtracking.Combination[] { combination45, combination46, combination47, combination48, combination49, combination50 };
        com.thealgorithms.backtracking.Combination combination52 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination53 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination54 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination55 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination56 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination57 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination[] combinationArray58 = new com.thealgorithms.backtracking.Combination[] { combination52, combination53, combination54, combination55, combination56, combination57 };
        com.thealgorithms.backtracking.Combination[][] combinationArray59 = new com.thealgorithms.backtracking.Combination[][] { combinationArray51, combinationArray58 };
        com.thealgorithms.backtracking.Combination combination60 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination61 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination62 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination63 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination64 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination65 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination[] combinationArray66 = new com.thealgorithms.backtracking.Combination[] { combination60, combination61, combination62, combination63, combination64, combination65 };
        com.thealgorithms.backtracking.Combination combination67 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination68 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination69 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination70 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination71 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination72 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination[] combinationArray73 = new com.thealgorithms.backtracking.Combination[] { combination67, combination68, combination69, combination70, combination71, combination72 };
        com.thealgorithms.backtracking.Combination[][] combinationArray74 = new com.thealgorithms.backtracking.Combination[][] { combinationArray66, combinationArray73 };
        com.thealgorithms.backtracking.Combination[][][] combinationArray75 = new com.thealgorithms.backtracking.Combination[][][] { combinationArray14, combinationArray29, combinationArray44, combinationArray59, combinationArray74 };
        com.thealgorithms.backtracking.Combination[][][][] combinationArray76 = new com.thealgorithms.backtracking.Combination[][][][] { combinationArray75 };
        java.util.List<java.util.TreeSet<com.thealgorithms.backtracking.Combination[][][]>> combinationArraySetList78 = com.thealgorithms.backtracking.Combination.combination(combinationArray76, 2);
        java.util.List<java.util.TreeSet<com.thealgorithms.backtracking.Combination[][][]>> combinationArraySetList80 = com.thealgorithms.backtracking.Combination.combination(combinationArray76, (int) (byte) 100);
        java.util.List<java.util.TreeSet<com.thealgorithms.backtracking.Combination[][][]>> combinationArraySetList82 = com.thealgorithms.backtracking.Combination.combination(combinationArray76, 3);
        java.util.List<java.util.TreeSet<com.thealgorithms.backtracking.Combination[][][]>> combinationArraySetList84 = com.thealgorithms.backtracking.Combination.combination(combinationArray76, 6);
        java.lang.Class<?> wildcardClass85 = combinationArraySetList84.getClass();
        org.junit.Assert.assertNotNull(combinationArray6);
        org.junit.Assert.assertNotNull(combinationArray13);
        org.junit.Assert.assertNotNull(combinationArray14);
        org.junit.Assert.assertNotNull(combinationArray21);
        org.junit.Assert.assertNotNull(combinationArray28);
        org.junit.Assert.assertNotNull(combinationArray29);
        org.junit.Assert.assertNotNull(combinationArray36);
        org.junit.Assert.assertNotNull(combinationArray43);
        org.junit.Assert.assertNotNull(combinationArray44);
        org.junit.Assert.assertNotNull(combinationArray51);
        org.junit.Assert.assertNotNull(combinationArray58);
        org.junit.Assert.assertNotNull(combinationArray59);
        org.junit.Assert.assertNotNull(combinationArray66);
        org.junit.Assert.assertNotNull(combinationArray73);
        org.junit.Assert.assertNotNull(combinationArray74);
        org.junit.Assert.assertNotNull(combinationArray75);
        org.junit.Assert.assertNotNull(combinationArray76);
        org.junit.Assert.assertNotNull(combinationArraySetList78);
        org.junit.Assert.assertNotNull(combinationArraySetList80);
        org.junit.Assert.assertNotNull(combinationArraySetList82);
        org.junit.Assert.assertNotNull(combinationArraySetList84);
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test1286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1286");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>>> wildcardClassSetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (byte) 0);
        java.util.List<java.util.TreeSet<java.lang.invoke.TypeDescriptor>> typeDescriptorSetList6 = com.thealgorithms.backtracking.Combination.combination((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2, (int) (byte) 100);
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration>> genericDeclarationSetList8 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2, 10);
        java.util.List<java.util.TreeSet<java.lang.Class<?>>> wildcardClassSetList10 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (-1));
        java.lang.Class<?> wildcardClass11 = wildcardClassSetList10.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNull(wildcardClassSetList4);
        org.junit.Assert.assertNotNull(typeDescriptorSetList6);
        org.junit.Assert.assertNotNull(genericDeclarationSetList8);
        org.junit.Assert.assertNotNull(wildcardClassSetList10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1287");
        java.lang.String[][][][][][][] strArray0 = new java.lang.String[][][][][][][] {};
        java.util.List<java.util.TreeSet<java.lang.String[][][][][][]>> strArraySetList2 = com.thealgorithms.backtracking.Combination.combination(strArray0, (int) ' ');
        java.lang.Class<?> wildcardClass3 = strArray0.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArraySetList2);
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test1288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1288");
        java.lang.reflect.GenericDeclaration[][][][] genericDeclarationArray0 = new java.lang.reflect.GenericDeclaration[][][][] {};
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration[][][]>> genericDeclarationArraySetList2 = com.thealgorithms.backtracking.Combination.combination(genericDeclarationArray0, (int) (short) 0);
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration[][][]>> genericDeclarationArraySetList4 = com.thealgorithms.backtracking.Combination.combination(genericDeclarationArray0, 0);
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration[][][]>> genericDeclarationArraySetList6 = com.thealgorithms.backtracking.Combination.combination(genericDeclarationArray0, 10);
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration[][][]>> genericDeclarationArraySetList8 = com.thealgorithms.backtracking.Combination.combination(genericDeclarationArray0, (int) (byte) 0);
        java.lang.Class<?> wildcardClass9 = genericDeclarationArray0.getClass();
        org.junit.Assert.assertNotNull(genericDeclarationArray0);
        org.junit.Assert.assertNull(genericDeclarationArraySetList2);
        org.junit.Assert.assertNull(genericDeclarationArraySetList4);
        org.junit.Assert.assertNotNull(genericDeclarationArraySetList6);
        org.junit.Assert.assertNull(genericDeclarationArraySetList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1289");
        java.util.List[][] listArray1 = new java.util.List[0][];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[][] strSetListArray2 = (java.util.List<java.util.TreeSet<java.lang.String>>[][]) listArray1;
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[]>> listArraySetList4 = com.thealgorithms.backtracking.Combination.combination(strSetListArray2, (int) (short) -1);
        java.lang.Class<?> wildcardClass5 = strSetListArray2.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strSetListArray2);
        org.junit.Assert.assertNotNull(listArraySetList4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test1290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1290");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.util.TreeSet<java.lang.String>> strSetList4 = com.thealgorithms.backtracking.Combination.combination(strArray2, (int) '#');
        java.util.List<java.util.TreeSet<java.lang.constant.ConstantDesc>> constantDescSetList6 = com.thealgorithms.backtracking.Combination.combination((java.lang.constant.ConstantDesc[]) strArray2, 1);
        java.util.List<java.util.TreeSet<java.lang.CharSequence>> charSequenceSetList8 = com.thealgorithms.backtracking.Combination.combination((java.lang.CharSequence[]) strArray2, 0);
        java.util.List<java.util.TreeSet<java.lang.Comparable<java.lang.String>>> strComparableSetList10 = com.thealgorithms.backtracking.Combination.combination((java.lang.Comparable<java.lang.String>[]) strArray2, (int) (byte) 10);
        java.util.List<java.util.TreeSet<java.lang.Comparable<java.lang.String>>> strComparableSetList12 = com.thealgorithms.backtracking.Combination.combination((java.lang.Comparable<java.lang.String>[]) strArray2, (int) (short) -1);
        java.util.List<java.util.TreeSet<java.lang.String>> strSetList14 = com.thealgorithms.backtracking.Combination.combination(strArray2, (-1));
        java.util.List<java.util.TreeSet<java.lang.constant.ConstantDesc>> constantDescSetList16 = com.thealgorithms.backtracking.Combination.combination((java.lang.constant.ConstantDesc[]) strArray2, 6);
        java.util.List<java.util.TreeSet<java.lang.constant.ConstantDesc>> constantDescSetList18 = com.thealgorithms.backtracking.Combination.combination((java.lang.constant.ConstantDesc[]) strArray2, (-1));
        java.lang.Class<?> wildcardClass19 = constantDescSetList18.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strSetList4);
        org.junit.Assert.assertNotNull(constantDescSetList6);
        org.junit.Assert.assertNull(charSequenceSetList8);
        org.junit.Assert.assertNotNull(strComparableSetList10);
        org.junit.Assert.assertNotNull(strComparableSetList12);
        org.junit.Assert.assertNotNull(strSetList14);
        org.junit.Assert.assertNotNull(constantDescSetList16);
        org.junit.Assert.assertNotNull(constantDescSetList18);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test1291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1291");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.util.TreeSet<java.lang.String>> strSetList4 = com.thealgorithms.backtracking.Combination.combination(strArray2, (int) '#');
        java.util.List<java.util.TreeSet<java.lang.constant.ConstantDesc>> constantDescSetList6 = com.thealgorithms.backtracking.Combination.combination((java.lang.constant.ConstantDesc[]) strArray2, 1);
        java.util.List<java.util.TreeSet<java.lang.String>> strSetList8 = com.thealgorithms.backtracking.Combination.combination(strArray2, (int) (byte) -1);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "", "", "" };
        java.util.List<java.util.TreeSet<java.lang.Comparable<java.lang.String>>> strComparableSetList17 = com.thealgorithms.backtracking.Combination.combination((java.lang.Comparable<java.lang.String>[]) strArray15, (int) (byte) 1);
        java.util.List<java.util.TreeSet<java.io.Serializable>> serializableSetList19 = com.thealgorithms.backtracking.Combination.combination((java.io.Serializable[]) strArray15, (int) '4');
        java.util.List<java.util.TreeSet<java.lang.Object>> objSetList21 = com.thealgorithms.backtracking.Combination.combination((java.lang.Object[]) strArray15, (int) '#');
        java.util.List<java.util.TreeSet<java.lang.Comparable<java.lang.String>>> strComparableSetList23 = com.thealgorithms.backtracking.Combination.combination((java.lang.Comparable<java.lang.String>[]) strArray15, 100);
        java.util.List<java.util.TreeSet<java.lang.String>> strSetList25 = com.thealgorithms.backtracking.Combination.combination(strArray15, (int) '4');
        java.lang.String[] strArray28 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.util.TreeSet<java.lang.String>> strSetList30 = com.thealgorithms.backtracking.Combination.combination(strArray28, (int) '#');
        java.util.List<java.util.TreeSet<java.lang.CharSequence>> charSequenceSetList32 = com.thealgorithms.backtracking.Combination.combination((java.lang.CharSequence[]) strArray28, 10);
        java.util.List<java.util.TreeSet<java.lang.constant.Constable>> constableSetList34 = com.thealgorithms.backtracking.Combination.combination((java.lang.constant.Constable[]) strArray28, (int) (byte) 1);
        java.util.List<java.util.TreeSet<java.lang.String>> strSetList36 = com.thealgorithms.backtracking.Combination.combination(strArray28, (int) (short) 1);
        java.lang.String[] strArray39 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.util.TreeSet<java.lang.String>> strSetList41 = com.thealgorithms.backtracking.Combination.combination(strArray39, (int) '#');
        java.lang.String[] strArray44 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.util.TreeSet<java.lang.String>> strSetList46 = com.thealgorithms.backtracking.Combination.combination(strArray44, (int) '#');
        java.util.List[] listArray48 = new java.util.List[5];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[] strSetListArray49 = (java.util.List<java.util.TreeSet<java.lang.String>>[]) listArray48;
        strSetListArray49[0] = strSetList8;
        strSetListArray49[1] = strSetList25;
        strSetListArray49[2] = strSetList36;
        strSetListArray49[3] = strSetList41;
        strSetListArray49[4] = strSetList46;
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>>> setListSetList61 = com.thealgorithms.backtracking.Combination.combination(strSetListArray49, (int) (short) 0);
        java.util.List<java.util.TreeSet<java.util.Collection<java.util.TreeSet<java.lang.String>>>> setCollectionSetList63 = com.thealgorithms.backtracking.Combination.combination((java.util.Collection<java.util.TreeSet<java.lang.String>>[]) strSetListArray49, (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>>> setListSetList65 = com.thealgorithms.backtracking.Combination.combination(strSetListArray49, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strSetList4);
        org.junit.Assert.assertNotNull(constantDescSetList6);
        org.junit.Assert.assertNotNull(strSetList8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strComparableSetList17);
        org.junit.Assert.assertNotNull(serializableSetList19);
        org.junit.Assert.assertNotNull(objSetList21);
        org.junit.Assert.assertNotNull(strComparableSetList23);
        org.junit.Assert.assertNotNull(strSetList25);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(strSetList30);
        org.junit.Assert.assertNotNull(charSequenceSetList32);
        org.junit.Assert.assertNotNull(constableSetList34);
        org.junit.Assert.assertNotNull(strSetList36);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(strSetList41);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(strSetList46);
        org.junit.Assert.assertNotNull(listArray48);
        org.junit.Assert.assertNotNull(strSetListArray49);
        org.junit.Assert.assertNull(setListSetList61);
        org.junit.Assert.assertNull(setCollectionSetList63);
    }

    @Test
    public void test1292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1292");
        java.lang.Class[][] classArray1 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray2 = (java.lang.Class<?>[][]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>[]>> wildcardClassArraySetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (byte) 1);
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration[]>> genericDeclarationArraySetList6 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray2, (int) (byte) -1);
        java.util.List<java.util.TreeSet<java.lang.Class<?>[]>> wildcardClassArraySetList8 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) 'a');
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration[]>> genericDeclarationArraySetList10 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray2, (-1));
        java.lang.Class<?> wildcardClass11 = genericDeclarationArraySetList10.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList4);
        org.junit.Assert.assertNotNull(genericDeclarationArraySetList6);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList8);
        org.junit.Assert.assertNotNull(genericDeclarationArraySetList10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1293");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.util.TreeSet<java.lang.String>> strSetList4 = com.thealgorithms.backtracking.Combination.combination(strArray2, (int) '#');
        java.util.List<java.util.TreeSet<java.lang.constant.ConstantDesc>> constantDescSetList6 = com.thealgorithms.backtracking.Combination.combination((java.lang.constant.ConstantDesc[]) strArray2, (int) (short) 0);
        java.util.List<java.util.TreeSet<java.io.Serializable>> serializableSetList8 = com.thealgorithms.backtracking.Combination.combination((java.io.Serializable[]) strArray2, 100);
        java.util.List<java.util.TreeSet<java.lang.constant.Constable>> constableSetList10 = com.thealgorithms.backtracking.Combination.combination((java.lang.constant.Constable[]) strArray2, (int) (byte) 1);
        java.lang.Class<?> wildcardClass11 = constableSetList10.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strSetList4);
        org.junit.Assert.assertNull(constantDescSetList6);
        org.junit.Assert.assertNotNull(serializableSetList8);
        org.junit.Assert.assertNotNull(constableSetList10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1294");
        com.thealgorithms.backtracking.Combination combination0 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination[] combinationArray1 = new com.thealgorithms.backtracking.Combination[] { combination0 };
        java.util.List<java.util.TreeSet<com.thealgorithms.backtracking.Combination>> combinationSetList3 = com.thealgorithms.backtracking.Combination.combination(combinationArray1, (int) (byte) 100);
        java.util.List<java.util.TreeSet<com.thealgorithms.backtracking.Combination>> combinationSetList5 = com.thealgorithms.backtracking.Combination.combination(combinationArray1, (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass6 = combinationSetList5.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(combinationArray1);
        org.junit.Assert.assertNotNull(combinationSetList3);
        org.junit.Assert.assertNull(combinationSetList5);
    }

    @Test
    public void test1295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1295");
        java.lang.Class[][][] classArray1 = new java.lang.Class[0][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray2 = (java.lang.Class<?>[][][]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][]>> wildcardClassArraySetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (byte) -1);
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][]>> wildcardClassArraySetList6 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) 'a');
        java.lang.Class<?> wildcardClass7 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList4);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test1296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1296");
        java.util.List[] listArray1 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[] strSetListArray2 = (java.util.List<java.util.TreeSet<java.lang.String>>[]) listArray1;
        java.util.List[] listArray4 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[] strSetListArray5 = (java.util.List<java.util.TreeSet<java.lang.String>>[]) listArray4;
        java.util.List[][] listArray7 = new java.util.List[2][];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[][] strSetListArray8 = (java.util.List<java.util.TreeSet<java.lang.String>>[][]) listArray7;
        strSetListArray8[0] = strSetListArray2;
        strSetListArray8[1] = strSetListArray5;
        java.util.List[][][] listArray14 = new java.util.List[1][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[][][] strSetListArray15 = (java.util.List<java.util.TreeSet<java.lang.String>>[][][]) listArray14;
        strSetListArray15[0] = strSetListArray8;
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[][]>> listArraySetList19 = com.thealgorithms.backtracking.Combination.combination(strSetListArray15, (int) (short) 10);
        java.util.List<java.util.TreeSet<java.util.Collection[][]>> collectionArraySetList21 = com.thealgorithms.backtracking.Combination.combination((java.util.Collection[][][]) strSetListArray15, 100);
        java.util.List<java.util.TreeSet<java.util.Collection[][]>> collectionArraySetList23 = com.thealgorithms.backtracking.Combination.combination((java.util.Collection[][][]) strSetListArray15, (int) '#');
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[][]>> listArraySetList25 = com.thealgorithms.backtracking.Combination.combination(strSetListArray15, (int) 'a');
        java.lang.Class<?> wildcardClass26 = listArraySetList25.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strSetListArray2);
        org.junit.Assert.assertNotNull(listArray4);
        org.junit.Assert.assertNotNull(strSetListArray5);
        org.junit.Assert.assertNotNull(listArray7);
        org.junit.Assert.assertNotNull(strSetListArray8);
        org.junit.Assert.assertNotNull(listArray14);
        org.junit.Assert.assertNotNull(strSetListArray15);
        org.junit.Assert.assertNotNull(listArraySetList19);
        org.junit.Assert.assertNotNull(collectionArraySetList21);
        org.junit.Assert.assertNotNull(collectionArraySetList23);
        org.junit.Assert.assertNotNull(listArraySetList25);
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test1297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1297");
        java.util.Collection[][] collectionArray0 = new java.util.Collection[][] {};
        java.util.List<java.util.TreeSet<java.util.Collection[]>> collectionArraySetList2 = com.thealgorithms.backtracking.Combination.combination(collectionArray0, (int) (byte) 0);
        java.util.List<java.util.TreeSet<java.util.Collection[]>> collectionArraySetList4 = com.thealgorithms.backtracking.Combination.combination(collectionArray0, (int) (byte) -1);
        java.util.List<java.util.TreeSet<java.io.Serializable>> serializableSetList6 = com.thealgorithms.backtracking.Combination.combination((java.io.Serializable[]) collectionArray0, (int) '4');
        java.util.List<java.util.TreeSet<java.util.Collection[]>> collectionArraySetList8 = com.thealgorithms.backtracking.Combination.combination(collectionArray0, (int) '#');
        java.util.List<java.util.TreeSet<java.util.Collection[]>> collectionArraySetList10 = com.thealgorithms.backtracking.Combination.combination(collectionArray0, 10);
        java.util.List<java.util.TreeSet<java.util.Collection[]>> collectionArraySetList12 = com.thealgorithms.backtracking.Combination.combination(collectionArray0, 1);
        java.lang.Class<?> wildcardClass13 = collectionArray0.getClass();
        org.junit.Assert.assertNotNull(collectionArray0);
        org.junit.Assert.assertNull(collectionArraySetList2);
        org.junit.Assert.assertNotNull(collectionArraySetList4);
        org.junit.Assert.assertNotNull(serializableSetList6);
        org.junit.Assert.assertNotNull(collectionArraySetList8);
        org.junit.Assert.assertNotNull(collectionArraySetList10);
        org.junit.Assert.assertNotNull(collectionArraySetList12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1298");
        java.lang.Class[][][] classArray1 = new java.lang.Class[0][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray2 = (java.lang.Class<?>[][][]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][]>> wildcardClassArraySetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (byte) -1);
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][]>> wildcardClassArraySetList6 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) 'a');
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][]>> wildcardClassArraySetList8 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (short) 1);
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][]>> wildcardClassArraySetList10 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, 6);
        java.util.List<java.util.TreeSet<java.lang.reflect.Type[][]>> typeArraySetList12 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.Type[][][]) wildcardClassArray2, 1);
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][]>> wildcardClassArraySetList14 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, 10);
        java.lang.Class<?> wildcardClass15 = wildcardClassArraySetList14.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList4);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList6);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList8);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList10);
        org.junit.Assert.assertNotNull(typeArraySetList12);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test1299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1299");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "", "", "", "" };
        java.util.List<java.util.TreeSet<java.lang.Comparable<java.lang.String>>> strComparableSetList8 = com.thealgorithms.backtracking.Combination.combination((java.lang.Comparable<java.lang.String>[]) strArray6, (int) (byte) 1);
        java.util.List<java.util.TreeSet<java.lang.Comparable<java.lang.String>>> strComparableSetList10 = com.thealgorithms.backtracking.Combination.combination((java.lang.Comparable<java.lang.String>[]) strArray6, (int) (byte) 1);
        java.util.List<java.util.TreeSet<java.lang.Comparable<java.lang.String>>> strComparableSetList12 = com.thealgorithms.backtracking.Combination.combination((java.lang.Comparable<java.lang.String>[]) strArray6, (int) (byte) -1);
        java.util.List<java.util.TreeSet<java.lang.CharSequence>> charSequenceSetList14 = com.thealgorithms.backtracking.Combination.combination((java.lang.CharSequence[]) strArray6, (int) (short) -1);
        java.util.List<java.util.TreeSet<java.lang.String>> strSetList16 = com.thealgorithms.backtracking.Combination.combination(strArray6, 100);
        java.lang.Class<?> wildcardClass17 = strSetList16.getClass();
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strComparableSetList8);
        org.junit.Assert.assertNotNull(strComparableSetList10);
        org.junit.Assert.assertNotNull(strComparableSetList12);
        org.junit.Assert.assertNotNull(charSequenceSetList14);
        org.junit.Assert.assertNotNull(strSetList16);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test1300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1300");
        java.util.List[] listArray1 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[] strSetListArray2 = (java.util.List<java.util.TreeSet<java.lang.String>>[]) listArray1;
        java.util.List[] listArray4 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[] strSetListArray5 = (java.util.List<java.util.TreeSet<java.lang.String>>[]) listArray4;
        java.util.List[][] listArray7 = new java.util.List[2][];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[][] strSetListArray8 = (java.util.List<java.util.TreeSet<java.lang.String>>[][]) listArray7;
        strSetListArray8[0] = strSetListArray2;
        strSetListArray8[1] = strSetListArray5;
        java.util.List[][][] listArray14 = new java.util.List[1][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[][][] strSetListArray15 = (java.util.List<java.util.TreeSet<java.lang.String>>[][][]) listArray14;
        strSetListArray15[0] = strSetListArray8;
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[][]>> listArraySetList19 = com.thealgorithms.backtracking.Combination.combination(strSetListArray15, (int) (short) 10);
        java.util.List<java.util.TreeSet<java.util.Collection[][]>> collectionArraySetList21 = com.thealgorithms.backtracking.Combination.combination((java.util.Collection[][][]) strSetListArray15, (int) '#');
        java.util.List<java.util.TreeSet<java.util.Collection[][]>> collectionArraySetList23 = com.thealgorithms.backtracking.Combination.combination((java.util.Collection[][][]) strSetListArray15, 100);
        java.lang.Class<?> wildcardClass24 = strSetListArray15.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strSetListArray2);
        org.junit.Assert.assertNotNull(listArray4);
        org.junit.Assert.assertNotNull(strSetListArray5);
        org.junit.Assert.assertNotNull(listArray7);
        org.junit.Assert.assertNotNull(strSetListArray8);
        org.junit.Assert.assertNotNull(listArray14);
        org.junit.Assert.assertNotNull(strSetListArray15);
        org.junit.Assert.assertNotNull(listArraySetList19);
        org.junit.Assert.assertNotNull(collectionArraySetList21);
        org.junit.Assert.assertNotNull(collectionArraySetList23);
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test1301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1301");
        java.lang.Class[][] classArray1 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray2 = (java.lang.Class<?>[][]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>[]>> wildcardClassArraySetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (byte) 1);
        java.util.List<java.util.TreeSet<java.lang.reflect.Type[]>> typeArraySetList6 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.Type[][]) wildcardClassArray2, 5);
        java.lang.Class<?> wildcardClass7 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList4);
        org.junit.Assert.assertNotNull(typeArraySetList6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test1302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1302");
        java.lang.Class[][][][][][] classArray1 = new java.lang.Class[0][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][][][]>> wildcardClassArraySetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, 1);
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][][][]>> wildcardClassArraySetList6 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, 4);
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][][][]>> wildcardClassArraySetList8 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) ' ');
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][][][]>> wildcardClassArraySetList10 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (short) 100);
        java.lang.Class<?> wildcardClass11 = wildcardClassArraySetList10.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList4);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList6);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList8);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1303");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>>> wildcardClassSetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (byte) 0);
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration>> genericDeclarationSetList6 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2, (int) (byte) 1);
        java.util.List<java.util.TreeSet<java.lang.reflect.Type>> typeSetList8 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.Type[]) wildcardClassArray2, (int) (short) -1);
        java.util.List<java.util.TreeSet<java.lang.constant.Constable>> constableSetList10 = com.thealgorithms.backtracking.Combination.combination((java.lang.constant.Constable[]) wildcardClassArray2, 3);
        java.lang.Class<?> wildcardClass11 = constableSetList10.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNull(wildcardClassSetList4);
        org.junit.Assert.assertNotNull(genericDeclarationSetList6);
        org.junit.Assert.assertNotNull(typeSetList8);
        org.junit.Assert.assertNotNull(constableSetList10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1304");
        java.lang.Class[][] classArray1 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray2 = (java.lang.Class<?>[][]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>[]>> wildcardClassArraySetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (byte) 1);
        java.util.List<java.util.TreeSet<java.lang.Class<?>[]>> wildcardClassArraySetList6 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, 0);
        java.util.List<java.util.TreeSet<java.lang.reflect.Type[]>> typeArraySetList8 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.Type[][]) wildcardClassArray2, 5);
        java.util.List<java.util.TreeSet<java.lang.reflect.Type[]>> typeArraySetList10 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.Type[][]) wildcardClassArray2, (int) (short) 10);
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration[]>> genericDeclarationArraySetList12 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray2, 6);
        java.lang.Class<?> wildcardClass13 = genericDeclarationArraySetList12.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList4);
        org.junit.Assert.assertNull(wildcardClassArraySetList6);
        org.junit.Assert.assertNotNull(typeArraySetList8);
        org.junit.Assert.assertNotNull(typeArraySetList10);
        org.junit.Assert.assertNotNull(genericDeclarationArraySetList12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1305");
        com.thealgorithms.backtracking.Combination[][][][][][][] combinationArray0 = new com.thealgorithms.backtracking.Combination[][][][][][][] {};
        java.util.List<java.util.TreeSet<com.thealgorithms.backtracking.Combination[][][][][][]>> combinationArraySetList2 = com.thealgorithms.backtracking.Combination.combination(combinationArray0, 1);
        java.util.List<java.util.TreeSet<com.thealgorithms.backtracking.Combination[][][][][][]>> combinationArraySetList4 = com.thealgorithms.backtracking.Combination.combination(combinationArray0, (int) (byte) 1);
        java.util.List<java.util.TreeSet<com.thealgorithms.backtracking.Combination[][][][][][]>> combinationArraySetList6 = com.thealgorithms.backtracking.Combination.combination(combinationArray0, (int) (byte) 100);
        org.junit.Assert.assertNotNull(combinationArray0);
        org.junit.Assert.assertNotNull(combinationArraySetList2);
        org.junit.Assert.assertNotNull(combinationArraySetList4);
        org.junit.Assert.assertNotNull(combinationArraySetList6);
    }

    @Test
    public void test1306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1306");
        java.util.List[][][][][] listArray1 = new java.util.List[0][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[][][][][] strSetListArray2 = (java.util.List<java.util.TreeSet<java.lang.String>>[][][][][]) listArray1;
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[][][][]>> listArraySetList4 = com.thealgorithms.backtracking.Combination.combination(strSetListArray2, (int) 'a');
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[][][][]>> listArraySetList6 = com.thealgorithms.backtracking.Combination.combination(strSetListArray2, (int) 'a');
        java.lang.Class<?> wildcardClass7 = listArraySetList6.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strSetListArray2);
        org.junit.Assert.assertNotNull(listArraySetList4);
        org.junit.Assert.assertNotNull(listArraySetList6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test1307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1307");
        java.lang.Class[][][][] classArray1 = new java.lang.Class[0][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][]>> wildcardClassArraySetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (byte) 100);
        java.util.List<java.util.TreeSet<java.lang.reflect.Type[][][]>> typeArraySetList6 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.Type[][][][]) wildcardClassArray2, 3);
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration[][][]>> genericDeclarationArraySetList8 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[][][][]) wildcardClassArray2, (int) ' ');
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][]>> wildcardClassArraySetList10 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) '#');
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][]>> wildcardClassArraySetList12 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (byte) 1);
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration[][][]>> genericDeclarationArraySetList14 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[][][][]) wildcardClassArray2, 0);
        java.lang.Class<?> wildcardClass15 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList4);
        org.junit.Assert.assertNotNull(typeArraySetList6);
        org.junit.Assert.assertNotNull(genericDeclarationArraySetList8);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList10);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList12);
        org.junit.Assert.assertNull(genericDeclarationArraySetList14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test1308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1308");
        java.util.List[][][][][] listArray1 = new java.util.List[0][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[][][][][] strSetListArray2 = (java.util.List<java.util.TreeSet<java.lang.String>>[][][][][]) listArray1;
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[][][][]>> listArraySetList4 = com.thealgorithms.backtracking.Combination.combination(strSetListArray2, (int) 'a');
        java.lang.Class<?> wildcardClass5 = strSetListArray2.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strSetListArray2);
        org.junit.Assert.assertNotNull(listArraySetList4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test1309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1309");
        java.lang.Class[][][][][][][] classArray1 = new java.lang.Class[0][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][][][][]>> wildcardClassArraySetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, 1);
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][][][][]>> wildcardClassArraySetList6 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, 3);
        java.lang.Class<?> wildcardClass7 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList4);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test1310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1310");
        com.thealgorithms.backtracking.Combination[][][][][][][][] combinationArray0 = new com.thealgorithms.backtracking.Combination[][][][][][][][] {};
        com.thealgorithms.backtracking.Combination[][][][][][][][][] combinationArray1 = new com.thealgorithms.backtracking.Combination[][][][][][][][][] { combinationArray0 };
        java.util.List<java.util.TreeSet<com.thealgorithms.backtracking.Combination[][][][][][][][]>> combinationArraySetList3 = com.thealgorithms.backtracking.Combination.combination(combinationArray1, 0);
        java.util.List<java.util.TreeSet<com.thealgorithms.backtracking.Combination[][][][][][][][]>> combinationArraySetList5 = com.thealgorithms.backtracking.Combination.combination(combinationArray1, 6);
        java.lang.Class<?> wildcardClass6 = combinationArray1.getClass();
        org.junit.Assert.assertNotNull(combinationArray0);
        org.junit.Assert.assertNotNull(combinationArray1);
        org.junit.Assert.assertNull(combinationArraySetList3);
        org.junit.Assert.assertNotNull(combinationArraySetList5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test1311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1311");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>>> wildcardClassSetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (byte) 0);
        java.util.List<java.util.TreeSet<java.lang.invoke.TypeDescriptor>> typeDescriptorSetList6 = com.thealgorithms.backtracking.Combination.combination((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2, 0);
        java.util.List<java.util.TreeSet<java.lang.reflect.AnnotatedElement>> annotatedElementSetList8 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2, (int) '4');
        java.util.List<java.util.TreeSet<java.lang.invoke.TypeDescriptor>> typeDescriptorSetList10 = com.thealgorithms.backtracking.Combination.combination((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2, (int) (byte) 1);
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration>> genericDeclarationSetList12 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2, (int) ' ');
        java.util.List<java.util.TreeSet<java.lang.reflect.Type>> typeSetList14 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.Type[]) wildcardClassArray2, (int) '4');
        java.util.List<java.util.TreeSet<java.lang.Class<?>>> wildcardClassSetList16 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (byte) 100);
        java.lang.Class<?> wildcardClass17 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNull(wildcardClassSetList4);
        org.junit.Assert.assertNull(typeDescriptorSetList6);
        org.junit.Assert.assertNotNull(annotatedElementSetList8);
        org.junit.Assert.assertNotNull(typeDescriptorSetList10);
        org.junit.Assert.assertNotNull(genericDeclarationSetList12);
        org.junit.Assert.assertNotNull(typeSetList14);
        org.junit.Assert.assertNotNull(wildcardClassSetList16);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test1312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1312");
        java.util.Collection[][] collectionArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.TreeSet<java.util.Collection[]>> collectionArraySetList2 = com.thealgorithms.backtracking.Combination.combination(collectionArray0, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1313");
        java.lang.Class[][][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][][]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][][][][][][]>> wildcardClassArraySetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, 2);
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][][][][][][]>> wildcardClassArraySetList6 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, 0);
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][][][][][][]>> wildcardClassArraySetList8 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) 'a');
        java.lang.Class<?> wildcardClass9 = wildcardClassArraySetList8.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList4);
        org.junit.Assert.assertNull(wildcardClassArraySetList6);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1314");
        java.lang.Class[][][] classArray1 = new java.lang.Class[0][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray2 = (java.lang.Class<?>[][][]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][]>> wildcardClassArraySetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (byte) -1);
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][]>> wildcardClassArraySetList6 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, 5);
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][]>> wildcardClassArraySetList8 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (byte) 10);
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration[][]>> genericDeclarationArraySetList10 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[][][]) wildcardClassArray2, 6);
        java.lang.Class<?> wildcardClass11 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList4);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList6);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList8);
        org.junit.Assert.assertNotNull(genericDeclarationArraySetList10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1315");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "", "", "", "" };
        java.util.List<java.util.TreeSet<java.lang.Comparable<java.lang.String>>> strComparableSetList8 = com.thealgorithms.backtracking.Combination.combination((java.lang.Comparable<java.lang.String>[]) strArray6, (int) (byte) 1);
        java.util.List<java.util.TreeSet<java.io.Serializable>> serializableSetList10 = com.thealgorithms.backtracking.Combination.combination((java.io.Serializable[]) strArray6, (int) '4');
        java.util.List<java.util.TreeSet<java.lang.String>> strSetList12 = com.thealgorithms.backtracking.Combination.combination(strArray6, 1);
        java.lang.String[] strArray19 = new java.lang.String[] { "", "", "", "", "", "" };
        java.util.List<java.util.TreeSet<java.lang.Comparable<java.lang.String>>> strComparableSetList21 = com.thealgorithms.backtracking.Combination.combination((java.lang.Comparable<java.lang.String>[]) strArray19, (int) (byte) 1);
        java.util.List<java.util.TreeSet<java.lang.Comparable<java.lang.String>>> strComparableSetList23 = com.thealgorithms.backtracking.Combination.combination((java.lang.Comparable<java.lang.String>[]) strArray19, (int) (byte) 1);
        java.util.List<java.util.TreeSet<java.lang.Comparable<java.lang.String>>> strComparableSetList25 = com.thealgorithms.backtracking.Combination.combination((java.lang.Comparable<java.lang.String>[]) strArray19, (int) (byte) -1);
        java.util.List<java.util.TreeSet<java.lang.CharSequence>> charSequenceSetList27 = com.thealgorithms.backtracking.Combination.combination((java.lang.CharSequence[]) strArray19, (int) (short) -1);
        java.util.List<java.util.TreeSet<java.lang.String>> strSetList29 = com.thealgorithms.backtracking.Combination.combination(strArray19, 100);
        java.util.List[] listArray31 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[] strSetListArray32 = (java.util.List<java.util.TreeSet<java.lang.String>>[]) listArray31;
        strSetListArray32[0] = strSetList12;
        strSetListArray32[1] = strSetList29;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>>> setListSetList38 = com.thealgorithms.backtracking.Combination.combination(strSetListArray32, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strComparableSetList8);
        org.junit.Assert.assertNotNull(serializableSetList10);
        org.junit.Assert.assertNotNull(strSetList12);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strComparableSetList21);
        org.junit.Assert.assertNotNull(strComparableSetList23);
        org.junit.Assert.assertNotNull(strComparableSetList25);
        org.junit.Assert.assertNotNull(charSequenceSetList27);
        org.junit.Assert.assertNotNull(strSetList29);
        org.junit.Assert.assertNotNull(listArray31);
        org.junit.Assert.assertNotNull(strSetListArray32);
    }

    @Test
    public void test1316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1316");
        java.lang.Class[][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][][][][][]>> wildcardClassArraySetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, 2);
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][][][][][]>> wildcardClassArraySetList6 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, 3);
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][][][][][]>> wildcardClassArraySetList8 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (byte) 100);
        java.lang.Class<?> wildcardClass9 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList4);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList6);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1317");
        com.thealgorithms.backtracking.Combination[][] combinationArray0 = new com.thealgorithms.backtracking.Combination[][] {};
        java.util.List<java.util.TreeSet<com.thealgorithms.backtracking.Combination[]>> combinationArraySetList2 = com.thealgorithms.backtracking.Combination.combination(combinationArray0, (int) (short) 0);
        java.util.List<java.util.TreeSet<com.thealgorithms.backtracking.Combination[]>> combinationArraySetList4 = com.thealgorithms.backtracking.Combination.combination(combinationArray0, (int) (byte) 1);
        java.util.List<java.util.TreeSet<com.thealgorithms.backtracking.Combination[]>> combinationArraySetList6 = com.thealgorithms.backtracking.Combination.combination(combinationArray0, (int) '4');
        java.lang.Class<?> wildcardClass7 = combinationArraySetList6.getClass();
        org.junit.Assert.assertNotNull(combinationArray0);
        org.junit.Assert.assertNull(combinationArraySetList2);
        org.junit.Assert.assertNotNull(combinationArraySetList4);
        org.junit.Assert.assertNotNull(combinationArraySetList6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test1318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1318");
        java.lang.String[][][][][] strArray0 = new java.lang.String[][][][][] {};
        java.util.List<java.util.TreeSet<java.lang.String[][][][]>> strArraySetList2 = com.thealgorithms.backtracking.Combination.combination(strArray0, 100);
        java.util.List<java.util.TreeSet<java.lang.String[][][][]>> strArraySetList4 = com.thealgorithms.backtracking.Combination.combination(strArray0, 4);
        java.util.List<java.util.TreeSet<java.lang.String[][][][]>> strArraySetList6 = com.thealgorithms.backtracking.Combination.combination(strArray0, 10);
        java.util.List<java.util.TreeSet<java.lang.String[][][][]>> strArraySetList8 = com.thealgorithms.backtracking.Combination.combination(strArray0, (-1));
        java.util.List<java.util.TreeSet<java.lang.String[][][][]>> strArraySetList10 = com.thealgorithms.backtracking.Combination.combination(strArray0, (int) (short) 1);
        java.lang.Class<?> wildcardClass11 = strArray0.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArraySetList2);
        org.junit.Assert.assertNotNull(strArraySetList4);
        org.junit.Assert.assertNotNull(strArraySetList6);
        org.junit.Assert.assertNotNull(strArraySetList8);
        org.junit.Assert.assertNotNull(strArraySetList10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1319");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.util.TreeSet<java.lang.String>> strSetList4 = com.thealgorithms.backtracking.Combination.combination(strArray2, (int) '#');
        java.util.List<java.util.TreeSet<java.lang.CharSequence>> charSequenceSetList6 = com.thealgorithms.backtracking.Combination.combination((java.lang.CharSequence[]) strArray2, 10);
        java.util.List<java.util.TreeSet<java.lang.constant.Constable>> constableSetList8 = com.thealgorithms.backtracking.Combination.combination((java.lang.constant.Constable[]) strArray2, (int) (byte) 1);
        java.util.List<java.util.TreeSet<java.lang.String>> strSetList10 = com.thealgorithms.backtracking.Combination.combination(strArray2, (int) (short) 1);
        java.util.List<java.util.TreeSet<java.lang.constant.ConstantDesc>> constantDescSetList12 = com.thealgorithms.backtracking.Combination.combination((java.lang.constant.ConstantDesc[]) strArray2, (int) (short) 1);
        java.util.List<java.util.TreeSet<java.lang.constant.ConstantDesc>> constantDescSetList14 = com.thealgorithms.backtracking.Combination.combination((java.lang.constant.ConstantDesc[]) strArray2, (int) (short) -1);
        java.util.List<java.util.TreeSet<java.lang.String>> strSetList16 = com.thealgorithms.backtracking.Combination.combination(strArray2, 100);
        java.util.List<java.util.TreeSet<java.lang.constant.ConstantDesc>> constantDescSetList18 = com.thealgorithms.backtracking.Combination.combination((java.lang.constant.ConstantDesc[]) strArray2, 1);
        java.lang.Class<?> wildcardClass19 = constantDescSetList18.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strSetList4);
        org.junit.Assert.assertNotNull(charSequenceSetList6);
        org.junit.Assert.assertNotNull(constableSetList8);
        org.junit.Assert.assertNotNull(strSetList10);
        org.junit.Assert.assertNotNull(constantDescSetList12);
        org.junit.Assert.assertNotNull(constantDescSetList14);
        org.junit.Assert.assertNotNull(strSetList16);
        org.junit.Assert.assertNotNull(constantDescSetList18);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test1320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1320");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.util.TreeSet<java.lang.String>> strSetList4 = com.thealgorithms.backtracking.Combination.combination(strArray2, (int) '#');
        java.lang.String[] strArray7 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.util.TreeSet<java.lang.String>> strSetList9 = com.thealgorithms.backtracking.Combination.combination(strArray7, (int) '#');
        java.util.List[] listArray11 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[] strSetListArray12 = (java.util.List<java.util.TreeSet<java.lang.String>>[]) listArray11;
        strSetListArray12[0] = strSetList4;
        strSetListArray12[1] = strSetList9;
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>>> setListSetList18 = com.thealgorithms.backtracking.Combination.combination(strSetListArray12, (int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>>> setListSetList20 = com.thealgorithms.backtracking.Combination.combination(strSetListArray12, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strSetList4);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strSetList9);
        org.junit.Assert.assertNotNull(listArray11);
        org.junit.Assert.assertNotNull(strSetListArray12);
        org.junit.Assert.assertNull(setListSetList18);
    }

    @Test
    public void test1321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1321");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>>> wildcardClassSetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (byte) 0);
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration>> genericDeclarationSetList6 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2, (int) (byte) 1);
        java.util.List<java.util.TreeSet<java.lang.invoke.TypeDescriptor>> typeDescriptorSetList8 = com.thealgorithms.backtracking.Combination.combination((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2, (int) ' ');
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration>> genericDeclarationSetList10 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2, (int) '#');
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration>> genericDeclarationSetList12 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2, 1);
        java.util.List<java.util.TreeSet<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>>> wildcardClassOfFieldSetList14 = com.thealgorithms.backtracking.Combination.combination((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) wildcardClassArray2, (int) (short) 0);
        java.util.List<java.util.TreeSet<java.lang.Class<?>>> wildcardClassSetList16 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (short) 0);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNull(wildcardClassSetList4);
        org.junit.Assert.assertNotNull(genericDeclarationSetList6);
        org.junit.Assert.assertNotNull(typeDescriptorSetList8);
        org.junit.Assert.assertNotNull(genericDeclarationSetList10);
        org.junit.Assert.assertNotNull(genericDeclarationSetList12);
        org.junit.Assert.assertNull(wildcardClassOfFieldSetList14);
        org.junit.Assert.assertNull(wildcardClassSetList16);
    }

    @Test
    public void test1322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1322");
        com.thealgorithms.backtracking.Combination[][][][] combinationArray0 = new com.thealgorithms.backtracking.Combination[][][][] {};
        java.util.List<java.util.TreeSet<com.thealgorithms.backtracking.Combination[][][]>> combinationArraySetList2 = com.thealgorithms.backtracking.Combination.combination(combinationArray0, (int) ' ');
        java.util.List<java.util.TreeSet<com.thealgorithms.backtracking.Combination[][][]>> combinationArraySetList4 = com.thealgorithms.backtracking.Combination.combination(combinationArray0, 1);
        java.util.List<java.util.TreeSet<com.thealgorithms.backtracking.Combination[][][]>> combinationArraySetList6 = com.thealgorithms.backtracking.Combination.combination(combinationArray0, (int) '4');
        java.lang.Class<?> wildcardClass7 = combinationArraySetList6.getClass();
        org.junit.Assert.assertNotNull(combinationArray0);
        org.junit.Assert.assertNotNull(combinationArraySetList2);
        org.junit.Assert.assertNotNull(combinationArraySetList4);
        org.junit.Assert.assertNotNull(combinationArraySetList6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test1323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1323");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>>> wildcardClassSetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (byte) 0);
        java.util.List<java.util.TreeSet<java.lang.invoke.TypeDescriptor>> typeDescriptorSetList6 = com.thealgorithms.backtracking.Combination.combination((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2, (int) (byte) 100);
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration>> genericDeclarationSetList8 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2, (int) (byte) 0);
        java.util.List<java.util.TreeSet<java.io.Serializable>> serializableSetList10 = com.thealgorithms.backtracking.Combination.combination((java.io.Serializable[]) wildcardClassArray2, (int) (byte) -1);
        java.util.List<java.util.TreeSet<java.lang.reflect.AnnotatedElement>> annotatedElementSetList12 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2, (int) (byte) 100);
        java.lang.Class<?> wildcardClass13 = annotatedElementSetList12.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNull(wildcardClassSetList4);
        org.junit.Assert.assertNotNull(typeDescriptorSetList6);
        org.junit.Assert.assertNull(genericDeclarationSetList8);
        org.junit.Assert.assertNotNull(serializableSetList10);
        org.junit.Assert.assertNotNull(annotatedElementSetList12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1324");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>>> wildcardClassSetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (byte) 0);
        java.util.List<java.util.TreeSet<java.lang.invoke.TypeDescriptor>> typeDescriptorSetList6 = com.thealgorithms.backtracking.Combination.combination((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2, (int) (byte) 100);
        java.util.List<java.util.TreeSet<java.lang.invoke.TypeDescriptor>> typeDescriptorSetList8 = com.thealgorithms.backtracking.Combination.combination((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2, (int) (short) 10);
        java.util.List<java.util.TreeSet<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>>> wildcardClassOfFieldSetList10 = com.thealgorithms.backtracking.Combination.combination((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) wildcardClassArray2, (int) ' ');
        java.util.List<java.util.TreeSet<java.lang.reflect.AnnotatedElement>> annotatedElementSetList12 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2, (int) (byte) -1);
        java.lang.Class<?> wildcardClass13 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNull(wildcardClassSetList4);
        org.junit.Assert.assertNotNull(typeDescriptorSetList6);
        org.junit.Assert.assertNotNull(typeDescriptorSetList8);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldSetList10);
        org.junit.Assert.assertNotNull(annotatedElementSetList12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1325");
        java.lang.Class[][][][][] classArray1 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][][]>> wildcardClassArraySetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (short) 10);
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][][]>> wildcardClassArraySetList6 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (byte) 10);
        java.util.List<java.util.TreeSet<java.lang.Object>> objSetList8 = com.thealgorithms.backtracking.Combination.combination((java.lang.Object[]) wildcardClassArray2, 10);
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][][]>> wildcardClassArraySetList10 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (byte) 100);
        java.lang.Class<?> wildcardClass11 = wildcardClassArraySetList10.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList4);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList6);
        org.junit.Assert.assertNotNull(objSetList8);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1326");
        com.thealgorithms.backtracking.Combination[][][] combinationArray0 = new com.thealgorithms.backtracking.Combination[][][] {};
        com.thealgorithms.backtracking.Combination[][][][] combinationArray1 = new com.thealgorithms.backtracking.Combination[][][][] { combinationArray0 };
        com.thealgorithms.backtracking.Combination[][][] combinationArray2 = new com.thealgorithms.backtracking.Combination[][][] {};
        com.thealgorithms.backtracking.Combination[][][][] combinationArray3 = new com.thealgorithms.backtracking.Combination[][][][] { combinationArray2 };
        com.thealgorithms.backtracking.Combination[][][][][] combinationArray4 = new com.thealgorithms.backtracking.Combination[][][][][] { combinationArray1, combinationArray3 };
        com.thealgorithms.backtracking.Combination[][][] combinationArray5 = new com.thealgorithms.backtracking.Combination[][][] {};
        com.thealgorithms.backtracking.Combination[][][][] combinationArray6 = new com.thealgorithms.backtracking.Combination[][][][] { combinationArray5 };
        com.thealgorithms.backtracking.Combination[][][] combinationArray7 = new com.thealgorithms.backtracking.Combination[][][] {};
        com.thealgorithms.backtracking.Combination[][][][] combinationArray8 = new com.thealgorithms.backtracking.Combination[][][][] { combinationArray7 };
        com.thealgorithms.backtracking.Combination[][][][][] combinationArray9 = new com.thealgorithms.backtracking.Combination[][][][][] { combinationArray6, combinationArray8 };
        com.thealgorithms.backtracking.Combination[][][] combinationArray10 = new com.thealgorithms.backtracking.Combination[][][] {};
        com.thealgorithms.backtracking.Combination[][][][] combinationArray11 = new com.thealgorithms.backtracking.Combination[][][][] { combinationArray10 };
        com.thealgorithms.backtracking.Combination[][][] combinationArray12 = new com.thealgorithms.backtracking.Combination[][][] {};
        com.thealgorithms.backtracking.Combination[][][][] combinationArray13 = new com.thealgorithms.backtracking.Combination[][][][] { combinationArray12 };
        com.thealgorithms.backtracking.Combination[][][][][] combinationArray14 = new com.thealgorithms.backtracking.Combination[][][][][] { combinationArray11, combinationArray13 };
        com.thealgorithms.backtracking.Combination[][][] combinationArray15 = new com.thealgorithms.backtracking.Combination[][][] {};
        com.thealgorithms.backtracking.Combination[][][][] combinationArray16 = new com.thealgorithms.backtracking.Combination[][][][] { combinationArray15 };
        com.thealgorithms.backtracking.Combination[][][] combinationArray17 = new com.thealgorithms.backtracking.Combination[][][] {};
        com.thealgorithms.backtracking.Combination[][][][] combinationArray18 = new com.thealgorithms.backtracking.Combination[][][][] { combinationArray17 };
        com.thealgorithms.backtracking.Combination[][][][][] combinationArray19 = new com.thealgorithms.backtracking.Combination[][][][][] { combinationArray16, combinationArray18 };
        com.thealgorithms.backtracking.Combination[][][] combinationArray20 = new com.thealgorithms.backtracking.Combination[][][] {};
        com.thealgorithms.backtracking.Combination[][][][] combinationArray21 = new com.thealgorithms.backtracking.Combination[][][][] { combinationArray20 };
        com.thealgorithms.backtracking.Combination[][][] combinationArray22 = new com.thealgorithms.backtracking.Combination[][][] {};
        com.thealgorithms.backtracking.Combination[][][][] combinationArray23 = new com.thealgorithms.backtracking.Combination[][][][] { combinationArray22 };
        com.thealgorithms.backtracking.Combination[][][][][] combinationArray24 = new com.thealgorithms.backtracking.Combination[][][][][] { combinationArray21, combinationArray23 };
        com.thealgorithms.backtracking.Combination[][][] combinationArray25 = new com.thealgorithms.backtracking.Combination[][][] {};
        com.thealgorithms.backtracking.Combination[][][][] combinationArray26 = new com.thealgorithms.backtracking.Combination[][][][] { combinationArray25 };
        com.thealgorithms.backtracking.Combination[][][] combinationArray27 = new com.thealgorithms.backtracking.Combination[][][] {};
        com.thealgorithms.backtracking.Combination[][][][] combinationArray28 = new com.thealgorithms.backtracking.Combination[][][][] { combinationArray27 };
        com.thealgorithms.backtracking.Combination[][][][][] combinationArray29 = new com.thealgorithms.backtracking.Combination[][][][][] { combinationArray26, combinationArray28 };
        com.thealgorithms.backtracking.Combination[][][][][][] combinationArray30 = new com.thealgorithms.backtracking.Combination[][][][][][] { combinationArray4, combinationArray9, combinationArray14, combinationArray19, combinationArray24, combinationArray29 };
        com.thealgorithms.backtracking.Combination[][][] combinationArray31 = new com.thealgorithms.backtracking.Combination[][][] {};
        com.thealgorithms.backtracking.Combination[][][][] combinationArray32 = new com.thealgorithms.backtracking.Combination[][][][] { combinationArray31 };
        com.thealgorithms.backtracking.Combination[][][] combinationArray33 = new com.thealgorithms.backtracking.Combination[][][] {};
        com.thealgorithms.backtracking.Combination[][][][] combinationArray34 = new com.thealgorithms.backtracking.Combination[][][][] { combinationArray33 };
        com.thealgorithms.backtracking.Combination[][][][][] combinationArray35 = new com.thealgorithms.backtracking.Combination[][][][][] { combinationArray32, combinationArray34 };
        com.thealgorithms.backtracking.Combination[][][] combinationArray36 = new com.thealgorithms.backtracking.Combination[][][] {};
        com.thealgorithms.backtracking.Combination[][][][] combinationArray37 = new com.thealgorithms.backtracking.Combination[][][][] { combinationArray36 };
        com.thealgorithms.backtracking.Combination[][][] combinationArray38 = new com.thealgorithms.backtracking.Combination[][][] {};
        com.thealgorithms.backtracking.Combination[][][][] combinationArray39 = new com.thealgorithms.backtracking.Combination[][][][] { combinationArray38 };
        com.thealgorithms.backtracking.Combination[][][][][] combinationArray40 = new com.thealgorithms.backtracking.Combination[][][][][] { combinationArray37, combinationArray39 };
        com.thealgorithms.backtracking.Combination[][][] combinationArray41 = new com.thealgorithms.backtracking.Combination[][][] {};
        com.thealgorithms.backtracking.Combination[][][][] combinationArray42 = new com.thealgorithms.backtracking.Combination[][][][] { combinationArray41 };
        com.thealgorithms.backtracking.Combination[][][] combinationArray43 = new com.thealgorithms.backtracking.Combination[][][] {};
        com.thealgorithms.backtracking.Combination[][][][] combinationArray44 = new com.thealgorithms.backtracking.Combination[][][][] { combinationArray43 };
        com.thealgorithms.backtracking.Combination[][][][][] combinationArray45 = new com.thealgorithms.backtracking.Combination[][][][][] { combinationArray42, combinationArray44 };
        com.thealgorithms.backtracking.Combination[][][] combinationArray46 = new com.thealgorithms.backtracking.Combination[][][] {};
        com.thealgorithms.backtracking.Combination[][][][] combinationArray47 = new com.thealgorithms.backtracking.Combination[][][][] { combinationArray46 };
        com.thealgorithms.backtracking.Combination[][][] combinationArray48 = new com.thealgorithms.backtracking.Combination[][][] {};
        com.thealgorithms.backtracking.Combination[][][][] combinationArray49 = new com.thealgorithms.backtracking.Combination[][][][] { combinationArray48 };
        com.thealgorithms.backtracking.Combination[][][][][] combinationArray50 = new com.thealgorithms.backtracking.Combination[][][][][] { combinationArray47, combinationArray49 };
        com.thealgorithms.backtracking.Combination[][][] combinationArray51 = new com.thealgorithms.backtracking.Combination[][][] {};
        com.thealgorithms.backtracking.Combination[][][][] combinationArray52 = new com.thealgorithms.backtracking.Combination[][][][] { combinationArray51 };
        com.thealgorithms.backtracking.Combination[][][] combinationArray53 = new com.thealgorithms.backtracking.Combination[][][] {};
        com.thealgorithms.backtracking.Combination[][][][] combinationArray54 = new com.thealgorithms.backtracking.Combination[][][][] { combinationArray53 };
        com.thealgorithms.backtracking.Combination[][][][][] combinationArray55 = new com.thealgorithms.backtracking.Combination[][][][][] { combinationArray52, combinationArray54 };
        com.thealgorithms.backtracking.Combination[][][] combinationArray56 = new com.thealgorithms.backtracking.Combination[][][] {};
        com.thealgorithms.backtracking.Combination[][][][] combinationArray57 = new com.thealgorithms.backtracking.Combination[][][][] { combinationArray56 };
        com.thealgorithms.backtracking.Combination[][][] combinationArray58 = new com.thealgorithms.backtracking.Combination[][][] {};
        com.thealgorithms.backtracking.Combination[][][][] combinationArray59 = new com.thealgorithms.backtracking.Combination[][][][] { combinationArray58 };
        com.thealgorithms.backtracking.Combination[][][][][] combinationArray60 = new com.thealgorithms.backtracking.Combination[][][][][] { combinationArray57, combinationArray59 };
        com.thealgorithms.backtracking.Combination[][][][][][] combinationArray61 = new com.thealgorithms.backtracking.Combination[][][][][][] { combinationArray35, combinationArray40, combinationArray45, combinationArray50, combinationArray55, combinationArray60 };
        com.thealgorithms.backtracking.Combination[][][][][][][] combinationArray62 = new com.thealgorithms.backtracking.Combination[][][][][][][] { combinationArray30, combinationArray61 };
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.TreeSet<com.thealgorithms.backtracking.Combination[][][][][][]>> combinationArraySetList64 = com.thealgorithms.backtracking.Combination.combination(combinationArray62, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(combinationArray0);
        org.junit.Assert.assertNotNull(combinationArray1);
        org.junit.Assert.assertNotNull(combinationArray2);
        org.junit.Assert.assertNotNull(combinationArray3);
        org.junit.Assert.assertNotNull(combinationArray4);
        org.junit.Assert.assertNotNull(combinationArray5);
        org.junit.Assert.assertNotNull(combinationArray6);
        org.junit.Assert.assertNotNull(combinationArray7);
        org.junit.Assert.assertNotNull(combinationArray8);
        org.junit.Assert.assertNotNull(combinationArray9);
        org.junit.Assert.assertNotNull(combinationArray10);
        org.junit.Assert.assertNotNull(combinationArray11);
        org.junit.Assert.assertNotNull(combinationArray12);
        org.junit.Assert.assertNotNull(combinationArray13);
        org.junit.Assert.assertNotNull(combinationArray14);
        org.junit.Assert.assertNotNull(combinationArray15);
        org.junit.Assert.assertNotNull(combinationArray16);
        org.junit.Assert.assertNotNull(combinationArray17);
        org.junit.Assert.assertNotNull(combinationArray18);
        org.junit.Assert.assertNotNull(combinationArray19);
        org.junit.Assert.assertNotNull(combinationArray20);
        org.junit.Assert.assertNotNull(combinationArray21);
        org.junit.Assert.assertNotNull(combinationArray22);
        org.junit.Assert.assertNotNull(combinationArray23);
        org.junit.Assert.assertNotNull(combinationArray24);
        org.junit.Assert.assertNotNull(combinationArray25);
        org.junit.Assert.assertNotNull(combinationArray26);
        org.junit.Assert.assertNotNull(combinationArray27);
        org.junit.Assert.assertNotNull(combinationArray28);
        org.junit.Assert.assertNotNull(combinationArray29);
        org.junit.Assert.assertNotNull(combinationArray30);
        org.junit.Assert.assertNotNull(combinationArray31);
        org.junit.Assert.assertNotNull(combinationArray32);
        org.junit.Assert.assertNotNull(combinationArray33);
        org.junit.Assert.assertNotNull(combinationArray34);
        org.junit.Assert.assertNotNull(combinationArray35);
        org.junit.Assert.assertNotNull(combinationArray36);
        org.junit.Assert.assertNotNull(combinationArray37);
        org.junit.Assert.assertNotNull(combinationArray38);
        org.junit.Assert.assertNotNull(combinationArray39);
        org.junit.Assert.assertNotNull(combinationArray40);
        org.junit.Assert.assertNotNull(combinationArray41);
        org.junit.Assert.assertNotNull(combinationArray42);
        org.junit.Assert.assertNotNull(combinationArray43);
        org.junit.Assert.assertNotNull(combinationArray44);
        org.junit.Assert.assertNotNull(combinationArray45);
        org.junit.Assert.assertNotNull(combinationArray46);
        org.junit.Assert.assertNotNull(combinationArray47);
        org.junit.Assert.assertNotNull(combinationArray48);
        org.junit.Assert.assertNotNull(combinationArray49);
        org.junit.Assert.assertNotNull(combinationArray50);
        org.junit.Assert.assertNotNull(combinationArray51);
        org.junit.Assert.assertNotNull(combinationArray52);
        org.junit.Assert.assertNotNull(combinationArray53);
        org.junit.Assert.assertNotNull(combinationArray54);
        org.junit.Assert.assertNotNull(combinationArray55);
        org.junit.Assert.assertNotNull(combinationArray56);
        org.junit.Assert.assertNotNull(combinationArray57);
        org.junit.Assert.assertNotNull(combinationArray58);
        org.junit.Assert.assertNotNull(combinationArray59);
        org.junit.Assert.assertNotNull(combinationArray60);
        org.junit.Assert.assertNotNull(combinationArray61);
        org.junit.Assert.assertNotNull(combinationArray62);
    }

    @Test
    public void test1327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1327");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>>> wildcardClassSetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (byte) 0);
        java.util.List<java.util.TreeSet<java.lang.invoke.TypeDescriptor>> typeDescriptorSetList6 = com.thealgorithms.backtracking.Combination.combination((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2, 0);
        java.util.List<java.util.TreeSet<java.lang.reflect.AnnotatedElement>> annotatedElementSetList8 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2, (int) (byte) -1);
        java.util.List<java.util.TreeSet<java.lang.reflect.Type>> typeSetList10 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.Type[]) wildcardClassArray2, 2);
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration>> genericDeclarationSetList12 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2, (int) (byte) 0);
        java.util.List<java.util.TreeSet<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>>> wildcardClassOfFieldSetList14 = com.thealgorithms.backtracking.Combination.combination((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) wildcardClassArray2, (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass15 = wildcardClassOfFieldSetList14.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNull(wildcardClassSetList4);
        org.junit.Assert.assertNull(typeDescriptorSetList6);
        org.junit.Assert.assertNotNull(annotatedElementSetList8);
        org.junit.Assert.assertNotNull(typeSetList10);
        org.junit.Assert.assertNull(genericDeclarationSetList12);
        org.junit.Assert.assertNull(wildcardClassOfFieldSetList14);
    }

    @Test
    public void test1328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1328");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.util.TreeSet<java.lang.String>> strSetList4 = com.thealgorithms.backtracking.Combination.combination(strArray2, (int) '#');
        java.util.List<java.util.TreeSet<java.lang.CharSequence>> charSequenceSetList6 = com.thealgorithms.backtracking.Combination.combination((java.lang.CharSequence[]) strArray2, 10);
        java.util.List<java.util.TreeSet<java.lang.String>> strSetList8 = com.thealgorithms.backtracking.Combination.combination(strArray2, 0);
        java.util.List<java.util.TreeSet<java.lang.String>> strSetList10 = com.thealgorithms.backtracking.Combination.combination(strArray2, (int) (byte) 0);
        java.util.List<java.util.TreeSet<java.lang.String>> strSetList12 = com.thealgorithms.backtracking.Combination.combination(strArray2, (int) ' ');
        java.util.List<java.util.TreeSet<java.lang.constant.ConstantDesc>> constantDescSetList14 = com.thealgorithms.backtracking.Combination.combination((java.lang.constant.ConstantDesc[]) strArray2, (int) (byte) 0);
        java.lang.Class<?> wildcardClass15 = strArray2.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strSetList4);
        org.junit.Assert.assertNotNull(charSequenceSetList6);
        org.junit.Assert.assertNull(strSetList8);
        org.junit.Assert.assertNull(strSetList10);
        org.junit.Assert.assertNotNull(strSetList12);
        org.junit.Assert.assertNull(constantDescSetList14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test1329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1329");
        java.util.List[][] listArray1 = new java.util.List[0][];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[][] strSetListArray2 = (java.util.List<java.util.TreeSet<java.lang.String>>[][]) listArray1;
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[]>> listArraySetList4 = com.thealgorithms.backtracking.Combination.combination(strSetListArray2, (int) (short) -1);
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[]>> listArraySetList6 = com.thealgorithms.backtracking.Combination.combination(strSetListArray2, (-1));
        java.util.List<java.util.TreeSet<java.lang.Iterable<java.util.TreeSet<java.lang.String>>[]>> iterableArraySetList8 = com.thealgorithms.backtracking.Combination.combination((java.lang.Iterable<java.util.TreeSet<java.lang.String>>[][]) strSetListArray2, (int) '4');
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[]>> listArraySetList10 = com.thealgorithms.backtracking.Combination.combination(strSetListArray2, (int) (short) 100);
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[]>> listArraySetList12 = com.thealgorithms.backtracking.Combination.combination(strSetListArray2, (int) (short) 10);
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[]>> listArraySetList14 = com.thealgorithms.backtracking.Combination.combination(strSetListArray2, (int) (byte) 0);
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strSetListArray2);
        org.junit.Assert.assertNotNull(listArraySetList4);
        org.junit.Assert.assertNotNull(listArraySetList6);
        org.junit.Assert.assertNotNull(iterableArraySetList8);
        org.junit.Assert.assertNotNull(listArraySetList10);
        org.junit.Assert.assertNotNull(listArraySetList12);
        org.junit.Assert.assertNull(listArraySetList14);
    }

    @Test
    public void test1330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1330");
        java.lang.Class[][][][] classArray1 = new java.lang.Class[0][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][]>> wildcardClassArraySetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (byte) 100);
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][]>> wildcardClassArraySetList6 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (byte) -1);
        java.lang.Class<?> wildcardClass7 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList4);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test1331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1331");
        java.lang.Class<?>[][][][][][][] wildcardClassArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.TreeSet<java.lang.Class<?>[][][][][][]>> wildcardClassArraySetList2 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray0, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1332");
        java.lang.reflect.GenericDeclaration[][][][] genericDeclarationArray0 = new java.lang.reflect.GenericDeclaration[][][][] {};
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration[][][]>> genericDeclarationArraySetList2 = com.thealgorithms.backtracking.Combination.combination(genericDeclarationArray0, (int) (short) 0);
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration[][][]>> genericDeclarationArraySetList4 = com.thealgorithms.backtracking.Combination.combination(genericDeclarationArray0, 0);
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration[][][]>> genericDeclarationArraySetList6 = com.thealgorithms.backtracking.Combination.combination(genericDeclarationArray0, 0);
        java.lang.Class<?> wildcardClass7 = genericDeclarationArray0.getClass();
        org.junit.Assert.assertNotNull(genericDeclarationArray0);
        org.junit.Assert.assertNull(genericDeclarationArraySetList2);
        org.junit.Assert.assertNull(genericDeclarationArraySetList4);
        org.junit.Assert.assertNull(genericDeclarationArraySetList6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test1333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1333");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.util.TreeSet<java.lang.String>> strSetList4 = com.thealgorithms.backtracking.Combination.combination(strArray2, (int) '#');
        java.util.List<java.util.TreeSet<java.lang.constant.ConstantDesc>> constantDescSetList6 = com.thealgorithms.backtracking.Combination.combination((java.lang.constant.ConstantDesc[]) strArray2, 1);
        java.util.List<java.util.TreeSet<java.lang.CharSequence>> charSequenceSetList8 = com.thealgorithms.backtracking.Combination.combination((java.lang.CharSequence[]) strArray2, 0);
        java.util.List<java.util.TreeSet<java.lang.Comparable<java.lang.String>>> strComparableSetList10 = com.thealgorithms.backtracking.Combination.combination((java.lang.Comparable<java.lang.String>[]) strArray2, (int) (byte) 10);
        java.util.List<java.util.TreeSet<java.lang.Comparable<java.lang.String>>> strComparableSetList12 = com.thealgorithms.backtracking.Combination.combination((java.lang.Comparable<java.lang.String>[]) strArray2, (int) (short) -1);
        java.util.List<java.util.TreeSet<java.lang.String>> strSetList14 = com.thealgorithms.backtracking.Combination.combination(strArray2, (-1));
        java.util.List<java.util.TreeSet<java.lang.constant.ConstantDesc>> constantDescSetList16 = com.thealgorithms.backtracking.Combination.combination((java.lang.constant.ConstantDesc[]) strArray2, 6);
        java.util.List<java.util.TreeSet<java.lang.constant.ConstantDesc>> constantDescSetList18 = com.thealgorithms.backtracking.Combination.combination((java.lang.constant.ConstantDesc[]) strArray2, (-1));
        java.lang.Class<?> wildcardClass19 = strArray2.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strSetList4);
        org.junit.Assert.assertNotNull(constantDescSetList6);
        org.junit.Assert.assertNull(charSequenceSetList8);
        org.junit.Assert.assertNotNull(strComparableSetList10);
        org.junit.Assert.assertNotNull(strComparableSetList12);
        org.junit.Assert.assertNotNull(strSetList14);
        org.junit.Assert.assertNotNull(constantDescSetList16);
        org.junit.Assert.assertNotNull(constantDescSetList18);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test1334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1334");
        java.util.Collection[][] collectionArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.TreeSet<java.util.Collection[]>> collectionArraySetList2 = com.thealgorithms.backtracking.Combination.combination(collectionArray0, 4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1335");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.util.TreeSet<java.lang.String>> strSetList4 = com.thealgorithms.backtracking.Combination.combination(strArray2, (int) '#');
        java.util.List<java.util.TreeSet<java.lang.CharSequence>> charSequenceSetList6 = com.thealgorithms.backtracking.Combination.combination((java.lang.CharSequence[]) strArray2, 10);
        java.util.List<java.util.TreeSet<java.lang.constant.Constable>> constableSetList8 = com.thealgorithms.backtracking.Combination.combination((java.lang.constant.Constable[]) strArray2, (int) (byte) 1);
        java.lang.Class<?> wildcardClass9 = strArray2.getClass();
        java.lang.reflect.GenericDeclaration[] genericDeclarationArray10 = new java.lang.reflect.GenericDeclaration[] { wildcardClass9 };
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration>> genericDeclarationSetList12 = com.thealgorithms.backtracking.Combination.combination(genericDeclarationArray10, 0);
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration>> genericDeclarationSetList14 = com.thealgorithms.backtracking.Combination.combination(genericDeclarationArray10, (int) (short) 0);
        java.util.List<java.util.TreeSet<java.lang.reflect.AnnotatedElement>> annotatedElementSetList16 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.AnnotatedElement[]) genericDeclarationArray10, 0);
        java.util.List<java.util.TreeSet<java.lang.reflect.AnnotatedElement>> annotatedElementSetList18 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.AnnotatedElement[]) genericDeclarationArray10, (int) (byte) 10);
        java.lang.Class<?> wildcardClass19 = annotatedElementSetList18.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strSetList4);
        org.junit.Assert.assertNotNull(charSequenceSetList6);
        org.junit.Assert.assertNotNull(constableSetList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(genericDeclarationArray10);
        org.junit.Assert.assertNull(genericDeclarationSetList12);
        org.junit.Assert.assertNull(genericDeclarationSetList14);
        org.junit.Assert.assertNull(annotatedElementSetList16);
        org.junit.Assert.assertNotNull(annotatedElementSetList18);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test1336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1336");
        java.lang.Class[][][][][][][] classArray1 = new java.lang.Class[0][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][][][][]>> wildcardClassArraySetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (short) -1);
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][][][][]>> wildcardClassArraySetList6 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (-1));
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][][][][]>> wildcardClassArraySetList8 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (byte) -1);
        java.lang.Class<?> wildcardClass9 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList4);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList6);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1337");
        java.util.List[] listArray1 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[] strSetListArray2 = (java.util.List<java.util.TreeSet<java.lang.String>>[]) listArray1;
        java.util.List[] listArray4 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[] strSetListArray5 = (java.util.List<java.util.TreeSet<java.lang.String>>[]) listArray4;
        java.util.List[][] listArray7 = new java.util.List[2][];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[][] strSetListArray8 = (java.util.List<java.util.TreeSet<java.lang.String>>[][]) listArray7;
        strSetListArray8[0] = strSetListArray2;
        strSetListArray8[1] = strSetListArray5;
        java.util.List[][][] listArray14 = new java.util.List[1][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[][][] strSetListArray15 = (java.util.List<java.util.TreeSet<java.lang.String>>[][][]) listArray14;
        strSetListArray15[0] = strSetListArray8;
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[][]>> listArraySetList19 = com.thealgorithms.backtracking.Combination.combination(strSetListArray15, (int) (short) 10);
        java.util.List<java.util.TreeSet<java.util.Collection[][]>> collectionArraySetList21 = com.thealgorithms.backtracking.Combination.combination((java.util.Collection[][][]) strSetListArray15, (int) '#');
        java.util.List<java.util.TreeSet<java.util.Collection[][]>> collectionArraySetList23 = com.thealgorithms.backtracking.Combination.combination((java.util.Collection[][][]) strSetListArray15, 100);
        java.lang.Class<?> wildcardClass24 = collectionArraySetList23.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strSetListArray2);
        org.junit.Assert.assertNotNull(listArray4);
        org.junit.Assert.assertNotNull(strSetListArray5);
        org.junit.Assert.assertNotNull(listArray7);
        org.junit.Assert.assertNotNull(strSetListArray8);
        org.junit.Assert.assertNotNull(listArray14);
        org.junit.Assert.assertNotNull(strSetListArray15);
        org.junit.Assert.assertNotNull(listArraySetList19);
        org.junit.Assert.assertNotNull(collectionArraySetList21);
        org.junit.Assert.assertNotNull(collectionArraySetList23);
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test1338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1338");
        java.util.List[][] listArray1 = new java.util.List[0][];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[][] strSetListArray2 = (java.util.List<java.util.TreeSet<java.lang.String>>[][]) listArray1;
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[]>> listArraySetList4 = com.thealgorithms.backtracking.Combination.combination(strSetListArray2, (int) (short) -1);
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[]>> listArraySetList6 = com.thealgorithms.backtracking.Combination.combination(strSetListArray2, (-1));
        java.util.List<java.util.TreeSet<java.lang.Iterable<java.util.TreeSet<java.lang.String>>[]>> iterableArraySetList8 = com.thealgorithms.backtracking.Combination.combination((java.lang.Iterable<java.util.TreeSet<java.lang.String>>[][]) strSetListArray2, (int) '4');
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[]>> listArraySetList10 = com.thealgorithms.backtracking.Combination.combination(strSetListArray2, 100);
        java.lang.Class<?> wildcardClass11 = strSetListArray2.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strSetListArray2);
        org.junit.Assert.assertNotNull(listArraySetList4);
        org.junit.Assert.assertNotNull(listArraySetList6);
        org.junit.Assert.assertNotNull(iterableArraySetList8);
        org.junit.Assert.assertNotNull(listArraySetList10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1339");
        java.util.List[][] listArray1 = new java.util.List[0][];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[][] strSetListArray2 = (java.util.List<java.util.TreeSet<java.lang.String>>[][]) listArray1;
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[]>> listArraySetList4 = com.thealgorithms.backtracking.Combination.combination(strSetListArray2, (int) (short) -1);
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[]>> listArraySetList6 = com.thealgorithms.backtracking.Combination.combination(strSetListArray2, (int) (byte) -1);
        java.lang.Class<?> wildcardClass7 = strSetListArray2.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strSetListArray2);
        org.junit.Assert.assertNotNull(listArraySetList4);
        org.junit.Assert.assertNotNull(listArraySetList6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test1340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1340");
        com.thealgorithms.backtracking.Combination[][][][][][] combinationArray0 = new com.thealgorithms.backtracking.Combination[][][][][][] {};
        java.util.List<java.util.TreeSet<com.thealgorithms.backtracking.Combination[][][][][]>> combinationArraySetList2 = com.thealgorithms.backtracking.Combination.combination(combinationArray0, 1);
        java.lang.Class<?> wildcardClass3 = combinationArraySetList2.getClass();
        org.junit.Assert.assertNotNull(combinationArray0);
        org.junit.Assert.assertNotNull(combinationArraySetList2);
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test1341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1341");
        java.lang.constant.Constable[][] constableArray0 = null;
        java.util.List<java.util.TreeSet<java.lang.constant.Constable[]>> constableArraySetList2 = com.thealgorithms.backtracking.Combination.combination(constableArray0, (int) (byte) 0);
        org.junit.Assert.assertNull(constableArraySetList2);
    }

    @Test
    public void test1342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1342");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.util.TreeSet<java.lang.String>> strSetList4 = com.thealgorithms.backtracking.Combination.combination(strArray2, (int) '#');
        java.util.List<java.util.TreeSet<java.lang.CharSequence>> charSequenceSetList6 = com.thealgorithms.backtracking.Combination.combination((java.lang.CharSequence[]) strArray2, 10);
        java.util.List<java.util.TreeSet<java.lang.constant.Constable>> constableSetList8 = com.thealgorithms.backtracking.Combination.combination((java.lang.constant.Constable[]) strArray2, (int) (byte) 1);
        java.util.List<java.util.TreeSet<java.lang.String>> strSetList10 = com.thealgorithms.backtracking.Combination.combination(strArray2, (int) (short) 1);
        java.util.List<java.util.TreeSet<java.lang.constant.ConstantDesc>> constantDescSetList12 = com.thealgorithms.backtracking.Combination.combination((java.lang.constant.ConstantDesc[]) strArray2, (int) (short) 1);
        java.util.List<java.util.TreeSet<java.lang.constant.ConstantDesc>> constantDescSetList14 = com.thealgorithms.backtracking.Combination.combination((java.lang.constant.ConstantDesc[]) strArray2, (int) (short) -1);
        java.lang.Class<?> wildcardClass15 = strArray2.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strSetList4);
        org.junit.Assert.assertNotNull(charSequenceSetList6);
        org.junit.Assert.assertNotNull(constableSetList8);
        org.junit.Assert.assertNotNull(strSetList10);
        org.junit.Assert.assertNotNull(constantDescSetList12);
        org.junit.Assert.assertNotNull(constantDescSetList14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test1343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1343");
        java.lang.Class[][][][] classArray1 = new java.lang.Class[0][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][]>> wildcardClassArraySetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (byte) 100);
        java.util.List<java.util.TreeSet<java.lang.reflect.Type[][][]>> typeArraySetList6 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.Type[][][][]) wildcardClassArray2, 3);
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][]>> wildcardClassArraySetList8 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, 0);
        java.util.List<java.util.TreeSet<java.lang.reflect.Type[][][]>> typeArraySetList10 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.Type[][][][]) wildcardClassArray2, 0);
        java.util.List<java.util.TreeSet<java.lang.reflect.Type[][][]>> typeArraySetList12 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.Type[][][][]) wildcardClassArray2, 5);
        java.lang.Class<?> wildcardClass13 = typeArraySetList12.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList4);
        org.junit.Assert.assertNotNull(typeArraySetList6);
        org.junit.Assert.assertNull(wildcardClassArraySetList8);
        org.junit.Assert.assertNull(typeArraySetList10);
        org.junit.Assert.assertNotNull(typeArraySetList12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1344");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.util.TreeSet<java.lang.String>> strSetList4 = com.thealgorithms.backtracking.Combination.combination(strArray2, (int) '#');
        java.util.List<java.util.TreeSet<java.lang.CharSequence>> charSequenceSetList6 = com.thealgorithms.backtracking.Combination.combination((java.lang.CharSequence[]) strArray2, 10);
        java.util.List<java.util.TreeSet<java.lang.constant.ConstantDesc>> constantDescSetList8 = com.thealgorithms.backtracking.Combination.combination((java.lang.constant.ConstantDesc[]) strArray2, 10);
        java.util.List<java.util.TreeSet<java.lang.constant.Constable>> constableSetList10 = com.thealgorithms.backtracking.Combination.combination((java.lang.constant.Constable[]) strArray2, (int) 'a');
        java.util.List<java.util.TreeSet<java.lang.String>> strSetList12 = com.thealgorithms.backtracking.Combination.combination(strArray2, (int) (byte) -1);
        java.util.List<java.util.TreeSet<java.lang.String>> strSetList14 = com.thealgorithms.backtracking.Combination.combination(strArray2, (int) (short) 0);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strSetList4);
        org.junit.Assert.assertNotNull(charSequenceSetList6);
        org.junit.Assert.assertNotNull(constantDescSetList8);
        org.junit.Assert.assertNotNull(constableSetList10);
        org.junit.Assert.assertNotNull(strSetList12);
        org.junit.Assert.assertNull(strSetList14);
    }

    @Test
    public void test1345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1345");
        java.lang.Class[][][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][][]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][][][][][][]>> wildcardClassArraySetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, 2);
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][][][][][][]>> wildcardClassArraySetList6 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, 5);
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][][][][][][]>> wildcardClassArraySetList8 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, 1);
        java.lang.Class<?> wildcardClass9 = wildcardClassArraySetList8.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList4);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList6);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1346");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>>> wildcardClassSetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (byte) 0);
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration>> genericDeclarationSetList6 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2, (int) (byte) 1);
        java.util.List<java.util.TreeSet<java.lang.invoke.TypeDescriptor>> typeDescriptorSetList8 = com.thealgorithms.backtracking.Combination.combination((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2, (int) ' ');
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration>> genericDeclarationSetList10 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2, 0);
        java.util.List<java.util.TreeSet<java.lang.Class<?>>> wildcardClassSetList12 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (-1));
        java.util.List<java.util.TreeSet<java.lang.Class<?>>> wildcardClassSetList14 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) '#');
        java.lang.Class<?> wildcardClass15 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNull(wildcardClassSetList4);
        org.junit.Assert.assertNotNull(genericDeclarationSetList6);
        org.junit.Assert.assertNotNull(typeDescriptorSetList8);
        org.junit.Assert.assertNull(genericDeclarationSetList10);
        org.junit.Assert.assertNotNull(wildcardClassSetList12);
        org.junit.Assert.assertNotNull(wildcardClassSetList14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test1347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1347");
        java.lang.Object[] objArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.TreeSet<java.lang.Object>> objSetList2 = com.thealgorithms.backtracking.Combination.combination(objArray0, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1348");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>>> wildcardClassSetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (byte) 0);
        java.util.List<java.util.TreeSet<java.lang.invoke.TypeDescriptor>> typeDescriptorSetList6 = com.thealgorithms.backtracking.Combination.combination((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2, 0);
        java.util.List<java.util.TreeSet<java.lang.reflect.AnnotatedElement>> annotatedElementSetList8 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2, (int) (byte) -1);
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration>> genericDeclarationSetList10 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2, (int) (byte) 10);
        java.lang.Class<?> wildcardClass11 = genericDeclarationSetList10.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNull(wildcardClassSetList4);
        org.junit.Assert.assertNull(typeDescriptorSetList6);
        org.junit.Assert.assertNotNull(annotatedElementSetList8);
        org.junit.Assert.assertNotNull(genericDeclarationSetList10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1349");
        java.lang.reflect.Type[] typeArray0 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[][] typeArray2 = new java.lang.reflect.Type[][] { typeArray0, typeArray1 };
        java.util.List<java.util.TreeSet<java.lang.reflect.Type[]>> typeArraySetList4 = com.thealgorithms.backtracking.Combination.combination(typeArray2, 0);
        java.util.List<java.util.TreeSet<java.lang.reflect.Type[]>> typeArraySetList6 = com.thealgorithms.backtracking.Combination.combination(typeArray2, (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass7 = typeArraySetList6.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(typeArray0);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNull(typeArraySetList4);
        org.junit.Assert.assertNull(typeArraySetList6);
    }

    @Test
    public void test1350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1350");
        java.lang.String[][] strArray0 = new java.lang.String[][] {};
        java.util.List<java.util.TreeSet<java.lang.String[]>> strArraySetList2 = com.thealgorithms.backtracking.Combination.combination(strArray0, (int) (byte) -1);
        java.util.List<java.util.TreeSet<java.io.Serializable>> serializableSetList4 = com.thealgorithms.backtracking.Combination.combination((java.io.Serializable[]) strArray0, (int) (short) 0);
        java.util.List<java.util.TreeSet<java.lang.String[]>> strArraySetList6 = com.thealgorithms.backtracking.Combination.combination(strArray0, 0);
        java.util.List<java.util.TreeSet<java.lang.constant.Constable[]>> constableArraySetList8 = com.thealgorithms.backtracking.Combination.combination((java.lang.constant.Constable[][]) strArray0, (int) (short) 1);
        java.util.List<java.util.TreeSet<java.lang.String[]>> strArraySetList10 = com.thealgorithms.backtracking.Combination.combination(strArray0, (int) (byte) 0);
        java.lang.Class<?> wildcardClass11 = strArray0.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArraySetList2);
        org.junit.Assert.assertNull(serializableSetList4);
        org.junit.Assert.assertNull(strArraySetList6);
        org.junit.Assert.assertNotNull(constableArraySetList8);
        org.junit.Assert.assertNull(strArraySetList10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1351");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>>> wildcardClassSetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (byte) 0);
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration>> genericDeclarationSetList6 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2, (int) (byte) 1);
        java.util.List<java.util.TreeSet<java.lang.invoke.TypeDescriptor>> typeDescriptorSetList8 = com.thealgorithms.backtracking.Combination.combination((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2, (int) ' ');
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration>> genericDeclarationSetList10 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2, (int) '#');
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration>> genericDeclarationSetList12 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2, 1);
        java.util.List<java.util.TreeSet<java.lang.Class<?>>> wildcardClassSetList14 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (byte) 100);
        java.util.List<java.util.TreeSet<java.lang.reflect.Type>> typeSetList16 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.Type[]) wildcardClassArray2, 0);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass17 = typeSetList16.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNull(wildcardClassSetList4);
        org.junit.Assert.assertNotNull(genericDeclarationSetList6);
        org.junit.Assert.assertNotNull(typeDescriptorSetList8);
        org.junit.Assert.assertNotNull(genericDeclarationSetList10);
        org.junit.Assert.assertNotNull(genericDeclarationSetList12);
        org.junit.Assert.assertNotNull(wildcardClassSetList14);
        org.junit.Assert.assertNull(typeSetList16);
    }

    @Test
    public void test1352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1352");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>>> wildcardClassSetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (byte) 0);
        java.util.List<java.util.TreeSet<java.lang.invoke.TypeDescriptor>> typeDescriptorSetList6 = com.thealgorithms.backtracking.Combination.combination((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2, (int) (byte) 100);
        java.util.List<java.util.TreeSet<java.lang.invoke.TypeDescriptor>> typeDescriptorSetList8 = com.thealgorithms.backtracking.Combination.combination((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2, (int) '#');
        java.lang.Class<?> wildcardClass9 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNull(wildcardClassSetList4);
        org.junit.Assert.assertNotNull(typeDescriptorSetList6);
        org.junit.Assert.assertNotNull(typeDescriptorSetList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1353");
        java.lang.Class[][][][][][] classArray1 = new java.lang.Class[0][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][][][]>> wildcardClassArraySetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, 1);
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][][][]>> wildcardClassArraySetList6 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, 4);
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][][][]>> wildcardClassArraySetList8 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, 100);
        java.lang.Class<?> wildcardClass9 = wildcardClassArraySetList8.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList4);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList6);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1354");
        com.thealgorithms.backtracking.Combination[][][][] combinationArray0 = new com.thealgorithms.backtracking.Combination[][][][] {};
        java.util.List<java.util.TreeSet<com.thealgorithms.backtracking.Combination[][][]>> combinationArraySetList2 = com.thealgorithms.backtracking.Combination.combination(combinationArray0, 0);
        java.util.List<java.util.TreeSet<com.thealgorithms.backtracking.Combination[][][]>> combinationArraySetList4 = com.thealgorithms.backtracking.Combination.combination(combinationArray0, (int) 'a');
        java.util.List<java.util.TreeSet<com.thealgorithms.backtracking.Combination[][][]>> combinationArraySetList6 = com.thealgorithms.backtracking.Combination.combination(combinationArray0, (int) (byte) 1);
        java.lang.Class<?> wildcardClass7 = combinationArraySetList6.getClass();
        org.junit.Assert.assertNotNull(combinationArray0);
        org.junit.Assert.assertNull(combinationArraySetList2);
        org.junit.Assert.assertNotNull(combinationArraySetList4);
        org.junit.Assert.assertNotNull(combinationArraySetList6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test1355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1355");
        com.thealgorithms.backtracking.Combination[][][][][] combinationArray0 = new com.thealgorithms.backtracking.Combination[][][][][] {};
        com.thealgorithms.backtracking.Combination[][][][][] combinationArray1 = new com.thealgorithms.backtracking.Combination[][][][][] {};
        com.thealgorithms.backtracking.Combination[][][][][][] combinationArray2 = new com.thealgorithms.backtracking.Combination[][][][][][] { combinationArray0, combinationArray1 };
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.TreeSet<com.thealgorithms.backtracking.Combination[][][][][]>> combinationArraySetList4 = com.thealgorithms.backtracking.Combination.combination(combinationArray2, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(combinationArray0);
        org.junit.Assert.assertNotNull(combinationArray1);
        org.junit.Assert.assertNotNull(combinationArray2);
    }

    @Test
    public void test1356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1356");
        java.lang.Class[][][] classArray1 = new java.lang.Class[0][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray2 = (java.lang.Class<?>[][][]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][]>> wildcardClassArraySetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (byte) -1);
        java.util.List<java.util.TreeSet<java.lang.reflect.Type[][]>> typeArraySetList6 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.Type[][][]) wildcardClassArray2, 5);
        java.lang.Class<?> wildcardClass7 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList4);
        org.junit.Assert.assertNotNull(typeArraySetList6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test1357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1357");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>>> wildcardClassSetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (byte) 0);
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration>> genericDeclarationSetList6 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2, (int) (byte) 1);
        java.util.List<java.util.TreeSet<java.lang.reflect.Type>> typeSetList8 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.Type[]) wildcardClassArray2, (int) (short) -1);
        java.util.List<java.util.TreeSet<java.lang.constant.Constable>> constableSetList10 = com.thealgorithms.backtracking.Combination.combination((java.lang.constant.Constable[]) wildcardClassArray2, 3);
        java.lang.Class<?> wildcardClass11 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNull(wildcardClassSetList4);
        org.junit.Assert.assertNotNull(genericDeclarationSetList6);
        org.junit.Assert.assertNotNull(typeSetList8);
        org.junit.Assert.assertNotNull(constableSetList10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1358");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>>> wildcardClassSetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (byte) 0);
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration>> genericDeclarationSetList6 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2, (int) (byte) 1);
        java.util.List<java.util.TreeSet<java.lang.invoke.TypeDescriptor>> typeDescriptorSetList8 = com.thealgorithms.backtracking.Combination.combination((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2, (int) ' ');
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration>> genericDeclarationSetList10 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2, 0);
        java.util.List<java.util.TreeSet<java.lang.Class<?>>> wildcardClassSetList12 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (-1));
        java.util.List<java.util.TreeSet<java.lang.Class<?>>> wildcardClassSetList14 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) '#');
        java.util.List<java.util.TreeSet<java.lang.invoke.TypeDescriptor>> typeDescriptorSetList16 = com.thealgorithms.backtracking.Combination.combination((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2, 1);
        java.util.List<java.util.TreeSet<java.lang.Class<?>>> wildcardClassSetList18 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (byte) 10);
        java.lang.Class<?> wildcardClass19 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNull(wildcardClassSetList4);
        org.junit.Assert.assertNotNull(genericDeclarationSetList6);
        org.junit.Assert.assertNotNull(typeDescriptorSetList8);
        org.junit.Assert.assertNull(genericDeclarationSetList10);
        org.junit.Assert.assertNotNull(wildcardClassSetList12);
        org.junit.Assert.assertNotNull(wildcardClassSetList14);
        org.junit.Assert.assertNotNull(typeDescriptorSetList16);
        org.junit.Assert.assertNotNull(wildcardClassSetList18);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test1359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1359");
        java.util.List[][][] listArray1 = new java.util.List[0][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[][][] strSetListArray2 = (java.util.List<java.util.TreeSet<java.lang.String>>[][][]) listArray1;
        java.util.List[][][] listArray4 = new java.util.List[0][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[][][] strSetListArray5 = (java.util.List<java.util.TreeSet<java.lang.String>>[][][]) listArray4;
        java.util.List[][][][] listArray7 = new java.util.List[2][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[][][][] strSetListArray8 = (java.util.List<java.util.TreeSet<java.lang.String>>[][][][]) listArray7;
        strSetListArray8[0] = strSetListArray2;
        strSetListArray8[1] = strSetListArray5;
        java.util.List[][][] listArray14 = new java.util.List[0][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[][][] strSetListArray15 = (java.util.List<java.util.TreeSet<java.lang.String>>[][][]) listArray14;
        java.util.List[][][] listArray17 = new java.util.List[0][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[][][] strSetListArray18 = (java.util.List<java.util.TreeSet<java.lang.String>>[][][]) listArray17;
        java.util.List[][][][] listArray20 = new java.util.List[2][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[][][][] strSetListArray21 = (java.util.List<java.util.TreeSet<java.lang.String>>[][][][]) listArray20;
        strSetListArray21[0] = strSetListArray15;
        strSetListArray21[1] = strSetListArray18;
        java.util.List[][][][][] listArray27 = new java.util.List[2][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[][][][][] strSetListArray28 = (java.util.List<java.util.TreeSet<java.lang.String>>[][][][][]) listArray27;
        strSetListArray28[0] = strSetListArray8;
        strSetListArray28[1] = strSetListArray21;
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[][][][]>> listArraySetList34 = com.thealgorithms.backtracking.Combination.combination(strSetListArray28, 0);
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[][][][]>> listArraySetList36 = com.thealgorithms.backtracking.Combination.combination(strSetListArray28, 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[][][][]>> listArraySetList38 = com.thealgorithms.backtracking.Combination.combination(strSetListArray28, 5);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strSetListArray2);
        org.junit.Assert.assertNotNull(listArray4);
        org.junit.Assert.assertNotNull(strSetListArray5);
        org.junit.Assert.assertNotNull(listArray7);
        org.junit.Assert.assertNotNull(strSetListArray8);
        org.junit.Assert.assertNotNull(listArray14);
        org.junit.Assert.assertNotNull(strSetListArray15);
        org.junit.Assert.assertNotNull(listArray17);
        org.junit.Assert.assertNotNull(strSetListArray18);
        org.junit.Assert.assertNotNull(listArray20);
        org.junit.Assert.assertNotNull(strSetListArray21);
        org.junit.Assert.assertNotNull(listArray27);
        org.junit.Assert.assertNotNull(strSetListArray28);
        org.junit.Assert.assertNull(listArraySetList34);
        org.junit.Assert.assertNull(listArraySetList36);
    }

    @Test
    public void test1360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1360");
        java.lang.Class[][][][][][][] classArray1 = new java.lang.Class[0][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][][][][]>> wildcardClassArraySetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, 1);
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][][][][]>> wildcardClassArraySetList6 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, 1);
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][][][][]>> wildcardClassArraySetList8 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (short) 10);
        java.lang.Class<?> wildcardClass9 = wildcardClassArraySetList8.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList4);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList6);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1361");
        java.lang.Class[][][][] classArray1 = new java.lang.Class[0][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][]>> wildcardClassArraySetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (byte) 100);
        java.util.List<java.util.TreeSet<java.lang.reflect.Type[][][]>> typeArraySetList6 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.Type[][][][]) wildcardClassArray2, 3);
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][]>> wildcardClassArraySetList8 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (-1));
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration[][][]>> genericDeclarationArraySetList10 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[][][][]) wildcardClassArray2, (int) 'a');
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][]>> wildcardClassArraySetList12 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (byte) 10);
        java.util.List<java.util.TreeSet<java.lang.reflect.Type[][][]>> typeArraySetList14 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.Type[][][][]) wildcardClassArray2, 0);
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration[][][]>> genericDeclarationArraySetList16 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[][][][]) wildcardClassArray2, (int) 'a');
        java.lang.Class<?> wildcardClass17 = genericDeclarationArraySetList16.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList4);
        org.junit.Assert.assertNotNull(typeArraySetList6);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList8);
        org.junit.Assert.assertNotNull(genericDeclarationArraySetList10);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList12);
        org.junit.Assert.assertNull(typeArraySetList14);
        org.junit.Assert.assertNotNull(genericDeclarationArraySetList16);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test1362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1362");
        java.lang.Class[][][] classArray1 = new java.lang.Class[0][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray2 = (java.lang.Class<?>[][][]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][]>> wildcardClassArraySetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (byte) -1);
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][]>> wildcardClassArraySetList6 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, 0);
        java.util.List<java.util.TreeSet<java.lang.reflect.Type[][]>> typeArraySetList8 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.Type[][][]) wildcardClassArray2, (int) (byte) 100);
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][]>> wildcardClassArraySetList10 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (short) 100);
        java.util.List<java.util.TreeSet<java.lang.reflect.Type[][]>> typeArraySetList12 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.Type[][][]) wildcardClassArray2, 2);
        java.lang.Class<?> wildcardClass13 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList4);
        org.junit.Assert.assertNull(wildcardClassArraySetList6);
        org.junit.Assert.assertNotNull(typeArraySetList8);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList10);
        org.junit.Assert.assertNotNull(typeArraySetList12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1363");
        java.lang.String[][][][] strArray0 = new java.lang.String[][][][] {};
        java.util.List<java.util.TreeSet<java.lang.String[][][]>> strArraySetList2 = com.thealgorithms.backtracking.Combination.combination(strArray0, (int) (byte) 10);
        java.util.List<java.util.TreeSet<java.lang.String[][][]>> strArraySetList4 = com.thealgorithms.backtracking.Combination.combination(strArray0, (int) (short) 100);
        java.util.List<java.util.TreeSet<java.lang.String[][][]>> strArraySetList6 = com.thealgorithms.backtracking.Combination.combination(strArray0, (int) '#');
        java.lang.Class<?> wildcardClass7 = strArray0.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArraySetList2);
        org.junit.Assert.assertNotNull(strArraySetList4);
        org.junit.Assert.assertNotNull(strArraySetList6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test1364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1364");
        java.util.List[] listArray1 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[] strSetListArray2 = (java.util.List<java.util.TreeSet<java.lang.String>>[]) listArray1;
        java.util.List[] listArray4 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[] strSetListArray5 = (java.util.List<java.util.TreeSet<java.lang.String>>[]) listArray4;
        java.util.List[][] listArray7 = new java.util.List[2][];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[][] strSetListArray8 = (java.util.List<java.util.TreeSet<java.lang.String>>[][]) listArray7;
        strSetListArray8[0] = strSetListArray2;
        strSetListArray8[1] = strSetListArray5;
        java.util.List[][][] listArray14 = new java.util.List[1][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[][][] strSetListArray15 = (java.util.List<java.util.TreeSet<java.lang.String>>[][][]) listArray14;
        strSetListArray15[0] = strSetListArray8;
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[][]>> listArraySetList19 = com.thealgorithms.backtracking.Combination.combination(strSetListArray15, (int) (short) 10);
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[][]>> listArraySetList21 = com.thealgorithms.backtracking.Combination.combination(strSetListArray15, (int) '#');
        java.util.List<java.util.TreeSet<java.util.Collection[][]>> collectionArraySetList23 = com.thealgorithms.backtracking.Combination.combination((java.util.Collection[][][]) strSetListArray15, 0);
        java.util.List<java.util.TreeSet<java.util.Collection[][]>> collectionArraySetList25 = com.thealgorithms.backtracking.Combination.combination((java.util.Collection[][][]) strSetListArray15, (int) (byte) 100);
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[][]>> listArraySetList27 = com.thealgorithms.backtracking.Combination.combination(strSetListArray15, 4);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.TreeSet<java.util.Collection[][]>> collectionArraySetList29 = com.thealgorithms.backtracking.Combination.combination((java.util.Collection[][][]) strSetListArray15, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strSetListArray2);
        org.junit.Assert.assertNotNull(listArray4);
        org.junit.Assert.assertNotNull(strSetListArray5);
        org.junit.Assert.assertNotNull(listArray7);
        org.junit.Assert.assertNotNull(strSetListArray8);
        org.junit.Assert.assertNotNull(listArray14);
        org.junit.Assert.assertNotNull(strSetListArray15);
        org.junit.Assert.assertNotNull(listArraySetList19);
        org.junit.Assert.assertNotNull(listArraySetList21);
        org.junit.Assert.assertNull(collectionArraySetList23);
        org.junit.Assert.assertNotNull(collectionArraySetList25);
        org.junit.Assert.assertNotNull(listArraySetList27);
    }

    @Test
    public void test1365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1365");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>>> wildcardClassSetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (byte) 0);
        java.util.List<java.util.TreeSet<java.lang.invoke.TypeDescriptor>> typeDescriptorSetList6 = com.thealgorithms.backtracking.Combination.combination((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2, (int) (byte) 100);
        java.util.List<java.util.TreeSet<java.lang.invoke.TypeDescriptor>> typeDescriptorSetList8 = com.thealgorithms.backtracking.Combination.combination((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2, (int) (short) 10);
        java.util.List<java.util.TreeSet<java.lang.reflect.Type>> typeSetList10 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.Type[]) wildcardClassArray2, (int) (byte) 1);
        java.util.List<java.util.TreeSet<java.lang.reflect.AnnotatedElement>> annotatedElementSetList12 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2, 3);
        java.util.List<java.util.TreeSet<java.lang.constant.Constable>> constableSetList14 = com.thealgorithms.backtracking.Combination.combination((java.lang.constant.Constable[]) wildcardClassArray2, 3);
        java.util.List<java.util.TreeSet<java.lang.Class<?>>> wildcardClassSetList16 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, 5);
        java.lang.Class<?> wildcardClass17 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNull(wildcardClassSetList4);
        org.junit.Assert.assertNotNull(typeDescriptorSetList6);
        org.junit.Assert.assertNotNull(typeDescriptorSetList8);
        org.junit.Assert.assertNotNull(typeSetList10);
        org.junit.Assert.assertNotNull(annotatedElementSetList12);
        org.junit.Assert.assertNotNull(constableSetList14);
        org.junit.Assert.assertNotNull(wildcardClassSetList16);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test1366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1366");
        com.thealgorithms.backtracking.Combination[][][][][][][][] combinationArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.TreeSet<com.thealgorithms.backtracking.Combination[][][][][][][]>> combinationArraySetList2 = com.thealgorithms.backtracking.Combination.combination(combinationArray0, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1367");
        java.lang.String[][] strArray0 = new java.lang.String[][] {};
        java.util.List<java.util.TreeSet<java.lang.String[]>> strArraySetList2 = com.thealgorithms.backtracking.Combination.combination(strArray0, (int) (byte) -1);
        java.util.List<java.util.TreeSet<java.io.Serializable>> serializableSetList4 = com.thealgorithms.backtracking.Combination.combination((java.io.Serializable[]) strArray0, (int) (short) 0);
        java.util.List<java.util.TreeSet<java.lang.String[]>> strArraySetList6 = com.thealgorithms.backtracking.Combination.combination(strArray0, 0);
        java.util.List<java.util.TreeSet<java.lang.constant.Constable[]>> constableArraySetList8 = com.thealgorithms.backtracking.Combination.combination((java.lang.constant.Constable[][]) strArray0, (int) (short) 1);
        java.util.List<java.util.TreeSet<java.lang.CharSequence[]>> charSequenceArraySetList10 = com.thealgorithms.backtracking.Combination.combination((java.lang.CharSequence[][]) strArray0, (int) (byte) 10);
        java.lang.Class<?> wildcardClass11 = charSequenceArraySetList10.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArraySetList2);
        org.junit.Assert.assertNull(serializableSetList4);
        org.junit.Assert.assertNull(strArraySetList6);
        org.junit.Assert.assertNotNull(constableArraySetList8);
        org.junit.Assert.assertNotNull(charSequenceArraySetList10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1368");
        java.lang.Class[][][][][][][] classArray1 = new java.lang.Class[0][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][][][][]>> wildcardClassArraySetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, 1);
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][][][][]>> wildcardClassArraySetList6 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) 'a');
        java.lang.Class<?> wildcardClass7 = wildcardClassArraySetList6.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList4);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test1369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1369");
        java.lang.Class[][][][][] classArray1 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][]) classArray1;
        java.lang.Class[][][][][] classArray4 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][]) classArray4;
        java.lang.Class[][][][][] classArray7 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray8 = (java.lang.Class<?>[][][][][]) classArray7;
        java.lang.Class[][][][][] classArray10 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray11 = (java.lang.Class<?>[][][][][]) classArray10;
        java.lang.Class[][][][][] classArray13 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray14 = (java.lang.Class<?>[][][][][]) classArray13;
        java.lang.Class[][][][][][] classArray16 = new java.lang.Class[5][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray17 = (java.lang.Class<?>[][][][][][]) classArray16;
        wildcardClassArray17[0] = wildcardClassArray2;
        wildcardClassArray17[1] = wildcardClassArray5;
        wildcardClassArray17[2] = wildcardClassArray8;
        wildcardClassArray17[3] = wildcardClassArray11;
        wildcardClassArray17[4] = wildcardClassArray14;
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][][][]>> wildcardClassArraySetList29 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray17, 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.TreeSet<java.lang.Class<?>[][][][][]>> wildcardClassArraySetList31 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray17, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(classArray16);
        org.junit.Assert.assertNotNull(wildcardClassArray17);
        org.junit.Assert.assertNull(wildcardClassArraySetList29);
    }

    @Test
    public void test1370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1370");
        com.thealgorithms.backtracking.Combination combination0 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination[] combinationArray1 = new com.thealgorithms.backtracking.Combination[] { combination0 };
        com.thealgorithms.backtracking.Combination[][] combinationArray2 = new com.thealgorithms.backtracking.Combination[][] { combinationArray1 };
        com.thealgorithms.backtracking.Combination[][][] combinationArray3 = new com.thealgorithms.backtracking.Combination[][][] { combinationArray2 };
        com.thealgorithms.backtracking.Combination[][][][] combinationArray4 = new com.thealgorithms.backtracking.Combination[][][][] { combinationArray3 };
        com.thealgorithms.backtracking.Combination combination5 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination[] combinationArray6 = new com.thealgorithms.backtracking.Combination[] { combination5 };
        com.thealgorithms.backtracking.Combination[][] combinationArray7 = new com.thealgorithms.backtracking.Combination[][] { combinationArray6 };
        com.thealgorithms.backtracking.Combination[][][] combinationArray8 = new com.thealgorithms.backtracking.Combination[][][] { combinationArray7 };
        com.thealgorithms.backtracking.Combination[][][][] combinationArray9 = new com.thealgorithms.backtracking.Combination[][][][] { combinationArray8 };
        com.thealgorithms.backtracking.Combination combination10 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination[] combinationArray11 = new com.thealgorithms.backtracking.Combination[] { combination10 };
        com.thealgorithms.backtracking.Combination[][] combinationArray12 = new com.thealgorithms.backtracking.Combination[][] { combinationArray11 };
        com.thealgorithms.backtracking.Combination[][][] combinationArray13 = new com.thealgorithms.backtracking.Combination[][][] { combinationArray12 };
        com.thealgorithms.backtracking.Combination[][][][] combinationArray14 = new com.thealgorithms.backtracking.Combination[][][][] { combinationArray13 };
        com.thealgorithms.backtracking.Combination combination15 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination[] combinationArray16 = new com.thealgorithms.backtracking.Combination[] { combination15 };
        com.thealgorithms.backtracking.Combination[][] combinationArray17 = new com.thealgorithms.backtracking.Combination[][] { combinationArray16 };
        com.thealgorithms.backtracking.Combination[][][] combinationArray18 = new com.thealgorithms.backtracking.Combination[][][] { combinationArray17 };
        com.thealgorithms.backtracking.Combination[][][][] combinationArray19 = new com.thealgorithms.backtracking.Combination[][][][] { combinationArray18 };
        com.thealgorithms.backtracking.Combination combination20 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination[] combinationArray21 = new com.thealgorithms.backtracking.Combination[] { combination20 };
        com.thealgorithms.backtracking.Combination[][] combinationArray22 = new com.thealgorithms.backtracking.Combination[][] { combinationArray21 };
        com.thealgorithms.backtracking.Combination[][][] combinationArray23 = new com.thealgorithms.backtracking.Combination[][][] { combinationArray22 };
        com.thealgorithms.backtracking.Combination[][][][] combinationArray24 = new com.thealgorithms.backtracking.Combination[][][][] { combinationArray23 };
        com.thealgorithms.backtracking.Combination[][][][][] combinationArray25 = new com.thealgorithms.backtracking.Combination[][][][][] { combinationArray4, combinationArray9, combinationArray14, combinationArray19, combinationArray24 };
        com.thealgorithms.backtracking.Combination combination26 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination[] combinationArray27 = new com.thealgorithms.backtracking.Combination[] { combination26 };
        com.thealgorithms.backtracking.Combination[][] combinationArray28 = new com.thealgorithms.backtracking.Combination[][] { combinationArray27 };
        com.thealgorithms.backtracking.Combination[][][] combinationArray29 = new com.thealgorithms.backtracking.Combination[][][] { combinationArray28 };
        com.thealgorithms.backtracking.Combination[][][][] combinationArray30 = new com.thealgorithms.backtracking.Combination[][][][] { combinationArray29 };
        com.thealgorithms.backtracking.Combination combination31 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination[] combinationArray32 = new com.thealgorithms.backtracking.Combination[] { combination31 };
        com.thealgorithms.backtracking.Combination[][] combinationArray33 = new com.thealgorithms.backtracking.Combination[][] { combinationArray32 };
        com.thealgorithms.backtracking.Combination[][][] combinationArray34 = new com.thealgorithms.backtracking.Combination[][][] { combinationArray33 };
        com.thealgorithms.backtracking.Combination[][][][] combinationArray35 = new com.thealgorithms.backtracking.Combination[][][][] { combinationArray34 };
        com.thealgorithms.backtracking.Combination combination36 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination[] combinationArray37 = new com.thealgorithms.backtracking.Combination[] { combination36 };
        com.thealgorithms.backtracking.Combination[][] combinationArray38 = new com.thealgorithms.backtracking.Combination[][] { combinationArray37 };
        com.thealgorithms.backtracking.Combination[][][] combinationArray39 = new com.thealgorithms.backtracking.Combination[][][] { combinationArray38 };
        com.thealgorithms.backtracking.Combination[][][][] combinationArray40 = new com.thealgorithms.backtracking.Combination[][][][] { combinationArray39 };
        com.thealgorithms.backtracking.Combination combination41 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination[] combinationArray42 = new com.thealgorithms.backtracking.Combination[] { combination41 };
        com.thealgorithms.backtracking.Combination[][] combinationArray43 = new com.thealgorithms.backtracking.Combination[][] { combinationArray42 };
        com.thealgorithms.backtracking.Combination[][][] combinationArray44 = new com.thealgorithms.backtracking.Combination[][][] { combinationArray43 };
        com.thealgorithms.backtracking.Combination[][][][] combinationArray45 = new com.thealgorithms.backtracking.Combination[][][][] { combinationArray44 };
        com.thealgorithms.backtracking.Combination combination46 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination[] combinationArray47 = new com.thealgorithms.backtracking.Combination[] { combination46 };
        com.thealgorithms.backtracking.Combination[][] combinationArray48 = new com.thealgorithms.backtracking.Combination[][] { combinationArray47 };
        com.thealgorithms.backtracking.Combination[][][] combinationArray49 = new com.thealgorithms.backtracking.Combination[][][] { combinationArray48 };
        com.thealgorithms.backtracking.Combination[][][][] combinationArray50 = new com.thealgorithms.backtracking.Combination[][][][] { combinationArray49 };
        com.thealgorithms.backtracking.Combination[][][][][] combinationArray51 = new com.thealgorithms.backtracking.Combination[][][][][] { combinationArray30, combinationArray35, combinationArray40, combinationArray45, combinationArray50 };
        com.thealgorithms.backtracking.Combination[][][][][][] combinationArray52 = new com.thealgorithms.backtracking.Combination[][][][][][] { combinationArray25, combinationArray51 };
        com.thealgorithms.backtracking.Combination[][][][][][][] combinationArray53 = new com.thealgorithms.backtracking.Combination[][][][][][][] { combinationArray52 };
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.TreeSet<com.thealgorithms.backtracking.Combination[][][][][][]>> combinationArraySetList55 = com.thealgorithms.backtracking.Combination.combination(combinationArray53, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(combinationArray1);
        org.junit.Assert.assertNotNull(combinationArray2);
        org.junit.Assert.assertNotNull(combinationArray3);
        org.junit.Assert.assertNotNull(combinationArray4);
        org.junit.Assert.assertNotNull(combinationArray6);
        org.junit.Assert.assertNotNull(combinationArray7);
        org.junit.Assert.assertNotNull(combinationArray8);
        org.junit.Assert.assertNotNull(combinationArray9);
        org.junit.Assert.assertNotNull(combinationArray11);
        org.junit.Assert.assertNotNull(combinationArray12);
        org.junit.Assert.assertNotNull(combinationArray13);
        org.junit.Assert.assertNotNull(combinationArray14);
        org.junit.Assert.assertNotNull(combinationArray16);
        org.junit.Assert.assertNotNull(combinationArray17);
        org.junit.Assert.assertNotNull(combinationArray18);
        org.junit.Assert.assertNotNull(combinationArray19);
        org.junit.Assert.assertNotNull(combinationArray21);
        org.junit.Assert.assertNotNull(combinationArray22);
        org.junit.Assert.assertNotNull(combinationArray23);
        org.junit.Assert.assertNotNull(combinationArray24);
        org.junit.Assert.assertNotNull(combinationArray25);
        org.junit.Assert.assertNotNull(combinationArray27);
        org.junit.Assert.assertNotNull(combinationArray28);
        org.junit.Assert.assertNotNull(combinationArray29);
        org.junit.Assert.assertNotNull(combinationArray30);
        org.junit.Assert.assertNotNull(combinationArray32);
        org.junit.Assert.assertNotNull(combinationArray33);
        org.junit.Assert.assertNotNull(combinationArray34);
        org.junit.Assert.assertNotNull(combinationArray35);
        org.junit.Assert.assertNotNull(combinationArray37);
        org.junit.Assert.assertNotNull(combinationArray38);
        org.junit.Assert.assertNotNull(combinationArray39);
        org.junit.Assert.assertNotNull(combinationArray40);
        org.junit.Assert.assertNotNull(combinationArray42);
        org.junit.Assert.assertNotNull(combinationArray43);
        org.junit.Assert.assertNotNull(combinationArray44);
        org.junit.Assert.assertNotNull(combinationArray45);
        org.junit.Assert.assertNotNull(combinationArray47);
        org.junit.Assert.assertNotNull(combinationArray48);
        org.junit.Assert.assertNotNull(combinationArray49);
        org.junit.Assert.assertNotNull(combinationArray50);
        org.junit.Assert.assertNotNull(combinationArray51);
        org.junit.Assert.assertNotNull(combinationArray52);
        org.junit.Assert.assertNotNull(combinationArray53);
    }

    @Test
    public void test1371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1371");
        java.lang.Class[][][][][][][] classArray1 = new java.lang.Class[0][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][]) classArray1;
        java.lang.Class[][][][][][][] classArray4 = new java.lang.Class[0][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][][][]) classArray4;
        java.lang.Class[][][][][][][] classArray7 = new java.lang.Class[0][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][] wildcardClassArray8 = (java.lang.Class<?>[][][][][][][]) classArray7;
        java.lang.Class[][][][][][][] classArray10 = new java.lang.Class[0][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][] wildcardClassArray11 = (java.lang.Class<?>[][][][][][][]) classArray10;
        java.lang.Class[][][][][][][] classArray13 = new java.lang.Class[0][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][] wildcardClassArray14 = (java.lang.Class<?>[][][][][][][]) classArray13;
        java.lang.Class[][][][][][][][] classArray16 = new java.lang.Class[5][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray17 = (java.lang.Class<?>[][][][][][][][]) classArray16;
        wildcardClassArray17[0] = wildcardClassArray2;
        wildcardClassArray17[1] = wildcardClassArray5;
        wildcardClassArray17[2] = wildcardClassArray8;
        wildcardClassArray17[3] = wildcardClassArray11;
        wildcardClassArray17[4] = wildcardClassArray14;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.TreeSet<java.lang.Class<?>[][][][][][][]>> wildcardClassArraySetList29 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray17, 3);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(classArray16);
        org.junit.Assert.assertNotNull(wildcardClassArray17);
    }

    @Test
    public void test1372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1372");
        java.lang.Class[][][][][] classArray1 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][][]>> wildcardClassArraySetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (short) 10);
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][][]>> wildcardClassArraySetList6 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (byte) 10);
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][][]>> wildcardClassArraySetList8 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (short) 0);
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][][]>> wildcardClassArraySetList10 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, 3);
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][][]>> wildcardClassArraySetList12 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, 10);
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][][]>> wildcardClassArraySetList14 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, 3);
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][][]>> wildcardClassArraySetList16 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, 5);
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration[][][][]>> genericDeclarationArraySetList18 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[][][][][]) wildcardClassArray2, (int) ' ');
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration[][][][]>> genericDeclarationArraySetList20 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[][][][][]) wildcardClassArray2, (int) (byte) 100);
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration[][][][]>> genericDeclarationArraySetList22 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[][][][][]) wildcardClassArray2, 0);
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][][]>> wildcardClassArraySetList24 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (short) 1);
        java.lang.Class<?> wildcardClass25 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList4);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList6);
        org.junit.Assert.assertNull(wildcardClassArraySetList8);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList10);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList12);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList14);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList16);
        org.junit.Assert.assertNotNull(genericDeclarationArraySetList18);
        org.junit.Assert.assertNotNull(genericDeclarationArraySetList20);
        org.junit.Assert.assertNull(genericDeclarationArraySetList22);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList24);
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test1373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1373");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>>> wildcardClassSetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (byte) 0);
        java.util.List<java.util.TreeSet<java.lang.invoke.TypeDescriptor>> typeDescriptorSetList6 = com.thealgorithms.backtracking.Combination.combination((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2, (int) (byte) 100);
        java.util.List<java.util.TreeSet<java.lang.invoke.TypeDescriptor>> typeDescriptorSetList8 = com.thealgorithms.backtracking.Combination.combination((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2, (int) (short) 10);
        java.util.List<java.util.TreeSet<java.lang.reflect.Type>> typeSetList10 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.Type[]) wildcardClassArray2, (int) (byte) 1);
        java.util.List<java.util.TreeSet<java.lang.reflect.Type>> typeSetList12 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.Type[]) wildcardClassArray2, 2);
        java.lang.Class<?> wildcardClass13 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNull(wildcardClassSetList4);
        org.junit.Assert.assertNotNull(typeDescriptorSetList6);
        org.junit.Assert.assertNotNull(typeDescriptorSetList8);
        org.junit.Assert.assertNotNull(typeSetList10);
        org.junit.Assert.assertNotNull(typeSetList12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1374");
        java.lang.Class[][][][][] classArray1 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][][]>> wildcardClassArraySetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (short) 10);
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][][]>> wildcardClassArraySetList6 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (byte) 10);
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][][]>> wildcardClassArraySetList8 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (short) 0);
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][][]>> wildcardClassArraySetList10 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, 3);
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][][]>> wildcardClassArraySetList12 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, 10);
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][][]>> wildcardClassArraySetList14 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, 3);
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][][]>> wildcardClassArraySetList16 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, 5);
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration[][][][]>> genericDeclarationArraySetList18 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[][][][][]) wildcardClassArray2, (int) ' ');
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration[][][][]>> genericDeclarationArraySetList20 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[][][][][]) wildcardClassArray2, (int) (byte) 100);
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration[][][][]>> genericDeclarationArraySetList22 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[][][][][]) wildcardClassArray2, (int) 'a');
        java.lang.Class<?> wildcardClass23 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList4);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList6);
        org.junit.Assert.assertNull(wildcardClassArraySetList8);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList10);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList12);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList14);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList16);
        org.junit.Assert.assertNotNull(genericDeclarationArraySetList18);
        org.junit.Assert.assertNotNull(genericDeclarationArraySetList20);
        org.junit.Assert.assertNotNull(genericDeclarationArraySetList22);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test1375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1375");
        java.lang.Class[][][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][][]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][][][][][][]>> wildcardClassArraySetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, 2);
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][][][][][][]>> wildcardClassArraySetList6 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, 0);
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][][][][][][]>> wildcardClassArraySetList8 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) ' ');
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][][][][][][]>> wildcardClassArraySetList10 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, 2);
        java.lang.Class<?> wildcardClass11 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList4);
        org.junit.Assert.assertNull(wildcardClassArraySetList6);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList8);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1376");
        com.thealgorithms.backtracking.Combination[][][][][][][][][][] combinationArray0 = new com.thealgorithms.backtracking.Combination[][][][][][][][][][] {};
        com.thealgorithms.backtracking.Combination[][][][][][][][][][] combinationArray1 = new com.thealgorithms.backtracking.Combination[][][][][][][][][][] {};
        com.thealgorithms.backtracking.Combination[][][][][][][][][][] combinationArray2 = new com.thealgorithms.backtracking.Combination[][][][][][][][][][] {};
        com.thealgorithms.backtracking.Combination[][][][][][][][][][] combinationArray3 = new com.thealgorithms.backtracking.Combination[][][][][][][][][][] {};
        com.thealgorithms.backtracking.Combination[][][][][][][][][][][] combinationArray4 = new com.thealgorithms.backtracking.Combination[][][][][][][][][][][] { combinationArray0, combinationArray1, combinationArray2, combinationArray3 };
        java.util.List<java.util.TreeSet<com.thealgorithms.backtracking.Combination[][][][][][][][][][]>> combinationArraySetList6 = com.thealgorithms.backtracking.Combination.combination(combinationArray4, (int) (byte) 0);
        java.util.List<java.util.TreeSet<com.thealgorithms.backtracking.Combination[][][][][][][][][][]>> combinationArraySetList8 = com.thealgorithms.backtracking.Combination.combination(combinationArray4, (int) (short) 0);
        java.lang.Class<?> wildcardClass9 = combinationArray4.getClass();
        org.junit.Assert.assertNotNull(combinationArray0);
        org.junit.Assert.assertNotNull(combinationArray1);
        org.junit.Assert.assertNotNull(combinationArray2);
        org.junit.Assert.assertNotNull(combinationArray3);
        org.junit.Assert.assertNotNull(combinationArray4);
        org.junit.Assert.assertNull(combinationArraySetList6);
        org.junit.Assert.assertNull(combinationArraySetList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1377");
        java.lang.Class[][][][] classArray1 = new java.lang.Class[0][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][]>> wildcardClassArraySetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (byte) 100);
        java.util.List<java.util.TreeSet<java.lang.reflect.Type[][][]>> typeArraySetList6 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.Type[][][][]) wildcardClassArray2, 3);
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration[][][]>> genericDeclarationArraySetList8 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[][][][]) wildcardClassArray2, (int) ' ');
        java.lang.Class<?> wildcardClass9 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList4);
        org.junit.Assert.assertNotNull(typeArraySetList6);
        org.junit.Assert.assertNotNull(genericDeclarationArraySetList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1378");
        java.lang.Class[][][] classArray1 = new java.lang.Class[0][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray2 = (java.lang.Class<?>[][][]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][]>> wildcardClassArraySetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (byte) -1);
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration[][]>> genericDeclarationArraySetList6 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[][][]) wildcardClassArray2, (-1));
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][]>> wildcardClassArraySetList8 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, 3);
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][]>> wildcardClassArraySetList10 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (short) 100);
        java.lang.Class<?> wildcardClass11 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList4);
        org.junit.Assert.assertNotNull(genericDeclarationArraySetList6);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList8);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1379");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "", "", "", "" };
        java.util.List<java.util.TreeSet<java.lang.Comparable<java.lang.String>>> strComparableSetList8 = com.thealgorithms.backtracking.Combination.combination((java.lang.Comparable<java.lang.String>[]) strArray6, (int) (byte) 1);
        java.util.List<java.util.TreeSet<java.lang.Comparable<java.lang.String>>> strComparableSetList10 = com.thealgorithms.backtracking.Combination.combination((java.lang.Comparable<java.lang.String>[]) strArray6, (int) (byte) 1);
        java.util.List<java.util.TreeSet<java.lang.String>> strSetList12 = com.thealgorithms.backtracking.Combination.combination(strArray6, (int) '4');
        java.lang.Class<?> wildcardClass13 = strSetList12.getClass();
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strComparableSetList8);
        org.junit.Assert.assertNotNull(strComparableSetList10);
        org.junit.Assert.assertNotNull(strSetList12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1380");
        java.lang.Class[][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][][][][][]>> wildcardClassArraySetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, 2);
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][][][][][]>> wildcardClassArraySetList6 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) 'a');
        java.lang.Class<?> wildcardClass7 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList4);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test1381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1381");
        java.util.List[][] listArray1 = new java.util.List[0][];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[][] strSetListArray2 = (java.util.List<java.util.TreeSet<java.lang.String>>[][]) listArray1;
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[]>> listArraySetList4 = com.thealgorithms.backtracking.Combination.combination(strSetListArray2, (int) (short) -1);
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[]>> listArraySetList6 = com.thealgorithms.backtracking.Combination.combination(strSetListArray2, (-1));
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[]>> listArraySetList8 = com.thealgorithms.backtracking.Combination.combination(strSetListArray2, (int) 'a');
        java.util.List<java.util.TreeSet<java.lang.Iterable<java.util.TreeSet<java.lang.String>>[]>> iterableArraySetList10 = com.thealgorithms.backtracking.Combination.combination((java.lang.Iterable<java.util.TreeSet<java.lang.String>>[][]) strSetListArray2, (-1));
        java.util.List<java.util.TreeSet<java.util.Collection[]>> collectionArraySetList12 = com.thealgorithms.backtracking.Combination.combination((java.util.Collection[][]) strSetListArray2, (int) (byte) -1);
        java.util.List<java.util.TreeSet<java.lang.Iterable<java.util.TreeSet<java.lang.String>>[]>> iterableArraySetList14 = com.thealgorithms.backtracking.Combination.combination((java.lang.Iterable<java.util.TreeSet<java.lang.String>>[][]) strSetListArray2, (int) (byte) -1);
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[]>> listArraySetList16 = com.thealgorithms.backtracking.Combination.combination(strSetListArray2, (int) (byte) 10);
        java.util.List<java.util.TreeSet<java.util.Collection[]>> collectionArraySetList18 = com.thealgorithms.backtracking.Combination.combination((java.util.Collection[][]) strSetListArray2, 10);
        java.lang.Class<?> wildcardClass19 = strSetListArray2.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strSetListArray2);
        org.junit.Assert.assertNotNull(listArraySetList4);
        org.junit.Assert.assertNotNull(listArraySetList6);
        org.junit.Assert.assertNotNull(listArraySetList8);
        org.junit.Assert.assertNotNull(iterableArraySetList10);
        org.junit.Assert.assertNotNull(collectionArraySetList12);
        org.junit.Assert.assertNotNull(iterableArraySetList14);
        org.junit.Assert.assertNotNull(listArraySetList16);
        org.junit.Assert.assertNotNull(collectionArraySetList18);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test1382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1382");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.util.TreeSet<java.lang.String>> strSetList4 = com.thealgorithms.backtracking.Combination.combination(strArray2, (int) '#');
        java.lang.String[] strArray7 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.util.TreeSet<java.lang.String>> strSetList9 = com.thealgorithms.backtracking.Combination.combination(strArray7, (int) '#');
        java.util.List[] listArray11 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[] strSetListArray12 = (java.util.List<java.util.TreeSet<java.lang.String>>[]) listArray11;
        strSetListArray12[0] = strSetList4;
        strSetListArray12[1] = strSetList9;
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>>> setListSetList18 = com.thealgorithms.backtracking.Combination.combination(strSetListArray12, (int) (byte) 0);
        java.util.List<java.util.TreeSet<java.util.Collection<java.util.TreeSet<java.lang.String>>>> setCollectionSetList20 = com.thealgorithms.backtracking.Combination.combination((java.util.Collection<java.util.TreeSet<java.lang.String>>[]) strSetListArray12, (int) (short) 0);
        java.util.List<java.util.TreeSet<java.util.Collection<java.util.TreeSet<java.lang.String>>>> setCollectionSetList22 = com.thealgorithms.backtracking.Combination.combination((java.util.Collection<java.util.TreeSet<java.lang.String>>[]) strSetListArray12, (int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.TreeSet<java.util.Collection<java.util.TreeSet<java.lang.String>>>> setCollectionSetList24 = com.thealgorithms.backtracking.Combination.combination((java.util.Collection<java.util.TreeSet<java.lang.String>>[]) strSetListArray12, 6);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strSetList4);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strSetList9);
        org.junit.Assert.assertNotNull(listArray11);
        org.junit.Assert.assertNotNull(strSetListArray12);
        org.junit.Assert.assertNull(setListSetList18);
        org.junit.Assert.assertNull(setCollectionSetList20);
        org.junit.Assert.assertNull(setCollectionSetList22);
    }

    @Test
    public void test1383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1383");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>>> wildcardClassSetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (byte) 0);
        java.util.List<java.util.TreeSet<java.lang.invoke.TypeDescriptor>> typeDescriptorSetList6 = com.thealgorithms.backtracking.Combination.combination((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2, 0);
        java.util.List<java.util.TreeSet<java.lang.reflect.AnnotatedElement>> annotatedElementSetList8 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2, (int) '4');
        java.util.List<java.util.TreeSet<java.lang.invoke.TypeDescriptor>> typeDescriptorSetList10 = com.thealgorithms.backtracking.Combination.combination((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2, (int) (byte) 1);
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration>> genericDeclarationSetList12 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2, (int) ' ');
        java.util.List<java.util.TreeSet<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>>> wildcardClassOfFieldSetList14 = com.thealgorithms.backtracking.Combination.combination((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) wildcardClassArray2, (int) ' ');
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration>> genericDeclarationSetList16 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2, (int) (short) 1);
        java.lang.Class<?> wildcardClass17 = genericDeclarationSetList16.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNull(wildcardClassSetList4);
        org.junit.Assert.assertNull(typeDescriptorSetList6);
        org.junit.Assert.assertNotNull(annotatedElementSetList8);
        org.junit.Assert.assertNotNull(typeDescriptorSetList10);
        org.junit.Assert.assertNotNull(genericDeclarationSetList12);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldSetList14);
        org.junit.Assert.assertNotNull(genericDeclarationSetList16);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test1384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1384");
        com.thealgorithms.backtracking.Combination[][][] combinationArray0 = new com.thealgorithms.backtracking.Combination[][][] {};
        java.util.List<java.util.TreeSet<com.thealgorithms.backtracking.Combination[][]>> combinationArraySetList2 = com.thealgorithms.backtracking.Combination.combination(combinationArray0, (int) (byte) 1);
        java.util.List<java.util.TreeSet<com.thealgorithms.backtracking.Combination[][]>> combinationArraySetList4 = com.thealgorithms.backtracking.Combination.combination(combinationArray0, (int) '4');
        java.util.List<java.util.TreeSet<com.thealgorithms.backtracking.Combination[][]>> combinationArraySetList6 = com.thealgorithms.backtracking.Combination.combination(combinationArray0, 3);
        java.util.List<java.util.TreeSet<com.thealgorithms.backtracking.Combination[][]>> combinationArraySetList8 = com.thealgorithms.backtracking.Combination.combination(combinationArray0, (int) (byte) 1);
        java.lang.Class<?> wildcardClass9 = combinationArraySetList8.getClass();
        org.junit.Assert.assertNotNull(combinationArray0);
        org.junit.Assert.assertNotNull(combinationArraySetList2);
        org.junit.Assert.assertNotNull(combinationArraySetList4);
        org.junit.Assert.assertNotNull(combinationArraySetList6);
        org.junit.Assert.assertNotNull(combinationArraySetList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1385");
        java.lang.Class[][][][] classArray1 = new java.lang.Class[0][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][]>> wildcardClassArraySetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (byte) 100);
        java.util.List<java.util.TreeSet<java.lang.reflect.Type[][][]>> typeArraySetList6 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.Type[][][][]) wildcardClassArray2, 3);
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][]>> wildcardClassArraySetList8 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (-1));
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration[][][]>> genericDeclarationArraySetList10 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[][][][]) wildcardClassArray2, (int) 'a');
        java.util.List<java.util.TreeSet<java.lang.reflect.Type[][][]>> typeArraySetList12 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.Type[][][][]) wildcardClassArray2, (int) (byte) 0);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList4);
        org.junit.Assert.assertNotNull(typeArraySetList6);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList8);
        org.junit.Assert.assertNotNull(genericDeclarationArraySetList10);
        org.junit.Assert.assertNull(typeArraySetList12);
    }

    @Test
    public void test1386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1386");
        java.util.Collection[][] collectionArray0 = new java.util.Collection[][] {};
        java.util.List<java.util.TreeSet<java.util.Collection[]>> collectionArraySetList2 = com.thealgorithms.backtracking.Combination.combination(collectionArray0, (int) (byte) 0);
        java.util.List<java.util.TreeSet<java.util.Collection[]>> collectionArraySetList4 = com.thealgorithms.backtracking.Combination.combination(collectionArray0, (int) (byte) -1);
        java.util.List<java.util.TreeSet<java.util.Collection[]>> collectionArraySetList6 = com.thealgorithms.backtracking.Combination.combination(collectionArray0, (-1));
        java.lang.Class<?> wildcardClass7 = collectionArray0.getClass();
        org.junit.Assert.assertNotNull(collectionArray0);
        org.junit.Assert.assertNull(collectionArraySetList2);
        org.junit.Assert.assertNotNull(collectionArraySetList4);
        org.junit.Assert.assertNotNull(collectionArraySetList6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test1387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1387");
        java.lang.String[][] strArray0 = new java.lang.String[][] {};
        java.util.List<java.util.TreeSet<java.lang.String[]>> strArraySetList2 = com.thealgorithms.backtracking.Combination.combination(strArray0, (int) (byte) -1);
        java.util.List<java.util.TreeSet<java.lang.String[]>> strArraySetList4 = com.thealgorithms.backtracking.Combination.combination(strArray0, (-1));
        java.util.List<java.util.TreeSet<java.lang.constant.Constable[]>> constableArraySetList6 = com.thealgorithms.backtracking.Combination.combination((java.lang.constant.Constable[][]) strArray0, (int) 'a');
        java.util.List<java.util.TreeSet<java.lang.CharSequence[]>> charSequenceArraySetList8 = com.thealgorithms.backtracking.Combination.combination((java.lang.CharSequence[][]) strArray0, 1);
        java.util.List<java.util.TreeSet<java.lang.constant.Constable[]>> constableArraySetList10 = com.thealgorithms.backtracking.Combination.combination((java.lang.constant.Constable[][]) strArray0, 10);
        java.util.List<java.util.TreeSet<java.lang.constant.Constable[]>> constableArraySetList12 = com.thealgorithms.backtracking.Combination.combination((java.lang.constant.Constable[][]) strArray0, (int) (short) 10);
        java.lang.Class<?> wildcardClass13 = strArray0.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArraySetList2);
        org.junit.Assert.assertNotNull(strArraySetList4);
        org.junit.Assert.assertNotNull(constableArraySetList6);
        org.junit.Assert.assertNotNull(charSequenceArraySetList8);
        org.junit.Assert.assertNotNull(constableArraySetList10);
        org.junit.Assert.assertNotNull(constableArraySetList12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1388");
        java.lang.Class[][] classArray1 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray2 = (java.lang.Class<?>[][]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>[]>> wildcardClassArraySetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (byte) 1);
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration[]>> genericDeclarationArraySetList6 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray2, (int) (short) -1);
        java.util.List<java.util.TreeSet<java.lang.reflect.Type[]>> typeArraySetList8 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.Type[][]) wildcardClassArray2, (int) (short) 100);
        java.util.List<java.util.TreeSet<java.lang.reflect.Type[]>> typeArraySetList10 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.Type[][]) wildcardClassArray2, (-1));
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration[]>> genericDeclarationArraySetList12 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray2, (int) (short) 1);
        java.util.List<java.util.TreeSet<java.lang.Class<?>[]>> wildcardClassArraySetList14 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (byte) 10);
        java.lang.Class<?> wildcardClass15 = wildcardClassArraySetList14.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList4);
        org.junit.Assert.assertNotNull(genericDeclarationArraySetList6);
        org.junit.Assert.assertNotNull(typeArraySetList8);
        org.junit.Assert.assertNotNull(typeArraySetList10);
        org.junit.Assert.assertNotNull(genericDeclarationArraySetList12);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test1389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1389");
        java.util.List[][] listArray1 = new java.util.List[0][];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[][] strSetListArray2 = (java.util.List<java.util.TreeSet<java.lang.String>>[][]) listArray1;
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[]>> listArraySetList4 = com.thealgorithms.backtracking.Combination.combination(strSetListArray2, (int) (short) -1);
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[]>> listArraySetList6 = com.thealgorithms.backtracking.Combination.combination(strSetListArray2, (-1));
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[]>> listArraySetList8 = com.thealgorithms.backtracking.Combination.combination(strSetListArray2, (int) 'a');
        java.util.List<java.util.TreeSet<java.lang.Iterable<java.util.TreeSet<java.lang.String>>[]>> iterableArraySetList10 = com.thealgorithms.backtracking.Combination.combination((java.lang.Iterable<java.util.TreeSet<java.lang.String>>[][]) strSetListArray2, (-1));
        java.util.List<java.util.TreeSet<java.util.Collection[]>> collectionArraySetList12 = com.thealgorithms.backtracking.Combination.combination((java.util.Collection[][]) strSetListArray2, (int) (byte) -1);
        java.util.List<java.util.TreeSet<java.lang.Iterable<java.util.TreeSet<java.lang.String>>[]>> iterableArraySetList14 = com.thealgorithms.backtracking.Combination.combination((java.lang.Iterable<java.util.TreeSet<java.lang.String>>[][]) strSetListArray2, (int) (byte) -1);
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[]>> listArraySetList16 = com.thealgorithms.backtracking.Combination.combination(strSetListArray2, (int) (byte) 10);
        java.util.List<java.util.TreeSet<java.util.Collection[]>> collectionArraySetList18 = com.thealgorithms.backtracking.Combination.combination((java.util.Collection[][]) strSetListArray2, 10);
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[]>> listArraySetList20 = com.thealgorithms.backtracking.Combination.combination(strSetListArray2, 2);
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strSetListArray2);
        org.junit.Assert.assertNotNull(listArraySetList4);
        org.junit.Assert.assertNotNull(listArraySetList6);
        org.junit.Assert.assertNotNull(listArraySetList8);
        org.junit.Assert.assertNotNull(iterableArraySetList10);
        org.junit.Assert.assertNotNull(collectionArraySetList12);
        org.junit.Assert.assertNotNull(iterableArraySetList14);
        org.junit.Assert.assertNotNull(listArraySetList16);
        org.junit.Assert.assertNotNull(collectionArraySetList18);
        org.junit.Assert.assertNotNull(listArraySetList20);
    }

    @Test
    public void test1390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1390");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>>> wildcardClassSetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (byte) 0);
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration>> genericDeclarationSetList6 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2, (int) (byte) 1);
        java.util.List<java.util.TreeSet<java.lang.invoke.TypeDescriptor>> typeDescriptorSetList8 = com.thealgorithms.backtracking.Combination.combination((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2, (int) ' ');
        java.util.List<java.util.TreeSet<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>>> wildcardClassOfFieldSetList10 = com.thealgorithms.backtracking.Combination.combination((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) wildcardClassArray2, 2);
        java.util.List<java.util.TreeSet<java.lang.invoke.TypeDescriptor>> typeDescriptorSetList12 = com.thealgorithms.backtracking.Combination.combination((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2, 2);
        java.lang.Class<?> wildcardClass13 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNull(wildcardClassSetList4);
        org.junit.Assert.assertNotNull(genericDeclarationSetList6);
        org.junit.Assert.assertNotNull(typeDescriptorSetList8);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldSetList10);
        org.junit.Assert.assertNotNull(typeDescriptorSetList12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1391");
        com.thealgorithms.backtracking.Combination[][][][] combinationArray0 = new com.thealgorithms.backtracking.Combination[][][][] {};
        java.util.List<java.util.TreeSet<com.thealgorithms.backtracking.Combination[][][]>> combinationArraySetList2 = com.thealgorithms.backtracking.Combination.combination(combinationArray0, (int) ' ');
        java.util.List<java.util.TreeSet<com.thealgorithms.backtracking.Combination[][][]>> combinationArraySetList4 = com.thealgorithms.backtracking.Combination.combination(combinationArray0, 1);
        java.util.List<java.util.TreeSet<com.thealgorithms.backtracking.Combination[][][]>> combinationArraySetList6 = com.thealgorithms.backtracking.Combination.combination(combinationArray0, (int) (short) -1);
        java.lang.Class<?> wildcardClass7 = combinationArraySetList6.getClass();
        org.junit.Assert.assertNotNull(combinationArray0);
        org.junit.Assert.assertNotNull(combinationArraySetList2);
        org.junit.Assert.assertNotNull(combinationArraySetList4);
        org.junit.Assert.assertNotNull(combinationArraySetList6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test1392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1392");
        java.util.List[][] listArray1 = new java.util.List[0][];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[][] strSetListArray2 = (java.util.List<java.util.TreeSet<java.lang.String>>[][]) listArray1;
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[]>> listArraySetList4 = com.thealgorithms.backtracking.Combination.combination(strSetListArray2, (int) (short) -1);
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[]>> listArraySetList6 = com.thealgorithms.backtracking.Combination.combination(strSetListArray2, (-1));
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[]>> listArraySetList8 = com.thealgorithms.backtracking.Combination.combination(strSetListArray2, (int) 'a');
        java.util.List<java.util.TreeSet<java.lang.Iterable<java.util.TreeSet<java.lang.String>>[]>> iterableArraySetList10 = com.thealgorithms.backtracking.Combination.combination((java.lang.Iterable<java.util.TreeSet<java.lang.String>>[][]) strSetListArray2, (-1));
        java.lang.Class<?> wildcardClass11 = iterableArraySetList10.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strSetListArray2);
        org.junit.Assert.assertNotNull(listArraySetList4);
        org.junit.Assert.assertNotNull(listArraySetList6);
        org.junit.Assert.assertNotNull(listArraySetList8);
        org.junit.Assert.assertNotNull(iterableArraySetList10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1393");
        java.lang.Class[][][][] classArray1 = new java.lang.Class[0][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][]>> wildcardClassArraySetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (byte) 100);
        java.util.List<java.util.TreeSet<java.lang.reflect.Type[][][]>> typeArraySetList6 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.Type[][][][]) wildcardClassArray2, 3);
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration[][][]>> genericDeclarationArraySetList8 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[][][][]) wildcardClassArray2, (int) ' ');
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][]>> wildcardClassArraySetList10 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) '#');
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][]>> wildcardClassArraySetList12 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (byte) 1);
        java.util.List<java.util.TreeSet<java.lang.reflect.Type[][][]>> typeArraySetList14 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.Type[][][][]) wildcardClassArray2, (int) (byte) 1);
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration[][][]>> genericDeclarationArraySetList16 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[][][][]) wildcardClassArray2, (int) (byte) 0);
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration[][][]>> genericDeclarationArraySetList18 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[][][][]) wildcardClassArray2, 100);
        java.lang.Class<?> wildcardClass19 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList4);
        org.junit.Assert.assertNotNull(typeArraySetList6);
        org.junit.Assert.assertNotNull(genericDeclarationArraySetList8);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList10);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList12);
        org.junit.Assert.assertNotNull(typeArraySetList14);
        org.junit.Assert.assertNull(genericDeclarationArraySetList16);
        org.junit.Assert.assertNotNull(genericDeclarationArraySetList18);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test1394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1394");
        java.lang.String[][][][][][] strArray0 = new java.lang.String[][][][][][] {};
        java.lang.String[][][][][][] strArray1 = new java.lang.String[][][][][][] {};
        java.lang.String[][][][][][][] strArray2 = new java.lang.String[][][][][][][] { strArray0, strArray1 };
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.TreeSet<java.lang.String[][][][][][]>> strArraySetList4 = com.thealgorithms.backtracking.Combination.combination(strArray2, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray2);
    }

    @Test
    public void test1395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1395");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.util.TreeSet<java.lang.String>> strSetList4 = com.thealgorithms.backtracking.Combination.combination(strArray2, (int) '#');
        java.util.List<java.util.TreeSet<java.lang.CharSequence>> charSequenceSetList6 = com.thealgorithms.backtracking.Combination.combination((java.lang.CharSequence[]) strArray2, 10);
        java.util.List<java.util.TreeSet<java.lang.constant.Constable>> constableSetList8 = com.thealgorithms.backtracking.Combination.combination((java.lang.constant.Constable[]) strArray2, (int) (byte) 1);
        java.util.List<java.util.TreeSet<java.lang.String>> strSetList10 = com.thealgorithms.backtracking.Combination.combination(strArray2, 0);
        java.util.List<java.util.TreeSet<java.lang.Comparable<java.lang.String>>> strComparableSetList12 = com.thealgorithms.backtracking.Combination.combination((java.lang.Comparable<java.lang.String>[]) strArray2, 1);
        java.lang.Class<?> wildcardClass13 = strArray2.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strSetList4);
        org.junit.Assert.assertNotNull(charSequenceSetList6);
        org.junit.Assert.assertNotNull(constableSetList8);
        org.junit.Assert.assertNull(strSetList10);
        org.junit.Assert.assertNotNull(strComparableSetList12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1396");
        com.thealgorithms.backtracking.Combination[] combinationArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.TreeSet<com.thealgorithms.backtracking.Combination>> combinationSetList2 = com.thealgorithms.backtracking.Combination.combination(combinationArray0, 6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1397");
        com.thealgorithms.backtracking.Combination[][][][][] combinationArray0 = new com.thealgorithms.backtracking.Combination[][][][][] {};
        com.thealgorithms.backtracking.Combination[][][][][][] combinationArray1 = new com.thealgorithms.backtracking.Combination[][][][][][] { combinationArray0 };
        com.thealgorithms.backtracking.Combination[][][][][] combinationArray2 = new com.thealgorithms.backtracking.Combination[][][][][] {};
        com.thealgorithms.backtracking.Combination[][][][][][] combinationArray3 = new com.thealgorithms.backtracking.Combination[][][][][][] { combinationArray2 };
        com.thealgorithms.backtracking.Combination[][][][][][][] combinationArray4 = new com.thealgorithms.backtracking.Combination[][][][][][][] { combinationArray1, combinationArray3 };
        com.thealgorithms.backtracking.Combination[][][][][] combinationArray5 = new com.thealgorithms.backtracking.Combination[][][][][] {};
        com.thealgorithms.backtracking.Combination[][][][][][] combinationArray6 = new com.thealgorithms.backtracking.Combination[][][][][][] { combinationArray5 };
        com.thealgorithms.backtracking.Combination[][][][][] combinationArray7 = new com.thealgorithms.backtracking.Combination[][][][][] {};
        com.thealgorithms.backtracking.Combination[][][][][][] combinationArray8 = new com.thealgorithms.backtracking.Combination[][][][][][] { combinationArray7 };
        com.thealgorithms.backtracking.Combination[][][][][][][] combinationArray9 = new com.thealgorithms.backtracking.Combination[][][][][][][] { combinationArray6, combinationArray8 };
        com.thealgorithms.backtracking.Combination[][][][][] combinationArray10 = new com.thealgorithms.backtracking.Combination[][][][][] {};
        com.thealgorithms.backtracking.Combination[][][][][][] combinationArray11 = new com.thealgorithms.backtracking.Combination[][][][][][] { combinationArray10 };
        com.thealgorithms.backtracking.Combination[][][][][] combinationArray12 = new com.thealgorithms.backtracking.Combination[][][][][] {};
        com.thealgorithms.backtracking.Combination[][][][][][] combinationArray13 = new com.thealgorithms.backtracking.Combination[][][][][][] { combinationArray12 };
        com.thealgorithms.backtracking.Combination[][][][][][][] combinationArray14 = new com.thealgorithms.backtracking.Combination[][][][][][][] { combinationArray11, combinationArray13 };
        com.thealgorithms.backtracking.Combination[][][][][] combinationArray15 = new com.thealgorithms.backtracking.Combination[][][][][] {};
        com.thealgorithms.backtracking.Combination[][][][][][] combinationArray16 = new com.thealgorithms.backtracking.Combination[][][][][][] { combinationArray15 };
        com.thealgorithms.backtracking.Combination[][][][][] combinationArray17 = new com.thealgorithms.backtracking.Combination[][][][][] {};
        com.thealgorithms.backtracking.Combination[][][][][][] combinationArray18 = new com.thealgorithms.backtracking.Combination[][][][][][] { combinationArray17 };
        com.thealgorithms.backtracking.Combination[][][][][][][] combinationArray19 = new com.thealgorithms.backtracking.Combination[][][][][][][] { combinationArray16, combinationArray18 };
        com.thealgorithms.backtracking.Combination[][][][][][][][] combinationArray20 = new com.thealgorithms.backtracking.Combination[][][][][][][][] { combinationArray4, combinationArray9, combinationArray14, combinationArray19 };
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.TreeSet<com.thealgorithms.backtracking.Combination[][][][][][][]>> combinationArraySetList22 = com.thealgorithms.backtracking.Combination.combination(combinationArray20, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(combinationArray0);
        org.junit.Assert.assertNotNull(combinationArray1);
        org.junit.Assert.assertNotNull(combinationArray2);
        org.junit.Assert.assertNotNull(combinationArray3);
        org.junit.Assert.assertNotNull(combinationArray4);
        org.junit.Assert.assertNotNull(combinationArray5);
        org.junit.Assert.assertNotNull(combinationArray6);
        org.junit.Assert.assertNotNull(combinationArray7);
        org.junit.Assert.assertNotNull(combinationArray8);
        org.junit.Assert.assertNotNull(combinationArray9);
        org.junit.Assert.assertNotNull(combinationArray10);
        org.junit.Assert.assertNotNull(combinationArray11);
        org.junit.Assert.assertNotNull(combinationArray12);
        org.junit.Assert.assertNotNull(combinationArray13);
        org.junit.Assert.assertNotNull(combinationArray14);
        org.junit.Assert.assertNotNull(combinationArray15);
        org.junit.Assert.assertNotNull(combinationArray16);
        org.junit.Assert.assertNotNull(combinationArray17);
        org.junit.Assert.assertNotNull(combinationArray18);
        org.junit.Assert.assertNotNull(combinationArray19);
        org.junit.Assert.assertNotNull(combinationArray20);
    }

    @Test
    public void test1398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1398");
        java.lang.Class<?>[] wildcardClassArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.TreeSet<java.lang.Class<?>>> wildcardClassSetList2 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray0, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1399");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "", "", "", "" };
        java.util.List<java.util.TreeSet<java.lang.Comparable<java.lang.String>>> strComparableSetList8 = com.thealgorithms.backtracking.Combination.combination((java.lang.Comparable<java.lang.String>[]) strArray6, (int) (byte) 1);
        java.util.List<java.util.TreeSet<java.io.Serializable>> serializableSetList10 = com.thealgorithms.backtracking.Combination.combination((java.io.Serializable[]) strArray6, (int) '4');
        java.util.List<java.util.TreeSet<java.lang.Object>> objSetList12 = com.thealgorithms.backtracking.Combination.combination((java.lang.Object[]) strArray6, (int) '#');
        java.util.List<java.util.TreeSet<java.lang.Comparable<java.lang.String>>> strComparableSetList14 = com.thealgorithms.backtracking.Combination.combination((java.lang.Comparable<java.lang.String>[]) strArray6, 100);
        java.util.List<java.util.TreeSet<java.lang.CharSequence>> charSequenceSetList16 = com.thealgorithms.backtracking.Combination.combination((java.lang.CharSequence[]) strArray6, 1);
        java.util.List<java.util.TreeSet<java.io.Serializable>> serializableSetList18 = com.thealgorithms.backtracking.Combination.combination((java.io.Serializable[]) strArray6, 10);
        java.util.List<java.util.TreeSet<java.lang.Comparable<java.lang.String>>> strComparableSetList20 = com.thealgorithms.backtracking.Combination.combination((java.lang.Comparable<java.lang.String>[]) strArray6, (int) 'a');
        java.util.List<java.util.TreeSet<java.lang.Object>> objSetList22 = com.thealgorithms.backtracking.Combination.combination((java.lang.Object[]) strArray6, 5);
        java.util.List<java.util.TreeSet<java.lang.Comparable<java.lang.String>>> strComparableSetList24 = com.thealgorithms.backtracking.Combination.combination((java.lang.Comparable<java.lang.String>[]) strArray6, (int) 'a');
        java.lang.Class<?> wildcardClass25 = strComparableSetList24.getClass();
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strComparableSetList8);
        org.junit.Assert.assertNotNull(serializableSetList10);
        org.junit.Assert.assertNotNull(objSetList12);
        org.junit.Assert.assertNotNull(strComparableSetList14);
        org.junit.Assert.assertNotNull(charSequenceSetList16);
        org.junit.Assert.assertNotNull(serializableSetList18);
        org.junit.Assert.assertNotNull(strComparableSetList20);
        org.junit.Assert.assertNotNull(objSetList22);
        org.junit.Assert.assertNotNull(strComparableSetList24);
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test1400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1400");
        java.lang.Class[][] classArray1 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray2 = (java.lang.Class<?>[][]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>[]>> wildcardClassArraySetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (byte) 1);
        java.util.List<java.util.TreeSet<java.lang.constant.Constable[]>> constableArraySetList6 = com.thealgorithms.backtracking.Combination.combination((java.lang.constant.Constable[][]) wildcardClassArray2, (int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass7 = constableArraySetList6.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList4);
        org.junit.Assert.assertNull(constableArraySetList6);
    }

    @Test
    public void test1401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1401");
        java.lang.Class[][] classArray1 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray2 = (java.lang.Class<?>[][]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>[]>> wildcardClassArraySetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (byte) 1);
        java.util.List<java.util.TreeSet<java.lang.Class<?>[]>> wildcardClassArraySetList6 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, 0);
        java.util.List<java.util.TreeSet<java.lang.reflect.Type[]>> typeArraySetList8 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.Type[][]) wildcardClassArray2, 5);
        java.util.List<java.util.TreeSet<java.lang.reflect.Type[]>> typeArraySetList10 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.Type[][]) wildcardClassArray2, 10);
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration[]>> genericDeclarationArraySetList12 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray2, (int) '4');
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration[]>> genericDeclarationArraySetList14 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray2, (int) (short) 1);
        java.lang.Class<?> wildcardClass15 = genericDeclarationArraySetList14.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList4);
        org.junit.Assert.assertNull(wildcardClassArraySetList6);
        org.junit.Assert.assertNotNull(typeArraySetList8);
        org.junit.Assert.assertNotNull(typeArraySetList10);
        org.junit.Assert.assertNotNull(genericDeclarationArraySetList12);
        org.junit.Assert.assertNotNull(genericDeclarationArraySetList14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test1402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1402");
        java.lang.String[][][][] strArray0 = new java.lang.String[][][][] {};
        java.util.List<java.util.TreeSet<java.lang.String[][][]>> strArraySetList2 = com.thealgorithms.backtracking.Combination.combination(strArray0, (int) (byte) 10);
        java.util.List<java.util.TreeSet<java.lang.String[][][]>> strArraySetList4 = com.thealgorithms.backtracking.Combination.combination(strArray0, 0);
        java.util.List<java.util.TreeSet<java.lang.String[][][]>> strArraySetList6 = com.thealgorithms.backtracking.Combination.combination(strArray0, (int) (byte) 0);
        java.lang.Class<?> wildcardClass7 = strArray0.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArraySetList2);
        org.junit.Assert.assertNull(strArraySetList4);
        org.junit.Assert.assertNull(strArraySetList6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test1403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1403");
        java.lang.reflect.Type[] typeArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.TreeSet<java.lang.reflect.Type>> typeSetList2 = com.thealgorithms.backtracking.Combination.combination(typeArray0, 3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1404");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.util.TreeSet<java.lang.Comparable<java.lang.String>>> strComparableSetList4 = com.thealgorithms.backtracking.Combination.combination((java.lang.Comparable<java.lang.String>[]) strArray2, 1);
        java.util.List<java.util.TreeSet<java.lang.constant.Constable>> constableSetList6 = com.thealgorithms.backtracking.Combination.combination((java.lang.constant.Constable[]) strArray2, 4);
        java.lang.Class<?> wildcardClass7 = strArray2.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strComparableSetList4);
        org.junit.Assert.assertNotNull(constableSetList6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test1405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1405");
        java.util.List[][] listArray1 = new java.util.List[0][];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[][] strSetListArray2 = (java.util.List<java.util.TreeSet<java.lang.String>>[][]) listArray1;
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[]>> listArraySetList4 = com.thealgorithms.backtracking.Combination.combination(strSetListArray2, (int) (short) -1);
        java.util.List<java.util.TreeSet<java.lang.Iterable<java.util.TreeSet<java.lang.String>>[]>> iterableArraySetList6 = com.thealgorithms.backtracking.Combination.combination((java.lang.Iterable<java.util.TreeSet<java.lang.String>>[][]) strSetListArray2, 2);
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[]>> listArraySetList8 = com.thealgorithms.backtracking.Combination.combination(strSetListArray2, 10);
        java.util.List<java.util.TreeSet<java.util.Collection[]>> collectionArraySetList10 = com.thealgorithms.backtracking.Combination.combination((java.util.Collection[][]) strSetListArray2, (int) 'a');
        java.lang.Class<?> wildcardClass11 = strSetListArray2.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strSetListArray2);
        org.junit.Assert.assertNotNull(listArraySetList4);
        org.junit.Assert.assertNotNull(iterableArraySetList6);
        org.junit.Assert.assertNotNull(listArraySetList8);
        org.junit.Assert.assertNotNull(collectionArraySetList10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1406");
        java.lang.String[][] strArray0 = new java.lang.String[][] {};
        java.util.List<java.util.TreeSet<java.lang.String[]>> strArraySetList2 = com.thealgorithms.backtracking.Combination.combination(strArray0, (int) (byte) -1);
        java.util.List<java.util.TreeSet<java.lang.String[]>> strArraySetList4 = com.thealgorithms.backtracking.Combination.combination(strArray0, (-1));
        java.util.List<java.util.TreeSet<java.lang.constant.Constable[]>> constableArraySetList6 = com.thealgorithms.backtracking.Combination.combination((java.lang.constant.Constable[][]) strArray0, (int) 'a');
        java.util.List<java.util.TreeSet<java.lang.CharSequence[]>> charSequenceArraySetList8 = com.thealgorithms.backtracking.Combination.combination((java.lang.CharSequence[][]) strArray0, 1);
        java.util.List<java.util.TreeSet<java.lang.constant.Constable[]>> constableArraySetList10 = com.thealgorithms.backtracking.Combination.combination((java.lang.constant.Constable[][]) strArray0, 10);
        java.util.List<java.util.TreeSet<java.lang.CharSequence[]>> charSequenceArraySetList12 = com.thealgorithms.backtracking.Combination.combination((java.lang.CharSequence[][]) strArray0, (int) (short) -1);
        java.lang.Class<?> wildcardClass13 = strArray0.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArraySetList2);
        org.junit.Assert.assertNotNull(strArraySetList4);
        org.junit.Assert.assertNotNull(constableArraySetList6);
        org.junit.Assert.assertNotNull(charSequenceArraySetList8);
        org.junit.Assert.assertNotNull(constableArraySetList10);
        org.junit.Assert.assertNotNull(charSequenceArraySetList12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1407");
        java.lang.Class[][][][][][] classArray1 = new java.lang.Class[0][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][][][]>> wildcardClassArraySetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, 1);
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][][][]>> wildcardClassArraySetList6 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, 4);
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][][][]>> wildcardClassArraySetList8 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, 100);
        java.util.List<java.util.TreeSet<java.io.Serializable>> serializableSetList10 = com.thealgorithms.backtracking.Combination.combination((java.io.Serializable[]) wildcardClassArray2, (int) '#');
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][][][]>> wildcardClassArraySetList12 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, 2);
        java.lang.Class<?> wildcardClass13 = wildcardClassArraySetList12.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList4);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList6);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList8);
        org.junit.Assert.assertNotNull(serializableSetList10);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1408");
        com.thealgorithms.backtracking.Combination[][][] combinationArray0 = new com.thealgorithms.backtracking.Combination[][][] {};
        com.thealgorithms.backtracking.Combination[][][] combinationArray1 = new com.thealgorithms.backtracking.Combination[][][] {};
        com.thealgorithms.backtracking.Combination[][][] combinationArray2 = new com.thealgorithms.backtracking.Combination[][][] {};
        com.thealgorithms.backtracking.Combination[][][][] combinationArray3 = new com.thealgorithms.backtracking.Combination[][][][] { combinationArray0, combinationArray1, combinationArray2 };
        com.thealgorithms.backtracking.Combination[][][] combinationArray4 = new com.thealgorithms.backtracking.Combination[][][] {};
        com.thealgorithms.backtracking.Combination[][][] combinationArray5 = new com.thealgorithms.backtracking.Combination[][][] {};
        com.thealgorithms.backtracking.Combination[][][] combinationArray6 = new com.thealgorithms.backtracking.Combination[][][] {};
        com.thealgorithms.backtracking.Combination[][][][] combinationArray7 = new com.thealgorithms.backtracking.Combination[][][][] { combinationArray4, combinationArray5, combinationArray6 };
        com.thealgorithms.backtracking.Combination[][][] combinationArray8 = new com.thealgorithms.backtracking.Combination[][][] {};
        com.thealgorithms.backtracking.Combination[][][] combinationArray9 = new com.thealgorithms.backtracking.Combination[][][] {};
        com.thealgorithms.backtracking.Combination[][][] combinationArray10 = new com.thealgorithms.backtracking.Combination[][][] {};
        com.thealgorithms.backtracking.Combination[][][][] combinationArray11 = new com.thealgorithms.backtracking.Combination[][][][] { combinationArray8, combinationArray9, combinationArray10 };
        com.thealgorithms.backtracking.Combination[][][] combinationArray12 = new com.thealgorithms.backtracking.Combination[][][] {};
        com.thealgorithms.backtracking.Combination[][][] combinationArray13 = new com.thealgorithms.backtracking.Combination[][][] {};
        com.thealgorithms.backtracking.Combination[][][] combinationArray14 = new com.thealgorithms.backtracking.Combination[][][] {};
        com.thealgorithms.backtracking.Combination[][][][] combinationArray15 = new com.thealgorithms.backtracking.Combination[][][][] { combinationArray12, combinationArray13, combinationArray14 };
        com.thealgorithms.backtracking.Combination[][][] combinationArray16 = new com.thealgorithms.backtracking.Combination[][][] {};
        com.thealgorithms.backtracking.Combination[][][] combinationArray17 = new com.thealgorithms.backtracking.Combination[][][] {};
        com.thealgorithms.backtracking.Combination[][][] combinationArray18 = new com.thealgorithms.backtracking.Combination[][][] {};
        com.thealgorithms.backtracking.Combination[][][][] combinationArray19 = new com.thealgorithms.backtracking.Combination[][][][] { combinationArray16, combinationArray17, combinationArray18 };
        com.thealgorithms.backtracking.Combination[][][][][] combinationArray20 = new com.thealgorithms.backtracking.Combination[][][][][] { combinationArray3, combinationArray7, combinationArray11, combinationArray15, combinationArray19 };
        java.util.List<java.util.TreeSet<com.thealgorithms.backtracking.Combination[][][][]>> combinationArraySetList22 = com.thealgorithms.backtracking.Combination.combination(combinationArray20, 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.TreeSet<com.thealgorithms.backtracking.Combination[][][][]>> combinationArraySetList24 = com.thealgorithms.backtracking.Combination.combination(combinationArray20, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(combinationArray0);
        org.junit.Assert.assertNotNull(combinationArray1);
        org.junit.Assert.assertNotNull(combinationArray2);
        org.junit.Assert.assertNotNull(combinationArray3);
        org.junit.Assert.assertNotNull(combinationArray4);
        org.junit.Assert.assertNotNull(combinationArray5);
        org.junit.Assert.assertNotNull(combinationArray6);
        org.junit.Assert.assertNotNull(combinationArray7);
        org.junit.Assert.assertNotNull(combinationArray8);
        org.junit.Assert.assertNotNull(combinationArray9);
        org.junit.Assert.assertNotNull(combinationArray10);
        org.junit.Assert.assertNotNull(combinationArray11);
        org.junit.Assert.assertNotNull(combinationArray12);
        org.junit.Assert.assertNotNull(combinationArray13);
        org.junit.Assert.assertNotNull(combinationArray14);
        org.junit.Assert.assertNotNull(combinationArray15);
        org.junit.Assert.assertNotNull(combinationArray16);
        org.junit.Assert.assertNotNull(combinationArray17);
        org.junit.Assert.assertNotNull(combinationArray18);
        org.junit.Assert.assertNotNull(combinationArray19);
        org.junit.Assert.assertNotNull(combinationArray20);
        org.junit.Assert.assertNull(combinationArraySetList22);
    }

    @Test
    public void test1409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1409");
        java.util.List[] listArray1 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[] strSetListArray2 = (java.util.List<java.util.TreeSet<java.lang.String>>[]) listArray1;
        java.util.List[] listArray4 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[] strSetListArray5 = (java.util.List<java.util.TreeSet<java.lang.String>>[]) listArray4;
        java.util.List[][] listArray7 = new java.util.List[2][];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[][] strSetListArray8 = (java.util.List<java.util.TreeSet<java.lang.String>>[][]) listArray7;
        strSetListArray8[0] = strSetListArray2;
        strSetListArray8[1] = strSetListArray5;
        java.util.List[][][] listArray14 = new java.util.List[1][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[][][] strSetListArray15 = (java.util.List<java.util.TreeSet<java.lang.String>>[][][]) listArray14;
        strSetListArray15[0] = strSetListArray8;
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[][]>> listArraySetList19 = com.thealgorithms.backtracking.Combination.combination(strSetListArray15, (int) (short) 10);
        java.util.List<java.util.TreeSet<java.util.Collection[][]>> collectionArraySetList21 = com.thealgorithms.backtracking.Combination.combination((java.util.Collection[][][]) strSetListArray15, (int) '#');
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[][]>> listArraySetList23 = com.thealgorithms.backtracking.Combination.combination(strSetListArray15, 4);
        java.util.List<java.util.TreeSet<java.util.Collection[][]>> collectionArraySetList25 = com.thealgorithms.backtracking.Combination.combination((java.util.Collection[][][]) strSetListArray15, 4);
        java.util.List<java.util.TreeSet<java.util.Collection[][]>> collectionArraySetList27 = com.thealgorithms.backtracking.Combination.combination((java.util.Collection[][][]) strSetListArray15, 2);
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strSetListArray2);
        org.junit.Assert.assertNotNull(listArray4);
        org.junit.Assert.assertNotNull(strSetListArray5);
        org.junit.Assert.assertNotNull(listArray7);
        org.junit.Assert.assertNotNull(strSetListArray8);
        org.junit.Assert.assertNotNull(listArray14);
        org.junit.Assert.assertNotNull(strSetListArray15);
        org.junit.Assert.assertNotNull(listArraySetList19);
        org.junit.Assert.assertNotNull(collectionArraySetList21);
        org.junit.Assert.assertNotNull(listArraySetList23);
        org.junit.Assert.assertNotNull(collectionArraySetList25);
        org.junit.Assert.assertNotNull(collectionArraySetList27);
    }

    @Test
    public void test1410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1410");
        java.lang.reflect.GenericDeclaration[][][] genericDeclarationArray0 = new java.lang.reflect.GenericDeclaration[][][] {};
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration[][]>> genericDeclarationArraySetList2 = com.thealgorithms.backtracking.Combination.combination(genericDeclarationArray0, 100);
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration[][]>> genericDeclarationArraySetList4 = com.thealgorithms.backtracking.Combination.combination(genericDeclarationArray0, 10);
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration[][]>> genericDeclarationArraySetList6 = com.thealgorithms.backtracking.Combination.combination(genericDeclarationArray0, (int) '4');
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration[][]>> genericDeclarationArraySetList8 = com.thealgorithms.backtracking.Combination.combination(genericDeclarationArray0, 3);
        java.lang.Class<?> wildcardClass9 = genericDeclarationArray0.getClass();
        org.junit.Assert.assertNotNull(genericDeclarationArray0);
        org.junit.Assert.assertNotNull(genericDeclarationArraySetList2);
        org.junit.Assert.assertNotNull(genericDeclarationArraySetList4);
        org.junit.Assert.assertNotNull(genericDeclarationArraySetList6);
        org.junit.Assert.assertNotNull(genericDeclarationArraySetList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1411");
        java.lang.Class[][][] classArray1 = new java.lang.Class[0][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray2 = (java.lang.Class<?>[][][]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][]>> wildcardClassArraySetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (byte) -1);
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][]>> wildcardClassArraySetList6 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, 10);
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][]>> wildcardClassArraySetList8 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) ' ');
        java.lang.Class<?> wildcardClass9 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList4);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList6);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1412");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>>> wildcardClassSetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (byte) 0);
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration>> genericDeclarationSetList6 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2, (int) (byte) 1);
        java.util.List<java.util.TreeSet<java.lang.reflect.Type>> typeSetList8 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.Type[]) wildcardClassArray2, (int) (short) -1);
        java.util.List<java.util.TreeSet<java.lang.reflect.AnnotatedElement>> annotatedElementSetList10 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2, 100);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNull(wildcardClassSetList4);
        org.junit.Assert.assertNotNull(genericDeclarationSetList6);
        org.junit.Assert.assertNotNull(typeSetList8);
        org.junit.Assert.assertNotNull(annotatedElementSetList10);
    }

    @Test
    public void test1413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1413");
        com.thealgorithms.backtracking.Combination combination0 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination[] combinationArray1 = new com.thealgorithms.backtracking.Combination[] { combination0 };
        java.util.List<java.util.TreeSet<com.thealgorithms.backtracking.Combination>> combinationSetList3 = com.thealgorithms.backtracking.Combination.combination(combinationArray1, (int) (byte) 100);
        java.util.List<java.util.TreeSet<com.thealgorithms.backtracking.Combination>> combinationSetList5 = com.thealgorithms.backtracking.Combination.combination(combinationArray1, (int) (byte) 100);
        java.util.List<java.util.TreeSet<com.thealgorithms.backtracking.Combination>> combinationSetList7 = com.thealgorithms.backtracking.Combination.combination(combinationArray1, 2);
        java.lang.Class<?> wildcardClass8 = combinationArray1.getClass();
        org.junit.Assert.assertNotNull(combinationArray1);
        org.junit.Assert.assertNotNull(combinationSetList3);
        org.junit.Assert.assertNotNull(combinationSetList5);
        org.junit.Assert.assertNotNull(combinationSetList7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test1414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1414");
        java.util.List[][] listArray1 = new java.util.List[0][];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[][] strSetListArray2 = (java.util.List<java.util.TreeSet<java.lang.String>>[][]) listArray1;
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[]>> listArraySetList4 = com.thealgorithms.backtracking.Combination.combination(strSetListArray2, (int) (short) -1);
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[]>> listArraySetList6 = com.thealgorithms.backtracking.Combination.combination(strSetListArray2, (-1));
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[]>> listArraySetList8 = com.thealgorithms.backtracking.Combination.combination(strSetListArray2, 0);
        java.util.List<java.util.TreeSet<java.lang.Iterable<java.util.TreeSet<java.lang.String>>[]>> iterableArraySetList10 = com.thealgorithms.backtracking.Combination.combination((java.lang.Iterable<java.util.TreeSet<java.lang.String>>[][]) strSetListArray2, (int) (byte) 1);
        java.lang.Class<?> wildcardClass11 = strSetListArray2.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strSetListArray2);
        org.junit.Assert.assertNotNull(listArraySetList4);
        org.junit.Assert.assertNotNull(listArraySetList6);
        org.junit.Assert.assertNull(listArraySetList8);
        org.junit.Assert.assertNotNull(iterableArraySetList10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1415");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.util.TreeSet<java.lang.String>> strSetList4 = com.thealgorithms.backtracking.Combination.combination(strArray2, (int) '#');
        java.util.List<java.util.TreeSet<java.lang.constant.Constable>> constableSetList6 = com.thealgorithms.backtracking.Combination.combination((java.lang.constant.Constable[]) strArray2, (int) (byte) 100);
        java.util.List<java.util.TreeSet<java.lang.String>> strSetList8 = com.thealgorithms.backtracking.Combination.combination(strArray2, 2);
        java.lang.Class<?> wildcardClass9 = strSetList8.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strSetList4);
        org.junit.Assert.assertNotNull(constableSetList6);
        org.junit.Assert.assertNotNull(strSetList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1416");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.util.TreeSet<java.lang.String>> strSetList4 = com.thealgorithms.backtracking.Combination.combination(strArray2, (int) '#');
        java.lang.String[] strArray7 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.util.TreeSet<java.lang.String>> strSetList9 = com.thealgorithms.backtracking.Combination.combination(strArray7, (int) '#');
        java.util.List[] listArray11 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[] strSetListArray12 = (java.util.List<java.util.TreeSet<java.lang.String>>[]) listArray11;
        strSetListArray12[0] = strSetList4;
        strSetListArray12[1] = strSetList9;
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>>> setListSetList18 = com.thealgorithms.backtracking.Combination.combination(strSetListArray12, (int) (byte) 0);
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>>> setListSetList20 = com.thealgorithms.backtracking.Combination.combination(strSetListArray12, (int) (short) 0);
        java.util.List<java.util.TreeSet<java.util.Collection<java.util.TreeSet<java.lang.String>>>> setCollectionSetList22 = com.thealgorithms.backtracking.Combination.combination((java.util.Collection<java.util.TreeSet<java.lang.String>>[]) strSetListArray12, 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.TreeSet<java.util.Collection<java.util.TreeSet<java.lang.String>>>> setCollectionSetList24 = com.thealgorithms.backtracking.Combination.combination((java.util.Collection<java.util.TreeSet<java.lang.String>>[]) strSetListArray12, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strSetList4);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strSetList9);
        org.junit.Assert.assertNotNull(listArray11);
        org.junit.Assert.assertNotNull(strSetListArray12);
        org.junit.Assert.assertNull(setListSetList18);
        org.junit.Assert.assertNull(setListSetList20);
        org.junit.Assert.assertNull(setCollectionSetList22);
    }

    @Test
    public void test1417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1417");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "", "", "", "" };
        java.util.List<java.util.TreeSet<java.lang.Comparable<java.lang.String>>> strComparableSetList8 = com.thealgorithms.backtracking.Combination.combination((java.lang.Comparable<java.lang.String>[]) strArray6, (int) (byte) 1);
        java.util.List<java.util.TreeSet<java.io.Serializable>> serializableSetList10 = com.thealgorithms.backtracking.Combination.combination((java.io.Serializable[]) strArray6, (int) '4');
        java.util.List<java.util.TreeSet<java.lang.Object>> objSetList12 = com.thealgorithms.backtracking.Combination.combination((java.lang.Object[]) strArray6, (int) '#');
        java.util.List<java.util.TreeSet<java.lang.Comparable<java.lang.String>>> strComparableSetList14 = com.thealgorithms.backtracking.Combination.combination((java.lang.Comparable<java.lang.String>[]) strArray6, 100);
        java.util.List<java.util.TreeSet<java.lang.CharSequence>> charSequenceSetList16 = com.thealgorithms.backtracking.Combination.combination((java.lang.CharSequence[]) strArray6, 1);
        java.util.List<java.util.TreeSet<java.io.Serializable>> serializableSetList18 = com.thealgorithms.backtracking.Combination.combination((java.io.Serializable[]) strArray6, 10);
        java.util.List<java.util.TreeSet<java.lang.constant.ConstantDesc>> constantDescSetList20 = com.thealgorithms.backtracking.Combination.combination((java.lang.constant.ConstantDesc[]) strArray6, 5);
        java.util.List<java.util.TreeSet<java.lang.constant.ConstantDesc>> constantDescSetList22 = com.thealgorithms.backtracking.Combination.combination((java.lang.constant.ConstantDesc[]) strArray6, 4);
        java.lang.Class<?> wildcardClass23 = constantDescSetList22.getClass();
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strComparableSetList8);
        org.junit.Assert.assertNotNull(serializableSetList10);
        org.junit.Assert.assertNotNull(objSetList12);
        org.junit.Assert.assertNotNull(strComparableSetList14);
        org.junit.Assert.assertNotNull(charSequenceSetList16);
        org.junit.Assert.assertNotNull(serializableSetList18);
        org.junit.Assert.assertNotNull(constantDescSetList20);
        org.junit.Assert.assertNotNull(constantDescSetList22);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test1418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1418");
        java.lang.Class[][] classArray1 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray2 = (java.lang.Class<?>[][]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>[]>> wildcardClassArraySetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (byte) 1);
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration[]>> genericDeclarationArraySetList6 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray2, (int) (byte) 0);
        java.util.List<java.util.TreeSet<java.lang.Class<?>[]>> wildcardClassArraySetList8 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, 1);
        java.util.List<java.util.TreeSet<java.lang.constant.Constable[]>> constableArraySetList10 = com.thealgorithms.backtracking.Combination.combination((java.lang.constant.Constable[][]) wildcardClassArray2, (int) (short) 10);
        java.util.List<java.util.TreeSet<java.lang.Class<?>[]>> wildcardClassArraySetList12 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (byte) 0);
        java.util.List<java.util.TreeSet<java.io.Serializable>> serializableSetList14 = com.thealgorithms.backtracking.Combination.combination((java.io.Serializable[]) wildcardClassArray2, 2);
        java.util.List<java.util.TreeSet<java.lang.Class<?>[]>> wildcardClassArraySetList16 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (short) 100);
        java.lang.Class<?> wildcardClass17 = wildcardClassArraySetList16.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList4);
        org.junit.Assert.assertNull(genericDeclarationArraySetList6);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList8);
        org.junit.Assert.assertNotNull(constableArraySetList10);
        org.junit.Assert.assertNull(wildcardClassArraySetList12);
        org.junit.Assert.assertNotNull(serializableSetList14);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList16);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test1419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1419");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>>> wildcardClassSetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (byte) 0);
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration>> genericDeclarationSetList6 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2, (int) (byte) 1);
        java.util.List<java.util.TreeSet<java.lang.invoke.TypeDescriptor>> typeDescriptorSetList8 = com.thealgorithms.backtracking.Combination.combination((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2, (int) ' ');
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration>> genericDeclarationSetList10 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2, 0);
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration>> genericDeclarationSetList12 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2, 0);
        java.util.List<java.util.TreeSet<java.lang.invoke.TypeDescriptor>> typeDescriptorSetList14 = com.thealgorithms.backtracking.Combination.combination((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2, 100);
        java.util.List<java.util.TreeSet<java.lang.Class<?>>> wildcardClassSetList16 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) '#');
        java.util.List<java.util.TreeSet<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>>> wildcardClassOfFieldSetList18 = com.thealgorithms.backtracking.Combination.combination((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) wildcardClassArray2, (int) (byte) -1);
        java.lang.Class<?> wildcardClass19 = wildcardClassOfFieldSetList18.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNull(wildcardClassSetList4);
        org.junit.Assert.assertNotNull(genericDeclarationSetList6);
        org.junit.Assert.assertNotNull(typeDescriptorSetList8);
        org.junit.Assert.assertNull(genericDeclarationSetList10);
        org.junit.Assert.assertNull(genericDeclarationSetList12);
        org.junit.Assert.assertNotNull(typeDescriptorSetList14);
        org.junit.Assert.assertNotNull(wildcardClassSetList16);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldSetList18);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test1420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1420");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "", "", "", "" };
        java.util.List<java.util.TreeSet<java.lang.Comparable<java.lang.String>>> strComparableSetList8 = com.thealgorithms.backtracking.Combination.combination((java.lang.Comparable<java.lang.String>[]) strArray6, (int) (byte) 1);
        java.util.List<java.util.TreeSet<java.io.Serializable>> serializableSetList10 = com.thealgorithms.backtracking.Combination.combination((java.io.Serializable[]) strArray6, (int) '4');
        java.util.List<java.util.TreeSet<java.lang.String>> strSetList12 = com.thealgorithms.backtracking.Combination.combination(strArray6, 1);
        java.lang.String[] strArray19 = new java.lang.String[] { "", "", "", "", "", "" };
        java.util.List<java.util.TreeSet<java.lang.Comparable<java.lang.String>>> strComparableSetList21 = com.thealgorithms.backtracking.Combination.combination((java.lang.Comparable<java.lang.String>[]) strArray19, (int) (byte) 1);
        java.util.List<java.util.TreeSet<java.io.Serializable>> serializableSetList23 = com.thealgorithms.backtracking.Combination.combination((java.io.Serializable[]) strArray19, (int) '4');
        java.util.List<java.util.TreeSet<java.lang.String>> strSetList25 = com.thealgorithms.backtracking.Combination.combination(strArray19, 1);
        java.util.Collection[] collectionArray27 = new java.util.Collection[2];
        @SuppressWarnings("unchecked")
        java.util.Collection<java.util.TreeSet<java.lang.String>>[] strSetCollectionArray28 = (java.util.Collection<java.util.TreeSet<java.lang.String>>[]) collectionArray27;
        strSetCollectionArray28[0] = strSetList12;
        strSetCollectionArray28[1] = strSetList25;
        java.util.List<java.util.TreeSet<java.util.Collection<java.util.TreeSet<java.lang.String>>>> setCollectionSetList34 = com.thealgorithms.backtracking.Combination.combination(strSetCollectionArray28, 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.TreeSet<java.lang.Iterable<java.util.TreeSet<java.lang.String>>>> setIterableSetList36 = com.thealgorithms.backtracking.Combination.combination((java.lang.Iterable<java.util.TreeSet<java.lang.String>>[]) strSetCollectionArray28, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strComparableSetList8);
        org.junit.Assert.assertNotNull(serializableSetList10);
        org.junit.Assert.assertNotNull(strSetList12);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strComparableSetList21);
        org.junit.Assert.assertNotNull(serializableSetList23);
        org.junit.Assert.assertNotNull(strSetList25);
        org.junit.Assert.assertNotNull(collectionArray27);
        org.junit.Assert.assertNotNull(strSetCollectionArray28);
        org.junit.Assert.assertNull(setCollectionSetList34);
    }

    @Test
    public void test1421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1421");
        java.lang.Class[][][] classArray1 = new java.lang.Class[0][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray2 = (java.lang.Class<?>[][][]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][]>> wildcardClassArraySetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (byte) -1);
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][]>> wildcardClassArraySetList6 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, 0);
        java.util.List<java.util.TreeSet<java.lang.reflect.Type[][]>> typeArraySetList8 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.Type[][][]) wildcardClassArray2, (int) (byte) 100);
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][]>> wildcardClassArraySetList10 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (short) 100);
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][]>> wildcardClassArraySetList12 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (short) -1);
        java.lang.Class<?> wildcardClass13 = wildcardClassArraySetList12.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList4);
        org.junit.Assert.assertNull(wildcardClassArraySetList6);
        org.junit.Assert.assertNotNull(typeArraySetList8);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList10);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1422");
        java.util.List[][] listArray1 = new java.util.List[0][];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[][] strSetListArray2 = (java.util.List<java.util.TreeSet<java.lang.String>>[][]) listArray1;
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[]>> listArraySetList4 = com.thealgorithms.backtracking.Combination.combination(strSetListArray2, (int) (short) -1);
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[]>> listArraySetList6 = com.thealgorithms.backtracking.Combination.combination(strSetListArray2, (-1));
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[]>> listArraySetList8 = com.thealgorithms.backtracking.Combination.combination(strSetListArray2, 0);
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[]>> listArraySetList10 = com.thealgorithms.backtracking.Combination.combination(strSetListArray2, 1);
        java.lang.Class<?> wildcardClass11 = listArraySetList10.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strSetListArray2);
        org.junit.Assert.assertNotNull(listArraySetList4);
        org.junit.Assert.assertNotNull(listArraySetList6);
        org.junit.Assert.assertNull(listArraySetList8);
        org.junit.Assert.assertNotNull(listArraySetList10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1423");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>>> wildcardClassSetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (byte) 0);
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration>> genericDeclarationSetList6 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2, (int) (byte) 1);
        java.util.List<java.util.TreeSet<java.lang.invoke.TypeDescriptor>> typeDescriptorSetList8 = com.thealgorithms.backtracking.Combination.combination((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2, (int) ' ');
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration>> genericDeclarationSetList10 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2, (int) '#');
        java.lang.Class<?> wildcardClass11 = genericDeclarationSetList10.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNull(wildcardClassSetList4);
        org.junit.Assert.assertNotNull(genericDeclarationSetList6);
        org.junit.Assert.assertNotNull(typeDescriptorSetList8);
        org.junit.Assert.assertNotNull(genericDeclarationSetList10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1424");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>>> wildcardClassSetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (byte) 0);
        java.util.List<java.util.TreeSet<java.io.Serializable>> serializableSetList6 = com.thealgorithms.backtracking.Combination.combination((java.io.Serializable[]) wildcardClassArray2, (int) '4');
        java.lang.Class<?> wildcardClass7 = serializableSetList6.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNull(wildcardClassSetList4);
        org.junit.Assert.assertNotNull(serializableSetList6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test1425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1425");
        com.thealgorithms.backtracking.Combination[][][][][][][][][][] combinationArray0 = new com.thealgorithms.backtracking.Combination[][][][][][][][][][] {};
        com.thealgorithms.backtracking.Combination[][][][][][][][][][] combinationArray1 = new com.thealgorithms.backtracking.Combination[][][][][][][][][][] {};
        com.thealgorithms.backtracking.Combination[][][][][][][][][][] combinationArray2 = new com.thealgorithms.backtracking.Combination[][][][][][][][][][] {};
        com.thealgorithms.backtracking.Combination[][][][][][][][][][] combinationArray3 = new com.thealgorithms.backtracking.Combination[][][][][][][][][][] {};
        com.thealgorithms.backtracking.Combination[][][][][][][][][][][] combinationArray4 = new com.thealgorithms.backtracking.Combination[][][][][][][][][][][] { combinationArray0, combinationArray1, combinationArray2, combinationArray3 };
        java.util.List<java.util.TreeSet<com.thealgorithms.backtracking.Combination[][][][][][][][][][]>> combinationArraySetList6 = com.thealgorithms.backtracking.Combination.combination(combinationArray4, (int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.TreeSet<com.thealgorithms.backtracking.Combination[][][][][][][][][][]>> combinationArraySetList8 = com.thealgorithms.backtracking.Combination.combination(combinationArray4, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(combinationArray0);
        org.junit.Assert.assertNotNull(combinationArray1);
        org.junit.Assert.assertNotNull(combinationArray2);
        org.junit.Assert.assertNotNull(combinationArray3);
        org.junit.Assert.assertNotNull(combinationArray4);
        org.junit.Assert.assertNull(combinationArraySetList6);
    }

    @Test
    public void test1426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1426");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.util.TreeSet<java.lang.String>> strSetList4 = com.thealgorithms.backtracking.Combination.combination(strArray2, (int) '#');
        java.util.List<java.util.TreeSet<java.lang.CharSequence>> charSequenceSetList6 = com.thealgorithms.backtracking.Combination.combination((java.lang.CharSequence[]) strArray2, 10);
        java.util.List<java.util.TreeSet<java.lang.constant.Constable>> constableSetList8 = com.thealgorithms.backtracking.Combination.combination((java.lang.constant.Constable[]) strArray2, (int) (byte) 1);
        java.util.List<java.util.TreeSet<java.lang.String>> strSetList10 = com.thealgorithms.backtracking.Combination.combination(strArray2, (int) (short) 1);
        java.util.List<java.util.TreeSet<java.lang.constant.Constable>> constableSetList12 = com.thealgorithms.backtracking.Combination.combination((java.lang.constant.Constable[]) strArray2, (int) 'a');
        java.lang.Class<?> wildcardClass13 = constableSetList12.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strSetList4);
        org.junit.Assert.assertNotNull(charSequenceSetList6);
        org.junit.Assert.assertNotNull(constableSetList8);
        org.junit.Assert.assertNotNull(strSetList10);
        org.junit.Assert.assertNotNull(constableSetList12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1427");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "", "", "", "" };
        java.util.List<java.util.TreeSet<java.lang.Comparable<java.lang.String>>> strComparableSetList8 = com.thealgorithms.backtracking.Combination.combination((java.lang.Comparable<java.lang.String>[]) strArray6, (int) (byte) 1);
        java.util.List<java.util.TreeSet<java.io.Serializable>> serializableSetList10 = com.thealgorithms.backtracking.Combination.combination((java.io.Serializable[]) strArray6, (int) '4');
        java.util.List<java.util.TreeSet<java.lang.String>> strSetList12 = com.thealgorithms.backtracking.Combination.combination(strArray6, 1);
        java.util.List<java.util.TreeSet<java.lang.constant.ConstantDesc>> constantDescSetList14 = com.thealgorithms.backtracking.Combination.combination((java.lang.constant.ConstantDesc[]) strArray6, (int) (short) 100);
        java.util.List<java.util.TreeSet<java.lang.Object>> objSetList16 = com.thealgorithms.backtracking.Combination.combination((java.lang.Object[]) strArray6, (int) (byte) 10);
        java.util.List<java.util.TreeSet<java.lang.CharSequence>> charSequenceSetList18 = com.thealgorithms.backtracking.Combination.combination((java.lang.CharSequence[]) strArray6, 5);
        java.lang.Class<?> wildcardClass19 = charSequenceSetList18.getClass();
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strComparableSetList8);
        org.junit.Assert.assertNotNull(serializableSetList10);
        org.junit.Assert.assertNotNull(strSetList12);
        org.junit.Assert.assertNotNull(constantDescSetList14);
        org.junit.Assert.assertNotNull(objSetList16);
        org.junit.Assert.assertNotNull(charSequenceSetList18);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test1428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1428");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.util.TreeSet<java.lang.String>> strSetList4 = com.thealgorithms.backtracking.Combination.combination(strArray2, (int) '#');
        java.util.List<java.util.TreeSet<java.lang.constant.ConstantDesc>> constantDescSetList6 = com.thealgorithms.backtracking.Combination.combination((java.lang.constant.ConstantDesc[]) strArray2, 1);
        java.util.List<java.util.TreeSet<java.lang.String>> strSetList8 = com.thealgorithms.backtracking.Combination.combination(strArray2, (int) (byte) -1);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "", "", "" };
        java.util.List<java.util.TreeSet<java.lang.Comparable<java.lang.String>>> strComparableSetList17 = com.thealgorithms.backtracking.Combination.combination((java.lang.Comparable<java.lang.String>[]) strArray15, (int) (byte) 1);
        java.util.List<java.util.TreeSet<java.io.Serializable>> serializableSetList19 = com.thealgorithms.backtracking.Combination.combination((java.io.Serializable[]) strArray15, (int) '4');
        java.util.List<java.util.TreeSet<java.lang.Object>> objSetList21 = com.thealgorithms.backtracking.Combination.combination((java.lang.Object[]) strArray15, (int) '#');
        java.util.List<java.util.TreeSet<java.lang.Comparable<java.lang.String>>> strComparableSetList23 = com.thealgorithms.backtracking.Combination.combination((java.lang.Comparable<java.lang.String>[]) strArray15, 100);
        java.util.List<java.util.TreeSet<java.lang.String>> strSetList25 = com.thealgorithms.backtracking.Combination.combination(strArray15, (int) '4');
        java.lang.String[] strArray28 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.util.TreeSet<java.lang.String>> strSetList30 = com.thealgorithms.backtracking.Combination.combination(strArray28, (int) '#');
        java.util.List<java.util.TreeSet<java.lang.CharSequence>> charSequenceSetList32 = com.thealgorithms.backtracking.Combination.combination((java.lang.CharSequence[]) strArray28, 10);
        java.util.List<java.util.TreeSet<java.lang.constant.Constable>> constableSetList34 = com.thealgorithms.backtracking.Combination.combination((java.lang.constant.Constable[]) strArray28, (int) (byte) 1);
        java.util.List<java.util.TreeSet<java.lang.String>> strSetList36 = com.thealgorithms.backtracking.Combination.combination(strArray28, (int) (short) 1);
        java.lang.String[] strArray39 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.util.TreeSet<java.lang.String>> strSetList41 = com.thealgorithms.backtracking.Combination.combination(strArray39, (int) '#');
        java.lang.String[] strArray44 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.util.TreeSet<java.lang.String>> strSetList46 = com.thealgorithms.backtracking.Combination.combination(strArray44, (int) '#');
        java.util.List[] listArray48 = new java.util.List[5];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[] strSetListArray49 = (java.util.List<java.util.TreeSet<java.lang.String>>[]) listArray48;
        strSetListArray49[0] = strSetList8;
        strSetListArray49[1] = strSetList25;
        strSetListArray49[2] = strSetList36;
        strSetListArray49[3] = strSetList41;
        strSetListArray49[4] = strSetList46;
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>>> setListSetList61 = com.thealgorithms.backtracking.Combination.combination(strSetListArray49, (int) (short) 0);
        java.util.List<java.util.TreeSet<java.util.Collection<java.util.TreeSet<java.lang.String>>>> setCollectionSetList63 = com.thealgorithms.backtracking.Combination.combination((java.util.Collection<java.util.TreeSet<java.lang.String>>[]) strSetListArray49, (int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.TreeSet<java.lang.Iterable<java.util.TreeSet<java.lang.String>>>> setIterableSetList65 = com.thealgorithms.backtracking.Combination.combination((java.lang.Iterable<java.util.TreeSet<java.lang.String>>[]) strSetListArray49, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strSetList4);
        org.junit.Assert.assertNotNull(constantDescSetList6);
        org.junit.Assert.assertNotNull(strSetList8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strComparableSetList17);
        org.junit.Assert.assertNotNull(serializableSetList19);
        org.junit.Assert.assertNotNull(objSetList21);
        org.junit.Assert.assertNotNull(strComparableSetList23);
        org.junit.Assert.assertNotNull(strSetList25);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(strSetList30);
        org.junit.Assert.assertNotNull(charSequenceSetList32);
        org.junit.Assert.assertNotNull(constableSetList34);
        org.junit.Assert.assertNotNull(strSetList36);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(strSetList41);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(strSetList46);
        org.junit.Assert.assertNotNull(listArray48);
        org.junit.Assert.assertNotNull(strSetListArray49);
        org.junit.Assert.assertNull(setListSetList61);
        org.junit.Assert.assertNull(setCollectionSetList63);
    }

    @Test
    public void test1429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1429");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>>> wildcardClassSetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (byte) 0);
        java.util.List<java.util.TreeSet<java.lang.invoke.TypeDescriptor>> typeDescriptorSetList6 = com.thealgorithms.backtracking.Combination.combination((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2, (int) (byte) 100);
        java.util.List<java.util.TreeSet<java.lang.invoke.TypeDescriptor>> typeDescriptorSetList8 = com.thealgorithms.backtracking.Combination.combination((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2, (int) (short) 10);
        java.util.List<java.util.TreeSet<java.lang.reflect.Type>> typeSetList10 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.Type[]) wildcardClassArray2, (int) (byte) 1);
        java.util.List<java.util.TreeSet<java.lang.reflect.AnnotatedElement>> annotatedElementSetList12 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2, (int) (short) 10);
        java.util.List<java.util.TreeSet<java.lang.reflect.Type>> typeSetList14 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.Type[]) wildcardClassArray2, (int) '#');
        java.util.List<java.util.TreeSet<java.lang.Class<?>>> wildcardClassSetList16 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (short) 10);
        java.util.List<java.util.TreeSet<java.lang.reflect.Type>> typeSetList18 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.Type[]) wildcardClassArray2, (int) (byte) 10);
        java.lang.Class<?> wildcardClass19 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNull(wildcardClassSetList4);
        org.junit.Assert.assertNotNull(typeDescriptorSetList6);
        org.junit.Assert.assertNotNull(typeDescriptorSetList8);
        org.junit.Assert.assertNotNull(typeSetList10);
        org.junit.Assert.assertNotNull(annotatedElementSetList12);
        org.junit.Assert.assertNotNull(typeSetList14);
        org.junit.Assert.assertNotNull(wildcardClassSetList16);
        org.junit.Assert.assertNotNull(typeSetList18);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test1430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1430");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>>> wildcardClassSetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (byte) 0);
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration>> genericDeclarationSetList6 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2, (int) (byte) 1);
        java.util.List<java.util.TreeSet<java.lang.invoke.TypeDescriptor>> typeDescriptorSetList8 = com.thealgorithms.backtracking.Combination.combination((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2, (int) ' ');
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration>> genericDeclarationSetList10 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2, (int) '#');
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration>> genericDeclarationSetList12 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2, (int) (short) 1);
        java.util.List<java.util.TreeSet<java.lang.reflect.Type>> typeSetList14 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.Type[]) wildcardClassArray2, 0);
        java.util.List<java.util.TreeSet<java.lang.invoke.TypeDescriptor>> typeDescriptorSetList16 = com.thealgorithms.backtracking.Combination.combination((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2, (int) (short) 1);
        java.util.List<java.util.TreeSet<java.lang.reflect.Type>> typeSetList18 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.Type[]) wildcardClassArray2, (int) (byte) 1);
        java.lang.Class<?> wildcardClass19 = typeSetList18.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNull(wildcardClassSetList4);
        org.junit.Assert.assertNotNull(genericDeclarationSetList6);
        org.junit.Assert.assertNotNull(typeDescriptorSetList8);
        org.junit.Assert.assertNotNull(genericDeclarationSetList10);
        org.junit.Assert.assertNotNull(genericDeclarationSetList12);
        org.junit.Assert.assertNull(typeSetList14);
        org.junit.Assert.assertNotNull(typeDescriptorSetList16);
        org.junit.Assert.assertNotNull(typeSetList18);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test1431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1431");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>>> wildcardClassSetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (byte) 0);
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration>> genericDeclarationSetList6 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2, (int) (byte) 1);
        java.util.List<java.util.TreeSet<java.lang.invoke.TypeDescriptor>> typeDescriptorSetList8 = com.thealgorithms.backtracking.Combination.combination((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2, (int) ' ');
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration>> genericDeclarationSetList10 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2, 0);
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration>> genericDeclarationSetList12 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2, 0);
        java.util.List<java.util.TreeSet<java.lang.invoke.TypeDescriptor>> typeDescriptorSetList14 = com.thealgorithms.backtracking.Combination.combination((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2, 100);
        java.util.List<java.util.TreeSet<java.lang.Class<?>>> wildcardClassSetList16 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) '#');
        java.util.List<java.util.TreeSet<java.lang.reflect.Type>> typeSetList18 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.Type[]) wildcardClassArray2, 10);
        java.util.List<java.util.TreeSet<java.lang.Class<?>>> wildcardClassSetList20 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, 10);
        java.util.List<java.util.TreeSet<java.lang.invoke.TypeDescriptor>> typeDescriptorSetList22 = com.thealgorithms.backtracking.Combination.combination((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2, (int) '#');
        java.lang.Class<?> wildcardClass23 = typeDescriptorSetList22.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNull(wildcardClassSetList4);
        org.junit.Assert.assertNotNull(genericDeclarationSetList6);
        org.junit.Assert.assertNotNull(typeDescriptorSetList8);
        org.junit.Assert.assertNull(genericDeclarationSetList10);
        org.junit.Assert.assertNull(genericDeclarationSetList12);
        org.junit.Assert.assertNotNull(typeDescriptorSetList14);
        org.junit.Assert.assertNotNull(wildcardClassSetList16);
        org.junit.Assert.assertNotNull(typeSetList18);
        org.junit.Assert.assertNotNull(wildcardClassSetList20);
        org.junit.Assert.assertNotNull(typeDescriptorSetList22);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test1432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1432");
        java.lang.reflect.GenericDeclaration[][][][] genericDeclarationArray0 = new java.lang.reflect.GenericDeclaration[][][][] {};
        java.lang.reflect.GenericDeclaration[][][][] genericDeclarationArray1 = new java.lang.reflect.GenericDeclaration[][][][] {};
        java.lang.reflect.GenericDeclaration[][][][] genericDeclarationArray2 = new java.lang.reflect.GenericDeclaration[][][][] {};
        java.lang.reflect.GenericDeclaration[][][][] genericDeclarationArray3 = new java.lang.reflect.GenericDeclaration[][][][] {};
        java.lang.reflect.GenericDeclaration[][][][] genericDeclarationArray4 = new java.lang.reflect.GenericDeclaration[][][][] {};
        java.lang.reflect.GenericDeclaration[][][][] genericDeclarationArray5 = new java.lang.reflect.GenericDeclaration[][][][] {};
        java.lang.reflect.GenericDeclaration[][][][][] genericDeclarationArray6 = new java.lang.reflect.GenericDeclaration[][][][][] { genericDeclarationArray0, genericDeclarationArray1, genericDeclarationArray2, genericDeclarationArray3, genericDeclarationArray4, genericDeclarationArray5 };
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration[][][][]>> genericDeclarationArraySetList8 = com.thealgorithms.backtracking.Combination.combination(genericDeclarationArray6, 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.TreeSet<java.lang.Object>> objSetList10 = com.thealgorithms.backtracking.Combination.combination((java.lang.Object[]) genericDeclarationArray6, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(genericDeclarationArray0);
        org.junit.Assert.assertNotNull(genericDeclarationArray1);
        org.junit.Assert.assertNotNull(genericDeclarationArray2);
        org.junit.Assert.assertNotNull(genericDeclarationArray3);
        org.junit.Assert.assertNotNull(genericDeclarationArray4);
        org.junit.Assert.assertNotNull(genericDeclarationArray5);
        org.junit.Assert.assertNotNull(genericDeclarationArray6);
        org.junit.Assert.assertNull(genericDeclarationArraySetList8);
    }

    @Test
    public void test1433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1433");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>>> wildcardClassSetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (byte) 0);
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration>> genericDeclarationSetList6 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2, (int) (byte) 1);
        java.util.List<java.util.TreeSet<java.lang.invoke.TypeDescriptor>> typeDescriptorSetList8 = com.thealgorithms.backtracking.Combination.combination((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2, (int) ' ');
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration>> genericDeclarationSetList10 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2, 0);
        java.util.List<java.util.TreeSet<java.lang.Class<?>>> wildcardClassSetList12 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (-1));
        java.util.List<java.util.TreeSet<java.lang.Class<?>>> wildcardClassSetList14 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) '#');
        java.util.List<java.util.TreeSet<java.lang.Class<?>>> wildcardClassSetList16 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, 1);
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration>> genericDeclarationSetList18 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2, (int) ' ');
        java.lang.Class<?> wildcardClass19 = genericDeclarationSetList18.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNull(wildcardClassSetList4);
        org.junit.Assert.assertNotNull(genericDeclarationSetList6);
        org.junit.Assert.assertNotNull(typeDescriptorSetList8);
        org.junit.Assert.assertNull(genericDeclarationSetList10);
        org.junit.Assert.assertNotNull(wildcardClassSetList12);
        org.junit.Assert.assertNotNull(wildcardClassSetList14);
        org.junit.Assert.assertNotNull(wildcardClassSetList16);
        org.junit.Assert.assertNotNull(genericDeclarationSetList18);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test1434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1434");
        java.util.Collection[][][] collectionArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.TreeSet<java.util.Collection[][]>> collectionArraySetList2 = com.thealgorithms.backtracking.Combination.combination(collectionArray0, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1435");
        java.lang.Class[][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][][][][][]>> wildcardClassArraySetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, 2);
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][][][][][]>> wildcardClassArraySetList6 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) 'a');
        java.lang.Class<?> wildcardClass7 = wildcardClassArraySetList6.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList4);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test1436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1436");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>>> wildcardClassSetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (byte) 0);
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration>> genericDeclarationSetList6 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2, (int) (byte) 1);
        java.util.List<java.util.TreeSet<java.lang.invoke.TypeDescriptor>> typeDescriptorSetList8 = com.thealgorithms.backtracking.Combination.combination((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2, (int) ' ');
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration>> genericDeclarationSetList10 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2, 0);
        java.util.List<java.util.TreeSet<java.lang.Class<?>>> wildcardClassSetList12 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (-1));
        java.util.List<java.util.TreeSet<java.lang.Class<?>>> wildcardClassSetList14 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) '#');
        java.util.List<java.util.TreeSet<java.lang.constant.Constable>> constableSetList16 = com.thealgorithms.backtracking.Combination.combination((java.lang.constant.Constable[]) wildcardClassArray2, (int) '4');
        java.lang.Class<?> wildcardClass17 = constableSetList16.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNull(wildcardClassSetList4);
        org.junit.Assert.assertNotNull(genericDeclarationSetList6);
        org.junit.Assert.assertNotNull(typeDescriptorSetList8);
        org.junit.Assert.assertNull(genericDeclarationSetList10);
        org.junit.Assert.assertNotNull(wildcardClassSetList12);
        org.junit.Assert.assertNotNull(wildcardClassSetList14);
        org.junit.Assert.assertNotNull(constableSetList16);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test1437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1437");
        java.lang.Class[][] classArray1 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray2 = (java.lang.Class<?>[][]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>[]>> wildcardClassArraySetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (byte) 1);
        java.util.List<java.util.TreeSet<java.lang.reflect.Type[]>> typeArraySetList6 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.Type[][]) wildcardClassArray2, 5);
        java.util.List<java.util.TreeSet<java.lang.Object>> objSetList8 = com.thealgorithms.backtracking.Combination.combination((java.lang.Object[]) wildcardClassArray2, (int) (short) 0);
        java.util.List<java.util.TreeSet<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]>> ofFieldArraySetList10 = com.thealgorithms.backtracking.Combination.combination((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]) wildcardClassArray2, (int) '#');
        java.lang.Class<?> wildcardClass11 = ofFieldArraySetList10.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList4);
        org.junit.Assert.assertNotNull(typeArraySetList6);
        org.junit.Assert.assertNull(objSetList8);
        org.junit.Assert.assertNotNull(ofFieldArraySetList10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1438");
        java.util.List[][][] listArray1 = new java.util.List[0][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[][][] strSetListArray2 = (java.util.List<java.util.TreeSet<java.lang.String>>[][][]) listArray1;
        java.util.List[][][] listArray4 = new java.util.List[0][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[][][] strSetListArray5 = (java.util.List<java.util.TreeSet<java.lang.String>>[][][]) listArray4;
        java.util.List[][][] listArray7 = new java.util.List[0][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[][][] strSetListArray8 = (java.util.List<java.util.TreeSet<java.lang.String>>[][][]) listArray7;
        java.util.List[][][] listArray10 = new java.util.List[0][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[][][] strSetListArray11 = (java.util.List<java.util.TreeSet<java.lang.String>>[][][]) listArray10;
        java.util.List[][][] listArray13 = new java.util.List[0][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[][][] strSetListArray14 = (java.util.List<java.util.TreeSet<java.lang.String>>[][][]) listArray13;
        java.util.List[][][] listArray16 = new java.util.List[0][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[][][] strSetListArray17 = (java.util.List<java.util.TreeSet<java.lang.String>>[][][]) listArray16;
        java.util.List[][][][] listArray19 = new java.util.List[6][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[][][][] strSetListArray20 = (java.util.List<java.util.TreeSet<java.lang.String>>[][][][]) listArray19;
        strSetListArray20[0] = strSetListArray2;
        strSetListArray20[1] = strSetListArray5;
        strSetListArray20[2] = strSetListArray8;
        strSetListArray20[3] = strSetListArray11;
        strSetListArray20[4] = strSetListArray14;
        strSetListArray20[5] = strSetListArray17;
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[][][]>> listArraySetList34 = com.thealgorithms.backtracking.Combination.combination(strSetListArray20, (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[][][]>> listArraySetList36 = com.thealgorithms.backtracking.Combination.combination(strSetListArray20, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strSetListArray2);
        org.junit.Assert.assertNotNull(listArray4);
        org.junit.Assert.assertNotNull(strSetListArray5);
        org.junit.Assert.assertNotNull(listArray7);
        org.junit.Assert.assertNotNull(strSetListArray8);
        org.junit.Assert.assertNotNull(listArray10);
        org.junit.Assert.assertNotNull(strSetListArray11);
        org.junit.Assert.assertNotNull(listArray13);
        org.junit.Assert.assertNotNull(strSetListArray14);
        org.junit.Assert.assertNotNull(listArray16);
        org.junit.Assert.assertNotNull(strSetListArray17);
        org.junit.Assert.assertNotNull(listArray19);
        org.junit.Assert.assertNotNull(strSetListArray20);
        org.junit.Assert.assertNull(listArraySetList34);
    }

    @Test
    public void test1439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1439");
        java.lang.String[][][][][][] strArray0 = new java.lang.String[][][][][][] {};
        java.util.List<java.util.TreeSet<java.lang.String[][][][][]>> strArraySetList2 = com.thealgorithms.backtracking.Combination.combination(strArray0, (int) ' ');
        java.util.List<java.util.TreeSet<java.lang.String[][][][][]>> strArraySetList4 = com.thealgorithms.backtracking.Combination.combination(strArray0, (int) (byte) 0);
        java.util.List<java.util.TreeSet<java.lang.String[][][][][]>> strArraySetList6 = com.thealgorithms.backtracking.Combination.combination(strArray0, (int) (byte) 10);
        java.util.List<java.util.TreeSet<java.lang.String[][][][][]>> strArraySetList8 = com.thealgorithms.backtracking.Combination.combination(strArray0, 6);
        java.util.List<java.util.TreeSet<java.lang.String[][][][][]>> strArraySetList10 = com.thealgorithms.backtracking.Combination.combination(strArray0, (int) (byte) -1);
        java.util.List<java.util.TreeSet<java.lang.String[][][][][]>> strArraySetList12 = com.thealgorithms.backtracking.Combination.combination(strArray0, (int) (short) 10);
        java.util.List<java.util.TreeSet<java.lang.String[][][][][]>> strArraySetList14 = com.thealgorithms.backtracking.Combination.combination(strArray0, (int) ' ');
        java.lang.Class<?> wildcardClass15 = strArraySetList14.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArraySetList2);
        org.junit.Assert.assertNull(strArraySetList4);
        org.junit.Assert.assertNotNull(strArraySetList6);
        org.junit.Assert.assertNotNull(strArraySetList8);
        org.junit.Assert.assertNotNull(strArraySetList10);
        org.junit.Assert.assertNotNull(strArraySetList12);
        org.junit.Assert.assertNotNull(strArraySetList14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test1440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1440");
        com.thealgorithms.backtracking.Combination combination0 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination1 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination2 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination3 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination4 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination5 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination[] combinationArray6 = new com.thealgorithms.backtracking.Combination[] { combination0, combination1, combination2, combination3, combination4, combination5 };
        com.thealgorithms.backtracking.Combination combination7 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination8 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination9 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination10 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination11 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination12 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination[] combinationArray13 = new com.thealgorithms.backtracking.Combination[] { combination7, combination8, combination9, combination10, combination11, combination12 };
        com.thealgorithms.backtracking.Combination[][] combinationArray14 = new com.thealgorithms.backtracking.Combination[][] { combinationArray6, combinationArray13 };
        com.thealgorithms.backtracking.Combination combination15 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination16 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination17 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination18 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination19 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination20 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination[] combinationArray21 = new com.thealgorithms.backtracking.Combination[] { combination15, combination16, combination17, combination18, combination19, combination20 };
        com.thealgorithms.backtracking.Combination combination22 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination23 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination24 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination25 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination26 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination27 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination[] combinationArray28 = new com.thealgorithms.backtracking.Combination[] { combination22, combination23, combination24, combination25, combination26, combination27 };
        com.thealgorithms.backtracking.Combination[][] combinationArray29 = new com.thealgorithms.backtracking.Combination[][] { combinationArray21, combinationArray28 };
        com.thealgorithms.backtracking.Combination combination30 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination31 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination32 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination33 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination34 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination35 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination[] combinationArray36 = new com.thealgorithms.backtracking.Combination[] { combination30, combination31, combination32, combination33, combination34, combination35 };
        com.thealgorithms.backtracking.Combination combination37 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination38 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination39 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination40 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination41 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination42 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination[] combinationArray43 = new com.thealgorithms.backtracking.Combination[] { combination37, combination38, combination39, combination40, combination41, combination42 };
        com.thealgorithms.backtracking.Combination[][] combinationArray44 = new com.thealgorithms.backtracking.Combination[][] { combinationArray36, combinationArray43 };
        com.thealgorithms.backtracking.Combination combination45 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination46 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination47 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination48 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination49 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination50 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination[] combinationArray51 = new com.thealgorithms.backtracking.Combination[] { combination45, combination46, combination47, combination48, combination49, combination50 };
        com.thealgorithms.backtracking.Combination combination52 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination53 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination54 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination55 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination56 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination57 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination[] combinationArray58 = new com.thealgorithms.backtracking.Combination[] { combination52, combination53, combination54, combination55, combination56, combination57 };
        com.thealgorithms.backtracking.Combination[][] combinationArray59 = new com.thealgorithms.backtracking.Combination[][] { combinationArray51, combinationArray58 };
        com.thealgorithms.backtracking.Combination combination60 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination61 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination62 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination63 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination64 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination65 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination[] combinationArray66 = new com.thealgorithms.backtracking.Combination[] { combination60, combination61, combination62, combination63, combination64, combination65 };
        com.thealgorithms.backtracking.Combination combination67 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination68 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination69 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination70 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination71 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination72 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination[] combinationArray73 = new com.thealgorithms.backtracking.Combination[] { combination67, combination68, combination69, combination70, combination71, combination72 };
        com.thealgorithms.backtracking.Combination[][] combinationArray74 = new com.thealgorithms.backtracking.Combination[][] { combinationArray66, combinationArray73 };
        com.thealgorithms.backtracking.Combination[][][] combinationArray75 = new com.thealgorithms.backtracking.Combination[][][] { combinationArray14, combinationArray29, combinationArray44, combinationArray59, combinationArray74 };
        com.thealgorithms.backtracking.Combination[][][][] combinationArray76 = new com.thealgorithms.backtracking.Combination[][][][] { combinationArray75 };
        java.util.List<java.util.TreeSet<com.thealgorithms.backtracking.Combination[][][]>> combinationArraySetList78 = com.thealgorithms.backtracking.Combination.combination(combinationArray76, 2);
        java.util.List<java.util.TreeSet<com.thealgorithms.backtracking.Combination[][][]>> combinationArraySetList80 = com.thealgorithms.backtracking.Combination.combination(combinationArray76, (int) (byte) 100);
        java.util.List<java.util.TreeSet<com.thealgorithms.backtracking.Combination[][][]>> combinationArraySetList82 = com.thealgorithms.backtracking.Combination.combination(combinationArray76, 3);
        java.util.List<java.util.TreeSet<com.thealgorithms.backtracking.Combination[][][]>> combinationArraySetList84 = com.thealgorithms.backtracking.Combination.combination(combinationArray76, 6);
        java.util.List<java.util.TreeSet<com.thealgorithms.backtracking.Combination[][][]>> combinationArraySetList86 = com.thealgorithms.backtracking.Combination.combination(combinationArray76, (int) ' ');
        java.lang.Class<?> wildcardClass87 = combinationArraySetList86.getClass();
        org.junit.Assert.assertNotNull(combinationArray6);
        org.junit.Assert.assertNotNull(combinationArray13);
        org.junit.Assert.assertNotNull(combinationArray14);
        org.junit.Assert.assertNotNull(combinationArray21);
        org.junit.Assert.assertNotNull(combinationArray28);
        org.junit.Assert.assertNotNull(combinationArray29);
        org.junit.Assert.assertNotNull(combinationArray36);
        org.junit.Assert.assertNotNull(combinationArray43);
        org.junit.Assert.assertNotNull(combinationArray44);
        org.junit.Assert.assertNotNull(combinationArray51);
        org.junit.Assert.assertNotNull(combinationArray58);
        org.junit.Assert.assertNotNull(combinationArray59);
        org.junit.Assert.assertNotNull(combinationArray66);
        org.junit.Assert.assertNotNull(combinationArray73);
        org.junit.Assert.assertNotNull(combinationArray74);
        org.junit.Assert.assertNotNull(combinationArray75);
        org.junit.Assert.assertNotNull(combinationArray76);
        org.junit.Assert.assertNotNull(combinationArraySetList78);
        org.junit.Assert.assertNotNull(combinationArraySetList80);
        org.junit.Assert.assertNotNull(combinationArraySetList82);
        org.junit.Assert.assertNotNull(combinationArraySetList84);
        org.junit.Assert.assertNotNull(combinationArraySetList86);
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test1441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1441");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>>> wildcardClassSetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (byte) 0);
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration>> genericDeclarationSetList6 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2, (int) (byte) 1);
        java.util.List<java.util.TreeSet<java.lang.invoke.TypeDescriptor>> typeDescriptorSetList8 = com.thealgorithms.backtracking.Combination.combination((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2, (int) ' ');
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration>> genericDeclarationSetList10 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2, 0);
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration>> genericDeclarationSetList12 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2, 0);
        java.util.List<java.util.TreeSet<java.lang.invoke.TypeDescriptor>> typeDescriptorSetList14 = com.thealgorithms.backtracking.Combination.combination((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2, 100);
        java.util.List<java.util.TreeSet<java.lang.Class<?>>> wildcardClassSetList16 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) 'a');
        java.util.List<java.util.TreeSet<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>>> wildcardClassOfFieldSetList18 = com.thealgorithms.backtracking.Combination.combination((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) wildcardClassArray2, (int) '#');
        java.lang.Class<?> wildcardClass19 = wildcardClassOfFieldSetList18.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNull(wildcardClassSetList4);
        org.junit.Assert.assertNotNull(genericDeclarationSetList6);
        org.junit.Assert.assertNotNull(typeDescriptorSetList8);
        org.junit.Assert.assertNull(genericDeclarationSetList10);
        org.junit.Assert.assertNull(genericDeclarationSetList12);
        org.junit.Assert.assertNotNull(typeDescriptorSetList14);
        org.junit.Assert.assertNotNull(wildcardClassSetList16);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldSetList18);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test1442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1442");
        java.lang.Class[][][] classArray1 = new java.lang.Class[0][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray2 = (java.lang.Class<?>[][][]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][]>> wildcardClassArraySetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (byte) -1);
        java.util.List<java.util.TreeSet<java.lang.reflect.Type[][]>> typeArraySetList6 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.Type[][][]) wildcardClassArray2, (int) (byte) 0);
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration[][]>> genericDeclarationArraySetList8 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[][][]) wildcardClassArray2, (int) '#');
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][]>> wildcardClassArraySetList10 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (byte) -1);
        java.lang.Class<?> wildcardClass11 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList4);
        org.junit.Assert.assertNull(typeArraySetList6);
        org.junit.Assert.assertNotNull(genericDeclarationArraySetList8);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1443");
        java.util.List[] listArray1 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[] strSetListArray2 = (java.util.List<java.util.TreeSet<java.lang.String>>[]) listArray1;
        java.util.List[] listArray4 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[] strSetListArray5 = (java.util.List<java.util.TreeSet<java.lang.String>>[]) listArray4;
        java.util.List[][] listArray7 = new java.util.List[2][];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[][] strSetListArray8 = (java.util.List<java.util.TreeSet<java.lang.String>>[][]) listArray7;
        strSetListArray8[0] = strSetListArray2;
        strSetListArray8[1] = strSetListArray5;
        java.util.List[][][] listArray14 = new java.util.List[1][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[][][] strSetListArray15 = (java.util.List<java.util.TreeSet<java.lang.String>>[][][]) listArray14;
        strSetListArray15[0] = strSetListArray8;
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[][]>> listArraySetList19 = com.thealgorithms.backtracking.Combination.combination(strSetListArray15, (int) (short) 10);
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[][]>> listArraySetList21 = com.thealgorithms.backtracking.Combination.combination(strSetListArray15, (int) '#');
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[][]>> listArraySetList23 = com.thealgorithms.backtracking.Combination.combination(strSetListArray15, (int) ' ');
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[][]>> listArraySetList25 = com.thealgorithms.backtracking.Combination.combination(strSetListArray15, (int) (byte) 10);
        java.lang.Class<?> wildcardClass26 = listArraySetList25.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strSetListArray2);
        org.junit.Assert.assertNotNull(listArray4);
        org.junit.Assert.assertNotNull(strSetListArray5);
        org.junit.Assert.assertNotNull(listArray7);
        org.junit.Assert.assertNotNull(strSetListArray8);
        org.junit.Assert.assertNotNull(listArray14);
        org.junit.Assert.assertNotNull(strSetListArray15);
        org.junit.Assert.assertNotNull(listArraySetList19);
        org.junit.Assert.assertNotNull(listArraySetList21);
        org.junit.Assert.assertNotNull(listArraySetList23);
        org.junit.Assert.assertNotNull(listArraySetList25);
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test1444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1444");
        com.thealgorithms.backtracking.Combination[][][][][] combinationArray0 = new com.thealgorithms.backtracking.Combination[][][][][] {};
        com.thealgorithms.backtracking.Combination[][][][][][] combinationArray1 = new com.thealgorithms.backtracking.Combination[][][][][][] { combinationArray0 };
        com.thealgorithms.backtracking.Combination[][][][][] combinationArray2 = new com.thealgorithms.backtracking.Combination[][][][][] {};
        com.thealgorithms.backtracking.Combination[][][][][][] combinationArray3 = new com.thealgorithms.backtracking.Combination[][][][][][] { combinationArray2 };
        com.thealgorithms.backtracking.Combination[][][][][] combinationArray4 = new com.thealgorithms.backtracking.Combination[][][][][] {};
        com.thealgorithms.backtracking.Combination[][][][][][] combinationArray5 = new com.thealgorithms.backtracking.Combination[][][][][][] { combinationArray4 };
        com.thealgorithms.backtracking.Combination[][][][][][][] combinationArray6 = new com.thealgorithms.backtracking.Combination[][][][][][][] { combinationArray1, combinationArray3, combinationArray5 };
        com.thealgorithms.backtracking.Combination[][][][][] combinationArray7 = new com.thealgorithms.backtracking.Combination[][][][][] {};
        com.thealgorithms.backtracking.Combination[][][][][][] combinationArray8 = new com.thealgorithms.backtracking.Combination[][][][][][] { combinationArray7 };
        com.thealgorithms.backtracking.Combination[][][][][] combinationArray9 = new com.thealgorithms.backtracking.Combination[][][][][] {};
        com.thealgorithms.backtracking.Combination[][][][][][] combinationArray10 = new com.thealgorithms.backtracking.Combination[][][][][][] { combinationArray9 };
        com.thealgorithms.backtracking.Combination[][][][][] combinationArray11 = new com.thealgorithms.backtracking.Combination[][][][][] {};
        com.thealgorithms.backtracking.Combination[][][][][][] combinationArray12 = new com.thealgorithms.backtracking.Combination[][][][][][] { combinationArray11 };
        com.thealgorithms.backtracking.Combination[][][][][][][] combinationArray13 = new com.thealgorithms.backtracking.Combination[][][][][][][] { combinationArray8, combinationArray10, combinationArray12 };
        com.thealgorithms.backtracking.Combination[][][][][] combinationArray14 = new com.thealgorithms.backtracking.Combination[][][][][] {};
        com.thealgorithms.backtracking.Combination[][][][][][] combinationArray15 = new com.thealgorithms.backtracking.Combination[][][][][][] { combinationArray14 };
        com.thealgorithms.backtracking.Combination[][][][][] combinationArray16 = new com.thealgorithms.backtracking.Combination[][][][][] {};
        com.thealgorithms.backtracking.Combination[][][][][][] combinationArray17 = new com.thealgorithms.backtracking.Combination[][][][][][] { combinationArray16 };
        com.thealgorithms.backtracking.Combination[][][][][] combinationArray18 = new com.thealgorithms.backtracking.Combination[][][][][] {};
        com.thealgorithms.backtracking.Combination[][][][][][] combinationArray19 = new com.thealgorithms.backtracking.Combination[][][][][][] { combinationArray18 };
        com.thealgorithms.backtracking.Combination[][][][][][][] combinationArray20 = new com.thealgorithms.backtracking.Combination[][][][][][][] { combinationArray15, combinationArray17, combinationArray19 };
        com.thealgorithms.backtracking.Combination[][][][][] combinationArray21 = new com.thealgorithms.backtracking.Combination[][][][][] {};
        com.thealgorithms.backtracking.Combination[][][][][][] combinationArray22 = new com.thealgorithms.backtracking.Combination[][][][][][] { combinationArray21 };
        com.thealgorithms.backtracking.Combination[][][][][] combinationArray23 = new com.thealgorithms.backtracking.Combination[][][][][] {};
        com.thealgorithms.backtracking.Combination[][][][][][] combinationArray24 = new com.thealgorithms.backtracking.Combination[][][][][][] { combinationArray23 };
        com.thealgorithms.backtracking.Combination[][][][][] combinationArray25 = new com.thealgorithms.backtracking.Combination[][][][][] {};
        com.thealgorithms.backtracking.Combination[][][][][][] combinationArray26 = new com.thealgorithms.backtracking.Combination[][][][][][] { combinationArray25 };
        com.thealgorithms.backtracking.Combination[][][][][][][] combinationArray27 = new com.thealgorithms.backtracking.Combination[][][][][][][] { combinationArray22, combinationArray24, combinationArray26 };
        com.thealgorithms.backtracking.Combination[][][][][] combinationArray28 = new com.thealgorithms.backtracking.Combination[][][][][] {};
        com.thealgorithms.backtracking.Combination[][][][][][] combinationArray29 = new com.thealgorithms.backtracking.Combination[][][][][][] { combinationArray28 };
        com.thealgorithms.backtracking.Combination[][][][][] combinationArray30 = new com.thealgorithms.backtracking.Combination[][][][][] {};
        com.thealgorithms.backtracking.Combination[][][][][][] combinationArray31 = new com.thealgorithms.backtracking.Combination[][][][][][] { combinationArray30 };
        com.thealgorithms.backtracking.Combination[][][][][] combinationArray32 = new com.thealgorithms.backtracking.Combination[][][][][] {};
        com.thealgorithms.backtracking.Combination[][][][][][] combinationArray33 = new com.thealgorithms.backtracking.Combination[][][][][][] { combinationArray32 };
        com.thealgorithms.backtracking.Combination[][][][][][][] combinationArray34 = new com.thealgorithms.backtracking.Combination[][][][][][][] { combinationArray29, combinationArray31, combinationArray33 };
        com.thealgorithms.backtracking.Combination[][][][][] combinationArray35 = new com.thealgorithms.backtracking.Combination[][][][][] {};
        com.thealgorithms.backtracking.Combination[][][][][][] combinationArray36 = new com.thealgorithms.backtracking.Combination[][][][][][] { combinationArray35 };
        com.thealgorithms.backtracking.Combination[][][][][] combinationArray37 = new com.thealgorithms.backtracking.Combination[][][][][] {};
        com.thealgorithms.backtracking.Combination[][][][][][] combinationArray38 = new com.thealgorithms.backtracking.Combination[][][][][][] { combinationArray37 };
        com.thealgorithms.backtracking.Combination[][][][][] combinationArray39 = new com.thealgorithms.backtracking.Combination[][][][][] {};
        com.thealgorithms.backtracking.Combination[][][][][][] combinationArray40 = new com.thealgorithms.backtracking.Combination[][][][][][] { combinationArray39 };
        com.thealgorithms.backtracking.Combination[][][][][][][] combinationArray41 = new com.thealgorithms.backtracking.Combination[][][][][][][] { combinationArray36, combinationArray38, combinationArray40 };
        com.thealgorithms.backtracking.Combination[][][][][][][][] combinationArray42 = new com.thealgorithms.backtracking.Combination[][][][][][][][] { combinationArray6, combinationArray13, combinationArray20, combinationArray27, combinationArray34, combinationArray41 };
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.TreeSet<com.thealgorithms.backtracking.Combination[][][][][][][]>> combinationArraySetList44 = com.thealgorithms.backtracking.Combination.combination(combinationArray42, 4);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(combinationArray0);
        org.junit.Assert.assertNotNull(combinationArray1);
        org.junit.Assert.assertNotNull(combinationArray2);
        org.junit.Assert.assertNotNull(combinationArray3);
        org.junit.Assert.assertNotNull(combinationArray4);
        org.junit.Assert.assertNotNull(combinationArray5);
        org.junit.Assert.assertNotNull(combinationArray6);
        org.junit.Assert.assertNotNull(combinationArray7);
        org.junit.Assert.assertNotNull(combinationArray8);
        org.junit.Assert.assertNotNull(combinationArray9);
        org.junit.Assert.assertNotNull(combinationArray10);
        org.junit.Assert.assertNotNull(combinationArray11);
        org.junit.Assert.assertNotNull(combinationArray12);
        org.junit.Assert.assertNotNull(combinationArray13);
        org.junit.Assert.assertNotNull(combinationArray14);
        org.junit.Assert.assertNotNull(combinationArray15);
        org.junit.Assert.assertNotNull(combinationArray16);
        org.junit.Assert.assertNotNull(combinationArray17);
        org.junit.Assert.assertNotNull(combinationArray18);
        org.junit.Assert.assertNotNull(combinationArray19);
        org.junit.Assert.assertNotNull(combinationArray20);
        org.junit.Assert.assertNotNull(combinationArray21);
        org.junit.Assert.assertNotNull(combinationArray22);
        org.junit.Assert.assertNotNull(combinationArray23);
        org.junit.Assert.assertNotNull(combinationArray24);
        org.junit.Assert.assertNotNull(combinationArray25);
        org.junit.Assert.assertNotNull(combinationArray26);
        org.junit.Assert.assertNotNull(combinationArray27);
        org.junit.Assert.assertNotNull(combinationArray28);
        org.junit.Assert.assertNotNull(combinationArray29);
        org.junit.Assert.assertNotNull(combinationArray30);
        org.junit.Assert.assertNotNull(combinationArray31);
        org.junit.Assert.assertNotNull(combinationArray32);
        org.junit.Assert.assertNotNull(combinationArray33);
        org.junit.Assert.assertNotNull(combinationArray34);
        org.junit.Assert.assertNotNull(combinationArray35);
        org.junit.Assert.assertNotNull(combinationArray36);
        org.junit.Assert.assertNotNull(combinationArray37);
        org.junit.Assert.assertNotNull(combinationArray38);
        org.junit.Assert.assertNotNull(combinationArray39);
        org.junit.Assert.assertNotNull(combinationArray40);
        org.junit.Assert.assertNotNull(combinationArray41);
        org.junit.Assert.assertNotNull(combinationArray42);
    }

    @Test
    public void test1445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1445");
        java.lang.String[][] strArray0 = new java.lang.String[][] {};
        java.util.List<java.util.TreeSet<java.lang.String[]>> strArraySetList2 = com.thealgorithms.backtracking.Combination.combination(strArray0, (int) (byte) -1);
        java.util.List<java.util.TreeSet<java.lang.String[]>> strArraySetList4 = com.thealgorithms.backtracking.Combination.combination(strArray0, (int) (short) -1);
        java.util.List<java.util.TreeSet<java.lang.CharSequence[]>> charSequenceArraySetList6 = com.thealgorithms.backtracking.Combination.combination((java.lang.CharSequence[][]) strArray0, (int) (byte) -1);
        java.util.List<java.util.TreeSet<java.lang.constant.Constable[]>> constableArraySetList8 = com.thealgorithms.backtracking.Combination.combination((java.lang.constant.Constable[][]) strArray0, (int) (short) 100);
        java.lang.Class<?> wildcardClass9 = strArray0.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArraySetList2);
        org.junit.Assert.assertNotNull(strArraySetList4);
        org.junit.Assert.assertNotNull(charSequenceArraySetList6);
        org.junit.Assert.assertNotNull(constableArraySetList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1446");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>>> wildcardClassSetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (byte) 0);
        java.util.List<java.util.TreeSet<java.lang.invoke.TypeDescriptor>> typeDescriptorSetList6 = com.thealgorithms.backtracking.Combination.combination((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2, (int) (byte) 100);
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration>> genericDeclarationSetList8 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2, 10);
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration>> genericDeclarationSetList10 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2, (int) (byte) 10);
        java.lang.Class<?> wildcardClass11 = genericDeclarationSetList10.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNull(wildcardClassSetList4);
        org.junit.Assert.assertNotNull(typeDescriptorSetList6);
        org.junit.Assert.assertNotNull(genericDeclarationSetList8);
        org.junit.Assert.assertNotNull(genericDeclarationSetList10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1447");
        java.util.List[][][][][][] listArray1 = new java.util.List[0][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[][][][][][] strSetListArray2 = (java.util.List<java.util.TreeSet<java.lang.String>>[][][][][][]) listArray1;
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[][][][][]>> listArraySetList4 = com.thealgorithms.backtracking.Combination.combination(strSetListArray2, (int) (byte) 100);
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[][][][][]>> listArraySetList6 = com.thealgorithms.backtracking.Combination.combination(strSetListArray2, (int) (byte) -1);
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[][][][][]>> listArraySetList8 = com.thealgorithms.backtracking.Combination.combination(strSetListArray2, (-1));
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[][][][][]>> listArraySetList10 = com.thealgorithms.backtracking.Combination.combination(strSetListArray2, (int) (byte) 10);
        java.lang.Class<?> wildcardClass11 = listArraySetList10.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strSetListArray2);
        org.junit.Assert.assertNotNull(listArraySetList4);
        org.junit.Assert.assertNotNull(listArraySetList6);
        org.junit.Assert.assertNotNull(listArraySetList8);
        org.junit.Assert.assertNotNull(listArraySetList10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1448");
        com.thealgorithms.backtracking.Combination[][][][][][][][] combinationArray0 = new com.thealgorithms.backtracking.Combination[][][][][][][][] {};
        com.thealgorithms.backtracking.Combination[][][][][][][][][] combinationArray1 = new com.thealgorithms.backtracking.Combination[][][][][][][][][] { combinationArray0 };
        com.thealgorithms.backtracking.Combination[][][][][][][][] combinationArray2 = new com.thealgorithms.backtracking.Combination[][][][][][][][] {};
        com.thealgorithms.backtracking.Combination[][][][][][][][][] combinationArray3 = new com.thealgorithms.backtracking.Combination[][][][][][][][][] { combinationArray2 };
        com.thealgorithms.backtracking.Combination[][][][][][][][] combinationArray4 = new com.thealgorithms.backtracking.Combination[][][][][][][][] {};
        com.thealgorithms.backtracking.Combination[][][][][][][][][] combinationArray5 = new com.thealgorithms.backtracking.Combination[][][][][][][][][] { combinationArray4 };
        com.thealgorithms.backtracking.Combination[][][][][][][][] combinationArray6 = new com.thealgorithms.backtracking.Combination[][][][][][][][] {};
        com.thealgorithms.backtracking.Combination[][][][][][][][][] combinationArray7 = new com.thealgorithms.backtracking.Combination[][][][][][][][][] { combinationArray6 };
        com.thealgorithms.backtracking.Combination[][][][][][][][] combinationArray8 = new com.thealgorithms.backtracking.Combination[][][][][][][][] {};
        com.thealgorithms.backtracking.Combination[][][][][][][][][] combinationArray9 = new com.thealgorithms.backtracking.Combination[][][][][][][][][] { combinationArray8 };
        com.thealgorithms.backtracking.Combination[][][][][][][][][][] combinationArray10 = new com.thealgorithms.backtracking.Combination[][][][][][][][][][] { combinationArray1, combinationArray3, combinationArray5, combinationArray7, combinationArray9 };
        com.thealgorithms.backtracking.Combination[][][][][][][][][][][] combinationArray11 = new com.thealgorithms.backtracking.Combination[][][][][][][][][][][] { combinationArray10 };
        com.thealgorithms.backtracking.Combination[][][][][][][][] combinationArray12 = new com.thealgorithms.backtracking.Combination[][][][][][][][] {};
        com.thealgorithms.backtracking.Combination[][][][][][][][][] combinationArray13 = new com.thealgorithms.backtracking.Combination[][][][][][][][][] { combinationArray12 };
        com.thealgorithms.backtracking.Combination[][][][][][][][] combinationArray14 = new com.thealgorithms.backtracking.Combination[][][][][][][][] {};
        com.thealgorithms.backtracking.Combination[][][][][][][][][] combinationArray15 = new com.thealgorithms.backtracking.Combination[][][][][][][][][] { combinationArray14 };
        com.thealgorithms.backtracking.Combination[][][][][][][][] combinationArray16 = new com.thealgorithms.backtracking.Combination[][][][][][][][] {};
        com.thealgorithms.backtracking.Combination[][][][][][][][][] combinationArray17 = new com.thealgorithms.backtracking.Combination[][][][][][][][][] { combinationArray16 };
        com.thealgorithms.backtracking.Combination[][][][][][][][] combinationArray18 = new com.thealgorithms.backtracking.Combination[][][][][][][][] {};
        com.thealgorithms.backtracking.Combination[][][][][][][][][] combinationArray19 = new com.thealgorithms.backtracking.Combination[][][][][][][][][] { combinationArray18 };
        com.thealgorithms.backtracking.Combination[][][][][][][][] combinationArray20 = new com.thealgorithms.backtracking.Combination[][][][][][][][] {};
        com.thealgorithms.backtracking.Combination[][][][][][][][][] combinationArray21 = new com.thealgorithms.backtracking.Combination[][][][][][][][][] { combinationArray20 };
        com.thealgorithms.backtracking.Combination[][][][][][][][][][] combinationArray22 = new com.thealgorithms.backtracking.Combination[][][][][][][][][][] { combinationArray13, combinationArray15, combinationArray17, combinationArray19, combinationArray21 };
        com.thealgorithms.backtracking.Combination[][][][][][][][][][][] combinationArray23 = new com.thealgorithms.backtracking.Combination[][][][][][][][][][][] { combinationArray22 };
        com.thealgorithms.backtracking.Combination[][][][][][][][] combinationArray24 = new com.thealgorithms.backtracking.Combination[][][][][][][][] {};
        com.thealgorithms.backtracking.Combination[][][][][][][][][] combinationArray25 = new com.thealgorithms.backtracking.Combination[][][][][][][][][] { combinationArray24 };
        com.thealgorithms.backtracking.Combination[][][][][][][][] combinationArray26 = new com.thealgorithms.backtracking.Combination[][][][][][][][] {};
        com.thealgorithms.backtracking.Combination[][][][][][][][][] combinationArray27 = new com.thealgorithms.backtracking.Combination[][][][][][][][][] { combinationArray26 };
        com.thealgorithms.backtracking.Combination[][][][][][][][] combinationArray28 = new com.thealgorithms.backtracking.Combination[][][][][][][][] {};
        com.thealgorithms.backtracking.Combination[][][][][][][][][] combinationArray29 = new com.thealgorithms.backtracking.Combination[][][][][][][][][] { combinationArray28 };
        com.thealgorithms.backtracking.Combination[][][][][][][][] combinationArray30 = new com.thealgorithms.backtracking.Combination[][][][][][][][] {};
        com.thealgorithms.backtracking.Combination[][][][][][][][][] combinationArray31 = new com.thealgorithms.backtracking.Combination[][][][][][][][][] { combinationArray30 };
        com.thealgorithms.backtracking.Combination[][][][][][][][] combinationArray32 = new com.thealgorithms.backtracking.Combination[][][][][][][][] {};
        com.thealgorithms.backtracking.Combination[][][][][][][][][] combinationArray33 = new com.thealgorithms.backtracking.Combination[][][][][][][][][] { combinationArray32 };
        com.thealgorithms.backtracking.Combination[][][][][][][][][][] combinationArray34 = new com.thealgorithms.backtracking.Combination[][][][][][][][][][] { combinationArray25, combinationArray27, combinationArray29, combinationArray31, combinationArray33 };
        com.thealgorithms.backtracking.Combination[][][][][][][][][][][] combinationArray35 = new com.thealgorithms.backtracking.Combination[][][][][][][][][][][] { combinationArray34 };
        com.thealgorithms.backtracking.Combination[][][][][][][][] combinationArray36 = new com.thealgorithms.backtracking.Combination[][][][][][][][] {};
        com.thealgorithms.backtracking.Combination[][][][][][][][][] combinationArray37 = new com.thealgorithms.backtracking.Combination[][][][][][][][][] { combinationArray36 };
        com.thealgorithms.backtracking.Combination[][][][][][][][] combinationArray38 = new com.thealgorithms.backtracking.Combination[][][][][][][][] {};
        com.thealgorithms.backtracking.Combination[][][][][][][][][] combinationArray39 = new com.thealgorithms.backtracking.Combination[][][][][][][][][] { combinationArray38 };
        com.thealgorithms.backtracking.Combination[][][][][][][][] combinationArray40 = new com.thealgorithms.backtracking.Combination[][][][][][][][] {};
        com.thealgorithms.backtracking.Combination[][][][][][][][][] combinationArray41 = new com.thealgorithms.backtracking.Combination[][][][][][][][][] { combinationArray40 };
        com.thealgorithms.backtracking.Combination[][][][][][][][] combinationArray42 = new com.thealgorithms.backtracking.Combination[][][][][][][][] {};
        com.thealgorithms.backtracking.Combination[][][][][][][][][] combinationArray43 = new com.thealgorithms.backtracking.Combination[][][][][][][][][] { combinationArray42 };
        com.thealgorithms.backtracking.Combination[][][][][][][][] combinationArray44 = new com.thealgorithms.backtracking.Combination[][][][][][][][] {};
        com.thealgorithms.backtracking.Combination[][][][][][][][][] combinationArray45 = new com.thealgorithms.backtracking.Combination[][][][][][][][][] { combinationArray44 };
        com.thealgorithms.backtracking.Combination[][][][][][][][][][] combinationArray46 = new com.thealgorithms.backtracking.Combination[][][][][][][][][][] { combinationArray37, combinationArray39, combinationArray41, combinationArray43, combinationArray45 };
        com.thealgorithms.backtracking.Combination[][][][][][][][][][][] combinationArray47 = new com.thealgorithms.backtracking.Combination[][][][][][][][][][][] { combinationArray46 };
        com.thealgorithms.backtracking.Combination[][][][][][][][] combinationArray48 = new com.thealgorithms.backtracking.Combination[][][][][][][][] {};
        com.thealgorithms.backtracking.Combination[][][][][][][][][] combinationArray49 = new com.thealgorithms.backtracking.Combination[][][][][][][][][] { combinationArray48 };
        com.thealgorithms.backtracking.Combination[][][][][][][][] combinationArray50 = new com.thealgorithms.backtracking.Combination[][][][][][][][] {};
        com.thealgorithms.backtracking.Combination[][][][][][][][][] combinationArray51 = new com.thealgorithms.backtracking.Combination[][][][][][][][][] { combinationArray50 };
        com.thealgorithms.backtracking.Combination[][][][][][][][] combinationArray52 = new com.thealgorithms.backtracking.Combination[][][][][][][][] {};
        com.thealgorithms.backtracking.Combination[][][][][][][][][] combinationArray53 = new com.thealgorithms.backtracking.Combination[][][][][][][][][] { combinationArray52 };
        com.thealgorithms.backtracking.Combination[][][][][][][][] combinationArray54 = new com.thealgorithms.backtracking.Combination[][][][][][][][] {};
        com.thealgorithms.backtracking.Combination[][][][][][][][][] combinationArray55 = new com.thealgorithms.backtracking.Combination[][][][][][][][][] { combinationArray54 };
        com.thealgorithms.backtracking.Combination[][][][][][][][] combinationArray56 = new com.thealgorithms.backtracking.Combination[][][][][][][][] {};
        com.thealgorithms.backtracking.Combination[][][][][][][][][] combinationArray57 = new com.thealgorithms.backtracking.Combination[][][][][][][][][] { combinationArray56 };
        com.thealgorithms.backtracking.Combination[][][][][][][][][][] combinationArray58 = new com.thealgorithms.backtracking.Combination[][][][][][][][][][] { combinationArray49, combinationArray51, combinationArray53, combinationArray55, combinationArray57 };
        com.thealgorithms.backtracking.Combination[][][][][][][][][][][] combinationArray59 = new com.thealgorithms.backtracking.Combination[][][][][][][][][][][] { combinationArray58 };
        com.thealgorithms.backtracking.Combination[][][][][][][][][][][][] combinationArray60 = new com.thealgorithms.backtracking.Combination[][][][][][][][][][][][] { combinationArray11, combinationArray23, combinationArray35, combinationArray47, combinationArray59 };
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.TreeSet<com.thealgorithms.backtracking.Combination[][][][][][][][][][][]>> combinationArraySetList62 = com.thealgorithms.backtracking.Combination.combination(combinationArray60, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(combinationArray0);
        org.junit.Assert.assertNotNull(combinationArray1);
        org.junit.Assert.assertNotNull(combinationArray2);
        org.junit.Assert.assertNotNull(combinationArray3);
        org.junit.Assert.assertNotNull(combinationArray4);
        org.junit.Assert.assertNotNull(combinationArray5);
        org.junit.Assert.assertNotNull(combinationArray6);
        org.junit.Assert.assertNotNull(combinationArray7);
        org.junit.Assert.assertNotNull(combinationArray8);
        org.junit.Assert.assertNotNull(combinationArray9);
        org.junit.Assert.assertNotNull(combinationArray10);
        org.junit.Assert.assertNotNull(combinationArray11);
        org.junit.Assert.assertNotNull(combinationArray12);
        org.junit.Assert.assertNotNull(combinationArray13);
        org.junit.Assert.assertNotNull(combinationArray14);
        org.junit.Assert.assertNotNull(combinationArray15);
        org.junit.Assert.assertNotNull(combinationArray16);
        org.junit.Assert.assertNotNull(combinationArray17);
        org.junit.Assert.assertNotNull(combinationArray18);
        org.junit.Assert.assertNotNull(combinationArray19);
        org.junit.Assert.assertNotNull(combinationArray20);
        org.junit.Assert.assertNotNull(combinationArray21);
        org.junit.Assert.assertNotNull(combinationArray22);
        org.junit.Assert.assertNotNull(combinationArray23);
        org.junit.Assert.assertNotNull(combinationArray24);
        org.junit.Assert.assertNotNull(combinationArray25);
        org.junit.Assert.assertNotNull(combinationArray26);
        org.junit.Assert.assertNotNull(combinationArray27);
        org.junit.Assert.assertNotNull(combinationArray28);
        org.junit.Assert.assertNotNull(combinationArray29);
        org.junit.Assert.assertNotNull(combinationArray30);
        org.junit.Assert.assertNotNull(combinationArray31);
        org.junit.Assert.assertNotNull(combinationArray32);
        org.junit.Assert.assertNotNull(combinationArray33);
        org.junit.Assert.assertNotNull(combinationArray34);
        org.junit.Assert.assertNotNull(combinationArray35);
        org.junit.Assert.assertNotNull(combinationArray36);
        org.junit.Assert.assertNotNull(combinationArray37);
        org.junit.Assert.assertNotNull(combinationArray38);
        org.junit.Assert.assertNotNull(combinationArray39);
        org.junit.Assert.assertNotNull(combinationArray40);
        org.junit.Assert.assertNotNull(combinationArray41);
        org.junit.Assert.assertNotNull(combinationArray42);
        org.junit.Assert.assertNotNull(combinationArray43);
        org.junit.Assert.assertNotNull(combinationArray44);
        org.junit.Assert.assertNotNull(combinationArray45);
        org.junit.Assert.assertNotNull(combinationArray46);
        org.junit.Assert.assertNotNull(combinationArray47);
        org.junit.Assert.assertNotNull(combinationArray48);
        org.junit.Assert.assertNotNull(combinationArray49);
        org.junit.Assert.assertNotNull(combinationArray50);
        org.junit.Assert.assertNotNull(combinationArray51);
        org.junit.Assert.assertNotNull(combinationArray52);
        org.junit.Assert.assertNotNull(combinationArray53);
        org.junit.Assert.assertNotNull(combinationArray54);
        org.junit.Assert.assertNotNull(combinationArray55);
        org.junit.Assert.assertNotNull(combinationArray56);
        org.junit.Assert.assertNotNull(combinationArray57);
        org.junit.Assert.assertNotNull(combinationArray58);
        org.junit.Assert.assertNotNull(combinationArray59);
        org.junit.Assert.assertNotNull(combinationArray60);
    }

    @Test
    public void test1449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1449");
        java.util.List[][][][][][] listArray1 = new java.util.List[0][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[][][][][][] strSetListArray2 = (java.util.List<java.util.TreeSet<java.lang.String>>[][][][][][]) listArray1;
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[][][][][]>> listArraySetList4 = com.thealgorithms.backtracking.Combination.combination(strSetListArray2, (int) 'a');
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[][][][][]>> listArraySetList6 = com.thealgorithms.backtracking.Combination.combination(strSetListArray2, (int) 'a');
        java.lang.Class<?> wildcardClass7 = strSetListArray2.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strSetListArray2);
        org.junit.Assert.assertNotNull(listArraySetList4);
        org.junit.Assert.assertNotNull(listArraySetList6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test1450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1450");
        java.lang.reflect.GenericDeclaration[][][][] genericDeclarationArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration[][][]>> genericDeclarationArraySetList2 = com.thealgorithms.backtracking.Combination.combination(genericDeclarationArray0, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1451");
        java.util.List[][][][][][] listArray1 = new java.util.List[0][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[][][][][][] strSetListArray2 = (java.util.List<java.util.TreeSet<java.lang.String>>[][][][][][]) listArray1;
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[][][][][]>> listArraySetList4 = com.thealgorithms.backtracking.Combination.combination(strSetListArray2, (int) (byte) 100);
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[][][][][]>> listArraySetList6 = com.thealgorithms.backtracking.Combination.combination(strSetListArray2, (int) (byte) -1);
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[][][][][]>> listArraySetList8 = com.thealgorithms.backtracking.Combination.combination(strSetListArray2, (-1));
        java.lang.Class<?> wildcardClass9 = listArraySetList8.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strSetListArray2);
        org.junit.Assert.assertNotNull(listArraySetList4);
        org.junit.Assert.assertNotNull(listArraySetList6);
        org.junit.Assert.assertNotNull(listArraySetList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1452");
        java.util.List[][][][][][] listArray1 = new java.util.List[0][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[][][][][][] strSetListArray2 = (java.util.List<java.util.TreeSet<java.lang.String>>[][][][][][]) listArray1;
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[][][][][]>> listArraySetList4 = com.thealgorithms.backtracking.Combination.combination(strSetListArray2, (int) (byte) 100);
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[][][][][]>> listArraySetList6 = com.thealgorithms.backtracking.Combination.combination(strSetListArray2, (int) (byte) -1);
        java.lang.Class<?> wildcardClass7 = listArraySetList6.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strSetListArray2);
        org.junit.Assert.assertNotNull(listArraySetList4);
        org.junit.Assert.assertNotNull(listArraySetList6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test1453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1453");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.util.TreeSet<java.lang.String>> strSetList4 = com.thealgorithms.backtracking.Combination.combination(strArray2, (int) '#');
        java.util.List<java.util.TreeSet<java.lang.CharSequence>> charSequenceSetList6 = com.thealgorithms.backtracking.Combination.combination((java.lang.CharSequence[]) strArray2, 10);
        java.util.List<java.util.TreeSet<java.lang.constant.Constable>> constableSetList8 = com.thealgorithms.backtracking.Combination.combination((java.lang.constant.Constable[]) strArray2, (int) (byte) 1);
        java.util.List<java.util.TreeSet<java.lang.String>> strSetList10 = com.thealgorithms.backtracking.Combination.combination(strArray2, (int) (short) 1);
        java.util.List<java.util.TreeSet<java.io.Serializable>> serializableSetList12 = com.thealgorithms.backtracking.Combination.combination((java.io.Serializable[]) strArray2, (-1));
        java.util.List<java.util.TreeSet<java.lang.constant.Constable>> constableSetList14 = com.thealgorithms.backtracking.Combination.combination((java.lang.constant.Constable[]) strArray2, (int) (short) 1);
        java.util.List<java.util.TreeSet<java.lang.constant.ConstantDesc>> constantDescSetList16 = com.thealgorithms.backtracking.Combination.combination((java.lang.constant.ConstantDesc[]) strArray2, (int) (short) 0);
        java.util.List<java.util.TreeSet<java.lang.String>> strSetList18 = com.thealgorithms.backtracking.Combination.combination(strArray2, (int) (short) 1);
        java.lang.Class<?> wildcardClass19 = strArray2.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strSetList4);
        org.junit.Assert.assertNotNull(charSequenceSetList6);
        org.junit.Assert.assertNotNull(constableSetList8);
        org.junit.Assert.assertNotNull(strSetList10);
        org.junit.Assert.assertNotNull(serializableSetList12);
        org.junit.Assert.assertNotNull(constableSetList14);
        org.junit.Assert.assertNull(constantDescSetList16);
        org.junit.Assert.assertNotNull(strSetList18);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test1454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1454");
        java.lang.Class[][] classArray1 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray2 = (java.lang.Class<?>[][]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>[]>> wildcardClassArraySetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (byte) 1);
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration[]>> genericDeclarationArraySetList6 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray2, (int) (byte) 0);
        java.util.List<java.util.TreeSet<java.lang.Class<?>[]>> wildcardClassArraySetList8 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, 1);
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration[]>> genericDeclarationArraySetList10 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray2, (int) (byte) 0);
        java.util.List<java.util.TreeSet<java.lang.Object>> objSetList12 = com.thealgorithms.backtracking.Combination.combination((java.lang.Object[]) wildcardClassArray2, (int) 'a');
        java.lang.Class<?> wildcardClass13 = objSetList12.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList4);
        org.junit.Assert.assertNull(genericDeclarationArraySetList6);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList8);
        org.junit.Assert.assertNull(genericDeclarationArraySetList10);
        org.junit.Assert.assertNotNull(objSetList12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1455");
        java.util.Collection[] collectionArray1 = new java.util.Collection[0];
        @SuppressWarnings("unchecked")
        java.util.Collection<java.util.TreeSet<java.lang.String>>[] strSetCollectionArray2 = (java.util.Collection<java.util.TreeSet<java.lang.String>>[]) collectionArray1;
        java.util.List<java.util.TreeSet<java.util.Collection<java.util.TreeSet<java.lang.String>>>> setCollectionSetList4 = com.thealgorithms.backtracking.Combination.combination((java.util.Collection<java.util.TreeSet<java.lang.String>>[]) collectionArray1, (-1));
        java.lang.Class<?> wildcardClass5 = collectionArray1.getClass();
        java.lang.reflect.Type[] typeArray6 = new java.lang.reflect.Type[] { wildcardClass5 };
        java.util.List<java.util.TreeSet<java.lang.reflect.Type>> typeSetList8 = com.thealgorithms.backtracking.Combination.combination(typeArray6, (int) ' ');
        java.util.List<java.util.TreeSet<java.lang.reflect.Type>> typeSetList10 = com.thealgorithms.backtracking.Combination.combination(typeArray6, (int) (short) 100);
        java.lang.Class<?> wildcardClass11 = typeArray6.getClass();
        org.junit.Assert.assertNotNull(collectionArray1);
        org.junit.Assert.assertNotNull(strSetCollectionArray2);
        org.junit.Assert.assertNotNull(setCollectionSetList4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(typeSetList8);
        org.junit.Assert.assertNotNull(typeSetList10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1456");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.util.TreeSet<java.lang.String>> strSetList4 = com.thealgorithms.backtracking.Combination.combination(strArray2, (int) '#');
        java.util.List<java.util.TreeSet<java.lang.CharSequence>> charSequenceSetList6 = com.thealgorithms.backtracking.Combination.combination((java.lang.CharSequence[]) strArray2, 10);
        java.util.List<java.util.TreeSet<java.lang.constant.Constable>> constableSetList8 = com.thealgorithms.backtracking.Combination.combination((java.lang.constant.Constable[]) strArray2, (int) (byte) 1);
        java.util.List<java.util.TreeSet<java.lang.String>> strSetList10 = com.thealgorithms.backtracking.Combination.combination(strArray2, (int) (short) 1);
        java.util.List<java.util.TreeSet<java.lang.constant.ConstantDesc>> constantDescSetList12 = com.thealgorithms.backtracking.Combination.combination((java.lang.constant.ConstantDesc[]) strArray2, (int) (short) 1);
        java.util.List<java.util.TreeSet<java.lang.constant.ConstantDesc>> constantDescSetList14 = com.thealgorithms.backtracking.Combination.combination((java.lang.constant.ConstantDesc[]) strArray2, (int) (short) -1);
        java.util.List<java.util.TreeSet<java.lang.String>> strSetList16 = com.thealgorithms.backtracking.Combination.combination(strArray2, 100);
        java.util.List<java.util.TreeSet<java.lang.CharSequence>> charSequenceSetList18 = com.thealgorithms.backtracking.Combination.combination((java.lang.CharSequence[]) strArray2, 10);
        java.util.List<java.util.TreeSet<java.lang.String>> strSetList20 = com.thealgorithms.backtracking.Combination.combination(strArray2, 10);
        java.util.List<java.util.TreeSet<java.lang.Comparable<java.lang.String>>> strComparableSetList22 = com.thealgorithms.backtracking.Combination.combination((java.lang.Comparable<java.lang.String>[]) strArray2, (int) ' ');
        java.lang.Class<?> wildcardClass23 = strArray2.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strSetList4);
        org.junit.Assert.assertNotNull(charSequenceSetList6);
        org.junit.Assert.assertNotNull(constableSetList8);
        org.junit.Assert.assertNotNull(strSetList10);
        org.junit.Assert.assertNotNull(constantDescSetList12);
        org.junit.Assert.assertNotNull(constantDescSetList14);
        org.junit.Assert.assertNotNull(strSetList16);
        org.junit.Assert.assertNotNull(charSequenceSetList18);
        org.junit.Assert.assertNotNull(strSetList20);
        org.junit.Assert.assertNotNull(strComparableSetList22);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test1457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1457");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "", "", "", "" };
        java.util.List<java.util.TreeSet<java.lang.Comparable<java.lang.String>>> strComparableSetList8 = com.thealgorithms.backtracking.Combination.combination((java.lang.Comparable<java.lang.String>[]) strArray6, (int) (byte) 1);
        java.util.List<java.util.TreeSet<java.lang.constant.Constable>> constableSetList10 = com.thealgorithms.backtracking.Combination.combination((java.lang.constant.Constable[]) strArray6, (int) (short) 0);
        java.util.List<java.util.TreeSet<java.lang.String>> strSetList12 = com.thealgorithms.backtracking.Combination.combination(strArray6, (int) (byte) -1);
        java.lang.Class<?> wildcardClass13 = strSetList12.getClass();
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strComparableSetList8);
        org.junit.Assert.assertNull(constableSetList10);
        org.junit.Assert.assertNotNull(strSetList12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1458");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.util.TreeSet<java.lang.String>> strSetList4 = com.thealgorithms.backtracking.Combination.combination(strArray2, (int) '#');
        java.util.List<java.util.TreeSet<java.lang.constant.ConstantDesc>> constantDescSetList6 = com.thealgorithms.backtracking.Combination.combination((java.lang.constant.ConstantDesc[]) strArray2, 1);
        java.util.List<java.util.TreeSet<java.lang.String>> strSetList8 = com.thealgorithms.backtracking.Combination.combination(strArray2, (int) (byte) -1);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "", "", "" };
        java.util.List<java.util.TreeSet<java.lang.Comparable<java.lang.String>>> strComparableSetList17 = com.thealgorithms.backtracking.Combination.combination((java.lang.Comparable<java.lang.String>[]) strArray15, (int) (byte) 1);
        java.util.List<java.util.TreeSet<java.io.Serializable>> serializableSetList19 = com.thealgorithms.backtracking.Combination.combination((java.io.Serializable[]) strArray15, (int) '4');
        java.util.List<java.util.TreeSet<java.lang.Object>> objSetList21 = com.thealgorithms.backtracking.Combination.combination((java.lang.Object[]) strArray15, (int) '#');
        java.util.List<java.util.TreeSet<java.lang.Comparable<java.lang.String>>> strComparableSetList23 = com.thealgorithms.backtracking.Combination.combination((java.lang.Comparable<java.lang.String>[]) strArray15, 100);
        java.util.List<java.util.TreeSet<java.lang.String>> strSetList25 = com.thealgorithms.backtracking.Combination.combination(strArray15, (int) '4');
        java.lang.String[] strArray28 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.util.TreeSet<java.lang.String>> strSetList30 = com.thealgorithms.backtracking.Combination.combination(strArray28, (int) '#');
        java.util.List<java.util.TreeSet<java.lang.CharSequence>> charSequenceSetList32 = com.thealgorithms.backtracking.Combination.combination((java.lang.CharSequence[]) strArray28, 10);
        java.util.List<java.util.TreeSet<java.lang.constant.Constable>> constableSetList34 = com.thealgorithms.backtracking.Combination.combination((java.lang.constant.Constable[]) strArray28, (int) (byte) 1);
        java.util.List<java.util.TreeSet<java.lang.String>> strSetList36 = com.thealgorithms.backtracking.Combination.combination(strArray28, (int) (short) 1);
        java.lang.String[] strArray39 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.util.TreeSet<java.lang.String>> strSetList41 = com.thealgorithms.backtracking.Combination.combination(strArray39, (int) '#');
        java.lang.String[] strArray44 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.util.TreeSet<java.lang.String>> strSetList46 = com.thealgorithms.backtracking.Combination.combination(strArray44, (int) '#');
        java.util.List[] listArray48 = new java.util.List[5];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[] strSetListArray49 = (java.util.List<java.util.TreeSet<java.lang.String>>[]) listArray48;
        strSetListArray49[0] = strSetList8;
        strSetListArray49[1] = strSetList25;
        strSetListArray49[2] = strSetList36;
        strSetListArray49[3] = strSetList41;
        strSetListArray49[4] = strSetList46;
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>>> setListSetList61 = com.thealgorithms.backtracking.Combination.combination(strSetListArray49, (int) (short) 0);
        java.util.List<java.util.TreeSet<java.util.Collection<java.util.TreeSet<java.lang.String>>>> setCollectionSetList63 = com.thealgorithms.backtracking.Combination.combination((java.util.Collection<java.util.TreeSet<java.lang.String>>[]) strSetListArray49, (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.TreeSet<java.util.Collection<java.util.TreeSet<java.lang.String>>>> setCollectionSetList65 = com.thealgorithms.backtracking.Combination.combination((java.util.Collection<java.util.TreeSet<java.lang.String>>[]) strSetListArray49, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strSetList4);
        org.junit.Assert.assertNotNull(constantDescSetList6);
        org.junit.Assert.assertNotNull(strSetList8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strComparableSetList17);
        org.junit.Assert.assertNotNull(serializableSetList19);
        org.junit.Assert.assertNotNull(objSetList21);
        org.junit.Assert.assertNotNull(strComparableSetList23);
        org.junit.Assert.assertNotNull(strSetList25);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(strSetList30);
        org.junit.Assert.assertNotNull(charSequenceSetList32);
        org.junit.Assert.assertNotNull(constableSetList34);
        org.junit.Assert.assertNotNull(strSetList36);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(strSetList41);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(strSetList46);
        org.junit.Assert.assertNotNull(listArray48);
        org.junit.Assert.assertNotNull(strSetListArray49);
        org.junit.Assert.assertNull(setListSetList61);
        org.junit.Assert.assertNull(setCollectionSetList63);
    }

    @Test
    public void test1459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1459");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>>> wildcardClassSetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (byte) 0);
        java.util.List<java.util.TreeSet<java.lang.invoke.TypeDescriptor>> typeDescriptorSetList6 = com.thealgorithms.backtracking.Combination.combination((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2, 0);
        java.util.List<java.util.TreeSet<java.lang.reflect.AnnotatedElement>> annotatedElementSetList8 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2, (int) (byte) -1);
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration>> genericDeclarationSetList10 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2, (int) (short) 10);
        java.lang.Class<?> wildcardClass11 = genericDeclarationSetList10.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNull(wildcardClassSetList4);
        org.junit.Assert.assertNull(typeDescriptorSetList6);
        org.junit.Assert.assertNotNull(annotatedElementSetList8);
        org.junit.Assert.assertNotNull(genericDeclarationSetList10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1460");
        com.thealgorithms.backtracking.Combination[][][][][][][][][][][] combinationArray0 = new com.thealgorithms.backtracking.Combination[][][][][][][][][][][] {};
        com.thealgorithms.backtracking.Combination[][][][][][][][][][][] combinationArray1 = new com.thealgorithms.backtracking.Combination[][][][][][][][][][][] {};
        com.thealgorithms.backtracking.Combination[][][][][][][][][][][] combinationArray2 = new com.thealgorithms.backtracking.Combination[][][][][][][][][][][] {};
        com.thealgorithms.backtracking.Combination[][][][][][][][][][][][] combinationArray3 = new com.thealgorithms.backtracking.Combination[][][][][][][][][][][][] { combinationArray0, combinationArray1, combinationArray2 };
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.TreeSet<com.thealgorithms.backtracking.Combination[][][][][][][][][][][]>> combinationArraySetList5 = com.thealgorithms.backtracking.Combination.combination(combinationArray3, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(combinationArray0);
        org.junit.Assert.assertNotNull(combinationArray1);
        org.junit.Assert.assertNotNull(combinationArray2);
        org.junit.Assert.assertNotNull(combinationArray3);
    }

    @Test
    public void test1461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1461");
        java.util.List[] listArray1 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[] strSetListArray2 = (java.util.List<java.util.TreeSet<java.lang.String>>[]) listArray1;
        java.util.List[] listArray4 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[] strSetListArray5 = (java.util.List<java.util.TreeSet<java.lang.String>>[]) listArray4;
        java.util.List[][] listArray7 = new java.util.List[2][];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[][] strSetListArray8 = (java.util.List<java.util.TreeSet<java.lang.String>>[][]) listArray7;
        strSetListArray8[0] = strSetListArray2;
        strSetListArray8[1] = strSetListArray5;
        java.util.List[][][] listArray14 = new java.util.List[1][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[][][] strSetListArray15 = (java.util.List<java.util.TreeSet<java.lang.String>>[][][]) listArray14;
        strSetListArray15[0] = strSetListArray8;
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[][]>> listArraySetList19 = com.thealgorithms.backtracking.Combination.combination(strSetListArray15, (int) (short) 10);
        java.lang.Class<?> wildcardClass20 = listArraySetList19.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strSetListArray2);
        org.junit.Assert.assertNotNull(listArray4);
        org.junit.Assert.assertNotNull(strSetListArray5);
        org.junit.Assert.assertNotNull(listArray7);
        org.junit.Assert.assertNotNull(strSetListArray8);
        org.junit.Assert.assertNotNull(listArray14);
        org.junit.Assert.assertNotNull(strSetListArray15);
        org.junit.Assert.assertNotNull(listArraySetList19);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test1462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1462");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.util.TreeSet<java.lang.String>> strSetList4 = com.thealgorithms.backtracking.Combination.combination(strArray2, (int) '#');
        java.util.List<java.util.TreeSet<java.lang.constant.ConstantDesc>> constantDescSetList6 = com.thealgorithms.backtracking.Combination.combination((java.lang.constant.ConstantDesc[]) strArray2, 1);
        java.util.List<java.util.TreeSet<java.lang.String>> strSetList8 = com.thealgorithms.backtracking.Combination.combination(strArray2, (int) (byte) -1);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "", "", "" };
        java.util.List<java.util.TreeSet<java.lang.Comparable<java.lang.String>>> strComparableSetList17 = com.thealgorithms.backtracking.Combination.combination((java.lang.Comparable<java.lang.String>[]) strArray15, (int) (byte) 1);
        java.util.List<java.util.TreeSet<java.io.Serializable>> serializableSetList19 = com.thealgorithms.backtracking.Combination.combination((java.io.Serializable[]) strArray15, (int) '4');
        java.util.List<java.util.TreeSet<java.lang.Object>> objSetList21 = com.thealgorithms.backtracking.Combination.combination((java.lang.Object[]) strArray15, (int) '#');
        java.util.List<java.util.TreeSet<java.lang.Comparable<java.lang.String>>> strComparableSetList23 = com.thealgorithms.backtracking.Combination.combination((java.lang.Comparable<java.lang.String>[]) strArray15, 100);
        java.util.List<java.util.TreeSet<java.lang.String>> strSetList25 = com.thealgorithms.backtracking.Combination.combination(strArray15, (int) '4');
        java.lang.String[] strArray28 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.util.TreeSet<java.lang.String>> strSetList30 = com.thealgorithms.backtracking.Combination.combination(strArray28, (int) '#');
        java.util.List<java.util.TreeSet<java.lang.CharSequence>> charSequenceSetList32 = com.thealgorithms.backtracking.Combination.combination((java.lang.CharSequence[]) strArray28, 10);
        java.util.List<java.util.TreeSet<java.lang.constant.Constable>> constableSetList34 = com.thealgorithms.backtracking.Combination.combination((java.lang.constant.Constable[]) strArray28, (int) (byte) 1);
        java.util.List<java.util.TreeSet<java.lang.String>> strSetList36 = com.thealgorithms.backtracking.Combination.combination(strArray28, (int) (short) 1);
        java.lang.String[] strArray39 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.util.TreeSet<java.lang.String>> strSetList41 = com.thealgorithms.backtracking.Combination.combination(strArray39, (int) '#');
        java.lang.String[] strArray44 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.util.TreeSet<java.lang.String>> strSetList46 = com.thealgorithms.backtracking.Combination.combination(strArray44, (int) '#');
        java.util.List[] listArray48 = new java.util.List[5];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[] strSetListArray49 = (java.util.List<java.util.TreeSet<java.lang.String>>[]) listArray48;
        strSetListArray49[0] = strSetList8;
        strSetListArray49[1] = strSetList25;
        strSetListArray49[2] = strSetList36;
        strSetListArray49[3] = strSetList41;
        strSetListArray49[4] = strSetList46;
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>>> setListSetList61 = com.thealgorithms.backtracking.Combination.combination(strSetListArray49, (int) (short) 0);
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>>> setListSetList63 = com.thealgorithms.backtracking.Combination.combination(strSetListArray49, 0);
        java.util.List<java.util.TreeSet<java.util.Collection<java.util.TreeSet<java.lang.String>>>> setCollectionSetList65 = com.thealgorithms.backtracking.Combination.combination((java.util.Collection<java.util.TreeSet<java.lang.String>>[]) strSetListArray49, 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>>> setListSetList67 = com.thealgorithms.backtracking.Combination.combination(strSetListArray49, 5);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strSetList4);
        org.junit.Assert.assertNotNull(constantDescSetList6);
        org.junit.Assert.assertNotNull(strSetList8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strComparableSetList17);
        org.junit.Assert.assertNotNull(serializableSetList19);
        org.junit.Assert.assertNotNull(objSetList21);
        org.junit.Assert.assertNotNull(strComparableSetList23);
        org.junit.Assert.assertNotNull(strSetList25);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(strSetList30);
        org.junit.Assert.assertNotNull(charSequenceSetList32);
        org.junit.Assert.assertNotNull(constableSetList34);
        org.junit.Assert.assertNotNull(strSetList36);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(strSetList41);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(strSetList46);
        org.junit.Assert.assertNotNull(listArray48);
        org.junit.Assert.assertNotNull(strSetListArray49);
        org.junit.Assert.assertNull(setListSetList61);
        org.junit.Assert.assertNull(setListSetList63);
        org.junit.Assert.assertNull(setCollectionSetList65);
    }

    @Test
    public void test1463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1463");
        java.util.Collection[][] collectionArray0 = new java.util.Collection[][] {};
        java.util.List<java.util.TreeSet<java.util.Collection[]>> collectionArraySetList2 = com.thealgorithms.backtracking.Combination.combination(collectionArray0, (int) (byte) 0);
        java.util.List<java.util.TreeSet<java.util.Collection[]>> collectionArraySetList4 = com.thealgorithms.backtracking.Combination.combination(collectionArray0, (int) (byte) -1);
        java.util.List<java.util.TreeSet<java.io.Serializable>> serializableSetList6 = com.thealgorithms.backtracking.Combination.combination((java.io.Serializable[]) collectionArray0, (int) '4');
        java.util.List<java.util.TreeSet<java.util.Collection[]>> collectionArraySetList8 = com.thealgorithms.backtracking.Combination.combination(collectionArray0, (int) '#');
        java.util.List<java.util.TreeSet<java.util.Collection[]>> collectionArraySetList10 = com.thealgorithms.backtracking.Combination.combination(collectionArray0, 10);
        java.lang.Class<?> wildcardClass11 = collectionArraySetList10.getClass();
        org.junit.Assert.assertNotNull(collectionArray0);
        org.junit.Assert.assertNull(collectionArraySetList2);
        org.junit.Assert.assertNotNull(collectionArraySetList4);
        org.junit.Assert.assertNotNull(serializableSetList6);
        org.junit.Assert.assertNotNull(collectionArraySetList8);
        org.junit.Assert.assertNotNull(collectionArraySetList10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1464");
        java.util.List[][] listArray1 = new java.util.List[0][];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[][] strSetListArray2 = (java.util.List<java.util.TreeSet<java.lang.String>>[][]) listArray1;
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[]>> listArraySetList4 = com.thealgorithms.backtracking.Combination.combination(strSetListArray2, (int) (short) -1);
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[]>> listArraySetList6 = com.thealgorithms.backtracking.Combination.combination(strSetListArray2, (-1));
        java.util.List<java.util.TreeSet<java.lang.Iterable<java.util.TreeSet<java.lang.String>>[]>> iterableArraySetList8 = com.thealgorithms.backtracking.Combination.combination((java.lang.Iterable<java.util.TreeSet<java.lang.String>>[][]) strSetListArray2, (int) '4');
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[]>> listArraySetList10 = com.thealgorithms.backtracking.Combination.combination(strSetListArray2, 100);
        java.util.List<java.util.TreeSet<java.lang.Iterable<java.util.TreeSet<java.lang.String>>[]>> iterableArraySetList12 = com.thealgorithms.backtracking.Combination.combination((java.lang.Iterable<java.util.TreeSet<java.lang.String>>[][]) strSetListArray2, (int) (short) 100);
        java.lang.Class<?> wildcardClass13 = iterableArraySetList12.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strSetListArray2);
        org.junit.Assert.assertNotNull(listArraySetList4);
        org.junit.Assert.assertNotNull(listArraySetList6);
        org.junit.Assert.assertNotNull(iterableArraySetList8);
        org.junit.Assert.assertNotNull(listArraySetList10);
        org.junit.Assert.assertNotNull(iterableArraySetList12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1465");
        java.util.List[][] listArray1 = new java.util.List[0][];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[][] strSetListArray2 = (java.util.List<java.util.TreeSet<java.lang.String>>[][]) listArray1;
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[]>> listArraySetList4 = com.thealgorithms.backtracking.Combination.combination(strSetListArray2, (int) (short) -1);
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[]>> listArraySetList6 = com.thealgorithms.backtracking.Combination.combination(strSetListArray2, (-1));
        java.util.List<java.util.TreeSet<java.util.Collection[]>> collectionArraySetList8 = com.thealgorithms.backtracking.Combination.combination((java.util.Collection[][]) strSetListArray2, 5);
        java.util.List<java.util.TreeSet<java.lang.Iterable<java.util.TreeSet<java.lang.String>>[]>> iterableArraySetList10 = com.thealgorithms.backtracking.Combination.combination((java.lang.Iterable<java.util.TreeSet<java.lang.String>>[][]) strSetListArray2, 100);
        java.lang.Class<?> wildcardClass11 = strSetListArray2.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strSetListArray2);
        org.junit.Assert.assertNotNull(listArraySetList4);
        org.junit.Assert.assertNotNull(listArraySetList6);
        org.junit.Assert.assertNotNull(collectionArraySetList8);
        org.junit.Assert.assertNotNull(iterableArraySetList10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1466");
        java.lang.Class[][][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][][]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][][][][][][]>> wildcardClassArraySetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, 2);
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][][][][][][]>> wildcardClassArraySetList6 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, 5);
        java.lang.Class<?> wildcardClass7 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList4);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test1467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1467");
        java.util.List[] listArray1 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[] strSetListArray2 = (java.util.List<java.util.TreeSet<java.lang.String>>[]) listArray1;
        java.util.List[] listArray4 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[] strSetListArray5 = (java.util.List<java.util.TreeSet<java.lang.String>>[]) listArray4;
        java.util.List[][] listArray7 = new java.util.List[2][];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[][] strSetListArray8 = (java.util.List<java.util.TreeSet<java.lang.String>>[][]) listArray7;
        strSetListArray8[0] = strSetListArray2;
        strSetListArray8[1] = strSetListArray5;
        java.util.List[][][] listArray14 = new java.util.List[1][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[][][] strSetListArray15 = (java.util.List<java.util.TreeSet<java.lang.String>>[][][]) listArray14;
        strSetListArray15[0] = strSetListArray8;
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[][]>> listArraySetList19 = com.thealgorithms.backtracking.Combination.combination(strSetListArray15, (int) (short) 10);
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[][]>> listArraySetList21 = com.thealgorithms.backtracking.Combination.combination(strSetListArray15, (int) (short) 0);
        java.util.List<java.util.TreeSet<java.util.Collection[][]>> collectionArraySetList23 = com.thealgorithms.backtracking.Combination.combination((java.util.Collection[][][]) strSetListArray15, (int) (short) 10);
        java.lang.Class<?> wildcardClass24 = strSetListArray15.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strSetListArray2);
        org.junit.Assert.assertNotNull(listArray4);
        org.junit.Assert.assertNotNull(strSetListArray5);
        org.junit.Assert.assertNotNull(listArray7);
        org.junit.Assert.assertNotNull(strSetListArray8);
        org.junit.Assert.assertNotNull(listArray14);
        org.junit.Assert.assertNotNull(strSetListArray15);
        org.junit.Assert.assertNotNull(listArraySetList19);
        org.junit.Assert.assertNull(listArraySetList21);
        org.junit.Assert.assertNotNull(collectionArraySetList23);
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test1468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1468");
        java.lang.Class[][][][][] classArray1 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][][]>> wildcardClassArraySetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (short) 10);
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][][]>> wildcardClassArraySetList6 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (byte) 10);
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][][]>> wildcardClassArraySetList8 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (short) 0);
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration[][][][]>> genericDeclarationArraySetList10 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[][][][][]) wildcardClassArray2, 3);
        java.lang.Class<?> wildcardClass11 = genericDeclarationArraySetList10.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList4);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList6);
        org.junit.Assert.assertNull(wildcardClassArraySetList8);
        org.junit.Assert.assertNotNull(genericDeclarationArraySetList10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1469");
        com.thealgorithms.backtracking.Combination[][][][][] combinationArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.TreeSet<com.thealgorithms.backtracking.Combination[][][][]>> combinationArraySetList2 = com.thealgorithms.backtracking.Combination.combination(combinationArray0, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1470");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>>> wildcardClassSetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (byte) 0);
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration>> genericDeclarationSetList6 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2, (int) (byte) 1);
        java.util.List<java.util.TreeSet<java.lang.invoke.TypeDescriptor>> typeDescriptorSetList8 = com.thealgorithms.backtracking.Combination.combination((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2, (int) ' ');
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration>> genericDeclarationSetList10 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2, 0);
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration>> genericDeclarationSetList12 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2, 0);
        java.util.List<java.util.TreeSet<java.lang.invoke.TypeDescriptor>> typeDescriptorSetList14 = com.thealgorithms.backtracking.Combination.combination((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2, 100);
        java.util.List<java.util.TreeSet<java.lang.Class<?>>> wildcardClassSetList16 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) '#');
        java.util.List<java.util.TreeSet<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>>> wildcardClassOfFieldSetList18 = com.thealgorithms.backtracking.Combination.combination((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) wildcardClassArray2, (int) (byte) -1);
        java.util.List<java.util.TreeSet<java.lang.invoke.TypeDescriptor>> typeDescriptorSetList20 = com.thealgorithms.backtracking.Combination.combination((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2, (int) (byte) 1);
        java.lang.Class<?> wildcardClass21 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNull(wildcardClassSetList4);
        org.junit.Assert.assertNotNull(genericDeclarationSetList6);
        org.junit.Assert.assertNotNull(typeDescriptorSetList8);
        org.junit.Assert.assertNull(genericDeclarationSetList10);
        org.junit.Assert.assertNull(genericDeclarationSetList12);
        org.junit.Assert.assertNotNull(typeDescriptorSetList14);
        org.junit.Assert.assertNotNull(wildcardClassSetList16);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldSetList18);
        org.junit.Assert.assertNotNull(typeDescriptorSetList20);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test1471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1471");
        com.thealgorithms.backtracking.Combination combination0 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination1 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination2 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination3 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination4 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination5 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination[] combinationArray6 = new com.thealgorithms.backtracking.Combination[] { combination0, combination1, combination2, combination3, combination4, combination5 };
        com.thealgorithms.backtracking.Combination combination7 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination8 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination9 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination10 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination11 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination12 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination[] combinationArray13 = new com.thealgorithms.backtracking.Combination[] { combination7, combination8, combination9, combination10, combination11, combination12 };
        com.thealgorithms.backtracking.Combination[][] combinationArray14 = new com.thealgorithms.backtracking.Combination[][] { combinationArray6, combinationArray13 };
        com.thealgorithms.backtracking.Combination combination15 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination16 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination17 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination18 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination19 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination20 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination[] combinationArray21 = new com.thealgorithms.backtracking.Combination[] { combination15, combination16, combination17, combination18, combination19, combination20 };
        com.thealgorithms.backtracking.Combination combination22 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination23 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination24 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination25 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination26 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination27 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination[] combinationArray28 = new com.thealgorithms.backtracking.Combination[] { combination22, combination23, combination24, combination25, combination26, combination27 };
        com.thealgorithms.backtracking.Combination[][] combinationArray29 = new com.thealgorithms.backtracking.Combination[][] { combinationArray21, combinationArray28 };
        com.thealgorithms.backtracking.Combination combination30 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination31 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination32 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination33 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination34 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination35 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination[] combinationArray36 = new com.thealgorithms.backtracking.Combination[] { combination30, combination31, combination32, combination33, combination34, combination35 };
        com.thealgorithms.backtracking.Combination combination37 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination38 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination39 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination40 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination41 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination42 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination[] combinationArray43 = new com.thealgorithms.backtracking.Combination[] { combination37, combination38, combination39, combination40, combination41, combination42 };
        com.thealgorithms.backtracking.Combination[][] combinationArray44 = new com.thealgorithms.backtracking.Combination[][] { combinationArray36, combinationArray43 };
        com.thealgorithms.backtracking.Combination combination45 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination46 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination47 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination48 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination49 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination50 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination[] combinationArray51 = new com.thealgorithms.backtracking.Combination[] { combination45, combination46, combination47, combination48, combination49, combination50 };
        com.thealgorithms.backtracking.Combination combination52 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination53 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination54 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination55 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination56 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination57 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination[] combinationArray58 = new com.thealgorithms.backtracking.Combination[] { combination52, combination53, combination54, combination55, combination56, combination57 };
        com.thealgorithms.backtracking.Combination[][] combinationArray59 = new com.thealgorithms.backtracking.Combination[][] { combinationArray51, combinationArray58 };
        com.thealgorithms.backtracking.Combination combination60 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination61 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination62 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination63 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination64 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination65 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination[] combinationArray66 = new com.thealgorithms.backtracking.Combination[] { combination60, combination61, combination62, combination63, combination64, combination65 };
        com.thealgorithms.backtracking.Combination combination67 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination68 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination69 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination70 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination71 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination72 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination[] combinationArray73 = new com.thealgorithms.backtracking.Combination[] { combination67, combination68, combination69, combination70, combination71, combination72 };
        com.thealgorithms.backtracking.Combination[][] combinationArray74 = new com.thealgorithms.backtracking.Combination[][] { combinationArray66, combinationArray73 };
        com.thealgorithms.backtracking.Combination[][][] combinationArray75 = new com.thealgorithms.backtracking.Combination[][][] { combinationArray14, combinationArray29, combinationArray44, combinationArray59, combinationArray74 };
        com.thealgorithms.backtracking.Combination[][][][] combinationArray76 = new com.thealgorithms.backtracking.Combination[][][][] { combinationArray75 };
        java.util.List<java.util.TreeSet<com.thealgorithms.backtracking.Combination[][][]>> combinationArraySetList78 = com.thealgorithms.backtracking.Combination.combination(combinationArray76, 2);
        java.lang.Class<?> wildcardClass79 = combinationArraySetList78.getClass();
        org.junit.Assert.assertNotNull(combinationArray6);
        org.junit.Assert.assertNotNull(combinationArray13);
        org.junit.Assert.assertNotNull(combinationArray14);
        org.junit.Assert.assertNotNull(combinationArray21);
        org.junit.Assert.assertNotNull(combinationArray28);
        org.junit.Assert.assertNotNull(combinationArray29);
        org.junit.Assert.assertNotNull(combinationArray36);
        org.junit.Assert.assertNotNull(combinationArray43);
        org.junit.Assert.assertNotNull(combinationArray44);
        org.junit.Assert.assertNotNull(combinationArray51);
        org.junit.Assert.assertNotNull(combinationArray58);
        org.junit.Assert.assertNotNull(combinationArray59);
        org.junit.Assert.assertNotNull(combinationArray66);
        org.junit.Assert.assertNotNull(combinationArray73);
        org.junit.Assert.assertNotNull(combinationArray74);
        org.junit.Assert.assertNotNull(combinationArray75);
        org.junit.Assert.assertNotNull(combinationArray76);
        org.junit.Assert.assertNotNull(combinationArraySetList78);
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test1472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1472");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.util.TreeSet<java.lang.String>> strSetList4 = com.thealgorithms.backtracking.Combination.combination(strArray2, (int) '#');
        java.util.List<java.util.TreeSet<java.lang.constant.ConstantDesc>> constantDescSetList6 = com.thealgorithms.backtracking.Combination.combination((java.lang.constant.ConstantDesc[]) strArray2, (int) (short) 0);
        java.util.List<java.util.TreeSet<java.lang.String>> strSetList8 = com.thealgorithms.backtracking.Combination.combination(strArray2, (int) (byte) 100);
        java.util.List<java.util.TreeSet<java.lang.Comparable<java.lang.String>>> strComparableSetList10 = com.thealgorithms.backtracking.Combination.combination((java.lang.Comparable<java.lang.String>[]) strArray2, (int) (byte) 10);
        java.lang.Class<?> wildcardClass11 = strArray2.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strSetList4);
        org.junit.Assert.assertNull(constantDescSetList6);
        org.junit.Assert.assertNotNull(strSetList8);
        org.junit.Assert.assertNotNull(strComparableSetList10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1473");
        com.thealgorithms.backtracking.Combination[][][][][][][][][][] combinationArray0 = new com.thealgorithms.backtracking.Combination[][][][][][][][][][] {};
        com.thealgorithms.backtracking.Combination[][][][][][][][][][] combinationArray1 = new com.thealgorithms.backtracking.Combination[][][][][][][][][][] {};
        com.thealgorithms.backtracking.Combination[][][][][][][][][][] combinationArray2 = new com.thealgorithms.backtracking.Combination[][][][][][][][][][] {};
        com.thealgorithms.backtracking.Combination[][][][][][][][][][] combinationArray3 = new com.thealgorithms.backtracking.Combination[][][][][][][][][][] {};
        com.thealgorithms.backtracking.Combination[][][][][][][][][][][] combinationArray4 = new com.thealgorithms.backtracking.Combination[][][][][][][][][][][] { combinationArray0, combinationArray1, combinationArray2, combinationArray3 };
        java.util.List<java.util.TreeSet<com.thealgorithms.backtracking.Combination[][][][][][][][][][]>> combinationArraySetList6 = com.thealgorithms.backtracking.Combination.combination(combinationArray4, (int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.TreeSet<com.thealgorithms.backtracking.Combination[][][][][][][][][][]>> combinationArraySetList8 = com.thealgorithms.backtracking.Combination.combination(combinationArray4, 5);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(combinationArray0);
        org.junit.Assert.assertNotNull(combinationArray1);
        org.junit.Assert.assertNotNull(combinationArray2);
        org.junit.Assert.assertNotNull(combinationArray3);
        org.junit.Assert.assertNotNull(combinationArray4);
        org.junit.Assert.assertNull(combinationArraySetList6);
    }

    @Test
    public void test1474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1474");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.util.TreeSet<java.lang.String>> strSetList4 = com.thealgorithms.backtracking.Combination.combination(strArray2, (int) '#');
        java.util.List<java.util.TreeSet<java.lang.CharSequence>> charSequenceSetList6 = com.thealgorithms.backtracking.Combination.combination((java.lang.CharSequence[]) strArray2, (int) (byte) 1);
        java.util.List<java.util.TreeSet<java.lang.CharSequence>> charSequenceSetList8 = com.thealgorithms.backtracking.Combination.combination((java.lang.CharSequence[]) strArray2, 5);
        java.util.List<java.util.TreeSet<java.lang.constant.Constable>> constableSetList10 = com.thealgorithms.backtracking.Combination.combination((java.lang.constant.Constable[]) strArray2, (-1));
        java.lang.Class<?> wildcardClass11 = constableSetList10.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strSetList4);
        org.junit.Assert.assertNotNull(charSequenceSetList6);
        org.junit.Assert.assertNotNull(charSequenceSetList8);
        org.junit.Assert.assertNotNull(constableSetList10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1475");
        java.util.List[] listArray1 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[] strSetListArray2 = (java.util.List<java.util.TreeSet<java.lang.String>>[]) listArray1;
        java.util.List[] listArray4 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[] strSetListArray5 = (java.util.List<java.util.TreeSet<java.lang.String>>[]) listArray4;
        java.util.List[][] listArray7 = new java.util.List[2][];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[][] strSetListArray8 = (java.util.List<java.util.TreeSet<java.lang.String>>[][]) listArray7;
        strSetListArray8[0] = strSetListArray2;
        strSetListArray8[1] = strSetListArray5;
        java.util.List[][][] listArray14 = new java.util.List[1][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[][][] strSetListArray15 = (java.util.List<java.util.TreeSet<java.lang.String>>[][][]) listArray14;
        strSetListArray15[0] = strSetListArray8;
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[][]>> listArraySetList19 = com.thealgorithms.backtracking.Combination.combination(strSetListArray15, (int) (short) 10);
        java.util.List<java.util.TreeSet<java.util.Collection[][]>> collectionArraySetList21 = com.thealgorithms.backtracking.Combination.combination((java.util.Collection[][][]) strSetListArray15, 100);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.TreeSet<java.util.Collection[][]>> collectionArraySetList23 = com.thealgorithms.backtracking.Combination.combination((java.util.Collection[][][]) strSetListArray15, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strSetListArray2);
        org.junit.Assert.assertNotNull(listArray4);
        org.junit.Assert.assertNotNull(strSetListArray5);
        org.junit.Assert.assertNotNull(listArray7);
        org.junit.Assert.assertNotNull(strSetListArray8);
        org.junit.Assert.assertNotNull(listArray14);
        org.junit.Assert.assertNotNull(strSetListArray15);
        org.junit.Assert.assertNotNull(listArraySetList19);
        org.junit.Assert.assertNotNull(collectionArraySetList21);
    }

    @Test
    public void test1476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1476");
        com.thealgorithms.backtracking.Combination[][][][][][][][][] combinationArray0 = new com.thealgorithms.backtracking.Combination[][][][][][][][][] {};
        java.util.List<java.util.TreeSet<com.thealgorithms.backtracking.Combination[][][][][][][][]>> combinationArraySetList2 = com.thealgorithms.backtracking.Combination.combination(combinationArray0, (int) (byte) 100);
        java.lang.Class<?> wildcardClass3 = combinationArray0.getClass();
        org.junit.Assert.assertNotNull(combinationArray0);
        org.junit.Assert.assertNotNull(combinationArraySetList2);
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test1477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1477");
        java.lang.String[][][] strArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.TreeSet<java.lang.String[][]>> strArraySetList2 = com.thealgorithms.backtracking.Combination.combination(strArray0, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1478");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.util.TreeSet<java.lang.String>> strSetList4 = com.thealgorithms.backtracking.Combination.combination(strArray2, (int) '#');
        java.util.List<java.util.TreeSet<java.lang.constant.ConstantDesc>> constantDescSetList6 = com.thealgorithms.backtracking.Combination.combination((java.lang.constant.ConstantDesc[]) strArray2, 1);
        java.util.List<java.util.TreeSet<java.lang.String>> strSetList8 = com.thealgorithms.backtracking.Combination.combination(strArray2, (int) (byte) -1);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "", "", "" };
        java.util.List<java.util.TreeSet<java.lang.Comparable<java.lang.String>>> strComparableSetList17 = com.thealgorithms.backtracking.Combination.combination((java.lang.Comparable<java.lang.String>[]) strArray15, (int) (byte) 1);
        java.util.List<java.util.TreeSet<java.io.Serializable>> serializableSetList19 = com.thealgorithms.backtracking.Combination.combination((java.io.Serializable[]) strArray15, (int) '4');
        java.util.List<java.util.TreeSet<java.lang.Object>> objSetList21 = com.thealgorithms.backtracking.Combination.combination((java.lang.Object[]) strArray15, (int) '#');
        java.util.List<java.util.TreeSet<java.lang.Comparable<java.lang.String>>> strComparableSetList23 = com.thealgorithms.backtracking.Combination.combination((java.lang.Comparable<java.lang.String>[]) strArray15, 100);
        java.util.List<java.util.TreeSet<java.lang.String>> strSetList25 = com.thealgorithms.backtracking.Combination.combination(strArray15, (int) '4');
        java.lang.String[] strArray28 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.util.TreeSet<java.lang.String>> strSetList30 = com.thealgorithms.backtracking.Combination.combination(strArray28, (int) '#');
        java.util.List<java.util.TreeSet<java.lang.CharSequence>> charSequenceSetList32 = com.thealgorithms.backtracking.Combination.combination((java.lang.CharSequence[]) strArray28, 10);
        java.util.List<java.util.TreeSet<java.lang.constant.Constable>> constableSetList34 = com.thealgorithms.backtracking.Combination.combination((java.lang.constant.Constable[]) strArray28, (int) (byte) 1);
        java.util.List<java.util.TreeSet<java.lang.String>> strSetList36 = com.thealgorithms.backtracking.Combination.combination(strArray28, (int) (short) 1);
        java.lang.String[] strArray39 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.util.TreeSet<java.lang.String>> strSetList41 = com.thealgorithms.backtracking.Combination.combination(strArray39, (int) '#');
        java.lang.String[] strArray44 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.util.TreeSet<java.lang.String>> strSetList46 = com.thealgorithms.backtracking.Combination.combination(strArray44, (int) '#');
        java.util.List[] listArray48 = new java.util.List[5];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[] strSetListArray49 = (java.util.List<java.util.TreeSet<java.lang.String>>[]) listArray48;
        strSetListArray49[0] = strSetList8;
        strSetListArray49[1] = strSetList25;
        strSetListArray49[2] = strSetList36;
        strSetListArray49[3] = strSetList41;
        strSetListArray49[4] = strSetList46;
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>>> setListSetList61 = com.thealgorithms.backtracking.Combination.combination(strSetListArray49, (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.TreeSet<java.lang.Iterable<java.util.TreeSet<java.lang.String>>>> setIterableSetList63 = com.thealgorithms.backtracking.Combination.combination((java.lang.Iterable<java.util.TreeSet<java.lang.String>>[]) strSetListArray49, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strSetList4);
        org.junit.Assert.assertNotNull(constantDescSetList6);
        org.junit.Assert.assertNotNull(strSetList8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strComparableSetList17);
        org.junit.Assert.assertNotNull(serializableSetList19);
        org.junit.Assert.assertNotNull(objSetList21);
        org.junit.Assert.assertNotNull(strComparableSetList23);
        org.junit.Assert.assertNotNull(strSetList25);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(strSetList30);
        org.junit.Assert.assertNotNull(charSequenceSetList32);
        org.junit.Assert.assertNotNull(constableSetList34);
        org.junit.Assert.assertNotNull(strSetList36);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(strSetList41);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(strSetList46);
        org.junit.Assert.assertNotNull(listArray48);
        org.junit.Assert.assertNotNull(strSetListArray49);
        org.junit.Assert.assertNull(setListSetList61);
    }

    @Test
    public void test1479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1479");
        java.util.List[][] listArray1 = new java.util.List[0][];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[][] strSetListArray2 = (java.util.List<java.util.TreeSet<java.lang.String>>[][]) listArray1;
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[]>> listArraySetList4 = com.thealgorithms.backtracking.Combination.combination(strSetListArray2, (int) (short) -1);
        java.util.List<java.util.TreeSet<java.lang.Iterable<java.util.TreeSet<java.lang.String>>[]>> iterableArraySetList6 = com.thealgorithms.backtracking.Combination.combination((java.lang.Iterable<java.util.TreeSet<java.lang.String>>[][]) strSetListArray2, 2);
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[]>> listArraySetList8 = com.thealgorithms.backtracking.Combination.combination(strSetListArray2, 10);
        java.util.List<java.util.TreeSet<java.util.Collection[]>> collectionArraySetList10 = com.thealgorithms.backtracking.Combination.combination((java.util.Collection[][]) strSetListArray2, (int) 'a');
        java.lang.Class<?> wildcardClass11 = collectionArraySetList10.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strSetListArray2);
        org.junit.Assert.assertNotNull(listArraySetList4);
        org.junit.Assert.assertNotNull(iterableArraySetList6);
        org.junit.Assert.assertNotNull(listArraySetList8);
        org.junit.Assert.assertNotNull(collectionArraySetList10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1480");
        java.util.List[] listArray1 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[] strSetListArray2 = (java.util.List<java.util.TreeSet<java.lang.String>>[]) listArray1;
        java.util.List[] listArray4 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[] strSetListArray5 = (java.util.List<java.util.TreeSet<java.lang.String>>[]) listArray4;
        java.util.List[][] listArray7 = new java.util.List[2][];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[][] strSetListArray8 = (java.util.List<java.util.TreeSet<java.lang.String>>[][]) listArray7;
        strSetListArray8[0] = strSetListArray2;
        strSetListArray8[1] = strSetListArray5;
        java.util.List[][][] listArray14 = new java.util.List[1][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[][][] strSetListArray15 = (java.util.List<java.util.TreeSet<java.lang.String>>[][][]) listArray14;
        strSetListArray15[0] = strSetListArray8;
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[][]>> listArraySetList19 = com.thealgorithms.backtracking.Combination.combination(strSetListArray15, (int) (short) 10);
        java.util.List<java.util.TreeSet<java.util.Collection[][]>> collectionArraySetList21 = com.thealgorithms.backtracking.Combination.combination((java.util.Collection[][][]) strSetListArray15, (int) '#');
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[][]>> listArraySetList23 = com.thealgorithms.backtracking.Combination.combination(strSetListArray15, 4);
        java.util.List<java.util.TreeSet<java.util.Collection[][]>> collectionArraySetList25 = com.thealgorithms.backtracking.Combination.combination((java.util.Collection[][][]) strSetListArray15, 4);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[][]>> listArraySetList27 = com.thealgorithms.backtracking.Combination.combination(strSetListArray15, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strSetListArray2);
        org.junit.Assert.assertNotNull(listArray4);
        org.junit.Assert.assertNotNull(strSetListArray5);
        org.junit.Assert.assertNotNull(listArray7);
        org.junit.Assert.assertNotNull(strSetListArray8);
        org.junit.Assert.assertNotNull(listArray14);
        org.junit.Assert.assertNotNull(strSetListArray15);
        org.junit.Assert.assertNotNull(listArraySetList19);
        org.junit.Assert.assertNotNull(collectionArraySetList21);
        org.junit.Assert.assertNotNull(listArraySetList23);
        org.junit.Assert.assertNotNull(collectionArraySetList25);
    }

    @Test
    public void test1481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1481");
        java.lang.reflect.GenericDeclaration[][][] genericDeclarationArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration[][]>> genericDeclarationArraySetList2 = com.thealgorithms.backtracking.Combination.combination(genericDeclarationArray0, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1482");
        java.util.List[][][][] listArray1 = new java.util.List[0][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[][][][] strSetListArray2 = (java.util.List<java.util.TreeSet<java.lang.String>>[][][][]) listArray1;
        java.util.List[][][][][] listArray4 = new java.util.List[1][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[][][][][] strSetListArray5 = (java.util.List<java.util.TreeSet<java.lang.String>>[][][][][]) listArray4;
        strSetListArray5[0] = strSetListArray2;
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[][][][]>> listArraySetList9 = com.thealgorithms.backtracking.Combination.combination(strSetListArray5, 5);
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[][][][]>> listArraySetList11 = com.thealgorithms.backtracking.Combination.combination(strSetListArray5, 2);
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[][][][]>> listArraySetList13 = com.thealgorithms.backtracking.Combination.combination(strSetListArray5, (int) (short) 10);
        java.lang.Class<?> wildcardClass14 = listArraySetList13.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strSetListArray2);
        org.junit.Assert.assertNotNull(listArray4);
        org.junit.Assert.assertNotNull(strSetListArray5);
        org.junit.Assert.assertNotNull(listArraySetList9);
        org.junit.Assert.assertNotNull(listArraySetList11);
        org.junit.Assert.assertNotNull(listArraySetList13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test1483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1483");
        com.thealgorithms.backtracking.Combination combination0 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination1 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination2 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination3 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination4 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination5 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination[] combinationArray6 = new com.thealgorithms.backtracking.Combination[] { combination0, combination1, combination2, combination3, combination4, combination5 };
        com.thealgorithms.backtracking.Combination combination7 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination8 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination9 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination10 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination11 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination12 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination[] combinationArray13 = new com.thealgorithms.backtracking.Combination[] { combination7, combination8, combination9, combination10, combination11, combination12 };
        com.thealgorithms.backtracking.Combination[][] combinationArray14 = new com.thealgorithms.backtracking.Combination[][] { combinationArray6, combinationArray13 };
        com.thealgorithms.backtracking.Combination combination15 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination16 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination17 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination18 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination19 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination20 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination[] combinationArray21 = new com.thealgorithms.backtracking.Combination[] { combination15, combination16, combination17, combination18, combination19, combination20 };
        com.thealgorithms.backtracking.Combination combination22 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination23 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination24 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination25 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination26 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination27 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination[] combinationArray28 = new com.thealgorithms.backtracking.Combination[] { combination22, combination23, combination24, combination25, combination26, combination27 };
        com.thealgorithms.backtracking.Combination[][] combinationArray29 = new com.thealgorithms.backtracking.Combination[][] { combinationArray21, combinationArray28 };
        com.thealgorithms.backtracking.Combination combination30 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination31 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination32 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination33 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination34 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination35 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination[] combinationArray36 = new com.thealgorithms.backtracking.Combination[] { combination30, combination31, combination32, combination33, combination34, combination35 };
        com.thealgorithms.backtracking.Combination combination37 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination38 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination39 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination40 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination41 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination42 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination[] combinationArray43 = new com.thealgorithms.backtracking.Combination[] { combination37, combination38, combination39, combination40, combination41, combination42 };
        com.thealgorithms.backtracking.Combination[][] combinationArray44 = new com.thealgorithms.backtracking.Combination[][] { combinationArray36, combinationArray43 };
        com.thealgorithms.backtracking.Combination combination45 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination46 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination47 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination48 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination49 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination50 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination[] combinationArray51 = new com.thealgorithms.backtracking.Combination[] { combination45, combination46, combination47, combination48, combination49, combination50 };
        com.thealgorithms.backtracking.Combination combination52 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination53 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination54 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination55 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination56 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination57 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination[] combinationArray58 = new com.thealgorithms.backtracking.Combination[] { combination52, combination53, combination54, combination55, combination56, combination57 };
        com.thealgorithms.backtracking.Combination[][] combinationArray59 = new com.thealgorithms.backtracking.Combination[][] { combinationArray51, combinationArray58 };
        com.thealgorithms.backtracking.Combination combination60 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination61 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination62 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination63 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination64 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination65 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination[] combinationArray66 = new com.thealgorithms.backtracking.Combination[] { combination60, combination61, combination62, combination63, combination64, combination65 };
        com.thealgorithms.backtracking.Combination combination67 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination68 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination69 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination70 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination71 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination combination72 = new com.thealgorithms.backtracking.Combination();
        com.thealgorithms.backtracking.Combination[] combinationArray73 = new com.thealgorithms.backtracking.Combination[] { combination67, combination68, combination69, combination70, combination71, combination72 };
        com.thealgorithms.backtracking.Combination[][] combinationArray74 = new com.thealgorithms.backtracking.Combination[][] { combinationArray66, combinationArray73 };
        com.thealgorithms.backtracking.Combination[][][] combinationArray75 = new com.thealgorithms.backtracking.Combination[][][] { combinationArray14, combinationArray29, combinationArray44, combinationArray59, combinationArray74 };
        com.thealgorithms.backtracking.Combination[][][][] combinationArray76 = new com.thealgorithms.backtracking.Combination[][][][] { combinationArray75 };
        java.util.List<java.util.TreeSet<com.thealgorithms.backtracking.Combination[][][]>> combinationArraySetList78 = com.thealgorithms.backtracking.Combination.combination(combinationArray76, 2);
        java.util.List<java.util.TreeSet<com.thealgorithms.backtracking.Combination[][][]>> combinationArraySetList80 = com.thealgorithms.backtracking.Combination.combination(combinationArray76, (int) (byte) 100);
        java.util.List<java.util.TreeSet<com.thealgorithms.backtracking.Combination[][][]>> combinationArraySetList82 = com.thealgorithms.backtracking.Combination.combination(combinationArray76, 3);
        java.util.List<java.util.TreeSet<com.thealgorithms.backtracking.Combination[][][]>> combinationArraySetList84 = com.thealgorithms.backtracking.Combination.combination(combinationArray76, 6);
        java.util.List<java.util.TreeSet<com.thealgorithms.backtracking.Combination[][][]>> combinationArraySetList86 = com.thealgorithms.backtracking.Combination.combination(combinationArray76, (int) ' ');
        java.lang.Class<?> wildcardClass87 = combinationArray76.getClass();
        org.junit.Assert.assertNotNull(combinationArray6);
        org.junit.Assert.assertNotNull(combinationArray13);
        org.junit.Assert.assertNotNull(combinationArray14);
        org.junit.Assert.assertNotNull(combinationArray21);
        org.junit.Assert.assertNotNull(combinationArray28);
        org.junit.Assert.assertNotNull(combinationArray29);
        org.junit.Assert.assertNotNull(combinationArray36);
        org.junit.Assert.assertNotNull(combinationArray43);
        org.junit.Assert.assertNotNull(combinationArray44);
        org.junit.Assert.assertNotNull(combinationArray51);
        org.junit.Assert.assertNotNull(combinationArray58);
        org.junit.Assert.assertNotNull(combinationArray59);
        org.junit.Assert.assertNotNull(combinationArray66);
        org.junit.Assert.assertNotNull(combinationArray73);
        org.junit.Assert.assertNotNull(combinationArray74);
        org.junit.Assert.assertNotNull(combinationArray75);
        org.junit.Assert.assertNotNull(combinationArray76);
        org.junit.Assert.assertNotNull(combinationArraySetList78);
        org.junit.Assert.assertNotNull(combinationArraySetList80);
        org.junit.Assert.assertNotNull(combinationArraySetList82);
        org.junit.Assert.assertNotNull(combinationArraySetList84);
        org.junit.Assert.assertNotNull(combinationArraySetList86);
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test1484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1484");
        java.lang.Class[][] classArray1 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray2 = (java.lang.Class<?>[][]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>[]>> wildcardClassArraySetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (byte) 1);
        java.util.List<java.util.TreeSet<java.lang.constant.Constable[]>> constableArraySetList6 = com.thealgorithms.backtracking.Combination.combination((java.lang.constant.Constable[][]) wildcardClassArray2, (int) (byte) 0);
        java.util.List<java.util.TreeSet<java.lang.Class<?>[]>> wildcardClassArraySetList8 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, 4);
        java.lang.Class<?> wildcardClass9 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList4);
        org.junit.Assert.assertNull(constableArraySetList6);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1485");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>>> wildcardClassSetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (byte) 0);
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration>> genericDeclarationSetList6 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2, (int) (byte) 1);
        java.util.List<java.util.TreeSet<java.lang.invoke.TypeDescriptor>> typeDescriptorSetList8 = com.thealgorithms.backtracking.Combination.combination((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2, (int) ' ');
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration>> genericDeclarationSetList10 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2, 0);
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration>> genericDeclarationSetList12 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2, 0);
        java.util.List<java.util.TreeSet<java.lang.invoke.TypeDescriptor>> typeDescriptorSetList14 = com.thealgorithms.backtracking.Combination.combination((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2, 100);
        java.util.List<java.util.TreeSet<java.lang.Class<?>>> wildcardClassSetList16 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) '#');
        java.util.List<java.util.TreeSet<java.lang.reflect.Type>> typeSetList18 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.Type[]) wildcardClassArray2, 10);
        java.util.List<java.util.TreeSet<java.lang.Class<?>>> wildcardClassSetList20 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, 10);
        java.util.List<java.util.TreeSet<java.lang.invoke.TypeDescriptor>> typeDescriptorSetList22 = com.thealgorithms.backtracking.Combination.combination((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2, (int) '#');
        java.lang.Class<?> wildcardClass23 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNull(wildcardClassSetList4);
        org.junit.Assert.assertNotNull(genericDeclarationSetList6);
        org.junit.Assert.assertNotNull(typeDescriptorSetList8);
        org.junit.Assert.assertNull(genericDeclarationSetList10);
        org.junit.Assert.assertNull(genericDeclarationSetList12);
        org.junit.Assert.assertNotNull(typeDescriptorSetList14);
        org.junit.Assert.assertNotNull(wildcardClassSetList16);
        org.junit.Assert.assertNotNull(typeSetList18);
        org.junit.Assert.assertNotNull(wildcardClassSetList20);
        org.junit.Assert.assertNotNull(typeDescriptorSetList22);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test1486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1486");
        java.util.List[][][][][][][] listArray1 = new java.util.List[0][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[][][][][][][] strSetListArray2 = (java.util.List<java.util.TreeSet<java.lang.String>>[][][][][][][]) listArray1;
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[][][][][][]>> listArraySetList4 = com.thealgorithms.backtracking.Combination.combination(strSetListArray2, (int) (short) 0);
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[][][][][][]>> listArraySetList6 = com.thealgorithms.backtracking.Combination.combination(strSetListArray2, (int) (byte) 100);
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[][][][][][]>> listArraySetList8 = com.thealgorithms.backtracking.Combination.combination(strSetListArray2, 5);
        java.lang.Class<?> wildcardClass9 = strSetListArray2.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strSetListArray2);
        org.junit.Assert.assertNull(listArraySetList4);
        org.junit.Assert.assertNotNull(listArraySetList6);
        org.junit.Assert.assertNotNull(listArraySetList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1487");
        java.lang.String[] strArray1 = new java.lang.String[] { "hi!" };
        java.lang.String[][] strArray2 = new java.lang.String[][] { strArray1 };
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!" };
        java.lang.String[][] strArray5 = new java.lang.String[][] { strArray4 };
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!" };
        java.lang.String[][] strArray8 = new java.lang.String[][] { strArray7 };
        java.lang.String[] strArray10 = new java.lang.String[] { "hi!" };
        java.lang.String[][] strArray11 = new java.lang.String[][] { strArray10 };
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!" };
        java.lang.String[][] strArray14 = new java.lang.String[][] { strArray13 };
        java.lang.String[] strArray16 = new java.lang.String[] { "hi!" };
        java.lang.String[][] strArray17 = new java.lang.String[][] { strArray16 };
        java.lang.String[][][] strArray18 = new java.lang.String[][][] { strArray2, strArray5, strArray8, strArray11, strArray14, strArray17 };
        java.lang.String[][][][] strArray19 = new java.lang.String[][][][] { strArray18 };
        java.util.List<java.util.TreeSet<java.lang.String[][][]>> strArraySetList21 = com.thealgorithms.backtracking.Combination.combination(strArray19, (int) (byte) 0);
        java.util.List<java.util.TreeSet<java.lang.String[][][]>> strArraySetList23 = com.thealgorithms.backtracking.Combination.combination(strArray19, 0);
        java.util.List<java.util.TreeSet<java.lang.String[][][]>> strArraySetList25 = com.thealgorithms.backtracking.Combination.combination(strArray19, (int) '4');
        java.util.List<java.util.TreeSet<java.lang.String[][][]>> strArraySetList27 = com.thealgorithms.backtracking.Combination.combination(strArray19, (int) (byte) 100);
        java.util.List<java.util.TreeSet<java.lang.String[][][]>> strArraySetList29 = com.thealgorithms.backtracking.Combination.combination(strArray19, (int) (byte) 100);
        java.util.List<java.util.TreeSet<java.lang.String[][][]>> strArraySetList31 = com.thealgorithms.backtracking.Combination.combination(strArray19, 5);
        java.lang.Class<?> wildcardClass32 = strArray19.getClass();
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNull(strArraySetList21);
        org.junit.Assert.assertNull(strArraySetList23);
        org.junit.Assert.assertNotNull(strArraySetList25);
        org.junit.Assert.assertNotNull(strArraySetList27);
        org.junit.Assert.assertNotNull(strArraySetList29);
        org.junit.Assert.assertNotNull(strArraySetList31);
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test1488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1488");
        com.thealgorithms.backtracking.Combination[][][][][][][][][][] combinationArray0 = new com.thealgorithms.backtracking.Combination[][][][][][][][][][] {};
        java.util.List<java.util.TreeSet<com.thealgorithms.backtracking.Combination[][][][][][][][][]>> combinationArraySetList2 = com.thealgorithms.backtracking.Combination.combination(combinationArray0, 0);
        java.util.List<java.util.TreeSet<com.thealgorithms.backtracking.Combination[][][][][][][][][]>> combinationArraySetList4 = com.thealgorithms.backtracking.Combination.combination(combinationArray0, 6);
        java.lang.Class<?> wildcardClass5 = combinationArray0.getClass();
        org.junit.Assert.assertNotNull(combinationArray0);
        org.junit.Assert.assertNull(combinationArraySetList2);
        org.junit.Assert.assertNotNull(combinationArraySetList4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test1489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1489");
        java.util.List[][] listArray1 = new java.util.List[0][];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[][] strSetListArray2 = (java.util.List<java.util.TreeSet<java.lang.String>>[][]) listArray1;
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[]>> listArraySetList4 = com.thealgorithms.backtracking.Combination.combination(strSetListArray2, (int) (short) -1);
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[]>> listArraySetList6 = com.thealgorithms.backtracking.Combination.combination(strSetListArray2, (-1));
        java.util.List<java.util.TreeSet<java.lang.Iterable<java.util.TreeSet<java.lang.String>>[]>> iterableArraySetList8 = com.thealgorithms.backtracking.Combination.combination((java.lang.Iterable<java.util.TreeSet<java.lang.String>>[][]) strSetListArray2, (int) '4');
        java.util.List<java.util.TreeSet<java.util.Collection[]>> collectionArraySetList10 = com.thealgorithms.backtracking.Combination.combination((java.util.Collection[][]) strSetListArray2, 100);
        java.util.List<java.util.TreeSet<java.lang.Iterable<java.util.TreeSet<java.lang.String>>[]>> iterableArraySetList12 = com.thealgorithms.backtracking.Combination.combination((java.lang.Iterable<java.util.TreeSet<java.lang.String>>[][]) strSetListArray2, (int) (byte) -1);
        java.util.List<java.util.TreeSet<java.util.Collection[]>> collectionArraySetList14 = com.thealgorithms.backtracking.Combination.combination((java.util.Collection[][]) strSetListArray2, (int) ' ');
        java.lang.Class<?> wildcardClass15 = collectionArraySetList14.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strSetListArray2);
        org.junit.Assert.assertNotNull(listArraySetList4);
        org.junit.Assert.assertNotNull(listArraySetList6);
        org.junit.Assert.assertNotNull(iterableArraySetList8);
        org.junit.Assert.assertNotNull(collectionArraySetList10);
        org.junit.Assert.assertNotNull(iterableArraySetList12);
        org.junit.Assert.assertNotNull(collectionArraySetList14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test1490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1490");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>>> wildcardClassSetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (byte) 0);
        java.util.List<java.util.TreeSet<java.lang.invoke.TypeDescriptor>> typeDescriptorSetList6 = com.thealgorithms.backtracking.Combination.combination((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2, (int) (byte) 100);
        java.util.List<java.util.TreeSet<java.lang.invoke.TypeDescriptor>> typeDescriptorSetList8 = com.thealgorithms.backtracking.Combination.combination((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2, (int) (short) 10);
        java.util.List<java.util.TreeSet<java.lang.reflect.Type>> typeSetList10 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.Type[]) wildcardClassArray2, (int) (byte) 1);
        java.util.List<java.util.TreeSet<java.lang.reflect.AnnotatedElement>> annotatedElementSetList12 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2, (int) (short) 10);
        java.util.List<java.util.TreeSet<java.lang.reflect.Type>> typeSetList14 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.Type[]) wildcardClassArray2, (int) '#');
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration>> genericDeclarationSetList16 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2, (int) (short) 0);
        java.util.List<java.util.TreeSet<java.lang.reflect.AnnotatedElement>> annotatedElementSetList18 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2, (int) '4');
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNull(wildcardClassSetList4);
        org.junit.Assert.assertNotNull(typeDescriptorSetList6);
        org.junit.Assert.assertNotNull(typeDescriptorSetList8);
        org.junit.Assert.assertNotNull(typeSetList10);
        org.junit.Assert.assertNotNull(annotatedElementSetList12);
        org.junit.Assert.assertNotNull(typeSetList14);
        org.junit.Assert.assertNull(genericDeclarationSetList16);
        org.junit.Assert.assertNotNull(annotatedElementSetList18);
    }

    @Test
    public void test1491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1491");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>>> wildcardClassSetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (byte) 0);
        java.util.List<java.util.TreeSet<java.lang.invoke.TypeDescriptor>> typeDescriptorSetList6 = com.thealgorithms.backtracking.Combination.combination((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2, 0);
        java.util.List<java.util.TreeSet<java.lang.reflect.AnnotatedElement>> annotatedElementSetList8 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2, (int) (byte) -1);
        java.util.List<java.util.TreeSet<java.lang.reflect.Type>> typeSetList10 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.Type[]) wildcardClassArray2, 2);
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration>> genericDeclarationSetList12 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2, (int) (byte) 0);
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration>> genericDeclarationSetList14 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2, (int) (byte) 1);
        java.lang.Class<?> wildcardClass15 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNull(wildcardClassSetList4);
        org.junit.Assert.assertNull(typeDescriptorSetList6);
        org.junit.Assert.assertNotNull(annotatedElementSetList8);
        org.junit.Assert.assertNotNull(typeSetList10);
        org.junit.Assert.assertNull(genericDeclarationSetList12);
        org.junit.Assert.assertNotNull(genericDeclarationSetList14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test1492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1492");
        java.lang.Class[][][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][][]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][][][][][][]>> wildcardClassArraySetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, 2);
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][][][][][][]>> wildcardClassArraySetList6 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (short) 100);
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][][][][][][]>> wildcardClassArraySetList8 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (byte) 10);
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][][][][][][]>> wildcardClassArraySetList10 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (byte) 10);
        java.lang.Class<?> wildcardClass11 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList4);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList6);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList8);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1493");
        java.lang.Class[][][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][][]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][][][][][][]>> wildcardClassArraySetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, 2);
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][][][][][][]>> wildcardClassArraySetList6 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (short) 100);
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][][][][][][]>> wildcardClassArraySetList8 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (byte) 100);
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][][][][][][]>> wildcardClassArraySetList10 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) 'a');
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][][][][][][]>> wildcardClassArraySetList12 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, 3);
        java.lang.Class<?> wildcardClass13 = wildcardClassArraySetList12.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList4);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList6);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList8);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList10);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1494");
        java.lang.invoke.TypeDescriptor[] typeDescriptorArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.TreeSet<java.lang.invoke.TypeDescriptor>> typeDescriptorSetList2 = com.thealgorithms.backtracking.Combination.combination(typeDescriptorArray0, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1495");
        java.lang.constant.ConstantDesc[] constantDescArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.TreeSet<java.lang.constant.ConstantDesc>> constantDescSetList2 = com.thealgorithms.backtracking.Combination.combination(constantDescArray0, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1496");
        com.thealgorithms.backtracking.Combination[][] combinationArray0 = new com.thealgorithms.backtracking.Combination[][] {};
        java.util.List<java.util.TreeSet<com.thealgorithms.backtracking.Combination[]>> combinationArraySetList2 = com.thealgorithms.backtracking.Combination.combination(combinationArray0, (int) (short) 0);
        java.util.List<java.util.TreeSet<com.thealgorithms.backtracking.Combination[]>> combinationArraySetList4 = com.thealgorithms.backtracking.Combination.combination(combinationArray0, (int) (byte) 1);
        java.util.List<java.util.TreeSet<com.thealgorithms.backtracking.Combination[]>> combinationArraySetList6 = com.thealgorithms.backtracking.Combination.combination(combinationArray0, (int) '4');
        java.util.List<java.util.TreeSet<com.thealgorithms.backtracking.Combination[]>> combinationArraySetList8 = com.thealgorithms.backtracking.Combination.combination(combinationArray0, 0);
        java.util.List<java.util.TreeSet<com.thealgorithms.backtracking.Combination[]>> combinationArraySetList10 = com.thealgorithms.backtracking.Combination.combination(combinationArray0, (int) (short) 0);
        java.util.List<java.util.TreeSet<com.thealgorithms.backtracking.Combination[]>> combinationArraySetList12 = com.thealgorithms.backtracking.Combination.combination(combinationArray0, (int) ' ');
        java.lang.Class<?> wildcardClass13 = combinationArraySetList12.getClass();
        org.junit.Assert.assertNotNull(combinationArray0);
        org.junit.Assert.assertNull(combinationArraySetList2);
        org.junit.Assert.assertNotNull(combinationArraySetList4);
        org.junit.Assert.assertNotNull(combinationArraySetList6);
        org.junit.Assert.assertNull(combinationArraySetList8);
        org.junit.Assert.assertNull(combinationArraySetList10);
        org.junit.Assert.assertNotNull(combinationArraySetList12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1497");
        java.util.List[][][][] listArray1 = new java.util.List[0][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.TreeSet<java.lang.String>>[][][][] strSetListArray2 = (java.util.List<java.util.TreeSet<java.lang.String>>[][][][]) listArray1;
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[][][]>> listArraySetList4 = com.thealgorithms.backtracking.Combination.combination(strSetListArray2, (int) (byte) 100);
        java.util.List<java.util.TreeSet<java.util.List<java.util.TreeSet<java.lang.String>>[][][]>> listArraySetList6 = com.thealgorithms.backtracking.Combination.combination(strSetListArray2, (int) (short) 100);
        java.lang.Class<?> wildcardClass7 = listArraySetList6.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strSetListArray2);
        org.junit.Assert.assertNotNull(listArraySetList4);
        org.junit.Assert.assertNotNull(listArraySetList6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test1498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1498");
        java.lang.Class[][][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][][]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][][][][][][]>> wildcardClassArraySetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, 2);
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][][][][][][]>> wildcardClassArraySetList6 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (short) 100);
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][][][][][][]>> wildcardClassArraySetList8 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (byte) 10);
        java.lang.Class<?> wildcardClass9 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList4);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList6);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1499");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>>> wildcardClassSetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (byte) 0);
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration>> genericDeclarationSetList6 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2, (int) (byte) 1);
        java.util.List<java.util.TreeSet<java.lang.invoke.TypeDescriptor>> typeDescriptorSetList8 = com.thealgorithms.backtracking.Combination.combination((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2, (int) ' ');
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration>> genericDeclarationSetList10 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2, 0);
        java.util.List<java.util.TreeSet<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>>> wildcardClassOfFieldSetList12 = com.thealgorithms.backtracking.Combination.combination((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) wildcardClassArray2, (int) (short) 1);
        java.util.List<java.util.TreeSet<java.lang.reflect.GenericDeclaration>> genericDeclarationSetList14 = com.thealgorithms.backtracking.Combination.combination((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2, (int) '#');
        java.lang.Class<?> wildcardClass15 = genericDeclarationSetList14.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNull(wildcardClassSetList4);
        org.junit.Assert.assertNotNull(genericDeclarationSetList6);
        org.junit.Assert.assertNotNull(typeDescriptorSetList8);
        org.junit.Assert.assertNull(genericDeclarationSetList10);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldSetList12);
        org.junit.Assert.assertNotNull(genericDeclarationSetList14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test1500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1500");
        java.lang.Class[][][][][] classArray1 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][]) classArray1;
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][][]>> wildcardClassArraySetList4 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (short) 10);
        java.util.List<java.util.TreeSet<java.lang.Class<?>[][][][]>> wildcardClassArraySetList6 = com.thealgorithms.backtracking.Combination.combination(wildcardClassArray2, (int) (byte) 10);
        java.lang.Class<?> wildcardClass7 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList4);
        org.junit.Assert.assertNotNull(wildcardClassArraySetList6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }
}


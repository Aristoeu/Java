package LinearDiophantineEquationsSolver;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest4 {

    public static boolean debug = false;

    @Test
    public void test2001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2001");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (short) 10, 10, 100);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution4 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        java.lang.String str5 = equation3.toString();
        int int6 = equation3.a();
        java.lang.Object obj7 = null;
        boolean boolean8 = equation3.equals(obj7);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution9 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        solution9.setX(97);
        org.junit.Assert.assertNotNull(solution4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Equation[a=10, b=10, c=100]" + "'", str5, "Equation[a=10, b=10, c=100]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10 + "'", int6 == 10);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(solution9);
    }

    @Test
    public void test2002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2002");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        java.lang.String str4 = equation3.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution5 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution7 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution7);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution11 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int12 = solution11.getY();
        solution11.setY((int) (byte) 1);
        gcdSolutionWrapper8.setSolution(solution11);
        int int16 = gcdSolutionWrapper8.getGcd();
        boolean boolean17 = solution5.equals((java.lang.Object) gcdSolutionWrapper8);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution18 = gcdSolutionWrapper8.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution22 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int23 = solution22.getY();
        solution22.setY((int) (byte) 1);
        boolean boolean27 = solution22.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper28 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution22);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution29 = gcdSolutionWrapper28.getSolution();
        java.lang.String str30 = gcdSolutionWrapper28.toString();
        gcdSolutionWrapper28.setGcd((int) (byte) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution35 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((-1), (int) '4');
        gcdSolutionWrapper28.setSolution(solution35);
        java.lang.String str37 = solution35.toString();
        gcdSolutionWrapper8.setSolution(solution35);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution39 = gcdSolutionWrapper8.getSolution();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str4, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertNotNull(solution5);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(solution18);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(solution29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str30, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Solution[x=-1, y=52]" + "'", str37, "Solution[x=-1, y=52]");
        org.junit.Assert.assertNotNull(solution39);
    }

    @Test
    public void test2003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2003");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int4 = equation3.c();
        int int5 = equation3.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int10 = solution9.getY();
        solution9.setY((int) (byte) 1);
        boolean boolean14 = solution9.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper15 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution9);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution16 = gcdSolutionWrapper15.getSolution();
        java.lang.String str17 = gcdSolutionWrapper15.toString();
        gcdSolutionWrapper15.setGcd((int) (byte) 1);
        boolean boolean20 = equation3.equals((java.lang.Object) gcdSolutionWrapper15);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution21 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        java.lang.String str22 = solution21.toString();
        int int23 = solution21.getX();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(solution16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str17, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(solution21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Solution[x=0, y=-35]" + "'", str22, "Solution[x=0, y=-35]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
    }

    @Test
    public void test2004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2004");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int5 = solution4.getY();
        java.lang.String str6 = solution4.toString();
        solution4.setX((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((-35), solution4);
        int int10 = gcdSolutionWrapper9.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution13 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (short) -1, 0);
        solution13.setX(1);
        gcdSolutionWrapper9.setSolution(solution13);
        solution13.setY((int) (byte) 10);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper19 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) -1, solution13);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Solution[x=97, y=1]" + "'", str6, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-35) + "'", int10 == (-35));
    }

    @Test
    public void test2005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2005");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation5 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution6 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation5);
        int int7 = solution6.getX();
        int int8 = solution6.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) 'a', solution6);
        java.lang.String str10 = solution6.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper11 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(52, solution6);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution13 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper14 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution13);
        gcdSolutionWrapper14.setGcd((int) ' ');
        gcdSolutionWrapper14.setGcd((int) (short) 1);
        java.lang.String str19 = gcdSolutionWrapper14.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution22 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int23 = solution22.getY();
        java.lang.String str24 = solution22.toString();
        solution22.setX((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation30 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int31 = equation30.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution32 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation30);
        boolean boolean33 = solution22.equals((java.lang.Object) solution32);
        boolean boolean35 = solution22.equals((java.lang.Object) false);
        gcdSolutionWrapper14.setSolution(solution22);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution39 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int40 = solution39.getY();
        java.lang.String str41 = solution39.toString();
        solution39.setX((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation47 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, 0, (int) (short) -1);
        boolean boolean48 = solution39.equals((java.lang.Object) equation47);
        int int49 = equation47.c();
        int int50 = equation47.a();
        boolean boolean51 = gcdSolutionWrapper14.equals((java.lang.Object) equation47);
        boolean boolean52 = gcdSolutionWrapper11.equals((java.lang.Object) gcdSolutionWrapper14);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution53 = gcdSolutionWrapper14.getSolution();
        solution53.setX(32);
        org.junit.Assert.assertNotNull(solution6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Solution[x=0, y=0]" + "'", str10, "Solution[x=0, y=0]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=null]" + "'", str19, "GcdSolutionWrapper[gcd=1, solution=null]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Solution[x=97, y=1]" + "'", str24, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 35 + "'", int31 == 35);
        org.junit.Assert.assertNotNull(solution32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Solution[x=97, y=1]" + "'", str41, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(solution53);
    }

    @Test
    public void test2006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2006");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((-1), 125, 1);
        int int4 = equation3.b();
        java.lang.String str5 = equation3.toString();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 125 + "'", int4 == 125);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Equation[a=-1, b=125, c=1]" + "'", str5, "Equation[a=-1, b=125, c=1]");
    }

    @Test
    public void test2007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2007");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (short) -1, 10, 10);
        java.lang.String str4 = equation3.toString();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Equation[a=-1, b=10, c=10]" + "'", str4, "Equation[a=-1, b=10, c=10]");
    }

    @Test
    public void test2008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2008");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) 1, (int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution6 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int7 = solution6.getY();
        solution6.setY((int) (byte) 1);
        boolean boolean11 = solution6.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper12 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution6);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution13 = gcdSolutionWrapper12.getSolution();
        java.lang.String str14 = gcdSolutionWrapper12.toString();
        gcdSolutionWrapper12.setGcd((int) (byte) 1);
        int int17 = gcdSolutionWrapper12.getGcd();
        boolean boolean18 = solution2.equals((java.lang.Object) gcdSolutionWrapper12);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution22 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int23 = solution22.getY();
        java.lang.String str24 = solution22.toString();
        solution22.setX((int) (short) 1);
        boolean boolean28 = solution22.equals((java.lang.Object) true);
        solution22.setY(32);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper31 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 10, solution22);
        java.lang.String str32 = gcdSolutionWrapper31.toString();
        boolean boolean33 = gcdSolutionWrapper12.equals((java.lang.Object) str32);
        java.lang.Class<?> wildcardClass34 = gcdSolutionWrapper12.getClass();
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(solution13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str14, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Solution[x=97, y=1]" + "'", str24, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "GcdSolutionWrapper[gcd=10, solution=Solution[x=1, y=32]]" + "'", str32, "GcdSolutionWrapper[gcd=10, solution=Solution[x=1, y=32]]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test2009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2009");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', 0, 100);
        int int4 = equation3.c();
        int int5 = equation3.a();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 100 + "'", int4 == 100);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 52 + "'", int5 == 52);
    }

    @Test
    public void test2010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2010");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution5 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation4);
        int int6 = solution5.getX();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation10 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        int int11 = equation10.c();
        int int12 = equation10.c();
        int int13 = equation10.a();
        boolean boolean14 = solution5.equals((java.lang.Object) equation10);
        int int15 = solution5.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper16 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) '4', solution5);
        java.lang.String str17 = gcdSolutionWrapper16.toString();
        org.junit.Assert.assertNotNull(solution5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "GcdSolutionWrapper[gcd=52, solution=Solution[x=0, y=0]]" + "'", str17, "GcdSolutionWrapper[gcd=52, solution=Solution[x=0, y=0]]");
    }

    @Test
    public void test2011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2011");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) '4', (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(0, solution3);
        java.lang.String str5 = gcdSolutionWrapper4.toString();
        int int6 = gcdSolutionWrapper4.getGcd();
        int int7 = gcdSolutionWrapper4.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution10 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) '4', (int) (byte) 0);
        gcdSolutionWrapper4.setSolution(solution10);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution14 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) '#', (int) (short) 1);
        boolean boolean15 = gcdSolutionWrapper4.equals((java.lang.Object) '#');
        int int16 = gcdSolutionWrapper4.getGcd();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]" + "'", str5, "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test2012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2012");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int5 = solution4.getY();
        solution4.setY((int) (byte) 1);
        boolean boolean9 = solution4.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper10 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution4);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution13 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int14 = solution13.getY();
        java.lang.String str15 = solution13.toString();
        boolean boolean17 = solution13.equals((java.lang.Object) (-1L));
        gcdSolutionWrapper10.setSolution(solution13);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper19 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) 'a', solution13);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution20 = gcdSolutionWrapper19.getSolution();
        solution20.setX(100);
        solution20.setY((int) '4');
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Solution[x=97, y=1]" + "'", str15, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(solution20);
    }

    @Test
    public void test2013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2013");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int4 = solution3.getY();
        java.lang.String str5 = solution3.toString();
        solution3.setX((int) (short) 1);
        boolean boolean9 = solution3.equals((java.lang.Object) true);
        solution3.setY(32);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper12 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 10, solution3);
        solution3.setY((int) '#');
        solution3.setY(35);
        java.lang.String str17 = solution3.toString();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Solution[x=97, y=1]" + "'", str5, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Solution[x=1, y=35]" + "'", str17, "Solution[x=1, y=35]");
    }

    @Test
    public void test2014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2014");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        int int4 = equation3.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution5 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution6 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        solution6.setX(35);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation14 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution15 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation14);
        int int16 = solution15.getX();
        int int17 = solution15.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper18 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) 'a', solution15);
        boolean boolean20 = solution15.equals((java.lang.Object) '#');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution22 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper23 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution22);
        boolean boolean24 = solution15.equals((java.lang.Object) (byte) 1);
        solution15.setX(35);
        solution15.setY(0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper29 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(1, solution15);
        boolean boolean30 = solution6.equals((java.lang.Object) solution15);
        int int31 = solution15.getY();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 97 + "'", int4 == 97);
        org.junit.Assert.assertNotNull(solution5);
        org.junit.Assert.assertNotNull(solution6);
        org.junit.Assert.assertNotNull(solution15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
    }

    @Test
    public void test2015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2015");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) '4', (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(0, solution3);
        java.lang.String str5 = gcdSolutionWrapper4.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution6 = gcdSolutionWrapper4.getSolution();
        gcdSolutionWrapper4.setGcd(52);
        java.lang.String str9 = gcdSolutionWrapper4.toString();
        int int10 = gcdSolutionWrapper4.getGcd();
        int int11 = gcdSolutionWrapper4.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution14 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(10, 35);
        gcdSolutionWrapper4.setSolution(solution14);
        gcdSolutionWrapper4.setGcd((-1));
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]" + "'", str5, "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]");
        org.junit.Assert.assertNotNull(solution6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "GcdSolutionWrapper[gcd=52, solution=Solution[x=52, y=52]]" + "'", str9, "GcdSolutionWrapper[gcd=52, solution=Solution[x=52, y=52]]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
    }

    @Test
    public void test2016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2016");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) '4', (int) '4');
        solution2.setX((int) (short) 0);
        int int5 = solution2.getY();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 52 + "'", int5 == 52);
    }

    @Test
    public void test2017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2017");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int4 = solution3.getX();
        java.lang.String str5 = solution3.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper6 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(0, solution3);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation10 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int11 = equation10.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution12 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation10);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution14 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper15 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution14);
        boolean boolean17 = gcdSolutionWrapper15.equals((java.lang.Object) 1);
        boolean boolean18 = equation10.equals((java.lang.Object) boolean17);
        int int19 = equation10.a();
        int int20 = equation10.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution22 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper23 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution22);
        gcdSolutionWrapper23.setGcd((int) ' ');
        gcdSolutionWrapper23.setGcd((int) (short) 1);
        int int28 = gcdSolutionWrapper23.getGcd();
        int int29 = gcdSolutionWrapper23.getGcd();
        boolean boolean30 = equation10.equals((java.lang.Object) int29);
        int int31 = equation10.a();
        int int32 = equation10.a();
        int int33 = equation10.a();
        boolean boolean34 = gcdSolutionWrapper6.equals((java.lang.Object) int33);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution39 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int40 = solution39.getY();
        java.lang.String str41 = solution39.toString();
        solution39.setX((int) (short) 1);
        boolean boolean45 = solution39.equals((java.lang.Object) (-1.0f));
        java.lang.String str46 = solution39.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation50 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        java.lang.String str51 = equation50.toString();
        int int52 = equation50.c();
        boolean boolean53 = solution39.equals((java.lang.Object) equation50);
        int int54 = equation50.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution55 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation50);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper56 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(0, solution55);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper57 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(0, solution55);
        gcdSolutionWrapper6.setSolution(solution55);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 97 + "'", int4 == 97);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Solution[x=97, y=1]" + "'", str5, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 35 + "'", int11 == 35);
        org.junit.Assert.assertNotNull(solution12);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Solution[x=97, y=1]" + "'", str41, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Solution[x=1, y=1]" + "'", str46, "Solution[x=1, y=1]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str51, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 35 + "'", int52 == 35);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(solution55);
    }

    @Test
    public void test2018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2018");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) '4', (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(0, solution3);
        java.lang.String str5 = gcdSolutionWrapper4.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution6 = gcdSolutionWrapper4.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution8 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution8);
        gcdSolutionWrapper9.setGcd((int) ' ');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution14 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int15 = solution14.getY();
        java.lang.String str16 = solution14.toString();
        gcdSolutionWrapper9.setSolution(solution14);
        boolean boolean19 = gcdSolutionWrapper9.equals((java.lang.Object) (short) 0);
        gcdSolutionWrapper9.setGcd((int) (short) 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation25 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution29 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int30 = solution29.getY();
        solution29.setY((int) (byte) 1);
        boolean boolean34 = solution29.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper35 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution29);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution36 = gcdSolutionWrapper35.getSolution();
        java.lang.String str37 = gcdSolutionWrapper35.toString();
        gcdSolutionWrapper35.setGcd((int) (byte) 1);
        boolean boolean40 = equation25.equals((java.lang.Object) gcdSolutionWrapper35);
        java.lang.String str41 = equation25.toString();
        int int42 = equation25.c();
        boolean boolean43 = gcdSolutionWrapper9.equals((java.lang.Object) equation25);
        int int44 = equation25.a();
        boolean boolean45 = gcdSolutionWrapper4.equals((java.lang.Object) equation25);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]" + "'", str5, "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]");
        org.junit.Assert.assertNotNull(solution6);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Solution[x=97, y=1]" + "'", str16, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(solution36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str37, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str41, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 35 + "'", int42 == 35);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test2019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2019");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) 0, (-35));
        solution3.setX((int) (byte) 10);
        int int6 = solution3.getX();
        solution3.setX(10);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(32, solution3);
        java.lang.String str10 = gcdSolutionWrapper9.toString();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10 + "'", int6 == 10);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "GcdSolutionWrapper[gcd=32, solution=Solution[x=10, y=-35]]" + "'", str10, "GcdSolutionWrapper[gcd=32, solution=Solution[x=10, y=-35]]");
    }

    @Test
    public void test2020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2020");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        java.lang.String str4 = equation3.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution5 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Equation[a=52, b=52, c=0]" + "'", str4, "Equation[a=52, b=52, c=0]");
        org.junit.Assert.assertNotNull(solution5);
    }

    @Test
    public void test2021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2021");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(52, (int) '4');
    }

    @Test
    public void test2022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2022");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((-35), (int) ' ', 0);
        java.lang.String str4 = equation3.toString();
        boolean boolean6 = equation3.equals((java.lang.Object) true);
        int int7 = equation3.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution8 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution9 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Equation[a=-35, b=32, c=0]" + "'", str4, "Equation[a=-35, b=32, c=0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(solution8);
        org.junit.Assert.assertNotNull(solution9);
    }

    @Test
    public void test2023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2023");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int5 = equation4.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution6 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation4);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution8 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution8);
        boolean boolean11 = gcdSolutionWrapper9.equals((java.lang.Object) 1);
        boolean boolean12 = equation4.equals((java.lang.Object) boolean11);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation16 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution17 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation16);
        solution17.setY((int) (byte) 10);
        boolean boolean20 = equation4.equals((java.lang.Object) solution17);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution21 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation4);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper22 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) -1, solution21);
        java.lang.String str23 = gcdSolutionWrapper22.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution24 = gcdSolutionWrapper22.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation28 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int29 = equation28.c();
        int int30 = equation28.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution34 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int35 = solution34.getY();
        solution34.setY((int) (byte) 1);
        boolean boolean39 = solution34.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper40 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution34);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution41 = gcdSolutionWrapper40.getSolution();
        java.lang.String str42 = gcdSolutionWrapper40.toString();
        gcdSolutionWrapper40.setGcd((int) (byte) 1);
        boolean boolean45 = equation28.equals((java.lang.Object) gcdSolutionWrapper40);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution46 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation28);
        int int47 = equation28.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution48 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation28);
        boolean boolean49 = gcdSolutionWrapper22.equals((java.lang.Object) solution48);
        solution48.setY((int) (short) 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 35 + "'", int5 == 35);
        org.junit.Assert.assertNotNull(solution6);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(solution17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(solution21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=0, y=-35]]" + "'", str23, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=0, y=-35]]");
        org.junit.Assert.assertNotNull(solution24);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 35 + "'", int29 == 35);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(solution41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str42, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(solution46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(solution48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test2024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2024");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution1 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution1);
        gcdSolutionWrapper2.setGcd((int) ' ');
        gcdSolutionWrapper2.setGcd((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution7 = gcdSolutionWrapper2.getSolution();
        gcdSolutionWrapper2.setGcd((int) (byte) 10);
        gcdSolutionWrapper2.setGcd(100);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution12 = gcdSolutionWrapper2.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation16 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int17 = equation16.c();
        int int18 = equation16.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution19 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation16);
        int int20 = equation16.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution21 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation16);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution26 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int27 = solution26.getY();
        solution26.setY((int) (byte) 1);
        boolean boolean31 = solution26.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper32 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution26);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper33 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution26);
        gcdSolutionWrapper33.setGcd(32);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution39 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) 100, (int) ' ');
        java.lang.String str40 = solution39.toString();
        int int41 = solution39.getX();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper42 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(35, solution39);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution46 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) 0, (-35));
        int int47 = solution46.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper48 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(10, solution46);
        gcdSolutionWrapper42.setSolution(solution46);
        gcdSolutionWrapper33.setSolution(solution46);
        boolean boolean51 = equation16.equals((java.lang.Object) gcdSolutionWrapper33);
        java.lang.String str52 = equation16.toString();
        java.lang.String str53 = equation16.toString();
        int int54 = equation16.b();
        boolean boolean55 = gcdSolutionWrapper2.equals((java.lang.Object) equation16);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution56 = null;
        gcdSolutionWrapper2.setSolution(solution56);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation63 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution64 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation63);
        int int65 = solution64.getX();
        int int66 = solution64.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper67 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) 'a', solution64);
        gcdSolutionWrapper67.setGcd((int) (short) 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation73 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution74 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation73);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation78 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((-1), 0, (int) (byte) 10);
        boolean boolean79 = solution74.equals((java.lang.Object) (byte) 10);
        gcdSolutionWrapper67.setSolution(solution74);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper81 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(32, solution74);
        boolean boolean82 = gcdSolutionWrapper2.equals((java.lang.Object) 32);
        org.junit.Assert.assertNull(solution7);
        org.junit.Assert.assertNull(solution12);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 35 + "'", int17 == 35);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(solution19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(solution21);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Solution[x=100, y=32]" + "'", str40, "Solution[x=100, y=32]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 100 + "'", int41 == 100);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-35) + "'", int47 == (-35));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str52, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str53, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(solution64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(solution74);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test2025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2025");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(32, (int) (byte) 10);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int9 = solution8.getY();
        solution8.setY((int) (byte) 1);
        boolean boolean13 = solution8.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper14 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution8);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution17 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int18 = solution17.getY();
        java.lang.String str19 = solution17.toString();
        boolean boolean21 = solution17.equals((java.lang.Object) (-1L));
        gcdSolutionWrapper14.setSolution(solution17);
        int int23 = solution17.getX();
        int int24 = solution17.getY();
        solution17.setY((int) (short) 10);
        solution17.setY(35);
        solution17.setX(0);
        boolean boolean31 = solution4.equals((java.lang.Object) solution17);
        java.lang.String str32 = solution4.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper33 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(97, solution4);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper34 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(0, solution4);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Solution[x=97, y=1]" + "'", str19, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 97 + "'", int23 == 97);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Solution[x=32, y=10]" + "'", str32, "Solution[x=32, y=10]");
    }

    @Test
    public void test2026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2026");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) 1, (-75));
        int int3 = solution2.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
    }

    @Test
    public void test2027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2027");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        int int4 = equation3.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution5 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        java.lang.String str6 = equation3.toString();
        int int7 = equation3.a();
        int int8 = equation3.b();
        int int9 = equation3.b();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 97 + "'", int4 == 97);
        org.junit.Assert.assertNotNull(solution5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Equation[a=97, b=0, c=52]" + "'", str6, "Equation[a=97, b=0, c=52]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 97 + "'", int7 == 97);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test2028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2028");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution4 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        solution4.setY(0);
        solution4.setX((int) (short) 10);
        org.junit.Assert.assertNotNull(solution4);
    }

    @Test
    public void test2029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2029");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) '4', (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution5 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int6 = solution5.getY();
        java.lang.String str7 = solution5.toString();
        solution5.setX((int) (short) 1);
        boolean boolean11 = solution5.equals((java.lang.Object) (-1.0f));
        java.lang.String str12 = solution5.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation16 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        java.lang.String str17 = equation16.toString();
        int int18 = equation16.c();
        boolean boolean19 = solution5.equals((java.lang.Object) equation16);
        int int20 = equation16.c();
        boolean boolean21 = solution2.equals((java.lang.Object) equation16);
        int int22 = equation16.c();
        java.lang.Class<?> wildcardClass23 = equation16.getClass();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Solution[x=97, y=1]" + "'", str7, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Solution[x=1, y=1]" + "'", str12, "Solution[x=1, y=1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str17, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 35 + "'", int18 == 35);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 35 + "'", int20 == 35);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 35 + "'", int22 == 35);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test2030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2030");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int5 = solution4.getY();
        java.lang.String str6 = solution4.toString();
        solution4.setX((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((-35), solution4);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper10 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) ' ', solution4);
        gcdSolutionWrapper10.setGcd(52);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution13 = gcdSolutionWrapper10.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution16 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int17 = solution16.getY();
        solution16.setY((int) (byte) 1);
        int int20 = solution16.getY();
        java.lang.String str21 = solution16.toString();
        solution16.setY(97);
        boolean boolean24 = gcdSolutionWrapper10.equals((java.lang.Object) 97);
        int int25 = gcdSolutionWrapper10.getGcd();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Solution[x=97, y=1]" + "'", str6, "Solution[x=97, y=1]");
        org.junit.Assert.assertNotNull(solution13);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Solution[x=97, y=1]" + "'", str21, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
    }

    @Test
    public void test2031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2031");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) 1, (int) (short) 100);
        solution3.setX(35);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper6 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) 'a', solution3);
    }

    @Test
    public void test2032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2032");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int3 = solution2.getY();
        java.lang.String str4 = solution2.toString();
        solution2.setX((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation10 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int11 = equation10.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution12 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation10);
        boolean boolean13 = solution2.equals((java.lang.Object) solution12);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution15 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper16 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution15);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution19 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int20 = solution19.getY();
        solution19.setY((int) (byte) 1);
        gcdSolutionWrapper16.setSolution(solution19);
        java.lang.String str24 = solution19.toString();
        boolean boolean25 = solution12.equals((java.lang.Object) solution19);
        int int26 = solution19.getX();
        java.lang.Class<?> wildcardClass27 = solution19.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Solution[x=97, y=1]" + "'", str4, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 35 + "'", int11 == 35);
        org.junit.Assert.assertNotNull(solution12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Solution[x=97, y=1]" + "'", str24, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 97 + "'", int26 == 97);
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test2033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2033");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(0, (int) (short) 1);
    }

    @Test
    public void test2034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2034");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation5 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution6 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation5);
        int int7 = solution6.getX();
        int int8 = solution6.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) 'a', solution6);
        boolean boolean11 = solution6.equals((java.lang.Object) '#');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution13 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper14 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution13);
        boolean boolean15 = solution6.equals((java.lang.Object) (byte) 1);
        solution6.setX(35);
        solution6.setY(0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper20 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(1, solution6);
        solution6.setX((int) (byte) -1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution25 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(32, (int) (byte) 10);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution27 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper28 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution27);
        boolean boolean30 = gcdSolutionWrapper28.equals((java.lang.Object) "Equation[a=0, b=-1, c=35]");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution33 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) '4', (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution36 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int37 = solution36.getY();
        java.lang.String str38 = solution36.toString();
        solution36.setX((int) (short) 1);
        boolean boolean42 = solution36.equals((java.lang.Object) (-1.0f));
        java.lang.String str43 = solution36.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation47 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        java.lang.String str48 = equation47.toString();
        int int49 = equation47.c();
        boolean boolean50 = solution36.equals((java.lang.Object) equation47);
        int int51 = equation47.c();
        boolean boolean52 = solution33.equals((java.lang.Object) equation47);
        boolean boolean53 = gcdSolutionWrapper28.equals((java.lang.Object) equation47);
        boolean boolean54 = solution25.equals((java.lang.Object) gcdSolutionWrapper28);
        solution25.setY((int) (byte) 100);
        boolean boolean57 = solution6.equals((java.lang.Object) (byte) 100);
        org.junit.Assert.assertNotNull(solution6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Solution[x=97, y=1]" + "'", str38, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Solution[x=1, y=1]" + "'", str43, "Solution[x=1, y=1]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str48, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 35 + "'", int49 == 35);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 35 + "'", int51 == 35);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test2035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2035");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        int int4 = equation3.c();
        boolean boolean6 = equation3.equals((java.lang.Object) false);
        int int7 = equation3.a();
        java.lang.String str8 = equation3.toString();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 97 + "'", int7 == 97);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Equation[a=97, b=0, c=52]" + "'", str8, "Equation[a=97, b=0, c=52]");
    }

    @Test
    public void test2036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2036");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution5 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation4);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution6 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation4);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution11 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int12 = solution11.getY();
        solution11.setY((int) (byte) 1);
        boolean boolean16 = solution11.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper17 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution11);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution20 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int21 = solution20.getY();
        java.lang.String str22 = solution20.toString();
        boolean boolean24 = solution20.equals((java.lang.Object) (-1L));
        gcdSolutionWrapper17.setSolution(solution20);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper26 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) 'a', solution20);
        boolean boolean27 = equation4.equals((java.lang.Object) solution20);
        solution20.setY((-35));
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper30 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(35, solution20);
        org.junit.Assert.assertNotNull(solution5);
        org.junit.Assert.assertNotNull(solution6);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Solution[x=97, y=1]" + "'", str22, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test2037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2037");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(100, (int) (short) 0, 10);
    }

    @Test
    public void test2038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2038");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution5 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation4);
        int int6 = solution5.getX();
        int int7 = solution5.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) ' ', solution5);
        java.lang.String str9 = gcdSolutionWrapper8.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution11 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper12 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution11);
        boolean boolean14 = gcdSolutionWrapper12.equals((java.lang.Object) 1);
        java.lang.String str15 = gcdSolutionWrapper12.toString();
        gcdSolutionWrapper12.setGcd(32);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution20 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) 100, (int) (byte) -1);
        gcdSolutionWrapper12.setSolution(solution20);
        int int22 = solution20.getX();
        gcdSolutionWrapper8.setSolution(solution20);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution24 = gcdSolutionWrapper8.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution25 = gcdSolutionWrapper8.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution28 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((-35), (int) ' ');
        gcdSolutionWrapper8.setSolution(solution28);
        org.junit.Assert.assertNotNull(solution5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "GcdSolutionWrapper[gcd=32, solution=Solution[x=0, y=0]]" + "'", str9, "GcdSolutionWrapper[gcd=32, solution=Solution[x=0, y=0]]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=null]" + "'", str15, "GcdSolutionWrapper[gcd=1, solution=null]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 100 + "'", int22 == 100);
        org.junit.Assert.assertNotNull(solution24);
        org.junit.Assert.assertNotNull(solution25);
    }

    @Test
    public void test2039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2039");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution1 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution1);
        boolean boolean4 = gcdSolutionWrapper2.equals((java.lang.Object) 1);
        gcdSolutionWrapper2.setGcd(10);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) '#', 0);
        gcdSolutionWrapper2.setSolution(solution9);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution14 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(10, 0);
        int int15 = solution14.getX();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper16 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) -1, solution14);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution19 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper20 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution19);
        gcdSolutionWrapper20.setGcd((int) ' ');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution25 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int26 = solution25.getY();
        java.lang.String str27 = solution25.toString();
        gcdSolutionWrapper20.setSolution(solution25);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution32 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int33 = solution32.getY();
        solution32.setY((int) (byte) 1);
        boolean boolean37 = solution32.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper38 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution32);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution39 = gcdSolutionWrapper38.getSolution();
        java.lang.String str40 = gcdSolutionWrapper38.toString();
        gcdSolutionWrapper38.setGcd((int) (byte) 1);
        int int43 = gcdSolutionWrapper38.getGcd();
        boolean boolean44 = solution25.equals((java.lang.Object) gcdSolutionWrapper38);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper45 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) ' ', solution25);
        gcdSolutionWrapper16.setSolution(solution25);
        java.lang.String str47 = gcdSolutionWrapper16.toString();
        boolean boolean48 = solution9.equals((java.lang.Object) gcdSolutionWrapper16);
        int int49 = solution9.getY();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Solution[x=97, y=1]" + "'", str27, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(solution39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str40, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str47, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
    }

    @Test
    public void test2040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2040");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) '4', (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(0, solution3);
        java.lang.String str5 = gcdSolutionWrapper4.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution6 = gcdSolutionWrapper4.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution7 = gcdSolutionWrapper4.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation11 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) ' ', (int) ' ', 35);
        boolean boolean12 = gcdSolutionWrapper4.equals((java.lang.Object) ' ');
        java.lang.String str13 = gcdSolutionWrapper4.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution17 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int18 = solution17.getY();
        java.lang.String str19 = solution17.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation23 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        int int24 = equation23.c();
        int int25 = equation23.a();
        int int26 = equation23.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution27 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation23);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation31 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int32 = equation31.c();
        int int33 = equation31.b();
        int int34 = equation31.c();
        boolean boolean35 = solution27.equals((java.lang.Object) equation31);
        boolean boolean36 = solution17.equals((java.lang.Object) boolean35);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper37 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) '4', solution17);
        int int38 = gcdSolutionWrapper37.getGcd();
        java.lang.String str39 = gcdSolutionWrapper37.toString();
        boolean boolean40 = gcdSolutionWrapper4.equals((java.lang.Object) str39);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]" + "'", str5, "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]");
        org.junit.Assert.assertNotNull(solution6);
        org.junit.Assert.assertNotNull(solution7);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]" + "'", str13, "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Solution[x=97, y=1]" + "'", str19, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 52 + "'", int24 == 52);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 97 + "'", int25 == 97);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 97 + "'", int26 == 97);
        org.junit.Assert.assertNotNull(solution27);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 35 + "'", int32 == 35);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 35 + "'", int34 == 35);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 52 + "'", int38 == 52);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "GcdSolutionWrapper[gcd=52, solution=Solution[x=97, y=1]]" + "'", str39, "GcdSolutionWrapper[gcd=52, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test2041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2041");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation6 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution7 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation6);
        java.lang.String str8 = solution7.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(1, solution7);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper10 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) '4', solution7);
        int int11 = solution7.getX();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper12 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) -1, solution7);
        gcdSolutionWrapper12.setGcd(10);
        org.junit.Assert.assertNotNull(solution7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Solution[x=0, y=0]" + "'", str8, "Solution[x=0, y=0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test2042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2042");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution2);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution6 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int7 = solution6.getY();
        solution6.setY((int) (byte) 1);
        gcdSolutionWrapper3.setSolution(solution6);
        int int11 = gcdSolutionWrapper3.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution14 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int15 = solution14.getY();
        java.lang.String str16 = solution14.toString();
        solution14.setX((int) (short) 1);
        boolean boolean20 = solution14.equals((java.lang.Object) (-1.0f));
        java.lang.String str21 = solution14.toString();
        java.lang.String str22 = solution14.toString();
        gcdSolutionWrapper3.setSolution(solution14);
        java.lang.String str24 = solution14.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper25 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) -1, solution14);
        java.lang.String str26 = gcdSolutionWrapper25.toString();
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Solution[x=97, y=1]" + "'", str16, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Solution[x=1, y=1]" + "'", str21, "Solution[x=1, y=1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Solution[x=1, y=1]" + "'", str22, "Solution[x=1, y=1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Solution[x=1, y=1]" + "'", str24, "Solution[x=1, y=1]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=1, y=1]]" + "'", str26, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=1, y=1]]");
    }

    @Test
    public void test2043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2043");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int4 = equation3.c();
        int int5 = equation3.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution6 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation11 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        java.lang.String str12 = equation11.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution13 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation11);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper14 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) 0, solution13);
        java.lang.String str15 = gcdSolutionWrapper14.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution16 = gcdSolutionWrapper14.getSolution();
        boolean boolean17 = equation3.equals((java.lang.Object) solution16);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation23 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution24 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation23);
        int int25 = solution24.getX();
        int int26 = solution24.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper27 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) 'a', solution24);
        gcdSolutionWrapper27.setGcd((int) (short) 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation33 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution34 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation33);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation38 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((-1), 0, (int) (byte) 10);
        boolean boolean39 = solution34.equals((java.lang.Object) (byte) 10);
        gcdSolutionWrapper27.setSolution(solution34);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper41 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(32, solution34);
        boolean boolean42 = equation3.equals((java.lang.Object) 32);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution46 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) 100, (int) ' ');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper47 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) 10, solution46);
        gcdSolutionWrapper47.setGcd(97);
        gcdSolutionWrapper47.setGcd(0);
        boolean boolean52 = equation3.equals((java.lang.Object) 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution54 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper55 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution54);
        gcdSolutionWrapper55.setGcd((int) ' ');
        gcdSolutionWrapper55.setGcd((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution60 = gcdSolutionWrapper55.getSolution();
        int int61 = gcdSolutionWrapper55.getGcd();
        gcdSolutionWrapper55.setGcd(0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation67 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        java.lang.String str68 = equation67.toString();
        boolean boolean69 = gcdSolutionWrapper55.equals((java.lang.Object) equation67);
        java.lang.String str70 = gcdSolutionWrapper55.toString();
        gcdSolutionWrapper55.setGcd(97);
        boolean boolean73 = equation3.equals((java.lang.Object) gcdSolutionWrapper55);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution74 = gcdSolutionWrapper55.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution78 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) 0, (-35));
        int int79 = solution78.getY();
        java.lang.String str80 = solution78.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper81 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(97, solution78);
        java.lang.String str82 = gcdSolutionWrapper81.toString();
        boolean boolean83 = gcdSolutionWrapper55.equals((java.lang.Object) gcdSolutionWrapper81);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(solution6);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str12, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertNotNull(solution13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "GcdSolutionWrapper[gcd=0, solution=Solution[x=0, y=-35]]" + "'", str15, "GcdSolutionWrapper[gcd=0, solution=Solution[x=0, y=-35]]");
        org.junit.Assert.assertNotNull(solution16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(solution24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(solution34);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(solution60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str68, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "GcdSolutionWrapper[gcd=0, solution=null]" + "'", str70, "GcdSolutionWrapper[gcd=0, solution=null]");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNull(solution74);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-35) + "'", int79 == (-35));
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "Solution[x=0, y=-35]" + "'", str80, "Solution[x=0, y=-35]");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "GcdSolutionWrapper[gcd=97, solution=Solution[x=0, y=-35]]" + "'", str82, "GcdSolutionWrapper[gcd=97, solution=Solution[x=0, y=-35]]");
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test2044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2044");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) ' ', 52, 100);
        int int4 = equation3.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int9 = equation8.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution10 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation8);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution12 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper13 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution12);
        boolean boolean15 = gcdSolutionWrapper13.equals((java.lang.Object) 1);
        boolean boolean16 = equation8.equals((java.lang.Object) boolean15);
        int int17 = equation8.a();
        int int18 = equation8.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution20 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper21 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution20);
        gcdSolutionWrapper21.setGcd((int) ' ');
        gcdSolutionWrapper21.setGcd((int) (short) 1);
        int int26 = gcdSolutionWrapper21.getGcd();
        int int27 = gcdSolutionWrapper21.getGcd();
        boolean boolean28 = equation8.equals((java.lang.Object) int27);
        boolean boolean29 = equation3.equals((java.lang.Object) equation8);
        int int30 = equation3.b();
        int int31 = equation3.c();
        int int32 = equation3.b();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 32 + "'", int4 == 32);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(solution10);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 52 + "'", int30 == 52);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 100 + "'", int31 == 100);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 52 + "'", int32 == 52);
    }

    @Test
    public void test2045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2045");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution5 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation4);
        int int6 = solution5.getX();
        int int7 = solution5.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) ' ', solution5);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution9 = gcdSolutionWrapper8.getSolution();
        java.lang.String str10 = gcdSolutionWrapper8.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution13 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int14 = solution13.getY();
        java.lang.String str15 = solution13.toString();
        int int16 = solution13.getX();
        int int17 = solution13.getY();
        solution13.setX((int) (short) 0);
        solution13.setY(35);
        gcdSolutionWrapper8.setSolution(solution13);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution23 = gcdSolutionWrapper8.getSolution();
        int int24 = gcdSolutionWrapper8.getGcd();
        org.junit.Assert.assertNotNull(solution5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(solution9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "GcdSolutionWrapper[gcd=32, solution=Solution[x=0, y=0]]" + "'", str10, "GcdSolutionWrapper[gcd=32, solution=Solution[x=0, y=0]]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Solution[x=97, y=1]" + "'", str15, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 97 + "'", int16 == 97);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(solution23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 32 + "'", int24 == 32);
    }

    @Test
    public void test2046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2046");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(35, (int) (short) 100);
        int int4 = solution3.getX();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper5 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(1, solution3);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution13 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int14 = solution13.getY();
        solution13.setY((int) (byte) 1);
        boolean boolean18 = solution13.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper19 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution13);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution20 = gcdSolutionWrapper19.getSolution();
        java.lang.String str21 = gcdSolutionWrapper19.toString();
        gcdSolutionWrapper19.setGcd((int) (byte) 1);
        boolean boolean24 = equation9.equals((java.lang.Object) gcdSolutionWrapper19);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation28 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int29 = equation28.c();
        int int30 = equation28.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution31 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation28);
        boolean boolean32 = gcdSolutionWrapper19.equals((java.lang.Object) solution31);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution35 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int36 = solution35.getY();
        java.lang.String str37 = solution35.toString();
        solution35.setX((int) (short) 1);
        boolean boolean41 = solution35.equals((java.lang.Object) true);
        solution35.setY(32);
        gcdSolutionWrapper19.setSolution(solution35);
        solution35.setY((int) '#');
        gcdSolutionWrapper5.setSolution(solution35);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(solution20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str21, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 35 + "'", int29 == 35);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(solution31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Solution[x=97, y=1]" + "'", str37, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test2047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2047");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((-35), (int) (short) -1, (int) '4');
    }

    @Test
    public void test2048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2048");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(10, 0);
        int int4 = solution3.getX();
        solution3.setX(100);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper7 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) -1, solution3);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution9 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper10 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution9);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution13 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int14 = solution13.getY();
        solution13.setY((int) (byte) 1);
        gcdSolutionWrapper10.setSolution(solution13);
        int int18 = gcdSolutionWrapper10.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution21 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int22 = solution21.getY();
        java.lang.String str23 = solution21.toString();
        solution21.setX((int) (short) 1);
        boolean boolean27 = solution21.equals((java.lang.Object) (-1.0f));
        java.lang.String str28 = solution21.toString();
        java.lang.String str29 = solution21.toString();
        gcdSolutionWrapper10.setSolution(solution21);
        solution21.setX((int) '4');
        java.lang.String str33 = solution21.toString();
        gcdSolutionWrapper7.setSolution(solution21);
        solution21.setY((int) (short) -1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation41 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution42 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation41);
        int int43 = solution42.getX();
        int int44 = solution42.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper45 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) 'a', solution42);
        gcdSolutionWrapper45.setGcd((int) (short) 0);
        gcdSolutionWrapper45.setGcd((int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution52 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((-1), 100);
        gcdSolutionWrapper45.setSolution(solution52);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution57 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int58 = solution57.getY();
        java.lang.String str59 = solution57.toString();
        solution57.setX((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper62 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((-35), solution57);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation66 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 1, (int) (short) 10, (int) (short) -1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution67 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation66);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution68 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation66);
        java.lang.String str69 = equation66.toString();
        boolean boolean70 = gcdSolutionWrapper62.equals((java.lang.Object) equation66);
        boolean boolean71 = gcdSolutionWrapper45.equals((java.lang.Object) boolean70);
        boolean boolean72 = solution21.equals((java.lang.Object) gcdSolutionWrapper45);
        int int73 = solution21.getY();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Solution[x=97, y=1]" + "'", str23, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Solution[x=1, y=1]" + "'", str28, "Solution[x=1, y=1]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Solution[x=1, y=1]" + "'", str29, "Solution[x=1, y=1]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Solution[x=52, y=1]" + "'", str33, "Solution[x=52, y=1]");
        org.junit.Assert.assertNotNull(solution42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Solution[x=97, y=1]" + "'", str59, "Solution[x=97, y=1]");
        org.junit.Assert.assertNotNull(solution67);
        org.junit.Assert.assertNotNull(solution68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "Equation[a=1, b=10, c=-1]" + "'", str69, "Equation[a=1, b=10, c=-1]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
    }

    @Test
    public void test2049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2049");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int4 = equation3.c();
        int int5 = equation3.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int10 = solution9.getY();
        solution9.setY((int) (byte) 1);
        boolean boolean14 = solution9.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper15 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution9);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution16 = gcdSolutionWrapper15.getSolution();
        java.lang.String str17 = gcdSolutionWrapper15.toString();
        gcdSolutionWrapper15.setGcd((int) (byte) 1);
        boolean boolean20 = equation3.equals((java.lang.Object) gcdSolutionWrapper15);
        int int21 = gcdSolutionWrapper15.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation25 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int26 = equation25.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution27 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation25);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution28 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation25);
        int int29 = equation25.b();
        int int30 = equation25.c();
        boolean boolean31 = gcdSolutionWrapper15.equals((java.lang.Object) int30);
        gcdSolutionWrapper15.setGcd((int) (short) -1);
        gcdSolutionWrapper15.setGcd((int) (short) 1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(solution16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str17, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 35 + "'", int26 == 35);
        org.junit.Assert.assertNotNull(solution27);
        org.junit.Assert.assertNotNull(solution28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 35 + "'", int30 == 35);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test2050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2050");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) 100, (int) ' ');
        java.lang.String str3 = solution2.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution6 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(100, (int) (byte) -1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation10 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int11 = equation10.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution12 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation10);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution14 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper15 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution14);
        boolean boolean17 = gcdSolutionWrapper15.equals((java.lang.Object) 1);
        boolean boolean18 = equation10.equals((java.lang.Object) boolean17);
        int int19 = equation10.a();
        boolean boolean20 = solution6.equals((java.lang.Object) int19);
        solution6.setY(10);
        boolean boolean23 = solution2.equals((java.lang.Object) solution6);
        java.lang.String str24 = solution6.toString();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Solution[x=100, y=32]" + "'", str3, "Solution[x=100, y=32]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 35 + "'", int11 == 35);
        org.junit.Assert.assertNotNull(solution12);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Solution[x=100, y=10]" + "'", str24, "Solution[x=100, y=10]");
    }

    @Test
    public void test2051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2051");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int5 = solution4.getY();
        java.lang.String str6 = solution4.toString();
        solution4.setX((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation12 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int13 = equation12.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution14 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation12);
        boolean boolean15 = solution4.equals((java.lang.Object) solution14);
        int int16 = solution14.getY();
        java.lang.String str17 = solution14.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper18 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) 10, solution14);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper19 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) 1, solution14);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Solution[x=97, y=1]" + "'", str6, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNotNull(solution14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-35) + "'", int16 == (-35));
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Solution[x=0, y=-35]" + "'", str17, "Solution[x=0, y=-35]");
    }

    @Test
    public void test2052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2052");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (short) 10, (int) (byte) 1);
        solution2.setX(100);
        solution2.setX(52);
    }

    @Test
    public void test2053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2053");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(100, (-75), (int) '#');
        int int4 = equation3.c();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
    }

    @Test
    public void test2054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2054");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        int int4 = equation3.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution5 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        java.lang.String str6 = equation3.toString();
        int int7 = equation3.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution8 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        int int9 = equation3.a();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 97 + "'", int4 == 97);
        org.junit.Assert.assertNotNull(solution5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Equation[a=97, b=0, c=52]" + "'", str6, "Equation[a=97, b=0, c=52]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 97 + "'", int7 == 97);
        org.junit.Assert.assertNotNull(solution8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 97 + "'", int9 == 97);
    }

    @Test
    public void test2055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2055");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((-35), (int) (short) 1, (-1));
        int int4 = equation3.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution5 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution6 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        java.lang.String str7 = equation3.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution8 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(solution5);
        org.junit.Assert.assertNotNull(solution6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Equation[a=-35, b=1, c=-1]" + "'", str7, "Equation[a=-35, b=1, c=-1]");
        org.junit.Assert.assertNotNull(solution8);
    }

    @Test
    public void test2056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2056");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((-75), (-75));
    }

    @Test
    public void test2057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2057");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) 100, (int) ' ');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) 10, solution3);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution7 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int8 = solution7.getY();
        java.lang.String str9 = solution7.toString();
        int int10 = solution7.getX();
        int int11 = solution7.getY();
        gcdSolutionWrapper4.setSolution(solution7);
        int int13 = gcdSolutionWrapper4.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution14 = gcdSolutionWrapper4.getSolution();
        int int15 = gcdSolutionWrapper4.getGcd();
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Solution[x=97, y=1]" + "'", str9, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 97 + "'", int10 == 97);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
        org.junit.Assert.assertNotNull(solution14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
    }

    @Test
    public void test2058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2058");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (short) 1, (int) ' ', 0);
        boolean boolean5 = equation3.equals((java.lang.Object) "GcdSolutionWrapper[gcd=0, solution=Solution[x=-1, y=52]]");
        java.lang.String str6 = equation3.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation11 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((-35), (int) ' ', 0);
        java.lang.String str12 = equation11.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution13 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation11);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper14 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) 1, solution13);
        solution13.setX((-1));
        boolean boolean17 = equation3.equals((java.lang.Object) (-1));
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution20 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((-1), 97);
        boolean boolean21 = equation3.equals((java.lang.Object) 97);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution22 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Equation[a=1, b=32, c=0]" + "'", str6, "Equation[a=1, b=32, c=0]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Equation[a=-35, b=32, c=0]" + "'", str12, "Equation[a=-35, b=32, c=0]");
        org.junit.Assert.assertNotNull(solution13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(solution22);
    }

    @Test
    public void test2059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2059");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int4 = equation3.c();
        int int5 = equation3.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution6 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation11 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        java.lang.String str12 = equation11.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution13 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation11);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper14 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) 0, solution13);
        java.lang.String str15 = gcdSolutionWrapper14.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution16 = gcdSolutionWrapper14.getSolution();
        boolean boolean17 = equation3.equals((java.lang.Object) solution16);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution18 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        boolean boolean20 = solution18.equals((java.lang.Object) "GcdSolutionWrapper[gcd=-1, solution=Solution[x=52, y=1]]");
        java.lang.String str21 = solution18.toString();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(solution6);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str12, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertNotNull(solution13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "GcdSolutionWrapper[gcd=0, solution=Solution[x=0, y=-35]]" + "'", str15, "GcdSolutionWrapper[gcd=0, solution=Solution[x=0, y=-35]]");
        org.junit.Assert.assertNotNull(solution16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(solution18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Solution[x=0, y=-35]" + "'", str21, "Solution[x=0, y=-35]");
    }

    @Test
    public void test2060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2060");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int4 = equation3.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution5 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution6 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        int int7 = equation3.b();
        int int8 = equation3.c();
        int int9 = equation3.c();
        int int10 = equation3.c();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNotNull(solution5);
        org.junit.Assert.assertNotNull(solution6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 35 + "'", int8 == 35);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 35 + "'", int10 == 35);
    }

    @Test
    public void test2061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2061");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        java.lang.String str4 = equation3.toString();
        int int5 = equation3.c();
        int int6 = equation3.a();
        int int7 = equation3.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution8 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        solution8.setX((int) (short) 1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str4, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 35 + "'", int5 == 35);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(solution8);
    }

    @Test
    public void test2062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2062");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '#', 0, 100);
        java.lang.String str4 = equation3.toString();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Equation[a=35, b=0, c=100]" + "'", str4, "Equation[a=35, b=0, c=100]");
    }

    @Test
    public void test2063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2063");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution1 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution1);
        boolean boolean4 = gcdSolutionWrapper2.equals((java.lang.Object) 1);
        java.lang.String str5 = gcdSolutionWrapper2.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution6 = gcdSolutionWrapper2.getSolution();
        gcdSolutionWrapper2.setGcd((int) 'a');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution11 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper12 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution11);
        boolean boolean14 = gcdSolutionWrapper12.equals((java.lang.Object) 1);
        java.lang.String str15 = gcdSolutionWrapper12.toString();
        gcdSolutionWrapper12.setGcd(32);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution20 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) 100, (int) (byte) -1);
        gcdSolutionWrapper12.setSolution(solution20);
        int int22 = solution20.getX();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper23 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution20);
        java.lang.String str24 = solution20.toString();
        boolean boolean25 = gcdSolutionWrapper2.equals((java.lang.Object) solution20);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution26 = gcdSolutionWrapper2.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution29 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) '4', (int) (byte) 100);
        boolean boolean30 = gcdSolutionWrapper2.equals((java.lang.Object) '4');
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=null]" + "'", str5, "GcdSolutionWrapper[gcd=1, solution=null]");
        org.junit.Assert.assertNull(solution6);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=null]" + "'", str15, "GcdSolutionWrapper[gcd=1, solution=null]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 100 + "'", int22 == 100);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Solution[x=100, y=-1]" + "'", str24, "Solution[x=100, y=-1]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(solution26);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test2064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2064");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) '4', (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(0, solution3);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution5 = gcdSolutionWrapper4.getSolution();
        int int6 = solution5.getX();
        java.lang.String str7 = solution5.toString();
        int int8 = solution5.getY();
        org.junit.Assert.assertNotNull(solution5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Solution[x=52, y=52]" + "'", str7, "Solution[x=52, y=52]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 52 + "'", int8 == 52);
    }

    @Test
    public void test2065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2065");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution7 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int8 = solution7.getY();
        solution7.setY((int) (byte) 1);
        boolean boolean12 = solution7.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper13 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution7);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution14 = gcdSolutionWrapper13.getSolution();
        java.lang.String str15 = gcdSolutionWrapper13.toString();
        gcdSolutionWrapper13.setGcd((int) (byte) 1);
        boolean boolean18 = equation3.equals((java.lang.Object) gcdSolutionWrapper13);
        int int19 = gcdSolutionWrapper13.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution22 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((-1), (int) '4');
        gcdSolutionWrapper13.setSolution(solution22);
        gcdSolutionWrapper13.setGcd((int) ' ');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution26 = gcdSolutionWrapper13.getSolution();
        java.lang.String str27 = gcdSolutionWrapper13.toString();
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(solution14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str15, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(solution26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "GcdSolutionWrapper[gcd=32, solution=Solution[x=-1, y=52]]" + "'", str27, "GcdSolutionWrapper[gcd=32, solution=Solution[x=-1, y=52]]");
    }

    @Test
    public void test2066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2066");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int5 = equation4.c();
        int int6 = equation4.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution10 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int11 = solution10.getY();
        solution10.setY((int) (byte) 1);
        boolean boolean15 = solution10.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper16 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution10);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution17 = gcdSolutionWrapper16.getSolution();
        java.lang.String str18 = gcdSolutionWrapper16.toString();
        gcdSolutionWrapper16.setGcd((int) (byte) 1);
        boolean boolean21 = equation4.equals((java.lang.Object) gcdSolutionWrapper16);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution22 = gcdSolutionWrapper16.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution23 = gcdSolutionWrapper16.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution27 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int28 = solution27.getY();
        solution27.setY((int) (byte) 1);
        boolean boolean32 = solution27.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper33 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution27);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution36 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int37 = solution36.getY();
        java.lang.String str38 = solution36.toString();
        boolean boolean40 = solution36.equals((java.lang.Object) (-1L));
        gcdSolutionWrapper33.setSolution(solution36);
        int int42 = solution36.getX();
        java.lang.String str43 = solution36.toString();
        solution36.setX((int) (byte) 0);
        boolean boolean46 = gcdSolutionWrapper16.equals((java.lang.Object) (byte) 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution47 = gcdSolutionWrapper16.getSolution();
        java.lang.String str48 = gcdSolutionWrapper16.toString();
        int int49 = gcdSolutionWrapper16.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution50 = gcdSolutionWrapper16.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper51 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(32, solution50);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 35 + "'", int5 == 35);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(solution17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str18, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(solution22);
        org.junit.Assert.assertNotNull(solution23);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Solution[x=97, y=1]" + "'", str38, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 97 + "'", int42 == 97);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Solution[x=97, y=1]" + "'", str43, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(solution47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]" + "'", str48, "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(solution50);
    }

    @Test
    public void test2067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2067");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int4 = solution3.getY();
        java.lang.String str5 = solution3.toString();
        java.lang.String str6 = solution3.toString();
        java.lang.String str7 = solution3.toString();
        solution3.setY((int) (short) 0);
        solution3.setY((int) (short) 10);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper12 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) 100, solution3);
        int int13 = gcdSolutionWrapper12.getGcd();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Solution[x=97, y=1]" + "'", str5, "Solution[x=97, y=1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Solution[x=97, y=1]" + "'", str6, "Solution[x=97, y=1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Solution[x=97, y=1]" + "'", str7, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 100 + "'", int13 == 100);
    }

    @Test
    public void test2068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2068");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int3 = solution2.getY();
        solution2.setY((int) (byte) 1);
        boolean boolean7 = solution2.equals((java.lang.Object) 1);
        java.lang.String str8 = solution2.toString();
        solution2.setY(52);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Solution[x=97, y=1]" + "'", str8, "Solution[x=97, y=1]");
    }

    @Test
    public void test2069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2069");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) 'a', (int) (short) 10, 32);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution6 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(0, (int) (short) 10);
        boolean boolean7 = equation3.equals((java.lang.Object) (short) 10);
        int int8 = equation3.a();
        int int9 = equation3.b();
        java.lang.Class<?> wildcardClass10 = equation3.getClass();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 97 + "'", int8 == 97);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test2070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2070");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) -1, (int) (byte) 0, (int) (byte) -1);
        int int4 = equation3.c();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
    }

    @Test
    public void test2071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2071");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) '#', 96);
    }

    @Test
    public void test2072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2072");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, 0, (int) (short) -1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution7 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int8 = solution7.getY();
        solution7.setY((int) (byte) 1);
        boolean boolean12 = solution7.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper13 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution7);
        boolean boolean14 = equation3.equals((java.lang.Object) gcdSolutionWrapper13);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation18 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution19 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation18);
        solution19.setY(0);
        gcdSolutionWrapper13.setSolution(solution19);
        int int23 = gcdSolutionWrapper13.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution25 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper26 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution25);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution29 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int30 = solution29.getY();
        solution29.setY((int) (byte) 1);
        gcdSolutionWrapper26.setSolution(solution29);
        gcdSolutionWrapper13.setSolution(solution29);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution35 = gcdSolutionWrapper13.getSolution();
        int int36 = gcdSolutionWrapper13.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution37 = gcdSolutionWrapper13.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution39 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper40 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution39);
        gcdSolutionWrapper40.setGcd((int) ' ');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution45 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int46 = solution45.getY();
        java.lang.String str47 = solution45.toString();
        gcdSolutionWrapper40.setSolution(solution45);
        boolean boolean49 = solution37.equals((java.lang.Object) solution45);
        java.lang.String str50 = solution45.toString();
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(solution19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(solution35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(solution37);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Solution[x=97, y=1]" + "'", str47, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Solution[x=97, y=1]" + "'", str50, "Solution[x=97, y=1]");
    }

    @Test
    public void test2073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2073");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) -1, (int) (byte) 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 0, solution3);
        solution3.setY((-35));
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation10 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        int int11 = equation10.c();
        boolean boolean13 = equation10.equals((java.lang.Object) false);
        int int14 = equation10.a();
        int int15 = equation10.c();
        int int16 = equation10.b();
        int int17 = equation10.a();
        int int18 = equation10.a();
        boolean boolean19 = solution3.equals((java.lang.Object) int18);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 97 + "'", int14 == 97);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 97 + "'", int17 == 97);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 97 + "'", int18 == 97);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test2074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2074");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) (byte) 100, 32);
        int int4 = equation3.b();
        int int5 = equation3.a();
        int int6 = equation3.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution7 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        solution7.setY((-35));
        solution7.setY(0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 100 + "'", int4 == 100);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 52 + "'", int5 == 52);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 32 + "'", int6 == 32);
        org.junit.Assert.assertNotNull(solution7);
    }

    @Test
    public void test2075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2075");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) 10, (int) (short) 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((-1), solution3);
        java.lang.String str5 = solution3.toString();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Solution[x=10, y=0]" + "'", str5, "Solution[x=10, y=0]");
    }

    @Test
    public void test2076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2076");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(125, (int) (byte) -1);
        java.lang.Class<?> wildcardClass3 = solution2.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test2077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2077");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int4 = solution3.getY();
        java.lang.String str5 = solution3.toString();
        solution3.setX((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((-35), solution3);
        int int9 = gcdSolutionWrapper8.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution10 = gcdSolutionWrapper8.getSolution();
        java.lang.String str11 = gcdSolutionWrapper8.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution14 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) '4', (int) '4');
        solution14.setX((int) (short) 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation20 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution24 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int25 = solution24.getY();
        solution24.setY((int) (byte) 1);
        boolean boolean29 = solution24.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper30 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution24);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution31 = gcdSolutionWrapper30.getSolution();
        java.lang.String str32 = gcdSolutionWrapper30.toString();
        gcdSolutionWrapper30.setGcd((int) (byte) 1);
        boolean boolean35 = equation20.equals((java.lang.Object) gcdSolutionWrapper30);
        int int36 = gcdSolutionWrapper30.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution37 = gcdSolutionWrapper30.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation41 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        java.lang.String str42 = equation41.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution43 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation41);
        solution43.setY((int) (byte) 10);
        boolean boolean46 = solution37.equals((java.lang.Object) solution43);
        int int47 = solution43.getY();
        boolean boolean48 = solution14.equals((java.lang.Object) solution43);
        gcdSolutionWrapper8.setSolution(solution43);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation53 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int54 = equation53.c();
        java.lang.String str55 = equation53.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution59 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int60 = solution59.getY();
        java.lang.String str61 = solution59.toString();
        solution59.setX((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper64 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((-35), solution59);
        int int65 = gcdSolutionWrapper64.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution66 = gcdSolutionWrapper64.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation70 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution71 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation70);
        solution71.setY((int) (byte) 10);
        gcdSolutionWrapper64.setSolution(solution71);
        boolean boolean75 = equation53.equals((java.lang.Object) solution71);
        java.lang.String str76 = equation53.toString();
        boolean boolean77 = gcdSolutionWrapper8.equals((java.lang.Object) str76);
        int int78 = gcdSolutionWrapper8.getGcd();
        int int79 = gcdSolutionWrapper8.getGcd();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Solution[x=97, y=1]" + "'", str5, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-35) + "'", int9 == (-35));
        org.junit.Assert.assertNotNull(solution10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "GcdSolutionWrapper[gcd=-35, solution=Solution[x=1, y=1]]" + "'", str11, "GcdSolutionWrapper[gcd=-35, solution=Solution[x=1, y=1]]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(solution31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str32, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(solution37);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str42, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertNotNull(solution43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 10 + "'", int47 == 10);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 35 + "'", int54 == 35);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str55, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "Solution[x=97, y=1]" + "'", str61, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-35) + "'", int65 == (-35));
        org.junit.Assert.assertNotNull(solution66);
        org.junit.Assert.assertNotNull(solution71);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str76, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-35) + "'", int78 == (-35));
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-35) + "'", int79 == (-35));
    }

    @Test
    public void test2078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2078");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int4 = equation3.c();
        int int5 = equation3.b();
        int int6 = equation3.b();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
    }

    @Test
    public void test2079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2079");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) -1, 52);
        solution2.setY((int) (byte) 10);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) 100, (int) ' ');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) 10, solution8);
        gcdSolutionWrapper9.setGcd(97);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution15 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) 100, (int) ' ');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper16 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) 10, solution15);
        gcdSolutionWrapper16.setGcd(97);
        boolean boolean19 = gcdSolutionWrapper9.equals((java.lang.Object) gcdSolutionWrapper16);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation23 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution24 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation23);
        solution24.setY((int) (byte) 10);
        int int27 = solution24.getY();
        boolean boolean28 = gcdSolutionWrapper9.equals((java.lang.Object) solution24);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution31 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) 100, (int) ' ');
        int int32 = solution31.getY();
        boolean boolean33 = solution24.equals((java.lang.Object) solution31);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation38 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution39 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation38);
        int int40 = solution39.getX();
        int int41 = solution39.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper42 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) 'a', solution39);
        boolean boolean44 = solution39.equals((java.lang.Object) '#');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution46 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper47 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution46);
        boolean boolean49 = gcdSolutionWrapper47.equals((java.lang.Object) "Equation[a=0, b=-1, c=35]");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation53 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution54 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation53);
        solution54.setY((int) (byte) 10);
        int int57 = solution54.getY();
        gcdSolutionWrapper47.setSolution(solution54);
        boolean boolean59 = solution39.equals((java.lang.Object) solution54);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation63 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (short) 100, (int) (short) 0, 1);
        int int64 = equation63.b();
        java.lang.Class<?> wildcardClass65 = equation63.getClass();
        boolean boolean66 = solution39.equals((java.lang.Object) wildcardClass65);
        boolean boolean67 = solution31.equals((java.lang.Object) boolean66);
        solution31.setY((-75));
        int int70 = solution31.getX();
        boolean boolean71 = solution2.equals((java.lang.Object) int70);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(solution24);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 32 + "'", int32 == 32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(solution39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(solution54);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 10 + "'", int57 == 10);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(wildcardClass65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 100 + "'", int70 == 100);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test2080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2080");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution5 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation4);
        int int6 = solution5.getX();
        int int7 = solution5.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) 'a', solution5);
        gcdSolutionWrapper8.setGcd((int) (short) 0);
        gcdSolutionWrapper8.setGcd((int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution15 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((-1), 100);
        gcdSolutionWrapper8.setSolution(solution15);
        solution15.setX(1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation22 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        int int23 = equation22.c();
        int int24 = equation22.a();
        int int25 = equation22.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution26 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation22);
        boolean boolean27 = solution15.equals((java.lang.Object) equation22);
        int int28 = equation22.c();
        int int29 = equation22.c();
        org.junit.Assert.assertNotNull(solution5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 52 + "'", int23 == 52);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 97 + "'", int24 == 97);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 97 + "'", int25 == 97);
        org.junit.Assert.assertNotNull(solution26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 52 + "'", int28 == 52);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 52 + "'", int29 == 52);
    }

    @Test
    public void test2081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2081");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (short) 100, 1, 0);
    }

    @Test
    public void test2082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2082");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int3 = solution2.getY();
        java.lang.String str4 = solution2.toString();
        solution2.setX((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation10 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, 0, (int) (short) -1);
        boolean boolean11 = solution2.equals((java.lang.Object) equation10);
        int int12 = equation10.c();
        int int13 = equation10.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution17 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) 0, (-35));
        solution17.setX((int) (byte) 10);
        int int20 = solution17.getX();
        solution17.setX(10);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper23 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(32, solution17);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation27 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int28 = equation27.c();
        int int29 = equation27.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution30 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation27);
        boolean boolean31 = solution17.equals((java.lang.Object) equation27);
        boolean boolean32 = equation10.equals((java.lang.Object) boolean31);
        int int33 = equation10.a();
        int int34 = equation10.a();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Solution[x=97, y=1]" + "'", str4, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10 + "'", int20 == 10);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 35 + "'", int28 == 35);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(solution30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
    }

    @Test
    public void test2083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2083");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(100, (int) (byte) -1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation7 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int8 = equation7.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution9 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation7);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution11 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper12 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution11);
        boolean boolean14 = gcdSolutionWrapper12.equals((java.lang.Object) 1);
        boolean boolean15 = equation7.equals((java.lang.Object) boolean14);
        int int16 = equation7.a();
        boolean boolean17 = solution3.equals((java.lang.Object) int16);
        solution3.setY(10);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper20 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) 1, solution3);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution23 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int24 = solution23.getY();
        java.lang.String str25 = solution23.toString();
        boolean boolean27 = solution23.equals((java.lang.Object) (-1L));
        solution23.setY((int) 'a');
        gcdSolutionWrapper20.setSolution(solution23);
        java.lang.Class<?> wildcardClass31 = solution23.getClass();
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 35 + "'", int8 == 35);
        org.junit.Assert.assertNotNull(solution9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Solution[x=97, y=1]" + "'", str25, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test2084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2084");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution5 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation4);
        int int6 = solution5.getX();
        int int7 = solution5.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) 'a', solution5);
        int int9 = solution5.getX();
        boolean boolean11 = solution5.equals((java.lang.Object) 0.0f);
        org.junit.Assert.assertNotNull(solution5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test2085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2085");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (short) -1, 0);
        solution2.setY((int) (byte) -1);
        solution2.setY(96);
        int int7 = solution2.getY();
        java.lang.Class<?> wildcardClass8 = solution2.getClass();
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 96 + "'", int7 == 96);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test2086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2086");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(52, (-1));
        solution2.setX((int) (byte) 10);
    }

    @Test
    public void test2087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2087");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 100, 35, (int) (short) -1);
    }

    @Test
    public void test2088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2088");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(10, (-75));
    }

    @Test
    public void test2089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2089");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(0, 0, (-75));
        int int4 = equation3.c();
        int int5 = equation3.c();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-75) + "'", int4 == (-75));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-75) + "'", int5 == (-75));
    }

    @Test
    public void test2090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2090");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        java.lang.String str5 = equation4.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution6 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation4);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper7 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) 0, solution6);
        java.lang.String str8 = gcdSolutionWrapper7.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution9 = gcdSolutionWrapper7.getSolution();
        solution9.setY((int) (short) 10);
        java.lang.String str12 = solution9.toString();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str5, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertNotNull(solution6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "GcdSolutionWrapper[gcd=0, solution=Solution[x=0, y=-35]]" + "'", str8, "GcdSolutionWrapper[gcd=0, solution=Solution[x=0, y=-35]]");
        org.junit.Assert.assertNotNull(solution9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Solution[x=0, y=10]" + "'", str12, "Solution[x=0, y=10]");
    }

    @Test
    public void test2091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2091");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int4 = equation3.c();
        int int5 = equation3.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int10 = solution9.getY();
        solution9.setY((int) (byte) 1);
        boolean boolean14 = solution9.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper15 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution9);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution16 = gcdSolutionWrapper15.getSolution();
        java.lang.String str17 = gcdSolutionWrapper15.toString();
        gcdSolutionWrapper15.setGcd((int) (byte) 1);
        boolean boolean20 = equation3.equals((java.lang.Object) gcdSolutionWrapper15);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution21 = gcdSolutionWrapper15.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution25 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) 100, (int) ' ');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper26 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) 10, solution25);
        gcdSolutionWrapper26.setGcd(97);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution32 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) 100, (int) ' ');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper33 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) 10, solution32);
        gcdSolutionWrapper33.setGcd(97);
        boolean boolean36 = gcdSolutionWrapper26.equals((java.lang.Object) gcdSolutionWrapper33);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation40 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution41 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation40);
        solution41.setY((int) (byte) 10);
        int int44 = solution41.getY();
        boolean boolean45 = gcdSolutionWrapper26.equals((java.lang.Object) solution41);
        boolean boolean46 = gcdSolutionWrapper15.equals((java.lang.Object) gcdSolutionWrapper26);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution49 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) 10, 0);
        gcdSolutionWrapper26.setSolution(solution49);
        int int51 = solution49.getY();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(solution16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str17, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(solution21);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(solution41);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 10 + "'", int44 == 10);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
    }

    @Test
    public void test2092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2092");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(0, (-1));
        solution2.setX((-35));
    }

    @Test
    public void test2093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2093");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 100, (int) (byte) -1, (-35));
        int int4 = equation3.b();
        java.lang.Class<?> wildcardClass5 = equation3.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test2094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2094");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution1 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution1);
        gcdSolutionWrapper2.setGcd((int) ' ');
        int int5 = gcdSolutionWrapper2.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation10 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((-35), (int) ' ', 0);
        java.lang.String str11 = equation10.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution12 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation10);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper13 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) 1, solution12);
        solution12.setX((-1));
        gcdSolutionWrapper2.setSolution(solution12);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution17 = gcdSolutionWrapper2.getSolution();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 32 + "'", int5 == 32);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Equation[a=-35, b=32, c=0]" + "'", str11, "Equation[a=-35, b=32, c=0]");
        org.junit.Assert.assertNotNull(solution12);
        org.junit.Assert.assertNotNull(solution17);
    }

    @Test
    public void test2095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2095");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        int int4 = equation3.c();
        int int5 = equation3.a();
        int int6 = equation3.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution7 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation11 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int12 = equation11.c();
        int int13 = equation11.b();
        int int14 = equation11.c();
        boolean boolean15 = solution7.equals((java.lang.Object) equation11);
        java.lang.String str16 = equation11.toString();
        int int17 = equation11.b();
        java.lang.String str18 = equation11.toString();
        java.lang.String str19 = equation11.toString();
        int int20 = equation11.a();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 97 + "'", int5 == 97);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 97 + "'", int6 == 97);
        org.junit.Assert.assertNotNull(solution7);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 35 + "'", int12 == 35);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str16, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str18, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str19, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    }

    @Test
    public void test2096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2096");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution1 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution1);
        gcdSolutionWrapper2.setGcd((int) ' ');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution7 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int8 = solution7.getY();
        java.lang.String str9 = solution7.toString();
        gcdSolutionWrapper2.setSolution(solution7);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution11 = gcdSolutionWrapper2.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution15 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper16 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution15);
        boolean boolean18 = gcdSolutionWrapper16.equals((java.lang.Object) 1);
        java.lang.String str19 = gcdSolutionWrapper16.toString();
        gcdSolutionWrapper16.setGcd(32);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution24 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) 100, (int) (byte) -1);
        gcdSolutionWrapper16.setSolution(solution24);
        int int26 = solution24.getX();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper27 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution24);
        java.lang.String str28 = solution24.toString();
        solution24.setX((int) (byte) 10);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper31 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) ' ', solution24);
        gcdSolutionWrapper2.setSolution(solution24);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution35 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) ' ', (int) (short) 10);
        boolean boolean36 = solution24.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation40 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '#', 52, 32);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution43 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int44 = solution43.getY();
        java.lang.String str45 = solution43.toString();
        solution43.setX((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation51 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int52 = equation51.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution53 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation51);
        boolean boolean54 = solution43.equals((java.lang.Object) solution53);
        boolean boolean56 = solution53.equals((java.lang.Object) 0);
        boolean boolean57 = equation40.equals((java.lang.Object) solution53);
        java.lang.String str58 = equation40.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution59 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation40);
        boolean boolean60 = solution24.equals((java.lang.Object) equation40);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Solution[x=97, y=1]" + "'", str9, "Solution[x=97, y=1]");
        org.junit.Assert.assertNotNull(solution11);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=null]" + "'", str19, "GcdSolutionWrapper[gcd=1, solution=null]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 100 + "'", int26 == 100);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Solution[x=100, y=-1]" + "'", str28, "Solution[x=100, y=-1]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Solution[x=97, y=1]" + "'", str45, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 35 + "'", int52 == 35);
        org.junit.Assert.assertNotNull(solution53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "Equation[a=35, b=52, c=32]" + "'", str58, "Equation[a=35, b=52, c=32]");
        org.junit.Assert.assertNotNull(solution59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test2097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2097");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int5 = solution4.getY();
        solution4.setY((int) (byte) 1);
        boolean boolean9 = solution4.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper10 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution4);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper11 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution4);
        int int12 = gcdSolutionWrapper11.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution13 = gcdSolutionWrapper11.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution16 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((-1), 100);
        gcdSolutionWrapper11.setSolution(solution16);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation22 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((-35), (int) ' ', 0);
        java.lang.String str23 = equation22.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution24 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation22);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper25 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) 'a', solution24);
        gcdSolutionWrapper11.setSolution(solution24);
        java.lang.String str27 = solution24.toString();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(solution13);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Equation[a=-35, b=32, c=0]" + "'", str23, "Equation[a=-35, b=32, c=0]");
        org.junit.Assert.assertNotNull(solution24);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Solution[x=0, y=0]" + "'", str27, "Solution[x=0, y=0]");
    }

    @Test
    public void test2098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2098");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) 100, (int) ' ');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) 10, solution3);
        java.lang.String str5 = gcdSolutionWrapper4.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution6 = gcdSolutionWrapper4.getSolution();
        gcdSolutionWrapper4.setGcd((int) (byte) 1);
        java.lang.String str9 = gcdSolutionWrapper4.toString();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "GcdSolutionWrapper[gcd=10, solution=Solution[x=100, y=32]]" + "'", str5, "GcdSolutionWrapper[gcd=10, solution=Solution[x=100, y=32]]");
        org.junit.Assert.assertNotNull(solution6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=Solution[x=100, y=32]]" + "'", str9, "GcdSolutionWrapper[gcd=1, solution=Solution[x=100, y=32]]");
    }

    @Test
    public void test2099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2099");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) ' ', (int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) '4', solution3);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution5 = gcdSolutionWrapper4.getSolution();
        int int6 = gcdSolutionWrapper4.getGcd();
        org.junit.Assert.assertNotNull(solution5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
    }

    @Test
    public void test2100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2100");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int4 = solution3.getY();
        solution3.setY((int) (byte) 1);
        boolean boolean8 = solution3.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution3);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution10 = gcdSolutionWrapper9.getSolution();
        java.lang.String str11 = gcdSolutionWrapper9.toString();
        gcdSolutionWrapper9.setGcd((int) (byte) 1);
        java.lang.String str14 = gcdSolutionWrapper9.toString();
        java.lang.String str15 = gcdSolutionWrapper9.toString();
        int int16 = gcdSolutionWrapper9.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation20 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int21 = equation20.c();
        int int22 = equation20.b();
        int int23 = equation20.c();
        int int24 = equation20.c();
        boolean boolean25 = gcdSolutionWrapper9.equals((java.lang.Object) int24);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution29 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (short) -1, (int) (byte) 10);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper30 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(0, solution29);
        int int31 = gcdSolutionWrapper30.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution33 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper34 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution33);
        gcdSolutionWrapper34.setGcd((int) ' ');
        gcdSolutionWrapper34.setGcd((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution39 = gcdSolutionWrapper34.getSolution();
        int int40 = gcdSolutionWrapper34.getGcd();
        gcdSolutionWrapper34.setGcd(0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation46 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution47 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation46);
        solution47.setY(0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation53 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (short) 10, 10, 52);
        boolean boolean54 = solution47.equals((java.lang.Object) (short) 10);
        gcdSolutionWrapper34.setSolution(solution47);
        gcdSolutionWrapper30.setSolution(solution47);
        solution47.setY((int) '4');
        int int59 = solution47.getY();
        gcdSolutionWrapper9.setSolution(solution47);
        java.lang.String str61 = gcdSolutionWrapper9.toString();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(solution10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str11, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]" + "'", str14, "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]" + "'", str15, "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 35 + "'", int21 == 35);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 35 + "'", int23 == 35);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 35 + "'", int24 == 35);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNull(solution39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(solution47);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 52 + "'", int59 == 52);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=Solution[x=35, y=52]]" + "'", str61, "GcdSolutionWrapper[gcd=1, solution=Solution[x=35, y=52]]");
    }

    @Test
    public void test2101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2101");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int5 = equation4.c();
        int int6 = equation4.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution10 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int11 = solution10.getY();
        solution10.setY((int) (byte) 1);
        boolean boolean15 = solution10.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper16 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution10);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution17 = gcdSolutionWrapper16.getSolution();
        java.lang.String str18 = gcdSolutionWrapper16.toString();
        gcdSolutionWrapper16.setGcd((int) (byte) 1);
        boolean boolean21 = equation4.equals((java.lang.Object) gcdSolutionWrapper16);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution22 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation4);
        int int23 = solution22.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper24 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(1, solution22);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution25 = gcdSolutionWrapper24.getSolution();
        gcdSolutionWrapper24.setGcd((-1));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 35 + "'", int5 == 35);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(solution17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str18, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(solution22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-35) + "'", int23 == (-35));
        org.junit.Assert.assertNotNull(solution25);
    }

    @Test
    public void test2102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2102");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) -1, 1);
        java.lang.String str3 = solution2.toString();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Solution[x=-1, y=1]" + "'", str3, "Solution[x=-1, y=1]");
    }

    @Test
    public void test2103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2103");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution1 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution1);
        gcdSolutionWrapper2.setGcd((int) ' ');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution5 = gcdSolutionWrapper2.getSolution();
        gcdSolutionWrapper2.setGcd((int) (short) -1);
        gcdSolutionWrapper2.setGcd((int) 'a');
        java.lang.String str10 = gcdSolutionWrapper2.toString();
        org.junit.Assert.assertNull(solution5);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "GcdSolutionWrapper[gcd=97, solution=null]" + "'", str10, "GcdSolutionWrapper[gcd=97, solution=null]");
    }

    @Test
    public void test2104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2104");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        int int4 = equation3.c();
        int int5 = equation3.c();
        int int6 = equation3.b();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
    }

    @Test
    public void test2105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2105");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 1, (int) (byte) -1, (int) (short) 100);
    }

    @Test
    public void test2106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2106");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(32, (-35), (int) (byte) 1);
        int int4 = equation3.b();
        java.lang.Class<?> wildcardClass5 = equation3.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-35) + "'", int4 == (-35));
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test2107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2107");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution7 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int8 = solution7.getY();
        solution7.setY((int) (byte) 1);
        boolean boolean12 = solution7.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper13 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution7);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution14 = gcdSolutionWrapper13.getSolution();
        java.lang.String str15 = gcdSolutionWrapper13.toString();
        gcdSolutionWrapper13.setGcd((int) (byte) 1);
        boolean boolean18 = equation3.equals((java.lang.Object) gcdSolutionWrapper13);
        int int19 = gcdSolutionWrapper13.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution20 = gcdSolutionWrapper13.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation24 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        java.lang.String str25 = equation24.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution26 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation24);
        solution26.setY((int) (byte) 10);
        boolean boolean29 = solution20.equals((java.lang.Object) solution26);
        java.lang.String str30 = solution26.toString();
        int int31 = solution26.getX();
        solution26.setY(0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(solution14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str15, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(solution20);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str25, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertNotNull(solution26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Solution[x=0, y=10]" + "'", str30, "Solution[x=0, y=10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
    }

    @Test
    public void test2108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2108");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 100, (int) (byte) -1, (-35));
        int int4 = equation3.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution6 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper7 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution6);
        gcdSolutionWrapper7.setGcd((int) ' ');
        gcdSolutionWrapper7.setGcd((int) (short) 1);
        boolean boolean12 = equation3.equals((java.lang.Object) gcdSolutionWrapper7);
        java.lang.String str13 = equation3.toString();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 100 + "'", int4 == 100);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Equation[a=100, b=-1, c=-35]" + "'", str13, "Equation[a=100, b=-1, c=-35]");
    }

    @Test
    public void test2109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2109");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, 10, 97);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation7 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution8 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation7);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation12 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((-1), 0, (int) (byte) 10);
        boolean boolean13 = solution8.equals((java.lang.Object) (byte) 10);
        solution8.setX((-1));
        java.lang.String str16 = solution8.toString();
        solution8.setY(0);
        boolean boolean19 = equation3.equals((java.lang.Object) 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution20 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        int int21 = solution20.getX();
        java.lang.String str22 = solution20.toString();
        org.junit.Assert.assertNotNull(solution8);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Solution[x=-1, y=52]" + "'", str16, "Solution[x=-1, y=52]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(solution20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Solution[x=-1, y=0]" + "'", str22, "Solution[x=-1, y=0]");
    }

    @Test
    public void test2110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2110");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int4 = equation3.a();
        int int5 = equation3.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution13 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int14 = solution13.getY();
        solution13.setY((int) (byte) 1);
        boolean boolean18 = solution13.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper19 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution13);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution20 = gcdSolutionWrapper19.getSolution();
        java.lang.String str21 = gcdSolutionWrapper19.toString();
        gcdSolutionWrapper19.setGcd((int) (byte) 1);
        boolean boolean24 = equation9.equals((java.lang.Object) gcdSolutionWrapper19);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution26 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper27 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution26);
        gcdSolutionWrapper27.setGcd((int) ' ');
        gcdSolutionWrapper27.setGcd((int) (short) 100);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution34 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int35 = solution34.getY();
        java.lang.String str36 = solution34.toString();
        solution34.setX((int) (short) 1);
        boolean boolean40 = solution34.equals((java.lang.Object) (-1.0f));
        gcdSolutionWrapper27.setSolution(solution34);
        gcdSolutionWrapper19.setSolution(solution34);
        gcdSolutionWrapper19.setGcd(52);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution48 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int49 = solution48.getY();
        solution48.setY((int) (byte) 1);
        boolean boolean53 = solution48.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper54 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution48);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution57 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int58 = solution57.getY();
        java.lang.String str59 = solution57.toString();
        boolean boolean61 = solution57.equals((java.lang.Object) (-1L));
        gcdSolutionWrapper54.setSolution(solution57);
        int int63 = solution57.getX();
        java.lang.String str64 = solution57.toString();
        solution57.setX((int) (byte) 0);
        boolean boolean67 = gcdSolutionWrapper19.equals((java.lang.Object) (byte) 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation72 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution73 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation72);
        int int74 = solution73.getX();
        int int75 = solution73.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper76 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) 'a', solution73);
        int int77 = solution73.getX();
        boolean boolean78 = gcdSolutionWrapper19.equals((java.lang.Object) int77);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution79 = gcdSolutionWrapper19.getSolution();
        boolean boolean80 = equation3.equals((java.lang.Object) solution79);
        int int81 = equation3.c();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(solution20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str21, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Solution[x=97, y=1]" + "'", str36, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Solution[x=97, y=1]" + "'", str59, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 97 + "'", int63 == 97);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "Solution[x=97, y=1]" + "'", str64, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(solution73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(solution79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 35 + "'", int81 == 35);
    }

    @Test
    public void test2111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2111");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        java.lang.String str5 = equation4.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution6 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation4);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper7 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) 0, solution6);
        java.lang.String str8 = solution6.toString();
        int int9 = solution6.getY();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str5, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertNotNull(solution6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Solution[x=0, y=-35]" + "'", str8, "Solution[x=0, y=-35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-35) + "'", int9 == (-35));
    }

    @Test
    public void test2112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2112");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int5 = equation4.c();
        int int6 = equation4.b();
        int int7 = equation4.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution8 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation4);
        java.lang.String str9 = solution8.toString();
        int int10 = solution8.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper11 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(10, solution8);
        gcdSolutionWrapper11.setGcd((-1));
        java.lang.String str14 = gcdSolutionWrapper11.toString();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 35 + "'", int5 == 35);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 35 + "'", int7 == 35);
        org.junit.Assert.assertNotNull(solution8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Solution[x=0, y=-35]" + "'", str9, "Solution[x=0, y=-35]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-35) + "'", int10 == (-35));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=0, y=-35]]" + "'", str14, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=0, y=-35]]");
    }

    @Test
    public void test2113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2113");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution5 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation4);
        int int6 = solution5.getX();
        int int7 = solution5.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) 'a', solution5);
        gcdSolutionWrapper8.setGcd((int) (short) 0);
        gcdSolutionWrapper8.setGcd((int) '4');
        int int13 = gcdSolutionWrapper8.getGcd();
        gcdSolutionWrapper8.setGcd((int) (byte) 0);
        gcdSolutionWrapper8.setGcd((int) (short) -1);
        int int18 = gcdSolutionWrapper8.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution19 = gcdSolutionWrapper8.getSolution();
        org.junit.Assert.assertNotNull(solution5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(solution19);
    }

    @Test
    public void test2114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2114");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        java.lang.String str4 = equation3.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution5 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        int int6 = equation3.c();
        int int7 = equation3.c();
        int int8 = equation3.a();
        int int9 = equation3.b();
        java.lang.Class<?> wildcardClass10 = equation3.getClass();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str4, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertNotNull(solution5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 35 + "'", int6 == 35);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 35 + "'", int7 == 35);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test2115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2115");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(125, 32);
    }

    @Test
    public void test2116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2116");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        int int5 = equation4.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution6 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation4);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper7 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) 0, solution6);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 97 + "'", int5 == 97);
        org.junit.Assert.assertNotNull(solution6);
    }

    @Test
    public void test2117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2117");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((-35), (int) ' ', 0);
        java.lang.String str4 = equation3.toString();
        boolean boolean6 = equation3.equals((java.lang.Object) true);
        int int7 = equation3.a();
        java.lang.String str8 = equation3.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution14 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int15 = solution14.getY();
        solution14.setY((int) (byte) 1);
        boolean boolean19 = solution14.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper20 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution14);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper21 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution14);
        int int22 = gcdSolutionWrapper21.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution23 = gcdSolutionWrapper21.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper24 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution23);
        solution23.setY((int) (short) 1);
        boolean boolean27 = equation3.equals((java.lang.Object) (short) 1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Equation[a=-35, b=32, c=0]" + "'", str4, "Equation[a=-35, b=32, c=0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-35) + "'", int7 == (-35));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Equation[a=-35, b=32, c=0]" + "'", str8, "Equation[a=-35, b=32, c=0]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(solution23);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test2118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2118");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int4 = equation3.c();
        int int5 = equation3.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int10 = solution9.getY();
        solution9.setY((int) (byte) 1);
        boolean boolean14 = solution9.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper15 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution9);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution16 = gcdSolutionWrapper15.getSolution();
        java.lang.String str17 = gcdSolutionWrapper15.toString();
        gcdSolutionWrapper15.setGcd((int) (byte) 1);
        boolean boolean20 = equation3.equals((java.lang.Object) gcdSolutionWrapper15);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution21 = gcdSolutionWrapper15.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution22 = gcdSolutionWrapper15.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution26 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int27 = solution26.getY();
        solution26.setY((int) (byte) 1);
        boolean boolean31 = solution26.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper32 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution26);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution35 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int36 = solution35.getY();
        java.lang.String str37 = solution35.toString();
        boolean boolean39 = solution35.equals((java.lang.Object) (-1L));
        gcdSolutionWrapper32.setSolution(solution35);
        int int41 = solution35.getX();
        java.lang.String str42 = solution35.toString();
        solution35.setX((int) (byte) 0);
        boolean boolean45 = gcdSolutionWrapper15.equals((java.lang.Object) (byte) 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution46 = gcdSolutionWrapper15.getSolution();
        java.lang.Class<?> wildcardClass47 = solution46.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(solution16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str17, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(solution21);
        org.junit.Assert.assertNotNull(solution22);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Solution[x=97, y=1]" + "'", str37, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 97 + "'", int41 == 97);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Solution[x=97, y=1]" + "'", str42, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(solution46);
        org.junit.Assert.assertNotNull(wildcardClass47);
    }

    @Test
    public void test2119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2119");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) -1, (-1), 125);
        int int4 = equation3.a();
        int int5 = equation3.b();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
    }

    @Test
    public void test2120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2120");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution1 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution1);
        gcdSolutionWrapper2.setGcd((int) ' ');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution7 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int8 = solution7.getY();
        java.lang.String str9 = solution7.toString();
        gcdSolutionWrapper2.setSolution(solution7);
        boolean boolean12 = gcdSolutionWrapper2.equals((java.lang.Object) (short) 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution13 = gcdSolutionWrapper2.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution14 = gcdSolutionWrapper2.getSolution();
        gcdSolutionWrapper2.setGcd(1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution20 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) 100, (int) ' ');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper21 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) 10, solution20);
        gcdSolutionWrapper21.setGcd(97);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution27 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) 100, (int) ' ');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper28 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) 10, solution27);
        gcdSolutionWrapper28.setGcd(97);
        boolean boolean31 = gcdSolutionWrapper21.equals((java.lang.Object) gcdSolutionWrapper28);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation35 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution36 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation35);
        solution36.setY((int) (byte) 10);
        int int39 = solution36.getY();
        boolean boolean40 = gcdSolutionWrapper21.equals((java.lang.Object) solution36);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution43 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) 100, (int) ' ');
        int int44 = solution43.getY();
        boolean boolean45 = solution36.equals((java.lang.Object) solution43);
        gcdSolutionWrapper2.setSolution(solution43);
        gcdSolutionWrapper2.setGcd((-35));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Solution[x=97, y=1]" + "'", str9, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(solution13);
        org.junit.Assert.assertNotNull(solution14);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(solution36);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 10 + "'", int39 == 10);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 32 + "'", int44 == 32);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test2121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2121");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int9 = solution8.getY();
        solution8.setY((int) (byte) 1);
        boolean boolean13 = solution8.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper14 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution8);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution15 = gcdSolutionWrapper14.getSolution();
        java.lang.String str16 = gcdSolutionWrapper14.toString();
        gcdSolutionWrapper14.setGcd((int) (byte) 1);
        boolean boolean19 = equation4.equals((java.lang.Object) gcdSolutionWrapper14);
        int int20 = gcdSolutionWrapper14.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution21 = gcdSolutionWrapper14.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper22 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(32, solution21);
        int int23 = gcdSolutionWrapper22.getGcd();
        gcdSolutionWrapper22.setGcd((int) (short) 100);
        gcdSolutionWrapper22.setGcd(52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(solution15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str16, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(solution21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 32 + "'", int23 == 32);
    }

    @Test
    public void test2122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2122");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int4 = equation3.c();
        int int5 = equation3.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int10 = solution9.getY();
        solution9.setY((int) (byte) 1);
        boolean boolean14 = solution9.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper15 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution9);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution16 = gcdSolutionWrapper15.getSolution();
        java.lang.String str17 = gcdSolutionWrapper15.toString();
        gcdSolutionWrapper15.setGcd((int) (byte) 1);
        boolean boolean20 = equation3.equals((java.lang.Object) gcdSolutionWrapper15);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution21 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        java.lang.String str22 = equation3.toString();
        int int23 = equation3.b();
        int int24 = equation3.a();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(solution16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str17, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(solution21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str22, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
    }

    @Test
    public void test2123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2123");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int5 = solution4.getY();
        java.lang.String str6 = solution4.toString();
        solution4.setX((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((-35), solution4);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper10 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) ' ', solution4);
        gcdSolutionWrapper10.setGcd(52);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution13 = gcdSolutionWrapper10.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution17 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) '4', (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper18 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(0, solution17);
        java.lang.String str19 = gcdSolutionWrapper18.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution20 = gcdSolutionWrapper18.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation24 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int25 = equation24.c();
        int int26 = equation24.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution30 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int31 = solution30.getY();
        solution30.setY((int) (byte) 1);
        boolean boolean35 = solution30.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper36 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution30);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution37 = gcdSolutionWrapper36.getSolution();
        java.lang.String str38 = gcdSolutionWrapper36.toString();
        gcdSolutionWrapper36.setGcd((int) (byte) 1);
        boolean boolean41 = equation24.equals((java.lang.Object) gcdSolutionWrapper36);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution42 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation24);
        boolean boolean43 = gcdSolutionWrapper18.equals((java.lang.Object) solution42);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution47 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int48 = solution47.getY();
        solution47.setY((int) (byte) 1);
        boolean boolean52 = solution47.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper53 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution47);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution56 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int57 = solution56.getY();
        java.lang.String str58 = solution56.toString();
        boolean boolean60 = solution56.equals((java.lang.Object) (-1L));
        gcdSolutionWrapper53.setSolution(solution56);
        int int62 = solution56.getX();
        boolean boolean63 = solution42.equals((java.lang.Object) solution56);
        gcdSolutionWrapper10.setSolution(solution42);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution67 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((-35), 1);
        gcdSolutionWrapper10.setSolution(solution67);
        int int69 = gcdSolutionWrapper10.getGcd();
        gcdSolutionWrapper10.setGcd(32);
        gcdSolutionWrapper10.setGcd(100);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation77 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int78 = equation77.c();
        int int79 = equation77.b();
        int int80 = equation77.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution81 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation77);
        int int82 = equation77.a();
        int int83 = equation77.a();
        boolean boolean84 = gcdSolutionWrapper10.equals((java.lang.Object) int83);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Solution[x=97, y=1]" + "'", str6, "Solution[x=97, y=1]");
        org.junit.Assert.assertNotNull(solution13);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]" + "'", str19, "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]");
        org.junit.Assert.assertNotNull(solution20);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(solution37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str38, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(solution42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "Solution[x=97, y=1]" + "'", str58, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 97 + "'", int62 == 97);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 52 + "'", int69 == 52);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 35 + "'", int78 == 35);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-1) + "'", int79 == (-1));
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 35 + "'", int80 == 35);
        org.junit.Assert.assertNotNull(solution81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test2124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2124");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int4 = solution3.getY();
        java.lang.String str5 = solution3.toString();
        solution3.setX((int) (short) 1);
        solution3.setX((int) (byte) 10);
        java.lang.String str10 = solution3.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper11 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(35, solution3);
        gcdSolutionWrapper11.setGcd(0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution17 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) 0, (-35));
        solution17.setX((int) (byte) 10);
        int int20 = solution17.getX();
        solution17.setX(10);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper23 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 10, solution17);
        gcdSolutionWrapper11.setSolution(solution17);
        java.lang.String str25 = solution17.toString();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Solution[x=97, y=1]" + "'", str5, "Solution[x=97, y=1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Solution[x=10, y=1]" + "'", str10, "Solution[x=10, y=1]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10 + "'", int20 == 10);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Solution[x=10, y=-35]" + "'", str25, "Solution[x=10, y=-35]");
    }

    @Test
    public void test2125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2125");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((-75), 1);
        int int3 = solution2.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-75) + "'", int3 == (-75));
    }

    @Test
    public void test2126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2126");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int5 = solution4.getX();
        java.lang.String str6 = solution4.toString();
        solution4.setX((int) '#');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(0, solution4);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper10 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) ' ', solution4);
        int int11 = solution4.getX();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 97 + "'", int5 == 97);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Solution[x=97, y=1]" + "'", str6, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 35 + "'", int11 == 35);
    }

    @Test
    public void test2127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2127");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) -1, (int) (byte) 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution5 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper6 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution5);
        gcdSolutionWrapper6.setGcd((int) ' ');
        gcdSolutionWrapper6.setGcd((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution11 = gcdSolutionWrapper6.getSolution();
        int int12 = gcdSolutionWrapper6.getGcd();
        java.lang.Class<?> wildcardClass13 = gcdSolutionWrapper6.getClass();
        boolean boolean14 = solution3.equals((java.lang.Object) gcdSolutionWrapper6);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper15 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) '#', solution3);
        org.junit.Assert.assertNull(solution11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test2128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2128");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution1 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution1);
        gcdSolutionWrapper2.setGcd((int) ' ');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution7 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int8 = solution7.getY();
        java.lang.String str9 = solution7.toString();
        gcdSolutionWrapper2.setSolution(solution7);
        boolean boolean12 = gcdSolutionWrapper2.equals((java.lang.Object) (short) 0);
        gcdSolutionWrapper2.setGcd(35);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution17 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int18 = solution17.getY();
        java.lang.String str19 = solution17.toString();
        int int20 = solution17.getX();
        int int21 = solution17.getY();
        solution17.setY((int) (short) 100);
        int int24 = solution17.getX();
        solution17.setY(52);
        java.lang.String str27 = solution17.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation31 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int32 = equation31.c();
        int int33 = equation31.a();
        int int34 = equation31.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution35 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation31);
        boolean boolean36 = solution17.equals((java.lang.Object) equation31);
        gcdSolutionWrapper2.setSolution(solution17);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution38 = gcdSolutionWrapper2.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution39 = gcdSolutionWrapper2.getSolution();
        solution39.setY((int) '#');
        solution39.setX(32);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Solution[x=97, y=1]" + "'", str9, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Solution[x=97, y=1]" + "'", str19, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 97 + "'", int20 == 97);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 97 + "'", int24 == 97);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Solution[x=97, y=52]" + "'", str27, "Solution[x=97, y=52]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 35 + "'", int32 == 35);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(solution35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(solution38);
        org.junit.Assert.assertNotNull(solution39);
    }

    @Test
    public void test2129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2129");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(32, (int) (byte) 10);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution4 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper5 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution4);
        boolean boolean7 = gcdSolutionWrapper5.equals((java.lang.Object) "Equation[a=0, b=-1, c=35]");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution10 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) '4', (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution13 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int14 = solution13.getY();
        java.lang.String str15 = solution13.toString();
        solution13.setX((int) (short) 1);
        boolean boolean19 = solution13.equals((java.lang.Object) (-1.0f));
        java.lang.String str20 = solution13.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation24 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        java.lang.String str25 = equation24.toString();
        int int26 = equation24.c();
        boolean boolean27 = solution13.equals((java.lang.Object) equation24);
        int int28 = equation24.c();
        boolean boolean29 = solution10.equals((java.lang.Object) equation24);
        boolean boolean30 = gcdSolutionWrapper5.equals((java.lang.Object) equation24);
        boolean boolean31 = solution2.equals((java.lang.Object) gcdSolutionWrapper5);
        gcdSolutionWrapper5.setGcd((int) (short) 100);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution34 = gcdSolutionWrapper5.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation38 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution42 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int43 = solution42.getY();
        solution42.setY((int) (byte) 1);
        boolean boolean47 = solution42.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper48 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution42);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution49 = gcdSolutionWrapper48.getSolution();
        java.lang.String str50 = gcdSolutionWrapper48.toString();
        gcdSolutionWrapper48.setGcd((int) (byte) 1);
        boolean boolean53 = equation38.equals((java.lang.Object) gcdSolutionWrapper48);
        int int54 = equation38.c();
        int int55 = equation38.b();
        boolean boolean56 = gcdSolutionWrapper5.equals((java.lang.Object) int55);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Solution[x=97, y=1]" + "'", str15, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Solution[x=1, y=1]" + "'", str20, "Solution[x=1, y=1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str25, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 35 + "'", int26 == 35);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 35 + "'", int28 == 35);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(solution34);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(solution49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str50, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 35 + "'", int54 == 35);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test2130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2130");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution1 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution1);
        gcdSolutionWrapper2.setGcd((int) ' ');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution7 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int8 = solution7.getY();
        java.lang.String str9 = solution7.toString();
        gcdSolutionWrapper2.setSolution(solution7);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution11 = gcdSolutionWrapper2.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution15 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper16 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution15);
        boolean boolean18 = gcdSolutionWrapper16.equals((java.lang.Object) 1);
        java.lang.String str19 = gcdSolutionWrapper16.toString();
        gcdSolutionWrapper16.setGcd(32);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution24 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) 100, (int) (byte) -1);
        gcdSolutionWrapper16.setSolution(solution24);
        int int26 = solution24.getX();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper27 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution24);
        java.lang.String str28 = solution24.toString();
        solution24.setX((int) (byte) 10);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper31 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) ' ', solution24);
        gcdSolutionWrapper2.setSolution(solution24);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution33 = gcdSolutionWrapper2.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation37 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int38 = equation37.c();
        java.lang.String str39 = equation37.toString();
        int int40 = equation37.b();
        java.lang.Object obj41 = null;
        boolean boolean42 = equation37.equals(obj41);
        int int43 = equation37.b();
        boolean boolean44 = gcdSolutionWrapper2.equals((java.lang.Object) equation37);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution45 = gcdSolutionWrapper2.getSolution();
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Solution[x=97, y=1]" + "'", str9, "Solution[x=97, y=1]");
        org.junit.Assert.assertNotNull(solution11);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=null]" + "'", str19, "GcdSolutionWrapper[gcd=1, solution=null]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 100 + "'", int26 == 100);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Solution[x=100, y=-1]" + "'", str28, "Solution[x=100, y=-1]");
        org.junit.Assert.assertNotNull(solution33);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 35 + "'", int38 == 35);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str39, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(solution45);
    }

    @Test
    public void test2131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2131");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) 10, 1);
        int int3 = solution2.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
    }

    @Test
    public void test2132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2132");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution7 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int8 = solution7.getY();
        solution7.setY((int) (byte) 1);
        boolean boolean12 = solution7.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper13 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution7);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution14 = gcdSolutionWrapper13.getSolution();
        java.lang.String str15 = gcdSolutionWrapper13.toString();
        gcdSolutionWrapper13.setGcd((int) (byte) 1);
        boolean boolean18 = equation3.equals((java.lang.Object) gcdSolutionWrapper13);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution20 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper21 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution20);
        gcdSolutionWrapper21.setGcd((int) ' ');
        gcdSolutionWrapper21.setGcd((int) (short) 100);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution28 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int29 = solution28.getY();
        java.lang.String str30 = solution28.toString();
        solution28.setX((int) (short) 1);
        boolean boolean34 = solution28.equals((java.lang.Object) (-1.0f));
        gcdSolutionWrapper21.setSolution(solution28);
        gcdSolutionWrapper13.setSolution(solution28);
        gcdSolutionWrapper13.setGcd(52);
        int int39 = gcdSolutionWrapper13.getGcd();
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(solution14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str15, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Solution[x=97, y=1]" + "'", str30, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 52 + "'", int39 == 52);
    }

    @Test
    public void test2133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2133");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution5 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int6 = solution5.getY();
        java.lang.String str7 = solution5.toString();
        solution5.setX((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper10 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((-35), solution5);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper11 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) ' ', solution5);
        gcdSolutionWrapper11.setGcd(52);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution17 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) 100, (int) ' ');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper18 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) 10, solution17);
        gcdSolutionWrapper11.setSolution(solution17);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution20 = gcdSolutionWrapper11.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution21 = gcdSolutionWrapper11.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper22 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(52, solution21);
        solution21.setY(0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Solution[x=97, y=1]" + "'", str7, "Solution[x=97, y=1]");
        org.junit.Assert.assertNotNull(solution20);
        org.junit.Assert.assertNotNull(solution21);
    }

    @Test
    public void test2134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2134");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(0, (int) (byte) 100);
        int int3 = solution2.getY();
        solution2.setY(35);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
    }

    @Test
    public void test2135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2135");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation6 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution7 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation6);
        int int8 = solution7.getX();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation12 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        int int13 = equation12.c();
        int int14 = equation12.c();
        int int15 = equation12.a();
        boolean boolean16 = solution7.equals((java.lang.Object) equation12);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution17 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation12);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper18 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 100, solution17);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper19 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution17);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper20 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(10, solution17);
        int int21 = solution17.getY();
        org.junit.Assert.assertNotNull(solution7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(solution17);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
    }

    @Test
    public void test2136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2136");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(32, (int) (byte) 100, 1);
        int int4 = equation3.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) 100, (int) ' ');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) 10, solution8);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution12 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int13 = solution12.getY();
        java.lang.String str14 = solution12.toString();
        int int15 = solution12.getX();
        int int16 = solution12.getY();
        gcdSolutionWrapper9.setSolution(solution12);
        boolean boolean18 = equation3.equals((java.lang.Object) gcdSolutionWrapper9);
        java.lang.String str19 = gcdSolutionWrapper9.toString();
        java.lang.String str20 = gcdSolutionWrapper9.toString();
        gcdSolutionWrapper9.setGcd((int) (byte) 1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 100 + "'", int4 == 100);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Solution[x=97, y=1]" + "'", str14, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 97 + "'", int15 == 97);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "GcdSolutionWrapper[gcd=10, solution=Solution[x=97, y=1]]" + "'", str19, "GcdSolutionWrapper[gcd=10, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "GcdSolutionWrapper[gcd=10, solution=Solution[x=97, y=1]]" + "'", str20, "GcdSolutionWrapper[gcd=10, solution=Solution[x=97, y=1]]");
    }

    @Test
    public void test2137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2137");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (short) 1, (int) (byte) 1, (-1));
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution4 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        org.junit.Assert.assertNotNull(solution4);
    }

    @Test
    public void test2138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2138");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(100, (int) (short) 100, 1);
        int int4 = equation3.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution7 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(100, (int) (byte) -1);
        java.lang.String str8 = solution7.toString();
        boolean boolean9 = equation3.equals((java.lang.Object) solution7);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 100 + "'", int4 == 100);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Solution[x=100, y=-1]" + "'", str8, "Solution[x=100, y=-1]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test2139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2139");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution3);
        boolean boolean6 = gcdSolutionWrapper4.equals((java.lang.Object) 1);
        java.lang.String str7 = gcdSolutionWrapper4.toString();
        gcdSolutionWrapper4.setGcd(32);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution12 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) 100, (int) (byte) -1);
        gcdSolutionWrapper4.setSolution(solution12);
        int int14 = solution12.getX();
        int int15 = solution12.getX();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper16 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(35, solution12);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper17 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(0, solution12);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation21 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 1, (int) (short) 10, (int) (short) -1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution22 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation21);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution23 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation21);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution27 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int28 = solution27.getY();
        solution27.setY((int) (byte) 1);
        boolean boolean32 = solution27.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper33 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution27);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution36 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int37 = solution36.getY();
        java.lang.String str38 = solution36.toString();
        boolean boolean40 = solution36.equals((java.lang.Object) (-1L));
        gcdSolutionWrapper33.setSolution(solution36);
        int int42 = solution36.getX();
        boolean boolean43 = equation21.equals((java.lang.Object) solution36);
        java.lang.String str44 = equation21.toString();
        java.lang.String str45 = equation21.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution46 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation21);
        boolean boolean47 = gcdSolutionWrapper17.equals((java.lang.Object) solution46);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=null]" + "'", str7, "GcdSolutionWrapper[gcd=1, solution=null]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 100 + "'", int14 == 100);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertNotNull(solution22);
        org.junit.Assert.assertNotNull(solution23);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Solution[x=97, y=1]" + "'", str38, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 97 + "'", int42 == 97);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Equation[a=1, b=10, c=-1]" + "'", str44, "Equation[a=1, b=10, c=-1]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Equation[a=1, b=10, c=-1]" + "'", str45, "Equation[a=1, b=10, c=-1]");
        org.junit.Assert.assertNotNull(solution46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test2140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2140");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int4 = solution3.getX();
        solution3.setY(52);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper7 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) '#', solution3);
        java.lang.String str8 = solution3.toString();
        solution3.setY((int) (short) 10);
        java.lang.String str11 = solution3.toString();
        java.lang.String str12 = solution3.toString();
        java.lang.String str13 = solution3.toString();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 97 + "'", int4 == 97);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Solution[x=97, y=52]" + "'", str8, "Solution[x=97, y=52]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Solution[x=97, y=10]" + "'", str11, "Solution[x=97, y=10]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Solution[x=97, y=10]" + "'", str12, "Solution[x=97, y=10]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Solution[x=97, y=10]" + "'", str13, "Solution[x=97, y=10]");
    }

    @Test
    public void test2141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2141");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(1, 52);
        int int5 = solution4.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper6 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((-1), solution4);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution7 = gcdSolutionWrapper6.getSolution();
        int int8 = solution7.getX();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) '4', solution7);
        int int10 = solution7.getY();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 52 + "'", int5 == 52);
        org.junit.Assert.assertNotNull(solution7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
    }

    @Test
    public void test2142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2142");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution0 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution.INFINITE_SOLUTIONS;
        solution0.setY((int) (short) 100);
        solution0.setY((int) (byte) 1);
        solution0.setX((int) (short) 100);
        solution0.setY((int) (byte) 100);
        int int9 = solution0.getY();
        int int10 = solution0.getY();
        org.junit.Assert.assertNotNull(solution0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 100 + "'", int9 == 100);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 100 + "'", int10 == 100);
    }

    @Test
    public void test2143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2143");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, 52, (int) (byte) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution4 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        int int5 = solution4.getX();
        org.junit.Assert.assertNotNull(solution4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
    }

    @Test
    public void test2144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2144");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(1, 52);
        int int4 = solution3.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper5 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((-1), solution3);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution6 = gcdSolutionWrapper5.getSolution();
        java.lang.Class<?> wildcardClass7 = gcdSolutionWrapper5.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(solution6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test2145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2145");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int4 = equation3.c();
        int int5 = equation3.b();
        int int6 = equation3.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution7 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        int int8 = equation3.b();
        int int9 = equation3.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation13 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int14 = equation13.c();
        int int15 = equation13.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution19 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int20 = solution19.getY();
        solution19.setY((int) (byte) 1);
        boolean boolean24 = solution19.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper25 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution19);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution26 = gcdSolutionWrapper25.getSolution();
        java.lang.String str27 = gcdSolutionWrapper25.toString();
        gcdSolutionWrapper25.setGcd((int) (byte) 1);
        boolean boolean30 = equation13.equals((java.lang.Object) gcdSolutionWrapper25);
        int int31 = gcdSolutionWrapper25.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation35 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int36 = equation35.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution37 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation35);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution38 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation35);
        int int39 = equation35.b();
        int int40 = equation35.c();
        boolean boolean41 = gcdSolutionWrapper25.equals((java.lang.Object) int40);
        gcdSolutionWrapper25.setGcd((int) (short) -1);
        boolean boolean44 = equation3.equals((java.lang.Object) (short) -1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 35 + "'", int6 == 35);
        org.junit.Assert.assertNotNull(solution7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(solution26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str27, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 35 + "'", int36 == 35);
        org.junit.Assert.assertNotNull(solution37);
        org.junit.Assert.assertNotNull(solution38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 35 + "'", int40 == 35);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test2146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2146");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(0, (int) (short) 10, 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution6 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int7 = solution6.getY();
        java.lang.String str8 = solution6.toString();
        int int9 = solution6.getX();
        int int10 = solution6.getY();
        solution6.setY((int) (short) 100);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation17 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution18 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation17);
        int int19 = solution18.getX();
        int int20 = solution18.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper21 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) ' ', solution18);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution22 = gcdSolutionWrapper21.getSolution();
        boolean boolean23 = solution6.equals((java.lang.Object) gcdSolutionWrapper21);
        solution6.setX(52);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation29 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int30 = equation29.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution31 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation29);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution33 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper34 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution33);
        boolean boolean36 = gcdSolutionWrapper34.equals((java.lang.Object) 1);
        boolean boolean37 = equation29.equals((java.lang.Object) boolean36);
        int int38 = equation29.a();
        int int39 = equation29.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution41 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper42 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution41);
        gcdSolutionWrapper42.setGcd((int) ' ');
        gcdSolutionWrapper42.setGcd((int) (short) 1);
        int int47 = gcdSolutionWrapper42.getGcd();
        int int48 = gcdSolutionWrapper42.getGcd();
        boolean boolean49 = equation29.equals((java.lang.Object) int48);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution51 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper52 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution51);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution55 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int56 = solution55.getY();
        solution55.setY((int) (byte) 1);
        gcdSolutionWrapper52.setSolution(solution55);
        boolean boolean60 = equation29.equals((java.lang.Object) gcdSolutionWrapper52);
        java.lang.String str61 = gcdSolutionWrapper52.toString();
        boolean boolean62 = solution6.equals((java.lang.Object) gcdSolutionWrapper52);
        boolean boolean63 = equation3.equals((java.lang.Object) boolean62);
        int int64 = equation3.b();
        int int65 = equation3.a();
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Solution[x=97, y=1]" + "'", str8, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 97 + "'", int9 == 97);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(solution18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(solution22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 35 + "'", int30 == 35);
        org.junit.Assert.assertNotNull(solution31);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]" + "'", str61, "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 10 + "'", int64 == 10);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
    }

    @Test
    public void test2147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2147");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(96, (int) (short) 1, 125);
    }

    @Test
    public void test2148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2148");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, 0, (int) (short) -1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution7 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int8 = solution7.getY();
        solution7.setY((int) (byte) 1);
        boolean boolean12 = solution7.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper13 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution7);
        boolean boolean14 = equation3.equals((java.lang.Object) gcdSolutionWrapper13);
        boolean boolean16 = equation3.equals((java.lang.Object) "Equation[a=35, b=100, c=97]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test2149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2149");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) ' ', 52, 100);
        int int5 = equation4.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int10 = equation9.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution11 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation9);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution13 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper14 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution13);
        boolean boolean16 = gcdSolutionWrapper14.equals((java.lang.Object) 1);
        boolean boolean17 = equation9.equals((java.lang.Object) boolean16);
        int int18 = equation9.a();
        int int19 = equation9.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution21 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper22 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution21);
        gcdSolutionWrapper22.setGcd((int) ' ');
        gcdSolutionWrapper22.setGcd((int) (short) 1);
        int int27 = gcdSolutionWrapper22.getGcd();
        int int28 = gcdSolutionWrapper22.getGcd();
        boolean boolean29 = equation9.equals((java.lang.Object) int28);
        boolean boolean30 = equation4.equals((java.lang.Object) equation9);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution31 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation9);
        int int32 = solution31.getY();
        solution31.setX((int) (short) 10);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper35 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 0, solution31);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution37 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper38 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution37);
        boolean boolean40 = gcdSolutionWrapper38.equals((java.lang.Object) 1);
        java.lang.String str41 = gcdSolutionWrapper38.toString();
        gcdSolutionWrapper38.setGcd(32);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution46 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) 100, (int) (byte) -1);
        gcdSolutionWrapper38.setSolution(solution46);
        java.lang.String str48 = solution46.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution51 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int52 = solution51.getY();
        java.lang.String str53 = solution51.toString();
        solution51.setX((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation59 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int60 = equation59.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution61 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation59);
        boolean boolean62 = solution51.equals((java.lang.Object) solution61);
        java.lang.Class<?> wildcardClass63 = solution61.getClass();
        boolean boolean64 = solution46.equals((java.lang.Object) solution61);
        gcdSolutionWrapper35.setSolution(solution46);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 32 + "'", int5 == 32);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 35 + "'", int10 == 35);
        org.junit.Assert.assertNotNull(solution11);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(solution31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-35) + "'", int32 == (-35));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=null]" + "'", str41, "GcdSolutionWrapper[gcd=1, solution=null]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Solution[x=100, y=-1]" + "'", str48, "Solution[x=100, y=-1]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Solution[x=97, y=1]" + "'", str53, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 35 + "'", int60 == 35);
        org.junit.Assert.assertNotNull(solution61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(wildcardClass63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test2150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2150");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (short) 10, 10);
    }

    @Test
    public void test2151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2151");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution1 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution1);
        gcdSolutionWrapper2.setGcd((int) ' ');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution7 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int8 = solution7.getY();
        java.lang.String str9 = solution7.toString();
        gcdSolutionWrapper2.setSolution(solution7);
        boolean boolean12 = gcdSolutionWrapper2.equals((java.lang.Object) (short) 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution13 = gcdSolutionWrapper2.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation17 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int18 = equation17.c();
        int int19 = equation17.a();
        int int20 = equation17.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution21 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation17);
        boolean boolean22 = gcdSolutionWrapper2.equals((java.lang.Object) solution21);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution26 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int27 = solution26.getY();
        java.lang.String str28 = solution26.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation32 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        int int33 = equation32.c();
        int int34 = equation32.a();
        int int35 = equation32.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution36 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation32);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation40 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int41 = equation40.c();
        int int42 = equation40.b();
        int int43 = equation40.c();
        boolean boolean44 = solution36.equals((java.lang.Object) equation40);
        boolean boolean45 = solution26.equals((java.lang.Object) boolean44);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper46 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) '4', solution26);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution47 = gcdSolutionWrapper46.getSolution();
        boolean boolean48 = solution21.equals((java.lang.Object) gcdSolutionWrapper46);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Solution[x=97, y=1]" + "'", str9, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(solution13);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 35 + "'", int18 == 35);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(solution21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Solution[x=97, y=1]" + "'", str28, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 52 + "'", int33 == 52);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 97 + "'", int34 == 97);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 97 + "'", int35 == 97);
        org.junit.Assert.assertNotNull(solution36);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 35 + "'", int41 == 35);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 35 + "'", int43 == 35);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(solution47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test2152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2152");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) 'a', (int) (short) 10, 32);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution6 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(0, (int) (short) 10);
        boolean boolean7 = equation3.equals((java.lang.Object) (short) 10);
        int int8 = equation3.c();
        java.lang.String str9 = equation3.toString();
        int int10 = equation3.c();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 32 + "'", int8 == 32);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Equation[a=97, b=10, c=32]" + "'", str9, "Equation[a=97, b=10, c=32]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 32 + "'", int10 == 32);
    }

    @Test
    public void test2153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2153");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int4 = equation3.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution5 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution7 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution7);
        boolean boolean10 = gcdSolutionWrapper8.equals((java.lang.Object) 1);
        boolean boolean11 = equation3.equals((java.lang.Object) boolean10);
        int int12 = equation3.a();
        int int13 = equation3.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution15 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper16 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution15);
        gcdSolutionWrapper16.setGcd((int) ' ');
        gcdSolutionWrapper16.setGcd((int) (short) 1);
        int int21 = gcdSolutionWrapper16.getGcd();
        int int22 = gcdSolutionWrapper16.getGcd();
        boolean boolean23 = equation3.equals((java.lang.Object) int22);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution25 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper26 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution25);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution29 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int30 = solution29.getY();
        solution29.setY((int) (byte) 1);
        gcdSolutionWrapper26.setSolution(solution29);
        boolean boolean34 = equation3.equals((java.lang.Object) gcdSolutionWrapper26);
        boolean boolean36 = equation3.equals((java.lang.Object) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation40 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, (-1), 32);
        java.lang.String str41 = equation40.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution44 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper45 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution44);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution48 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int49 = solution48.getY();
        solution48.setY((int) (byte) 1);
        gcdSolutionWrapper45.setSolution(solution48);
        int int53 = gcdSolutionWrapper45.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution56 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int57 = solution56.getY();
        java.lang.String str58 = solution56.toString();
        solution56.setX((int) (short) 1);
        boolean boolean62 = solution56.equals((java.lang.Object) (-1.0f));
        java.lang.String str63 = solution56.toString();
        java.lang.String str64 = solution56.toString();
        gcdSolutionWrapper45.setSolution(solution56);
        java.lang.String str66 = solution56.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper67 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) -1, solution56);
        boolean boolean68 = equation40.equals((java.lang.Object) solution56);
        boolean boolean69 = equation3.equals((java.lang.Object) equation40);
        int int70 = equation3.a();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNotNull(solution5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Equation[a=97, b=-1, c=32]" + "'", str41, "Equation[a=97, b=-1, c=32]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "Solution[x=97, y=1]" + "'", str58, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "Solution[x=1, y=1]" + "'", str63, "Solution[x=1, y=1]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "Solution[x=1, y=1]" + "'", str64, "Solution[x=1, y=1]");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "Solution[x=1, y=1]" + "'", str66, "Solution[x=1, y=1]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
    }

    @Test
    public void test2154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2154");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(10, 0);
        int int3 = solution2.getX();
        solution2.setX(100);
        solution2.setX(10);
        solution2.setY(32);
        solution2.setX((int) 'a');
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
    }

    @Test
    public void test2155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2155");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((-1), 0, (int) (byte) 10);
        int int4 = equation3.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((-35), (int) (short) 1, (-1));
        int int9 = equation8.b();
        java.lang.String str10 = equation8.toString();
        int int11 = equation8.a();
        boolean boolean12 = equation3.equals((java.lang.Object) int11);
        java.lang.Class<?> wildcardClass13 = equation3.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Equation[a=-35, b=1, c=-1]" + "'", str10, "Equation[a=-35, b=1, c=-1]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-35) + "'", int11 == (-35));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test2156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2156");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int4 = solution3.getY();
        java.lang.String str5 = solution3.toString();
        solution3.setX((int) (short) 1);
        java.lang.String str8 = solution3.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(35, solution3);
        gcdSolutionWrapper9.setGcd((int) (short) 10);
        gcdSolutionWrapper9.setGcd((-1));
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution16 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(32, (int) (byte) 10);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution20 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int21 = solution20.getY();
        solution20.setY((int) (byte) 1);
        boolean boolean25 = solution20.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper26 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution20);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution29 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int30 = solution29.getY();
        java.lang.String str31 = solution29.toString();
        boolean boolean33 = solution29.equals((java.lang.Object) (-1L));
        gcdSolutionWrapper26.setSolution(solution29);
        int int35 = solution29.getX();
        int int36 = solution29.getY();
        solution29.setY((int) (short) 10);
        solution29.setY(35);
        solution29.setX(0);
        boolean boolean43 = solution16.equals((java.lang.Object) solution29);
        java.lang.String str44 = solution16.toString();
        int int45 = solution16.getY();
        gcdSolutionWrapper9.setSolution(solution16);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Solution[x=97, y=1]" + "'", str5, "Solution[x=97, y=1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Solution[x=1, y=1]" + "'", str8, "Solution[x=1, y=1]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Solution[x=97, y=1]" + "'", str31, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 97 + "'", int35 == 97);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Solution[x=32, y=10]" + "'", str44, "Solution[x=32, y=10]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 10 + "'", int45 == 10);
    }

    @Test
    public void test2157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2157");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) (byte) 100, 32);
        int int4 = equation3.b();
        int int5 = equation3.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution7 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution7);
        gcdSolutionWrapper8.setGcd((int) ' ');
        gcdSolutionWrapper8.setGcd((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution13 = gcdSolutionWrapper8.getSolution();
        int int14 = gcdSolutionWrapper8.getGcd();
        gcdSolutionWrapper8.setGcd(0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation20 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        java.lang.String str21 = equation20.toString();
        boolean boolean22 = gcdSolutionWrapper8.equals((java.lang.Object) equation20);
        boolean boolean23 = equation3.equals((java.lang.Object) equation20);
        int int24 = equation20.a();
        java.lang.Class<?> wildcardClass25 = equation20.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 100 + "'", int4 == 100);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 32 + "'", int5 == 32);
        org.junit.Assert.assertNull(solution13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str21, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test2158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2158");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int4 = solution3.getY();
        solution3.setY((int) (byte) 1);
        boolean boolean8 = solution3.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution3);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution12 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int13 = solution12.getY();
        java.lang.String str14 = solution12.toString();
        boolean boolean16 = solution12.equals((java.lang.Object) (-1L));
        gcdSolutionWrapper9.setSolution(solution12);
        int int18 = solution12.getX();
        java.lang.String str19 = solution12.toString();
        solution12.setX((int) (byte) 0);
        int int22 = solution12.getX();
        solution12.setY(97);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Solution[x=97, y=1]" + "'", str14, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 97 + "'", int18 == 97);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Solution[x=97, y=1]" + "'", str19, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
    }

    @Test
    public void test2159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2159");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int4 = solution3.getY();
        java.lang.String str5 = solution3.toString();
        solution3.setX((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((-35), solution3);
        int int9 = gcdSolutionWrapper8.getGcd();
        int int10 = gcdSolutionWrapper8.getGcd();
        gcdSolutionWrapper8.setGcd((int) (short) -1);
        gcdSolutionWrapper8.setGcd((int) (byte) 0);
        boolean boolean16 = gcdSolutionWrapper8.equals((java.lang.Object) (-1.0f));
        gcdSolutionWrapper8.setGcd((int) ' ');
        java.lang.String str19 = gcdSolutionWrapper8.toString();
        int int20 = gcdSolutionWrapper8.getGcd();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Solution[x=97, y=1]" + "'", str5, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-35) + "'", int9 == (-35));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-35) + "'", int10 == (-35));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "GcdSolutionWrapper[gcd=32, solution=Solution[x=1, y=1]]" + "'", str19, "GcdSolutionWrapper[gcd=32, solution=Solution[x=1, y=1]]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 32 + "'", int20 == 32);
    }

    @Test
    public void test2160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2160");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(52, 1, 0);
        int int4 = equation3.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution12 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int13 = solution12.getY();
        solution12.setY((int) (byte) 1);
        boolean boolean17 = solution12.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper18 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution12);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution19 = gcdSolutionWrapper18.getSolution();
        java.lang.String str20 = gcdSolutionWrapper18.toString();
        gcdSolutionWrapper18.setGcd((int) (byte) 1);
        boolean boolean23 = equation8.equals((java.lang.Object) gcdSolutionWrapper18);
        java.lang.String str24 = equation8.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution25 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation8);
        solution25.setY((int) (byte) 0);
        boolean boolean28 = equation3.equals((java.lang.Object) (byte) 0);
        int int29 = equation3.c();
        int int30 = equation3.b();
        int int31 = equation3.a();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(solution19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str20, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str24, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertNotNull(solution25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 52 + "'", int31 == 52);
    }

    @Test
    public void test2161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2161");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int4 = solution3.getY();
        java.lang.String str5 = solution3.toString();
        solution3.setX((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((-35), solution3);
        int int9 = gcdSolutionWrapper8.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution10 = gcdSolutionWrapper8.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution11 = gcdSolutionWrapper8.getSolution();
        int int12 = solution11.getY();
        java.lang.String str13 = solution11.toString();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Solution[x=97, y=1]" + "'", str5, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-35) + "'", int9 == (-35));
        org.junit.Assert.assertNotNull(solution10);
        org.junit.Assert.assertNotNull(solution11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Solution[x=1, y=1]" + "'", str13, "Solution[x=1, y=1]");
    }

    @Test
    public void test2162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2162");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) 0, 32);
        int int3 = solution2.getX();
        solution2.setY(10);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test2163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2163");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (short) 10, 32);
    }

    @Test
    public void test2164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2164");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int4 = equation3.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution5 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution7 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution7);
        boolean boolean10 = gcdSolutionWrapper8.equals((java.lang.Object) 1);
        boolean boolean11 = equation3.equals((java.lang.Object) boolean10);
        int int12 = equation3.a();
        int int13 = equation3.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution15 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper16 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution15);
        gcdSolutionWrapper16.setGcd((int) ' ');
        gcdSolutionWrapper16.setGcd((int) (short) 1);
        int int21 = gcdSolutionWrapper16.getGcd();
        int int22 = gcdSolutionWrapper16.getGcd();
        boolean boolean23 = equation3.equals((java.lang.Object) int22);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution25 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper26 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution25);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution29 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int30 = solution29.getY();
        solution29.setY((int) (byte) 1);
        gcdSolutionWrapper26.setSolution(solution29);
        boolean boolean34 = equation3.equals((java.lang.Object) gcdSolutionWrapper26);
        int int35 = gcdSolutionWrapper26.getGcd();
        java.lang.String str36 = gcdSolutionWrapper26.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution40 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) 0, (-35));
        int int41 = solution40.getY();
        java.lang.String str42 = solution40.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper43 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(97, solution40);
        int int44 = solution40.getX();
        gcdSolutionWrapper26.setSolution(solution40);
        solution40.setY((-35));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNotNull(solution5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]" + "'", str36, "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-35) + "'", int41 == (-35));
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Solution[x=0, y=-35]" + "'", str42, "Solution[x=0, y=-35]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
    }

    @Test
    public void test2165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2165");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int9 = solution8.getY();
        solution8.setY((int) (byte) 1);
        boolean boolean13 = solution8.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper14 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution8);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution15 = gcdSolutionWrapper14.getSolution();
        java.lang.String str16 = gcdSolutionWrapper14.toString();
        gcdSolutionWrapper14.setGcd((int) (byte) 1);
        boolean boolean19 = equation4.equals((java.lang.Object) gcdSolutionWrapper14);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation23 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int24 = equation23.c();
        int int25 = equation23.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution26 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation23);
        boolean boolean27 = gcdSolutionWrapper14.equals((java.lang.Object) solution26);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution30 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int31 = solution30.getY();
        java.lang.String str32 = solution30.toString();
        solution30.setX((int) (short) 1);
        boolean boolean36 = solution30.equals((java.lang.Object) true);
        solution30.setY(32);
        gcdSolutionWrapper14.setSolution(solution30);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation43 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((-35), (int) (short) 1, (-1));
        int int44 = equation43.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution45 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation43);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution46 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation43);
        boolean boolean47 = solution30.equals((java.lang.Object) solution46);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper48 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(35, solution30);
        int int49 = solution30.getY();
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(solution15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str16, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 35 + "'", int24 == 35);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(solution26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Solution[x=97, y=1]" + "'", str32, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(solution45);
        org.junit.Assert.assertNotNull(solution46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 32 + "'", int49 == 32);
    }

    @Test
    public void test2166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2166");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(100, (int) (byte) -1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation6 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int7 = equation6.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution8 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation6);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution10 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper11 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution10);
        boolean boolean13 = gcdSolutionWrapper11.equals((java.lang.Object) 1);
        boolean boolean14 = equation6.equals((java.lang.Object) boolean13);
        int int15 = equation6.a();
        boolean boolean16 = solution2.equals((java.lang.Object) int15);
        solution2.setY(10);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution21 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) ' ', 52);
        boolean boolean22 = solution2.equals((java.lang.Object) ' ');
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 35 + "'", int7 == 35);
        org.junit.Assert.assertNotNull(solution8);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test2167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2167");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(96, 0, 97);
    }

    @Test
    public void test2168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2168");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 100, (int) (byte) -1, (-35));
        int int4 = equation3.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution6 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper7 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution6);
        gcdSolutionWrapper7.setGcd((int) ' ');
        gcdSolutionWrapper7.setGcd((int) (short) 1);
        boolean boolean12 = equation3.equals((java.lang.Object) gcdSolutionWrapper7);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution15 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) 100, 0);
        boolean boolean16 = gcdSolutionWrapper7.equals((java.lang.Object) solution15);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation20 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '#', 52, 32);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution23 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int24 = solution23.getY();
        java.lang.String str25 = solution23.toString();
        solution23.setX((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation31 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int32 = equation31.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution33 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation31);
        boolean boolean34 = solution23.equals((java.lang.Object) solution33);
        boolean boolean36 = solution33.equals((java.lang.Object) 0);
        boolean boolean37 = equation20.equals((java.lang.Object) solution33);
        int int38 = solution33.getX();
        java.lang.String str39 = solution33.toString();
        gcdSolutionWrapper7.setSolution(solution33);
        java.lang.String str41 = solution33.toString();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 100 + "'", int4 == 100);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Solution[x=97, y=1]" + "'", str25, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 35 + "'", int32 == 35);
        org.junit.Assert.assertNotNull(solution33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Solution[x=0, y=-35]" + "'", str39, "Solution[x=0, y=-35]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Solution[x=0, y=-35]" + "'", str41, "Solution[x=0, y=-35]");
    }

    @Test
    public void test2169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2169");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(35, (int) (byte) -1, (-1));
    }

    @Test
    public void test2170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2170");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((-35), (int) (short) 1, (-1));
        int int4 = equation3.b();
        java.lang.String str5 = equation3.toString();
        int int6 = equation3.c();
        int int7 = equation3.b();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Equation[a=-35, b=1, c=-1]" + "'", str5, "Equation[a=-35, b=1, c=-1]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
    }

    @Test
    public void test2171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2171");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) ' ', 52, 100);
        int int4 = equation3.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int9 = equation8.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution10 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation8);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution12 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper13 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution12);
        boolean boolean15 = gcdSolutionWrapper13.equals((java.lang.Object) 1);
        boolean boolean16 = equation8.equals((java.lang.Object) boolean15);
        int int17 = equation8.a();
        int int18 = equation8.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution20 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper21 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution20);
        gcdSolutionWrapper21.setGcd((int) ' ');
        gcdSolutionWrapper21.setGcd((int) (short) 1);
        int int26 = gcdSolutionWrapper21.getGcd();
        int int27 = gcdSolutionWrapper21.getGcd();
        boolean boolean28 = equation8.equals((java.lang.Object) int27);
        boolean boolean29 = equation3.equals((java.lang.Object) equation8);
        java.lang.String str30 = equation8.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution31 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation8);
        int int32 = equation8.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution36 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) '4', (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper37 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(0, solution36);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution38 = gcdSolutionWrapper37.getSolution();
        java.lang.String str39 = gcdSolutionWrapper37.toString();
        gcdSolutionWrapper37.setGcd((-1));
        int int42 = gcdSolutionWrapper37.getGcd();
        boolean boolean43 = equation8.equals((java.lang.Object) gcdSolutionWrapper37);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation47 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int48 = equation47.c();
        int int49 = equation47.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution53 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int54 = solution53.getY();
        solution53.setY((int) (byte) 1);
        boolean boolean58 = solution53.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper59 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution53);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution60 = gcdSolutionWrapper59.getSolution();
        java.lang.String str61 = gcdSolutionWrapper59.toString();
        gcdSolutionWrapper59.setGcd((int) (byte) 1);
        boolean boolean64 = equation47.equals((java.lang.Object) gcdSolutionWrapper59);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution65 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation47);
        int int66 = solution65.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation70 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution71 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation70);
        int int72 = solution71.getX();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation76 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        int int77 = equation76.c();
        int int78 = equation76.c();
        int int79 = equation76.a();
        boolean boolean80 = solution71.equals((java.lang.Object) equation76);
        int int81 = equation76.c();
        boolean boolean82 = solution65.equals((java.lang.Object) equation76);
        int int83 = equation76.b();
        boolean boolean84 = gcdSolutionWrapper37.equals((java.lang.Object) equation76);
        int int85 = gcdSolutionWrapper37.getGcd();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 32 + "'", int4 == 32);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(solution10);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str30, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertNotNull(solution31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(solution38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]" + "'", str39, "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 35 + "'", int48 == 35);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(solution60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str61, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(solution65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-35) + "'", int66 == (-35));
        org.junit.Assert.assertNotNull(solution71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 52 + "'", int79 == 52);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 52 + "'", int83 == 52);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-1) + "'", int85 == (-1));
    }

    @Test
    public void test2172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2172");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        java.lang.String str4 = equation3.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution5 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        int int6 = equation3.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation10 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution11 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation10);
        int int12 = equation10.c();
        boolean boolean13 = equation3.equals((java.lang.Object) int12);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution14 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str4, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertNotNull(solution5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 35 + "'", int6 == 35);
        org.junit.Assert.assertNotNull(solution11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(solution14);
    }

    @Test
    public void test2173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2173");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int4 = solution3.getY();
        java.lang.String str5 = solution3.toString();
        solution3.setX((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((-35), solution3);
        int int9 = gcdSolutionWrapper8.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution10 = gcdSolutionWrapper8.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation14 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution15 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation14);
        solution15.setY((int) (byte) 10);
        gcdSolutionWrapper8.setSolution(solution15);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution19 = gcdSolutionWrapper8.getSolution();
        boolean boolean21 = gcdSolutionWrapper8.equals((java.lang.Object) "Equation[a=0, b=32, c=0]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Solution[x=97, y=1]" + "'", str5, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-35) + "'", int9 == (-35));
        org.junit.Assert.assertNotNull(solution10);
        org.junit.Assert.assertNotNull(solution15);
        org.junit.Assert.assertNotNull(solution19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test2174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2174");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int5 = solution4.getY();
        solution4.setY((int) (byte) 1);
        boolean boolean9 = solution4.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper10 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution4);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution11 = gcdSolutionWrapper10.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution15 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) '4', (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper16 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(0, solution15);
        java.lang.String str17 = gcdSolutionWrapper16.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution18 = gcdSolutionWrapper16.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation22 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int23 = equation22.c();
        int int24 = equation22.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution28 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int29 = solution28.getY();
        solution28.setY((int) (byte) 1);
        boolean boolean33 = solution28.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper34 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution28);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution35 = gcdSolutionWrapper34.getSolution();
        java.lang.String str36 = gcdSolutionWrapper34.toString();
        gcdSolutionWrapper34.setGcd((int) (byte) 1);
        boolean boolean39 = equation22.equals((java.lang.Object) gcdSolutionWrapper34);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution40 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation22);
        boolean boolean41 = gcdSolutionWrapper16.equals((java.lang.Object) solution40);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution45 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int46 = solution45.getY();
        solution45.setY((int) (byte) 1);
        boolean boolean50 = solution45.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper51 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution45);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution54 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int55 = solution54.getY();
        java.lang.String str56 = solution54.toString();
        boolean boolean58 = solution54.equals((java.lang.Object) (-1L));
        gcdSolutionWrapper51.setSolution(solution54);
        int int60 = solution54.getX();
        boolean boolean61 = solution40.equals((java.lang.Object) solution54);
        boolean boolean62 = solution11.equals((java.lang.Object) solution54);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper63 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 0, solution11);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution64 = gcdSolutionWrapper63.getSolution();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(solution11);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]" + "'", str17, "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]");
        org.junit.Assert.assertNotNull(solution18);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 35 + "'", int23 == 35);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(solution35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str36, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(solution40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Solution[x=97, y=1]" + "'", str56, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 97 + "'", int60 == 97);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(solution64);
    }

    @Test
    public void test2175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2175");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, 0, (int) (short) -1);
        int int4 = equation3.c();
        int int5 = equation3.a();
        int int6 = equation3.a();
        int int7 = equation3.c();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
    }

    @Test
    public void test2176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2176");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution4 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution5 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        int int6 = solution5.getY();
        org.junit.Assert.assertNotNull(solution4);
        org.junit.Assert.assertNotNull(solution5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test2177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2177");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '#', 52, 32);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution6 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int7 = solution6.getY();
        java.lang.String str8 = solution6.toString();
        solution6.setX((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation14 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int15 = equation14.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution16 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation14);
        boolean boolean17 = solution6.equals((java.lang.Object) solution16);
        boolean boolean19 = solution16.equals((java.lang.Object) 0);
        boolean boolean20 = equation3.equals((java.lang.Object) solution16);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution24 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) '4', (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper25 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(0, solution24);
        java.lang.String str26 = gcdSolutionWrapper25.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation30 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        java.lang.String str31 = equation30.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution32 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation30);
        boolean boolean33 = gcdSolutionWrapper25.equals((java.lang.Object) solution32);
        boolean boolean34 = equation3.equals((java.lang.Object) gcdSolutionWrapper25);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution39 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(1, 52);
        int int40 = solution39.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper41 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((-1), solution39);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution42 = gcdSolutionWrapper41.getSolution();
        int int43 = solution42.getX();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper44 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) '4', solution42);
        gcdSolutionWrapper25.setSolution(solution42);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation49 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int50 = equation49.c();
        int int51 = equation49.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution55 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int56 = solution55.getY();
        solution55.setY((int) (byte) 1);
        boolean boolean60 = solution55.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper61 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution55);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution62 = gcdSolutionWrapper61.getSolution();
        java.lang.String str63 = gcdSolutionWrapper61.toString();
        gcdSolutionWrapper61.setGcd((int) (byte) 1);
        boolean boolean66 = equation49.equals((java.lang.Object) gcdSolutionWrapper61);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution67 = gcdSolutionWrapper61.getSolution();
        int int68 = gcdSolutionWrapper61.getGcd();
        java.lang.String str69 = gcdSolutionWrapper61.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation73 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, 0, (int) (short) -1);
        int int74 = equation73.c();
        int int75 = equation73.a();
        int int76 = equation73.a();
        boolean boolean77 = gcdSolutionWrapper61.equals((java.lang.Object) int76);
        gcdSolutionWrapper61.setGcd(97);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution82 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) 100, (int) (byte) -1);
        gcdSolutionWrapper61.setSolution(solution82);
        gcdSolutionWrapper25.setSolution(solution82);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Solution[x=97, y=1]" + "'", str8, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 35 + "'", int15 == 35);
        org.junit.Assert.assertNotNull(solution16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]" + "'", str26, "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str31, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertNotNull(solution32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 52 + "'", int40 == 52);
        org.junit.Assert.assertNotNull(solution42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 35 + "'", int50 == 35);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(solution62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str63, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(solution67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]" + "'", str69, "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test2178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2178");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution1 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution1);
        boolean boolean4 = gcdSolutionWrapper2.equals((java.lang.Object) "Equation[a=0, b=-1, c=35]");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution7 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) '4', (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution10 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int11 = solution10.getY();
        java.lang.String str12 = solution10.toString();
        solution10.setX((int) (short) 1);
        boolean boolean16 = solution10.equals((java.lang.Object) (-1.0f));
        java.lang.String str17 = solution10.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation21 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        java.lang.String str22 = equation21.toString();
        int int23 = equation21.c();
        boolean boolean24 = solution10.equals((java.lang.Object) equation21);
        int int25 = equation21.c();
        boolean boolean26 = solution7.equals((java.lang.Object) equation21);
        boolean boolean27 = gcdSolutionWrapper2.equals((java.lang.Object) equation21);
        int int28 = equation21.c();
        int int29 = equation21.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution30 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation21);
        java.lang.Class<?> wildcardClass31 = equation21.getClass();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Solution[x=97, y=1]" + "'", str12, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Solution[x=1, y=1]" + "'", str17, "Solution[x=1, y=1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str22, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 35 + "'", int23 == 35);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 35 + "'", int28 == 35);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(solution30);
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test2179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2179");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(0, (int) (short) 1, (int) (byte) -1);
        int int4 = equation3.b();
        int int5 = equation3.c();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
    }

    @Test
    public void test2180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2180");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution2);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution6 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int7 = solution6.getY();
        solution6.setY((int) (byte) 1);
        gcdSolutionWrapper3.setSolution(solution6);
        java.lang.String str11 = solution6.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper12 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) ' ', solution6);
        java.lang.String str13 = solution6.toString();
        solution6.setY(10);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Solution[x=97, y=1]" + "'", str11, "Solution[x=97, y=1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Solution[x=97, y=1]" + "'", str13, "Solution[x=97, y=1]");
    }

    @Test
    public void test2181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2181");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int5 = equation4.c();
        int int6 = equation4.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution10 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int11 = solution10.getY();
        solution10.setY((int) (byte) 1);
        boolean boolean15 = solution10.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper16 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution10);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution17 = gcdSolutionWrapper16.getSolution();
        java.lang.String str18 = gcdSolutionWrapper16.toString();
        gcdSolutionWrapper16.setGcd((int) (byte) 1);
        boolean boolean21 = equation4.equals((java.lang.Object) gcdSolutionWrapper16);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution22 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation4);
        int int23 = solution22.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper24 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(1, solution22);
        java.lang.String str25 = gcdSolutionWrapper24.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation29 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution30 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation29);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation34 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((-1), 0, (int) (byte) 10);
        boolean boolean35 = solution30.equals((java.lang.Object) (byte) 10);
        int int36 = solution30.getY();
        int int37 = solution30.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation41 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 1, (int) (short) 10, (int) (short) -1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution42 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation41);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution43 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation41);
        int int44 = equation41.c();
        boolean boolean45 = solution30.equals((java.lang.Object) int44);
        gcdSolutionWrapper24.setSolution(solution30);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution47 = gcdSolutionWrapper24.getSolution();
        java.lang.String str48 = solution47.toString();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 35 + "'", int5 == 35);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(solution17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str18, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(solution22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-35) + "'", int23 == (-35));
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=Solution[x=0, y=-35]]" + "'", str25, "GcdSolutionWrapper[gcd=1, solution=Solution[x=0, y=-35]]");
        org.junit.Assert.assertNotNull(solution30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 10 + "'", int37 == 10);
        org.junit.Assert.assertNotNull(solution42);
        org.junit.Assert.assertNotNull(solution43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(solution47);
// flaky:         org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Solution[x=35, y=10]" + "'", str48, "Solution[x=35, y=10]");
    }

    @Test
    public void test2182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2182");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution2);
        gcdSolutionWrapper3.setGcd((int) ' ');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int9 = solution8.getY();
        java.lang.String str10 = solution8.toString();
        gcdSolutionWrapper3.setSolution(solution8);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution12 = gcdSolutionWrapper3.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution13 = gcdSolutionWrapper3.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation17 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int18 = equation17.c();
        int int19 = equation17.b();
        int int20 = equation17.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution21 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation17);
        gcdSolutionWrapper3.setSolution(solution21);
        int int23 = gcdSolutionWrapper3.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution24 = gcdSolutionWrapper3.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation29 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution30 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation29);
        java.lang.String str31 = solution30.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper32 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(1, solution30);
        boolean boolean33 = solution24.equals((java.lang.Object) solution30);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper34 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(96, solution24);
        java.lang.String str35 = gcdSolutionWrapper34.toString();
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Solution[x=97, y=1]" + "'", str10, "Solution[x=97, y=1]");
        org.junit.Assert.assertNotNull(solution12);
        org.junit.Assert.assertNotNull(solution13);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 35 + "'", int18 == 35);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 35 + "'", int20 == 35);
        org.junit.Assert.assertNotNull(solution21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 32 + "'", int23 == 32);
        org.junit.Assert.assertNotNull(solution24);
        org.junit.Assert.assertNotNull(solution30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Solution[x=0, y=0]" + "'", str31, "Solution[x=0, y=0]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "GcdSolutionWrapper[gcd=96, solution=Solution[x=0, y=-35]]" + "'", str35, "GcdSolutionWrapper[gcd=96, solution=Solution[x=0, y=-35]]");
    }

    @Test
    public void test2183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2183");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((-1), (int) (short) 10);
    }

    @Test
    public void test2184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2184");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(100, 32, (int) (short) 1);
        int int4 = equation3.c();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
    }

    @Test
    public void test2185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2185");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int3 = solution2.getY();
        java.lang.String str4 = solution2.toString();
        int int5 = solution2.getX();
        int int6 = solution2.getY();
        solution2.setY((int) (short) 100);
        int int9 = solution2.getX();
        solution2.setY(52);
        int int12 = solution2.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Solution[x=97, y=1]" + "'", str4, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 97 + "'", int5 == 97);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 97 + "'", int9 == 97);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
    }

    @Test
    public void test2186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2186");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution5 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation4);
        solution5.setY(0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(0, solution5);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution9 = gcdSolutionWrapper8.getSolution();
        gcdSolutionWrapper8.setGcd((int) '4');
        org.junit.Assert.assertNotNull(solution5);
        org.junit.Assert.assertNotNull(solution9);
    }

    @Test
    public void test2187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2187");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int4 = equation3.c();
        int int5 = equation3.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int10 = solution9.getY();
        solution9.setY((int) (byte) 1);
        boolean boolean14 = solution9.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper15 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution9);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution16 = gcdSolutionWrapper15.getSolution();
        java.lang.String str17 = gcdSolutionWrapper15.toString();
        gcdSolutionWrapper15.setGcd((int) (byte) 1);
        boolean boolean20 = equation3.equals((java.lang.Object) gcdSolutionWrapper15);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution21 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution23 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper24 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution23);
        gcdSolutionWrapper24.setGcd((int) ' ');
        gcdSolutionWrapper24.setGcd((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution29 = gcdSolutionWrapper24.getSolution();
        int int30 = gcdSolutionWrapper24.getGcd();
        gcdSolutionWrapper24.setGcd(0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation36 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution37 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation36);
        solution37.setY(0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation43 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (short) 10, 10, 52);
        boolean boolean44 = solution37.equals((java.lang.Object) (short) 10);
        gcdSolutionWrapper24.setSolution(solution37);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution49 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int50 = solution49.getY();
        java.lang.String str51 = solution49.toString();
        solution49.setX((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper54 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((-35), solution49);
        java.lang.String str55 = solution49.toString();
        gcdSolutionWrapper24.setSolution(solution49);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation60 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(32, (int) (byte) 100, 1);
        int int61 = equation60.b();
        boolean boolean62 = gcdSolutionWrapper24.equals((java.lang.Object) int61);
        boolean boolean63 = equation3.equals((java.lang.Object) gcdSolutionWrapper24);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation68 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution69 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation68);
        int int70 = solution69.getX();
        int int71 = solution69.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper72 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) 'a', solution69);
        gcdSolutionWrapper72.setGcd((int) (short) 0);
        gcdSolutionWrapper72.setGcd((int) '4');
        boolean boolean77 = gcdSolutionWrapper24.equals((java.lang.Object) gcdSolutionWrapper72);
        gcdSolutionWrapper24.setGcd((int) (byte) 100);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(solution16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str17, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(solution21);
        org.junit.Assert.assertNull(solution29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(solution37);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Solution[x=97, y=1]" + "'", str51, "Solution[x=97, y=1]");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Solution[x=1, y=1]" + "'", str55, "Solution[x=1, y=1]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 100 + "'", int61 == 100);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(solution69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test2188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2188");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution2);
        gcdSolutionWrapper3.setGcd((int) ' ');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution6 = gcdSolutionWrapper3.getSolution();
        gcdSolutionWrapper3.setGcd((int) (short) -1);
        gcdSolutionWrapper3.setGcd((int) 'a');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution14 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int15 = solution14.getY();
        solution14.setY((int) (byte) 1);
        boolean boolean19 = solution14.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper20 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution14);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution21 = gcdSolutionWrapper20.getSolution();
        java.lang.String str22 = gcdSolutionWrapper20.toString();
        gcdSolutionWrapper20.setGcd((int) (byte) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution27 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((-1), (int) '4');
        gcdSolutionWrapper20.setSolution(solution27);
        java.lang.String str29 = solution27.toString();
        solution27.setY((int) ' ');
        solution27.setX(1);
        int int34 = solution27.getX();
        solution27.setY((int) (byte) -1);
        int int37 = solution27.getY();
        gcdSolutionWrapper3.setSolution(solution27);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper39 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) ' ', solution27);
        org.junit.Assert.assertNull(solution6);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(solution21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str22, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Solution[x=-1, y=52]" + "'", str29, "Solution[x=-1, y=52]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
    }

    @Test
    public void test2189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2189");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) '4', (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(0, solution3);
        java.lang.String str5 = gcdSolutionWrapper4.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution6 = gcdSolutionWrapper4.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution7 = gcdSolutionWrapper4.getSolution();
        java.lang.String str8 = gcdSolutionWrapper4.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution9 = gcdSolutionWrapper4.getSolution();
        int int10 = gcdSolutionWrapper4.getGcd();
        gcdSolutionWrapper4.setGcd((int) (short) -1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution13 = gcdSolutionWrapper4.getSolution();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]" + "'", str5, "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]");
        org.junit.Assert.assertNotNull(solution6);
        org.junit.Assert.assertNotNull(solution7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]" + "'", str8, "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]");
        org.junit.Assert.assertNotNull(solution9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(solution13);
    }

    @Test
    public void test2190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2190");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(32, (int) (short) 10);
        int int5 = solution4.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper6 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution4);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper7 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(1, solution4);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution11 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(10, 0);
        int int12 = solution11.getX();
        solution11.setX(100);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper15 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) -1, solution11);
        gcdSolutionWrapper7.setSolution(solution11);
        int int17 = gcdSolutionWrapper7.getGcd();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 10 + "'", int5 == 10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10 + "'", int12 == 10);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
    }

    @Test
    public void test2191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2191");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(0, (int) (short) 10);
        solution2.setY(35);
        solution2.setX((-75));
        java.lang.String str7 = solution2.toString();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Solution[x=-75, y=35]" + "'", str7, "Solution[x=-75, y=35]");
    }

    @Test
    public void test2192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2192");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int4 = solution3.getX();
        java.lang.String str5 = solution3.toString();
        solution3.setX((int) '#');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(0, solution3);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution10 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper11 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution10);
        boolean boolean13 = gcdSolutionWrapper11.equals((java.lang.Object) 1);
        gcdSolutionWrapper11.setGcd(10);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution18 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) '#', 0);
        gcdSolutionWrapper11.setSolution(solution18);
        gcdSolutionWrapper8.setSolution(solution18);
        java.lang.String str21 = gcdSolutionWrapper8.toString();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 97 + "'", int4 == 97);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Solution[x=97, y=1]" + "'", str5, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "GcdSolutionWrapper[gcd=0, solution=Solution[x=35, y=0]]" + "'", str21, "GcdSolutionWrapper[gcd=0, solution=Solution[x=35, y=0]]");
    }

    @Test
    public void test2193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2193");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(96, (-75), (int) (short) 0);
    }

    @Test
    public void test2194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2194");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (short) 1, (-35), (int) (short) 100);
    }

    @Test
    public void test2195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2195");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 10, 10, (int) (short) 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution4 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        java.lang.String str5 = equation3.toString();
        org.junit.Assert.assertNotNull(solution4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Equation[a=10, b=10, c=0]" + "'", str5, "Equation[a=10, b=10, c=0]");
    }

    @Test
    public void test2196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2196");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 100, (int) (short) 0, (int) (byte) 1);
        java.lang.Class<?> wildcardClass4 = equation3.getClass();
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test2197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2197");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int4 = solution3.getY();
        java.lang.String str5 = solution3.toString();
        java.lang.String str6 = solution3.toString();
        int int7 = solution3.getY();
        solution3.setX((int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper10 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution3);
        java.lang.String str11 = gcdSolutionWrapper10.toString();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Solution[x=97, y=1]" + "'", str5, "Solution[x=97, y=1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Solution[x=97, y=1]" + "'", str6, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=52, y=1]]" + "'", str11, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=52, y=1]]");
    }

    @Test
    public void test2198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2198");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int5 = equation4.c();
        int int6 = equation4.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution10 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int11 = solution10.getY();
        solution10.setY((int) (byte) 1);
        boolean boolean15 = solution10.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper16 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution10);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution17 = gcdSolutionWrapper16.getSolution();
        java.lang.String str18 = gcdSolutionWrapper16.toString();
        gcdSolutionWrapper16.setGcd((int) (byte) 1);
        boolean boolean21 = equation4.equals((java.lang.Object) gcdSolutionWrapper16);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution22 = gcdSolutionWrapper16.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution23 = gcdSolutionWrapper16.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution27 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int28 = solution27.getY();
        solution27.setY((int) (byte) 1);
        boolean boolean32 = solution27.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper33 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution27);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution36 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int37 = solution36.getY();
        java.lang.String str38 = solution36.toString();
        boolean boolean40 = solution36.equals((java.lang.Object) (-1L));
        gcdSolutionWrapper33.setSolution(solution36);
        int int42 = solution36.getX();
        java.lang.String str43 = solution36.toString();
        solution36.setX((int) (byte) 0);
        boolean boolean46 = gcdSolutionWrapper16.equals((java.lang.Object) (byte) 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution47 = gcdSolutionWrapper16.getSolution();
        java.lang.String str48 = gcdSolutionWrapper16.toString();
        int int49 = gcdSolutionWrapper16.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution50 = gcdSolutionWrapper16.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution51 = gcdSolutionWrapper16.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper52 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) ' ', solution51);
        java.lang.String str53 = solution51.toString();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 35 + "'", int5 == 35);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(solution17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str18, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(solution22);
        org.junit.Assert.assertNotNull(solution23);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Solution[x=97, y=1]" + "'", str38, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 97 + "'", int42 == 97);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Solution[x=97, y=1]" + "'", str43, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(solution47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]" + "'", str48, "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(solution50);
        org.junit.Assert.assertNotNull(solution51);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Solution[x=97, y=1]" + "'", str53, "Solution[x=97, y=1]");
    }

    @Test
    public void test2199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2199");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int4 = equation3.c();
        java.lang.String str5 = equation3.toString();
        int int6 = equation3.b();
        int int7 = equation3.b();
        int int8 = equation3.a();
        java.lang.String str9 = equation3.toString();
        java.lang.String str10 = equation3.toString();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str5, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str9, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str10, "Equation[a=0, b=-1, c=35]");
    }

    @Test
    public void test2200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2200");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, 0, (int) (short) -1);
        int int4 = equation3.c();
        int int5 = equation3.a();
        java.lang.String str6 = equation3.toString();
        java.lang.String str7 = equation3.toString();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Equation[a=0, b=0, c=-1]" + "'", str6, "Equation[a=0, b=0, c=-1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Equation[a=0, b=0, c=-1]" + "'", str7, "Equation[a=0, b=0, c=-1]");
    }

    @Test
    public void test2201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2201");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution1 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution1);
        gcdSolutionWrapper2.setGcd((int) ' ');
        gcdSolutionWrapper2.setGcd((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution7 = gcdSolutionWrapper2.getSolution();
        int int8 = gcdSolutionWrapper2.getGcd();
        gcdSolutionWrapper2.setGcd(0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation14 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution15 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation14);
        solution15.setY(0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation21 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (short) 10, 10, 52);
        boolean boolean22 = solution15.equals((java.lang.Object) (short) 10);
        gcdSolutionWrapper2.setSolution(solution15);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution27 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int28 = solution27.getY();
        java.lang.String str29 = solution27.toString();
        solution27.setX((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper32 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((-35), solution27);
        java.lang.String str33 = solution27.toString();
        gcdSolutionWrapper2.setSolution(solution27);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation38 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(32, (int) (byte) 100, 1);
        int int39 = equation38.b();
        boolean boolean40 = gcdSolutionWrapper2.equals((java.lang.Object) int39);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution43 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int44 = solution43.getY();
        java.lang.String str45 = solution43.toString();
        solution43.setX((int) (short) 1);
        solution43.setX((int) (byte) 10);
        java.lang.String str50 = solution43.toString();
        solution43.setY((int) 'a');
        solution43.setY(35);
        gcdSolutionWrapper2.setSolution(solution43);
        java.lang.String str56 = gcdSolutionWrapper2.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution57 = gcdSolutionWrapper2.getSolution();
        org.junit.Assert.assertNull(solution7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(solution15);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Solution[x=97, y=1]" + "'", str29, "Solution[x=97, y=1]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Solution[x=1, y=1]" + "'", str33, "Solution[x=1, y=1]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 100 + "'", int39 == 100);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Solution[x=97, y=1]" + "'", str45, "Solution[x=97, y=1]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Solution[x=10, y=1]" + "'", str50, "Solution[x=10, y=1]");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "GcdSolutionWrapper[gcd=0, solution=Solution[x=10, y=35]]" + "'", str56, "GcdSolutionWrapper[gcd=0, solution=Solution[x=10, y=35]]");
        org.junit.Assert.assertNotNull(solution57);
    }

    @Test
    public void test2202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2202");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation5 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int6 = equation5.c();
        int int7 = equation5.b();
        int int8 = equation5.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution9 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation5);
        java.lang.String str10 = solution9.toString();
        int int11 = solution9.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper12 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(10, solution9);
        solution9.setY((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper15 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(52, solution9);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 35 + "'", int6 == 35);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 35 + "'", int8 == 35);
        org.junit.Assert.assertNotNull(solution9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Solution[x=0, y=-35]" + "'", str10, "Solution[x=0, y=-35]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-35) + "'", int11 == (-35));
    }

    @Test
    public void test2203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2203");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution1 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution1);
        gcdSolutionWrapper2.setGcd((int) ' ');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution7 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int8 = solution7.getY();
        java.lang.String str9 = solution7.toString();
        gcdSolutionWrapper2.setSolution(solution7);
        boolean boolean12 = gcdSolutionWrapper2.equals((java.lang.Object) (short) 0);
        gcdSolutionWrapper2.setGcd(35);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution17 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int18 = solution17.getY();
        java.lang.String str19 = solution17.toString();
        int int20 = solution17.getX();
        int int21 = solution17.getY();
        solution17.setY((int) (short) 100);
        int int24 = solution17.getX();
        solution17.setY(52);
        java.lang.String str27 = solution17.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation31 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int32 = equation31.c();
        int int33 = equation31.a();
        int int34 = equation31.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution35 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation31);
        boolean boolean36 = solution17.equals((java.lang.Object) equation31);
        gcdSolutionWrapper2.setSolution(solution17);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution40 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int41 = solution40.getY();
        java.lang.String str42 = solution40.toString();
        solution40.setX((int) (short) 1);
        solution40.setX((int) (byte) 10);
        java.lang.String str47 = solution40.toString();
        solution40.setY((int) 'a');
        solution40.setY(35);
        boolean boolean52 = solution17.equals((java.lang.Object) solution40);
        int int53 = solution17.getX();
        solution17.setX(35);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Solution[x=97, y=1]" + "'", str9, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Solution[x=97, y=1]" + "'", str19, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 97 + "'", int20 == 97);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 97 + "'", int24 == 97);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Solution[x=97, y=52]" + "'", str27, "Solution[x=97, y=52]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 35 + "'", int32 == 35);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(solution35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Solution[x=97, y=1]" + "'", str42, "Solution[x=97, y=1]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Solution[x=10, y=1]" + "'", str47, "Solution[x=10, y=1]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 97 + "'", int53 == 97);
    }

    @Test
    public void test2204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2204");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int4 = solution3.getY();
        solution3.setY((int) (byte) 1);
        boolean boolean8 = solution3.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution3);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution10 = gcdSolutionWrapper9.getSolution();
        java.lang.String str11 = gcdSolutionWrapper9.toString();
        gcdSolutionWrapper9.setGcd((int) (byte) 1);
        java.lang.String str14 = gcdSolutionWrapper9.toString();
        java.lang.String str15 = gcdSolutionWrapper9.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation19 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        int int20 = equation19.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution21 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation19);
        boolean boolean22 = gcdSolutionWrapper9.equals((java.lang.Object) equation19);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution23 = gcdSolutionWrapper9.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation27 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int28 = equation27.c();
        java.lang.String str29 = equation27.toString();
        int int30 = equation27.b();
        int int31 = equation27.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution32 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation27);
        gcdSolutionWrapper9.setSolution(solution32);
        java.lang.Class<?> wildcardClass34 = solution32.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(solution10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str11, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]" + "'", str14, "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]" + "'", str15, "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 97 + "'", int20 == 97);
        org.junit.Assert.assertNotNull(solution21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(solution23);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 35 + "'", int28 == 35);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str29, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(solution32);
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test2205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2205");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(0, (-35), 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution4 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) '4', (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(0, solution8);
        java.lang.String str10 = gcdSolutionWrapper9.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation14 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        java.lang.String str15 = equation14.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution16 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation14);
        boolean boolean17 = gcdSolutionWrapper9.equals((java.lang.Object) solution16);
        gcdSolutionWrapper9.setGcd((int) (byte) 10);
        int int20 = gcdSolutionWrapper9.getGcd();
        boolean boolean21 = solution4.equals((java.lang.Object) gcdSolutionWrapper9);
        solution4.setY((int) 'a');
        org.junit.Assert.assertNotNull(solution4);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]" + "'", str10, "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str15, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertNotNull(solution16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10 + "'", int20 == 10);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test2206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2206");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int4 = solution3.getY();
        solution3.setY((int) (byte) 1);
        boolean boolean8 = solution3.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution3);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution10 = gcdSolutionWrapper9.getSolution();
        java.lang.String str11 = gcdSolutionWrapper9.toString();
        gcdSolutionWrapper9.setGcd((int) (byte) 1);
        java.lang.String str14 = gcdSolutionWrapper9.toString();
        java.lang.String str15 = gcdSolutionWrapper9.toString();
        int int16 = gcdSolutionWrapper9.getGcd();
        java.lang.String str17 = gcdSolutionWrapper9.toString();
        gcdSolutionWrapper9.setGcd((int) '#');
        int int20 = gcdSolutionWrapper9.getGcd();
        java.lang.String str21 = gcdSolutionWrapper9.toString();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(solution10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str11, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]" + "'", str14, "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]" + "'", str15, "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]" + "'", str17, "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 35 + "'", int20 == 35);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "GcdSolutionWrapper[gcd=35, solution=Solution[x=97, y=1]]" + "'", str21, "GcdSolutionWrapper[gcd=35, solution=Solution[x=97, y=1]]");
    }

    @Test
    public void test2207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2207");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (short) 100, (int) (short) 0, 1);
        int int4 = equation3.b();
        int int5 = equation3.a();
        int int6 = equation3.a();
        java.lang.String str7 = equation3.toString();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 100 + "'", int5 == 100);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 100 + "'", int6 == 100);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Equation[a=100, b=0, c=1]" + "'", str7, "Equation[a=100, b=0, c=1]");
    }

    @Test
    public void test2208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2208");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution2);
        gcdSolutionWrapper3.setGcd((int) ' ');
        gcdSolutionWrapper3.setGcd((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution8 = gcdSolutionWrapper3.getSolution();
        int int9 = gcdSolutionWrapper3.getGcd();
        gcdSolutionWrapper3.setGcd(0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation15 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution16 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation15);
        solution16.setY(0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation22 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (short) 10, 10, 52);
        boolean boolean23 = solution16.equals((java.lang.Object) (short) 10);
        gcdSolutionWrapper3.setSolution(solution16);
        java.lang.String str25 = solution16.toString();
        int int26 = solution16.getX();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper27 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) 100, solution16);
        gcdSolutionWrapper27.setGcd(52);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution30 = gcdSolutionWrapper27.getSolution();
        org.junit.Assert.assertNull(solution8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(solution16);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Solution[x=35, y=0]" + "'", str25, "Solution[x=35, y=0]");
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 35 + "'", int26 == 35);
        org.junit.Assert.assertNotNull(solution30);
    }

    @Test
    public void test2209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2209");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) 100, (int) ' ');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) 10, solution3);
        gcdSolutionWrapper4.setGcd(97);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution10 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) 100, (int) ' ');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper11 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) 10, solution10);
        gcdSolutionWrapper11.setGcd(97);
        boolean boolean14 = gcdSolutionWrapper4.equals((java.lang.Object) gcdSolutionWrapper11);
        int int15 = gcdSolutionWrapper11.getGcd();
        int int16 = gcdSolutionWrapper11.getGcd();
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 97 + "'", int15 == 97);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 97 + "'", int16 == 97);
    }

    @Test
    public void test2210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2210");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(35, (int) (byte) -1);
    }

    @Test
    public void test2211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2211");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(52, (int) (byte) 1, (int) (byte) 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution4 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        solution4.setY(52);
        org.junit.Assert.assertNotNull(solution4);
    }

    @Test
    public void test2212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2212");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution5 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation4);
        solution5.setY(0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(0, solution5);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation13 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution14 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation13);
        int int15 = solution14.getX();
        int int16 = solution14.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper17 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) 'a', solution14);
        int int18 = solution14.getX();
        gcdSolutionWrapper8.setSolution(solution14);
        java.lang.String str20 = gcdSolutionWrapper8.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation24 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 1, (int) (short) 10, (int) (short) -1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution25 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation24);
        int int26 = equation24.a();
        boolean boolean27 = gcdSolutionWrapper8.equals((java.lang.Object) equation24);
        int int28 = equation24.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution29 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation24);
        org.junit.Assert.assertNotNull(solution5);
        org.junit.Assert.assertNotNull(solution14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "GcdSolutionWrapper[gcd=0, solution=Solution[x=0, y=0]]" + "'", str20, "GcdSolutionWrapper[gcd=0, solution=Solution[x=0, y=0]]");
        org.junit.Assert.assertNotNull(solution25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(solution29);
    }

    @Test
    public void test2213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2213");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((-97), 125);
    }

    @Test
    public void test2214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2214");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (short) 10, (int) (byte) 0);
        java.lang.String str3 = solution2.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(35, (int) (short) 100);
        int int9 = solution8.getX();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper10 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(1, solution8);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper11 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) -1, solution8);
        boolean boolean12 = solution2.equals((java.lang.Object) (short) -1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Solution[x=10, y=0]" + "'", str3, "Solution[x=10, y=0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test2215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2215");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(32, (int) (short) 100, 52);
        int int4 = equation3.b();
        java.lang.String str5 = equation3.toString();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 100 + "'", int4 == 100);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Equation[a=32, b=100, c=52]" + "'", str5, "Equation[a=32, b=100, c=52]");
    }

    @Test
    public void test2216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2216");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(0, (int) (byte) 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution6 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int7 = solution6.getY();
        solution6.setY((int) (byte) 1);
        boolean boolean11 = solution6.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper12 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution6);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution13 = gcdSolutionWrapper12.getSolution();
        java.lang.String str14 = gcdSolutionWrapper12.toString();
        boolean boolean15 = solution2.equals((java.lang.Object) str14);
        solution2.setX(10);
        solution2.setY(97);
        solution2.setY((int) (short) -1);
        solution2.setX((int) (short) 10);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(solution13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str14, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test2217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2217");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution2);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution6 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int7 = solution6.getY();
        solution6.setY((int) (byte) 1);
        gcdSolutionWrapper3.setSolution(solution6);
        int int11 = gcdSolutionWrapper3.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution14 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int15 = solution14.getY();
        java.lang.String str16 = solution14.toString();
        solution14.setX((int) (short) 1);
        boolean boolean20 = solution14.equals((java.lang.Object) (-1.0f));
        java.lang.String str21 = solution14.toString();
        java.lang.String str22 = solution14.toString();
        gcdSolutionWrapper3.setSolution(solution14);
        solution14.setY((int) (byte) -1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper26 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) 1, solution14);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution29 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper30 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution29);
        boolean boolean32 = gcdSolutionWrapper30.equals((java.lang.Object) 1);
        java.lang.String str33 = gcdSolutionWrapper30.toString();
        gcdSolutionWrapper30.setGcd(32);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution38 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) 100, (int) (byte) -1);
        gcdSolutionWrapper30.setSolution(solution38);
        int int40 = solution38.getX();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper41 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution38);
        java.lang.String str42 = gcdSolutionWrapper41.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation46 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (short) 10, 10, 52);
        java.lang.String str47 = equation46.toString();
        int int48 = equation46.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution49 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation46);
        gcdSolutionWrapper41.setSolution(solution49);
        int int51 = solution49.getY();
        boolean boolean52 = gcdSolutionWrapper26.equals((java.lang.Object) solution49);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Solution[x=97, y=1]" + "'", str16, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Solution[x=1, y=1]" + "'", str21, "Solution[x=1, y=1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Solution[x=1, y=1]" + "'", str22, "Solution[x=1, y=1]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=null]" + "'", str33, "GcdSolutionWrapper[gcd=1, solution=null]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 100 + "'", int40 == 100);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=Solution[x=100, y=-1]]" + "'", str42, "GcdSolutionWrapper[gcd=1, solution=Solution[x=100, y=-1]]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Equation[a=10, b=10, c=52]" + "'", str47, "Equation[a=10, b=10, c=52]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 52 + "'", int48 == 52);
        org.junit.Assert.assertNotNull(solution49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test2218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2218");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int3 = solution2.getY();
        java.lang.String str4 = solution2.toString();
        solution2.setX((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation10 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, 0, (int) (short) -1);
        boolean boolean11 = solution2.equals((java.lang.Object) equation10);
        int int12 = equation10.c();
        int int13 = equation10.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution17 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) 0, (-35));
        solution17.setX((int) (byte) 10);
        int int20 = solution17.getX();
        solution17.setX(10);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper23 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(32, solution17);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation27 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int28 = equation27.c();
        int int29 = equation27.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution30 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation27);
        boolean boolean31 = solution17.equals((java.lang.Object) equation27);
        boolean boolean32 = equation10.equals((java.lang.Object) boolean31);
        int int33 = equation10.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution37 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int38 = solution37.getY();
        solution37.setY((int) (byte) 1);
        boolean boolean42 = solution37.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper43 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution37);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution44 = gcdSolutionWrapper43.getSolution();
        java.lang.String str45 = gcdSolutionWrapper43.toString();
        gcdSolutionWrapper43.setGcd((int) (byte) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution50 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int51 = solution50.getY();
        java.lang.String str52 = solution50.toString();
        int int53 = solution50.getX();
        gcdSolutionWrapper43.setSolution(solution50);
        gcdSolutionWrapper43.setGcd(32);
        java.lang.String str57 = gcdSolutionWrapper43.toString();
        boolean boolean58 = equation10.equals((java.lang.Object) gcdSolutionWrapper43);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution59 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: null");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Solution[x=97, y=1]" + "'", str4, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10 + "'", int20 == 10);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 35 + "'", int28 == 35);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(solution30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(solution44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str45, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Solution[x=97, y=1]" + "'", str52, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 97 + "'", int53 == 97);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "GcdSolutionWrapper[gcd=32, solution=Solution[x=97, y=1]]" + "'", str57, "GcdSolutionWrapper[gcd=32, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test2219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2219");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((-35), (int) ' ', 0);
        java.lang.String str4 = equation3.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '#', 52, 32);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution11 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int12 = solution11.getY();
        java.lang.String str13 = solution11.toString();
        solution11.setX((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation19 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int20 = equation19.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution21 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation19);
        boolean boolean22 = solution11.equals((java.lang.Object) solution21);
        boolean boolean24 = solution21.equals((java.lang.Object) 0);
        boolean boolean25 = equation8.equals((java.lang.Object) solution21);
        boolean boolean27 = solution21.equals((java.lang.Object) (byte) -1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation32 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution33 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation32);
        solution33.setY(0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper36 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(0, solution33);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation40 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution41 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation40);
        solution41.setY((int) (byte) 10);
        boolean boolean44 = solution33.equals((java.lang.Object) (byte) 10);
        boolean boolean45 = solution21.equals((java.lang.Object) (byte) 10);
        int int46 = solution21.getX();
        solution21.setY((int) (byte) 1);
        boolean boolean49 = equation3.equals((java.lang.Object) (byte) 1);
        int int50 = equation3.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation54 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int55 = equation54.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution56 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation54);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution58 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper59 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution58);
        boolean boolean61 = gcdSolutionWrapper59.equals((java.lang.Object) 1);
        boolean boolean62 = equation54.equals((java.lang.Object) boolean61);
        int int63 = equation54.a();
        int int64 = equation54.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution66 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper67 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution66);
        gcdSolutionWrapper67.setGcd((int) ' ');
        gcdSolutionWrapper67.setGcd((int) (short) 1);
        int int72 = gcdSolutionWrapper67.getGcd();
        int int73 = gcdSolutionWrapper67.getGcd();
        boolean boolean74 = equation54.equals((java.lang.Object) int73);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution76 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper77 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution76);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution80 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int81 = solution80.getY();
        solution80.setY((int) (byte) 1);
        gcdSolutionWrapper77.setSolution(solution80);
        boolean boolean85 = equation54.equals((java.lang.Object) gcdSolutionWrapper77);
        boolean boolean86 = equation3.equals((java.lang.Object) equation54);
        java.lang.String str87 = equation54.toString();
        java.lang.String str88 = equation54.toString();
        int int89 = equation54.a();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Equation[a=-35, b=32, c=0]" + "'", str4, "Equation[a=-35, b=32, c=0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Solution[x=97, y=1]" + "'", str13, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 35 + "'", int20 == 35);
        org.junit.Assert.assertNotNull(solution21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(solution33);
        org.junit.Assert.assertNotNull(solution41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 35 + "'", int55 == 35);
        org.junit.Assert.assertNotNull(solution56);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str87, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str88, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
    }

    @Test
    public void test2220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2220");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) '4', (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(0, solution3);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution5 = gcdSolutionWrapper4.getSolution();
        java.lang.String str6 = gcdSolutionWrapper4.toString();
        gcdSolutionWrapper4.setGcd((-1));
        gcdSolutionWrapper4.setGcd((int) (byte) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution14 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) 100, (int) ' ');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper15 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) 10, solution14);
        gcdSolutionWrapper15.setGcd(97);
        gcdSolutionWrapper15.setGcd(0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution22 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(32, (int) (byte) 10);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution26 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int27 = solution26.getY();
        solution26.setY((int) (byte) 1);
        boolean boolean31 = solution26.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper32 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution26);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution35 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int36 = solution35.getY();
        java.lang.String str37 = solution35.toString();
        boolean boolean39 = solution35.equals((java.lang.Object) (-1L));
        gcdSolutionWrapper32.setSolution(solution35);
        int int41 = solution35.getX();
        int int42 = solution35.getY();
        solution35.setY((int) (short) 10);
        solution35.setY(35);
        solution35.setX(0);
        boolean boolean49 = solution22.equals((java.lang.Object) solution35);
        gcdSolutionWrapper15.setSolution(solution22);
        solution22.setY((int) '4');
        gcdSolutionWrapper4.setSolution(solution22);
        int int54 = gcdSolutionWrapper4.getGcd();
        org.junit.Assert.assertNotNull(solution5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]" + "'", str6, "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Solution[x=97, y=1]" + "'", str37, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 97 + "'", int41 == 97);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
    }

    @Test
    public void test2221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2221");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution4 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        int int5 = equation3.c();
        int int6 = equation3.b();
        int int7 = equation3.c();
        int int8 = equation3.a();
        int int9 = equation3.a();
        org.junit.Assert.assertNotNull(solution4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 52 + "'", int8 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 52 + "'", int9 == 52);
    }

    @Test
    public void test2222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2222");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution1 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution1);
        gcdSolutionWrapper2.setGcd((int) ' ');
        gcdSolutionWrapper2.setGcd((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution7 = gcdSolutionWrapper2.getSolution();
        int int8 = gcdSolutionWrapper2.getGcd();
        gcdSolutionWrapper2.setGcd(0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation14 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int15 = equation14.c();
        java.lang.String str16 = equation14.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution20 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int21 = solution20.getY();
        java.lang.String str22 = solution20.toString();
        solution20.setX((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper25 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((-35), solution20);
        int int26 = gcdSolutionWrapper25.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution27 = gcdSolutionWrapper25.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation31 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution32 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation31);
        solution32.setY((int) (byte) 10);
        gcdSolutionWrapper25.setSolution(solution32);
        boolean boolean36 = equation14.equals((java.lang.Object) solution32);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution39 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int40 = solution39.getY();
        java.lang.String str41 = solution39.toString();
        solution39.setX((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation47 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, 0, (int) (short) -1);
        boolean boolean48 = solution39.equals((java.lang.Object) equation47);
        int int49 = equation47.c();
        int int50 = equation47.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution53 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int54 = solution53.getY();
        java.lang.String str55 = solution53.toString();
        solution53.setX((int) (short) 1);
        solution53.setX((int) (byte) 1);
        boolean boolean60 = equation47.equals((java.lang.Object) (byte) 1);
        java.lang.String str61 = equation47.toString();
        boolean boolean62 = equation14.equals((java.lang.Object) equation47);
        boolean boolean63 = gcdSolutionWrapper2.equals((java.lang.Object) boolean62);
        org.junit.Assert.assertNull(solution7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 35 + "'", int15 == 35);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str16, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Solution[x=97, y=1]" + "'", str22, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-35) + "'", int26 == (-35));
        org.junit.Assert.assertNotNull(solution27);
        org.junit.Assert.assertNotNull(solution32);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Solution[x=97, y=1]" + "'", str41, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Solution[x=97, y=1]" + "'", str55, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "Equation[a=0, b=0, c=-1]" + "'", str61, "Equation[a=0, b=0, c=-1]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test2223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2223");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int4 = solution3.getY();
        solution3.setY((int) (byte) 1);
        boolean boolean8 = solution3.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution3);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution10 = gcdSolutionWrapper9.getSolution();
        java.lang.String str11 = gcdSolutionWrapper9.toString();
        gcdSolutionWrapper9.setGcd((int) (byte) 1);
        int int14 = gcdSolutionWrapper9.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution15 = gcdSolutionWrapper9.getSolution();
        solution15.setY((int) ' ');
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(solution10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str11, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(solution15);
    }

    @Test
    public void test2224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2224");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (short) 0, 97);
    }

    @Test
    public void test2225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2225");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution5 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int6 = solution5.getY();
        solution5.setY((int) (byte) 1);
        boolean boolean10 = solution5.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper11 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution5);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper12 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution5);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper13 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 0, solution5);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution17 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) '4', (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper18 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(0, solution17);
        java.lang.String str19 = gcdSolutionWrapper18.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution20 = gcdSolutionWrapper18.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution21 = gcdSolutionWrapper18.getSolution();
        java.lang.String str22 = gcdSolutionWrapper18.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution23 = gcdSolutionWrapper18.getSolution();
        boolean boolean24 = solution5.equals((java.lang.Object) solution23);
        solution5.setX(32);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]" + "'", str19, "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]");
        org.junit.Assert.assertNotNull(solution20);
        org.junit.Assert.assertNotNull(solution21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]" + "'", str22, "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]");
        org.junit.Assert.assertNotNull(solution23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test2226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2226");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(10, 0);
        int int4 = solution3.getX();
        solution3.setY(1);
        solution3.setX((int) (short) 0);
        solution3.setY((int) ' ');
        solution3.setX((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper13 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((-75), solution3);
        java.lang.String str14 = solution3.toString();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Solution[x=1, y=32]" + "'", str14, "Solution[x=1, y=32]");
    }

    @Test
    public void test2227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2227");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution5 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation4);
        int int6 = solution5.getX();
        int int7 = solution5.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) 'a', solution5);
        gcdSolutionWrapper8.setGcd((int) (short) 0);
        gcdSolutionWrapper8.setGcd((int) '4');
        int int13 = gcdSolutionWrapper8.getGcd();
        gcdSolutionWrapper8.setGcd((int) (short) -1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation20 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution21 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation20);
        int int22 = solution21.getX();
        int int23 = solution21.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper24 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) ' ', solution21);
        gcdSolutionWrapper24.setGcd((int) (byte) 10);
        gcdSolutionWrapper24.setGcd(0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution30 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper31 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution30);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution34 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int35 = solution34.getY();
        solution34.setY((int) (byte) 1);
        gcdSolutionWrapper31.setSolution(solution34);
        int int39 = gcdSolutionWrapper31.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution42 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int43 = solution42.getY();
        java.lang.String str44 = solution42.toString();
        solution42.setX((int) (short) 1);
        boolean boolean48 = solution42.equals((java.lang.Object) (-1.0f));
        java.lang.String str49 = solution42.toString();
        java.lang.String str50 = solution42.toString();
        gcdSolutionWrapper31.setSolution(solution42);
        java.lang.String str52 = solution42.toString();
        solution42.setY(52);
        int int55 = solution42.getY();
        solution42.setY((int) (short) 100);
        gcdSolutionWrapper24.setSolution(solution42);
        java.lang.String str59 = solution42.toString();
        gcdSolutionWrapper8.setSolution(solution42);
        solution42.setY((-97));
        int int63 = solution42.getY();
        org.junit.Assert.assertNotNull(solution5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertNotNull(solution21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Solution[x=97, y=1]" + "'", str44, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Solution[x=1, y=1]" + "'", str49, "Solution[x=1, y=1]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Solution[x=1, y=1]" + "'", str50, "Solution[x=1, y=1]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Solution[x=1, y=1]" + "'", str52, "Solution[x=1, y=1]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 52 + "'", int55 == 52);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Solution[x=1, y=100]" + "'", str59, "Solution[x=1, y=100]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-97) + "'", int63 == (-97));
    }

    @Test
    public void test2228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2228");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int4 = equation3.c();
        int int5 = equation3.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int10 = solution9.getY();
        solution9.setY((int) (byte) 1);
        boolean boolean14 = solution9.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper15 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution9);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution16 = gcdSolutionWrapper15.getSolution();
        java.lang.String str17 = gcdSolutionWrapper15.toString();
        gcdSolutionWrapper15.setGcd((int) (byte) 1);
        boolean boolean20 = equation3.equals((java.lang.Object) gcdSolutionWrapper15);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution21 = gcdSolutionWrapper15.getSolution();
        gcdSolutionWrapper15.setGcd(10);
        gcdSolutionWrapper15.setGcd(1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution26 = gcdSolutionWrapper15.getSolution();
        java.lang.Class<?> wildcardClass27 = gcdSolutionWrapper15.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(solution16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str17, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(solution21);
        org.junit.Assert.assertNotNull(solution26);
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test2229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2229");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((-35), 0, 35);
        int int4 = equation3.b();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test2230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2230");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int4 = solution3.getY();
        solution3.setY((int) (byte) 1);
        boolean boolean8 = solution3.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution3);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution10 = gcdSolutionWrapper9.getSolution();
        java.lang.String str11 = gcdSolutionWrapper9.toString();
        gcdSolutionWrapper9.setGcd((int) (byte) 1);
        java.lang.String str14 = gcdSolutionWrapper9.toString();
        java.lang.String str15 = gcdSolutionWrapper9.toString();
        int int16 = gcdSolutionWrapper9.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation20 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int21 = equation20.c();
        int int22 = equation20.b();
        int int23 = equation20.c();
        int int24 = equation20.c();
        boolean boolean25 = gcdSolutionWrapper9.equals((java.lang.Object) int24);
        gcdSolutionWrapper9.setGcd((int) (byte) 10);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution30 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (short) -1, (int) (byte) 10);
        boolean boolean31 = gcdSolutionWrapper9.equals((java.lang.Object) solution30);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution35 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int36 = solution35.getY();
        java.lang.String str37 = solution35.toString();
        solution35.setX((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper40 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((-35), solution35);
        solution35.setX((int) (byte) -1);
        gcdSolutionWrapper9.setSolution(solution35);
        int int44 = solution35.getX();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(solution10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str11, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]" + "'", str14, "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]" + "'", str15, "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 35 + "'", int21 == 35);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 35 + "'", int23 == 35);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 35 + "'", int24 == 35);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Solution[x=97, y=1]" + "'", str37, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
    }

    @Test
    public void test2231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2231");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int4 = solution3.getY();
        solution3.setY((int) (byte) 1);
        boolean boolean8 = solution3.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution3);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution10 = gcdSolutionWrapper9.getSolution();
        java.lang.String str11 = gcdSolutionWrapper9.toString();
        gcdSolutionWrapper9.setGcd((int) (byte) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution16 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((-1), (int) '4');
        gcdSolutionWrapper9.setSolution(solution16);
        java.lang.String str18 = solution16.toString();
        solution16.setY((int) ' ');
        solution16.setX(1);
        int int23 = solution16.getX();
        solution16.setY((int) (byte) -1);
        solution16.setX(1);
        java.lang.Class<?> wildcardClass28 = solution16.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(solution10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str11, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Solution[x=-1, y=52]" + "'", str18, "Solution[x=-1, y=52]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test2232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2232");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (short) -1, 125, 100);
    }

    @Test
    public void test2233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2233");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution1 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution1);
        gcdSolutionWrapper2.setGcd((int) ' ');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution7 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int8 = solution7.getY();
        java.lang.String str9 = solution7.toString();
        gcdSolutionWrapper2.setSolution(solution7);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution11 = gcdSolutionWrapper2.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution12 = gcdSolutionWrapper2.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation16 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int17 = equation16.c();
        int int18 = equation16.b();
        int int19 = equation16.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution20 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation16);
        gcdSolutionWrapper2.setSolution(solution20);
        int int22 = gcdSolutionWrapper2.getGcd();
        java.lang.Class<?> wildcardClass23 = gcdSolutionWrapper2.getClass();
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Solution[x=97, y=1]" + "'", str9, "Solution[x=97, y=1]");
        org.junit.Assert.assertNotNull(solution11);
        org.junit.Assert.assertNotNull(solution12);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 35 + "'", int17 == 35);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35 + "'", int19 == 35);
        org.junit.Assert.assertNotNull(solution20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 32 + "'", int22 == 32);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test2234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2234");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution4 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        int int5 = equation3.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution6 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        int int7 = solution6.getX();
        org.junit.Assert.assertNotNull(solution4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 52 + "'", int5 == 52);
        org.junit.Assert.assertNotNull(solution6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test2235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2235");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (short) 10, (int) ' ', (int) 'a');
    }

    @Test
    public void test2236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2236");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) ' ', 52, 100);
        int int4 = equation3.a();
        java.lang.String str5 = equation3.toString();
        int int6 = equation3.b();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 32 + "'", int4 == 32);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Equation[a=32, b=52, c=100]" + "'", str5, "Equation[a=32, b=52, c=100]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
    }

    @Test
    public void test2237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2237");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(100, (int) (byte) -1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int9 = equation8.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution10 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation8);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution12 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper13 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution12);
        boolean boolean15 = gcdSolutionWrapper13.equals((java.lang.Object) 1);
        boolean boolean16 = equation8.equals((java.lang.Object) boolean15);
        int int17 = equation8.a();
        boolean boolean18 = solution4.equals((java.lang.Object) int17);
        solution4.setY(10);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper21 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) 1, solution4);
        int int22 = solution4.getX();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper23 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(97, solution4);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(solution10);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 100 + "'", int22 == 100);
    }

    @Test
    public void test2238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2238");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(32, (int) (byte) 100, 1);
        int int4 = equation3.b();
        int int5 = equation3.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) -1, 52);
        boolean boolean9 = equation3.equals((java.lang.Object) solution8);
        solution8.setY((int) (short) 10);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 100 + "'", int4 == 100);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 100 + "'", int5 == 100);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test2239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2239");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution1 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution1);
        gcdSolutionWrapper2.setGcd((int) ' ');
        gcdSolutionWrapper2.setGcd((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution7 = gcdSolutionWrapper2.getSolution();
        gcdSolutionWrapper2.setGcd((int) (byte) 10);
        int int10 = gcdSolutionWrapper2.getGcd();
        java.lang.String str11 = gcdSolutionWrapper2.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution12 = gcdSolutionWrapper2.getSolution();
        org.junit.Assert.assertNull(solution7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "GcdSolutionWrapper[gcd=10, solution=null]" + "'", str11, "GcdSolutionWrapper[gcd=10, solution=null]");
        org.junit.Assert.assertNull(solution12);
    }

    @Test
    public void test2240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2240");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) 'a', 52, (int) 'a');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation7 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int8 = equation7.c();
        int int9 = equation7.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution13 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int14 = solution13.getY();
        solution13.setY((int) (byte) 1);
        boolean boolean18 = solution13.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper19 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution13);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution20 = gcdSolutionWrapper19.getSolution();
        java.lang.String str21 = gcdSolutionWrapper19.toString();
        gcdSolutionWrapper19.setGcd((int) (byte) 1);
        boolean boolean24 = equation7.equals((java.lang.Object) gcdSolutionWrapper19);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution25 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation7);
        int int26 = equation7.a();
        boolean boolean27 = equation3.equals((java.lang.Object) equation7);
        int int28 = equation7.a();
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 35 + "'", int8 == 35);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(solution20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str21, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(solution25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
    }

    @Test
    public void test2241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2241");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int4 = equation3.c();
        int int5 = equation3.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int10 = solution9.getY();
        solution9.setY((int) (byte) 1);
        boolean boolean14 = solution9.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper15 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution9);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution16 = gcdSolutionWrapper15.getSolution();
        java.lang.String str17 = gcdSolutionWrapper15.toString();
        gcdSolutionWrapper15.setGcd((int) (byte) 1);
        boolean boolean20 = equation3.equals((java.lang.Object) gcdSolutionWrapper15);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution21 = gcdSolutionWrapper15.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution25 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) 100, (int) ' ');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper26 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) 10, solution25);
        gcdSolutionWrapper26.setGcd(97);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution32 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) 100, (int) ' ');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper33 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) 10, solution32);
        gcdSolutionWrapper33.setGcd(97);
        boolean boolean36 = gcdSolutionWrapper26.equals((java.lang.Object) gcdSolutionWrapper33);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation40 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution41 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation40);
        solution41.setY((int) (byte) 10);
        int int44 = solution41.getY();
        boolean boolean45 = gcdSolutionWrapper26.equals((java.lang.Object) solution41);
        boolean boolean46 = gcdSolutionWrapper15.equals((java.lang.Object) gcdSolutionWrapper26);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation50 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) ' ', 52, 100);
        int int51 = equation50.a();
        java.lang.String str52 = equation50.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution53 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation50);
        gcdSolutionWrapper15.setSolution(solution53);
        java.lang.String str55 = gcdSolutionWrapper15.toString();
        int int56 = gcdSolutionWrapper15.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation61 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        java.lang.String str62 = equation61.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution63 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation61);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper64 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) 0, solution63);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation68 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(0, (int) (byte) 1, 0);
        boolean boolean69 = gcdSolutionWrapper64.equals((java.lang.Object) (byte) 1);
        int int70 = gcdSolutionWrapper64.getGcd();
        java.lang.String str71 = gcdSolutionWrapper64.toString();
        boolean boolean72 = gcdSolutionWrapper15.equals((java.lang.Object) str71);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(solution16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str17, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(solution21);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(solution41);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 10 + "'", int44 == 10);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 32 + "'", int51 == 32);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Equation[a=32, b=52, c=100]" + "'", str52, "Equation[a=32, b=52, c=100]");
        org.junit.Assert.assertNotNull(solution53);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=Solution[x=125, y=-75]]" + "'", str55, "GcdSolutionWrapper[gcd=1, solution=Solution[x=125, y=-75]]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str62, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertNotNull(solution63);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "GcdSolutionWrapper[gcd=0, solution=Solution[x=0, y=-35]]" + "'", str71, "GcdSolutionWrapper[gcd=0, solution=Solution[x=0, y=-35]]");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test2242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2242");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(0, 35);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation6 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int7 = equation6.c();
        int int8 = equation6.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution12 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int13 = solution12.getY();
        solution12.setY((int) (byte) 1);
        boolean boolean17 = solution12.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper18 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution12);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution19 = gcdSolutionWrapper18.getSolution();
        java.lang.String str20 = gcdSolutionWrapper18.toString();
        gcdSolutionWrapper18.setGcd((int) (byte) 1);
        boolean boolean23 = equation6.equals((java.lang.Object) gcdSolutionWrapper18);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution24 = gcdSolutionWrapper18.getSolution();
        boolean boolean25 = solution2.equals((java.lang.Object) solution24);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 35 + "'", int7 == 35);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(solution19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str20, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(solution24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test2243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2243");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution1 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution1);
        boolean boolean4 = gcdSolutionWrapper2.equals((java.lang.Object) 1);
        java.lang.String str5 = gcdSolutionWrapper2.toString();
        int int6 = gcdSolutionWrapper2.getGcd();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=null]" + "'", str5, "GcdSolutionWrapper[gcd=1, solution=null]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
    }

    @Test
    public void test2244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2244");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution4 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        int int5 = solution4.getX();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        int int10 = equation9.c();
        int int11 = equation9.c();
        int int12 = equation9.a();
        boolean boolean13 = solution4.equals((java.lang.Object) equation9);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution14 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation9);
        java.lang.String str15 = equation9.toString();
        int int16 = equation9.c();
        org.junit.Assert.assertNotNull(solution4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(solution14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Equation[a=52, b=52, c=0]" + "'", str15, "Equation[a=52, b=52, c=0]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test2245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2245");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int4 = equation3.c();
        int int5 = equation3.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int10 = solution9.getY();
        solution9.setY((int) (byte) 1);
        boolean boolean14 = solution9.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper15 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution9);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution16 = gcdSolutionWrapper15.getSolution();
        java.lang.String str17 = gcdSolutionWrapper15.toString();
        gcdSolutionWrapper15.setGcd((int) (byte) 1);
        boolean boolean20 = equation3.equals((java.lang.Object) gcdSolutionWrapper15);
        gcdSolutionWrapper15.setGcd((int) (short) 100);
        gcdSolutionWrapper15.setGcd((int) (byte) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution28 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((-1), (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper29 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) 0, solution28);
        int int30 = solution28.getY();
        boolean boolean31 = gcdSolutionWrapper15.equals((java.lang.Object) solution28);
        java.lang.String str32 = gcdSolutionWrapper15.toString();
        gcdSolutionWrapper15.setGcd((int) (short) 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(solution16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str17, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 52 + "'", int30 == 52);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]" + "'", str32, "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]");
    }

    @Test
    public void test2246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2246");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) 100, (int) ' ');
        java.lang.String str4 = solution3.toString();
        solution3.setX(35);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper7 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) -1, solution3);
        java.lang.Class<?> wildcardClass8 = gcdSolutionWrapper7.getClass();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Solution[x=100, y=32]" + "'", str4, "Solution[x=100, y=32]");
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test2247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2247");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(32, (int) (short) 10);
        int int5 = solution4.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper6 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution4);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper7 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(1, solution4);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution11 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(10, 0);
        int int12 = solution11.getX();
        solution11.setX(100);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper15 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) -1, solution11);
        gcdSolutionWrapper7.setSolution(solution11);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution19 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (byte) -1);
        boolean boolean20 = gcdSolutionWrapper7.equals((java.lang.Object) solution19);
        java.lang.String str21 = gcdSolutionWrapper7.toString();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 10 + "'", int5 == 10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10 + "'", int12 == 10);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=Solution[x=100, y=0]]" + "'", str21, "GcdSolutionWrapper[gcd=1, solution=Solution[x=100, y=0]]");
    }

    @Test
    public void test2248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2248");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int4 = solution3.getY();
        solution3.setY((int) (byte) 1);
        boolean boolean8 = solution3.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution3);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution12 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int13 = solution12.getY();
        java.lang.String str14 = solution12.toString();
        boolean boolean16 = solution12.equals((java.lang.Object) (-1L));
        gcdSolutionWrapper9.setSolution(solution12);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation22 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution23 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation22);
        solution23.setY(0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper26 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(0, solution23);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation30 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution31 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation30);
        solution31.setY((int) (byte) 10);
        boolean boolean34 = solution23.equals((java.lang.Object) (byte) 10);
        boolean boolean36 = solution23.equals((java.lang.Object) (-1));
        gcdSolutionWrapper9.setSolution(solution23);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Solution[x=97, y=1]" + "'", str14, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(solution23);
        org.junit.Assert.assertNotNull(solution31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test2249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2249");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution5 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation4);
        int int6 = solution5.getX();
        int int7 = solution5.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) 'a', solution5);
        int int9 = solution5.getX();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation14 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution15 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation14);
        int int16 = solution15.getX();
        int int17 = solution15.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper18 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) ' ', solution15);
        java.lang.String str19 = gcdSolutionWrapper18.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution21 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper22 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution21);
        boolean boolean24 = gcdSolutionWrapper22.equals((java.lang.Object) 1);
        java.lang.String str25 = gcdSolutionWrapper22.toString();
        gcdSolutionWrapper22.setGcd(32);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution30 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) 100, (int) (byte) -1);
        gcdSolutionWrapper22.setSolution(solution30);
        int int32 = solution30.getX();
        gcdSolutionWrapper18.setSolution(solution30);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution34 = gcdSolutionWrapper18.getSolution();
        boolean boolean35 = solution5.equals((java.lang.Object) solution34);
        int int36 = solution34.getX();
        org.junit.Assert.assertNotNull(solution5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(solution15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "GcdSolutionWrapper[gcd=32, solution=Solution[x=0, y=0]]" + "'", str19, "GcdSolutionWrapper[gcd=32, solution=Solution[x=0, y=0]]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=null]" + "'", str25, "GcdSolutionWrapper[gcd=1, solution=null]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 100 + "'", int32 == 100);
        org.junit.Assert.assertNotNull(solution34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 100 + "'", int36 == 100);
    }

    @Test
    public void test2250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2250");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) 10, (int) (short) 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation7 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int8 = equation7.c();
        int int9 = equation7.b();
        int int10 = equation7.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution11 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation7);
        int int12 = equation7.a();
        int int13 = equation7.b();
        int int14 = equation7.c();
        boolean boolean15 = solution3.equals((java.lang.Object) int14);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper16 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(0, solution3);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 35 + "'", int8 == 35);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 35 + "'", int10 == 35);
        org.junit.Assert.assertNotNull(solution11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test2251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2251");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution1 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution1);
        gcdSolutionWrapper2.setGcd((int) ' ');
        gcdSolutionWrapper2.setGcd((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution7 = gcdSolutionWrapper2.getSolution();
        int int8 = gcdSolutionWrapper2.getGcd();
        gcdSolutionWrapper2.setGcd(0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation14 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution15 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation14);
        solution15.setY(0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation21 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (short) 10, 10, 52);
        boolean boolean22 = solution15.equals((java.lang.Object) (short) 10);
        gcdSolutionWrapper2.setSolution(solution15);
        int int24 = gcdSolutionWrapper2.getGcd();
        org.junit.Assert.assertNull(solution7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(solution15);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
    }

    @Test
    public void test2252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2252");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int5 = equation4.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution6 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation4);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution8 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution8);
        boolean boolean11 = gcdSolutionWrapper9.equals((java.lang.Object) 1);
        boolean boolean12 = equation4.equals((java.lang.Object) boolean11);
        int int13 = equation4.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution14 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation4);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper15 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(1, solution14);
        solution14.setX(100);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 35 + "'", int5 == 35);
        org.junit.Assert.assertNotNull(solution6);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(solution14);
    }

    @Test
    public void test2253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2253");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(97, 100);
        solution2.setX((-75));
        solution2.setY((int) (short) 0);
        int int7 = solution2.getY();
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test2254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2254");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(10, (int) (byte) 100, (int) (short) 10);
        java.lang.String str4 = equation3.toString();
        java.lang.String str5 = equation3.toString();
        int int6 = equation3.b();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Equation[a=10, b=100, c=10]" + "'", str4, "Equation[a=10, b=100, c=10]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Equation[a=10, b=100, c=10]" + "'", str5, "Equation[a=10, b=100, c=10]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 100 + "'", int6 == 100);
    }

    @Test
    public void test2255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2255");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int4 = equation3.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution5 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution7 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution7);
        boolean boolean10 = gcdSolutionWrapper8.equals((java.lang.Object) 1);
        boolean boolean11 = equation3.equals((java.lang.Object) boolean10);
        int int12 = equation3.a();
        int int13 = equation3.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution15 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper16 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution15);
        gcdSolutionWrapper16.setGcd((int) ' ');
        gcdSolutionWrapper16.setGcd((int) (short) 1);
        int int21 = gcdSolutionWrapper16.getGcd();
        int int22 = gcdSolutionWrapper16.getGcd();
        boolean boolean23 = equation3.equals((java.lang.Object) int22);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution25 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper26 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution25);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution29 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int30 = solution29.getY();
        solution29.setY((int) (byte) 1);
        gcdSolutionWrapper26.setSolution(solution29);
        boolean boolean34 = equation3.equals((java.lang.Object) gcdSolutionWrapper26);
        boolean boolean36 = equation3.equals((java.lang.Object) (short) 1);
        java.lang.String str37 = equation3.toString();
        java.lang.String str38 = equation3.toString();
        java.lang.String str39 = equation3.toString();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNotNull(solution5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str37, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str38, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str39, "Equation[a=0, b=-1, c=35]");
    }

    @Test
    public void test2256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2256");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) 0, (-35));
        solution2.setX((int) (byte) 10);
        solution2.setX(1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation10 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (short) 100, (int) (short) 0, 1);
        int int11 = equation10.b();
        int int12 = equation10.b();
        java.lang.Object obj13 = null;
        boolean boolean14 = equation10.equals(obj13);
        int int15 = equation10.a();
        int int16 = equation10.a();
        boolean boolean17 = solution2.equals((java.lang.Object) int16);
        int int18 = solution2.getX();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 100 + "'", int16 == 100);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
    }

    @Test
    public void test2257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2257");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(32, (int) (short) 10);
        java.lang.String str3 = solution2.toString();
        solution2.setX((int) '#');
        boolean boolean7 = solution2.equals((java.lang.Object) "GcdSolutionWrapper[gcd=32, solution=Solution[x=97, y=1]]");
        java.lang.String str8 = solution2.toString();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Solution[x=32, y=10]" + "'", str3, "Solution[x=32, y=10]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Solution[x=35, y=10]" + "'", str8, "Solution[x=35, y=10]");
    }

    @Test
    public void test2258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2258");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int4 = equation3.c();
        int int5 = equation3.b();
        int int6 = equation3.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution7 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        int int8 = equation3.a();
        int int9 = equation3.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution10 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 35 + "'", int6 == 35);
        org.junit.Assert.assertNotNull(solution7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(solution10);
    }

    @Test
    public void test2259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2259");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '#', 52, 32);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution6 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int7 = solution6.getY();
        java.lang.String str8 = solution6.toString();
        solution6.setX((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation14 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int15 = equation14.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution16 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation14);
        boolean boolean17 = solution6.equals((java.lang.Object) solution16);
        boolean boolean19 = solution16.equals((java.lang.Object) 0);
        boolean boolean20 = equation3.equals((java.lang.Object) solution16);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution24 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) '4', (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper25 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(0, solution24);
        java.lang.String str26 = gcdSolutionWrapper25.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation30 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        java.lang.String str31 = equation30.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution32 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation30);
        boolean boolean33 = gcdSolutionWrapper25.equals((java.lang.Object) solution32);
        boolean boolean34 = equation3.equals((java.lang.Object) gcdSolutionWrapper25);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution39 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(1, 52);
        int int40 = solution39.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper41 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((-1), solution39);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution42 = gcdSolutionWrapper41.getSolution();
        int int43 = solution42.getX();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper44 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) '4', solution42);
        gcdSolutionWrapper25.setSolution(solution42);
        int int46 = gcdSolutionWrapper25.getGcd();
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Solution[x=97, y=1]" + "'", str8, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 35 + "'", int15 == 35);
        org.junit.Assert.assertNotNull(solution16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]" + "'", str26, "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str31, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertNotNull(solution32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 52 + "'", int40 == 52);
        org.junit.Assert.assertNotNull(solution42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
    }

    @Test
    public void test2260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2260");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        java.lang.String str4 = equation3.toString();
        int int5 = equation3.c();
        int int6 = equation3.a();
        java.lang.String str7 = equation3.toString();
        int int8 = equation3.b();
        java.lang.Class<?> wildcardClass9 = equation3.getClass();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str4, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 35 + "'", int5 == 35);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str7, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test2261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2261");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution5 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation4);
        int int6 = solution5.getX();
        int int7 = solution5.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) 'a', solution5);
        gcdSolutionWrapper8.setGcd((int) (short) 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution14 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(1, 52);
        int int15 = solution14.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper16 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((-1), solution14);
        boolean boolean17 = gcdSolutionWrapper8.equals((java.lang.Object) solution14);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution18 = gcdSolutionWrapper8.getSolution();
        java.lang.String str19 = solution18.toString();
        org.junit.Assert.assertNotNull(solution5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(solution18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Solution[x=0, y=0]" + "'", str19, "Solution[x=0, y=0]");
    }

    @Test
    public void test2262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2262");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) 0, (int) '#');
    }

    @Test
    public void test2263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2263");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int4 = equation3.c();
        int int5 = equation3.b();
        int int6 = equation3.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution7 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        java.lang.String str8 = solution7.toString();
        java.lang.String str9 = solution7.toString();
        solution7.setY(97);
        int int12 = solution7.getY();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 35 + "'", int6 == 35);
        org.junit.Assert.assertNotNull(solution7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Solution[x=0, y=-35]" + "'", str8, "Solution[x=0, y=-35]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Solution[x=0, y=-35]" + "'", str9, "Solution[x=0, y=-35]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 97 + "'", int12 == 97);
    }

    @Test
    public void test2264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2264");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (short) 100, (int) (short) 0, 1);
        int int4 = equation3.b();
        int int5 = equation3.b();
        java.lang.Object obj6 = null;
        boolean boolean7 = equation3.equals(obj6);
        int int8 = equation3.a();
        int int9 = equation3.a();
        int int10 = equation3.c();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 100 + "'", int8 == 100);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 100 + "'", int9 == 100);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
    }

    @Test
    public void test2265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2265");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int3 = solution2.getY();
        java.lang.String str4 = solution2.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution6 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper7 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution6);
        gcdSolutionWrapper7.setGcd((int) ' ');
        gcdSolutionWrapper7.setGcd((int) (short) 1);
        int int12 = gcdSolutionWrapper7.getGcd();
        gcdSolutionWrapper7.setGcd((int) (byte) -1);
        int int15 = gcdSolutionWrapper7.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution19 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int20 = solution19.getY();
        java.lang.String str21 = solution19.toString();
        solution19.setX((int) (short) 1);
        java.lang.String str24 = solution19.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper25 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(35, solution19);
        boolean boolean26 = gcdSolutionWrapper7.equals((java.lang.Object) solution19);
        boolean boolean27 = solution2.equals((java.lang.Object) gcdSolutionWrapper7);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution30 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int31 = solution30.getY();
        java.lang.String str32 = solution30.toString();
        solution30.setX((int) (short) 1);
        boolean boolean36 = solution30.equals((java.lang.Object) (-1.0f));
        java.lang.String str37 = solution30.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation41 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        java.lang.String str42 = equation41.toString();
        int int43 = equation41.c();
        boolean boolean44 = solution30.equals((java.lang.Object) equation41);
        int int45 = equation41.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution46 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation41);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution50 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (short) -1, (int) (byte) 10);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper51 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(0, solution50);
        int int52 = gcdSolutionWrapper51.getGcd();
        boolean boolean53 = equation41.equals((java.lang.Object) int52);
        java.lang.String str54 = equation41.toString();
        boolean boolean55 = gcdSolutionWrapper7.equals((java.lang.Object) equation41);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution56 = gcdSolutionWrapper7.getSolution();
        java.lang.String str57 = gcdSolutionWrapper7.toString();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Solution[x=97, y=1]" + "'", str4, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Solution[x=97, y=1]" + "'", str21, "Solution[x=97, y=1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Solution[x=1, y=1]" + "'", str24, "Solution[x=1, y=1]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Solution[x=97, y=1]" + "'", str32, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Solution[x=1, y=1]" + "'", str37, "Solution[x=1, y=1]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str42, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 35 + "'", int43 == 35);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(solution46);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str54, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(solution56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=null]" + "'", str57, "GcdSolutionWrapper[gcd=-1, solution=null]");
    }

    @Test
    public void test2266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2266");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int4 = equation3.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution5 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution7 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution7);
        boolean boolean10 = gcdSolutionWrapper8.equals((java.lang.Object) 1);
        boolean boolean11 = equation3.equals((java.lang.Object) boolean10);
        int int12 = equation3.a();
        int int13 = equation3.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution15 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper16 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution15);
        gcdSolutionWrapper16.setGcd((int) ' ');
        gcdSolutionWrapper16.setGcd((int) (short) 1);
        int int21 = gcdSolutionWrapper16.getGcd();
        int int22 = gcdSolutionWrapper16.getGcd();
        boolean boolean23 = equation3.equals((java.lang.Object) int22);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution25 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper26 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution25);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution29 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int30 = solution29.getY();
        solution29.setY((int) (byte) 1);
        gcdSolutionWrapper26.setSolution(solution29);
        boolean boolean34 = equation3.equals((java.lang.Object) gcdSolutionWrapper26);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution35 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution36 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        int int37 = equation3.a();
        int int38 = equation3.a();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNotNull(solution5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(solution35);
        org.junit.Assert.assertNotNull(solution36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
    }

    @Test
    public void test2267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2267");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (short) 0, 1, 125);
    }

    @Test
    public void test2268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2268");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (short) 100, (int) (byte) -1, 96);
    }

    @Test
    public void test2269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2269");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(35, (int) (short) 100, (int) (short) 0);
    }

    @Test
    public void test2270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2270");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        java.lang.String str5 = equation4.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution6 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation4);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper7 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) 0, solution6);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation11 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(0, (int) (byte) 1, 0);
        boolean boolean12 = gcdSolutionWrapper7.equals((java.lang.Object) (byte) 1);
        int int13 = gcdSolutionWrapper7.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution14 = gcdSolutionWrapper7.getSolution();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str5, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertNotNull(solution6);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(solution14);
    }

    @Test
    public void test2271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2271");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (-35), 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int9 = solution8.getY();
        solution8.setY((int) (byte) 1);
        boolean boolean13 = solution8.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper14 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution8);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution17 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int18 = solution17.getY();
        java.lang.String str19 = solution17.toString();
        boolean boolean21 = solution17.equals((java.lang.Object) (-1L));
        gcdSolutionWrapper14.setSolution(solution17);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper23 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) 'a', solution17);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation27 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        int int28 = equation27.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution29 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation27);
        java.lang.String str30 = equation27.toString();
        int int31 = equation27.b();
        int int32 = equation27.b();
        boolean boolean33 = gcdSolutionWrapper23.equals((java.lang.Object) equation27);
        int int34 = equation27.a();
        boolean boolean35 = equation3.equals((java.lang.Object) equation27);
        int int36 = equation3.c();
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Solution[x=97, y=1]" + "'", str19, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 97 + "'", int28 == 97);
        org.junit.Assert.assertNotNull(solution29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Equation[a=97, b=0, c=52]" + "'", str30, "Equation[a=97, b=0, c=52]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 97 + "'", int34 == 97);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
    }

    @Test
    public void test2272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2272");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) '#');
        java.lang.String str3 = solution2.toString();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Solution[x=97, y=35]" + "'", str3, "Solution[x=97, y=35]");
    }

    @Test
    public void test2273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2273");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (short) -1, (int) (byte) 0, (int) (byte) 1);
        int int4 = equation3.c();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
    }

    @Test
    public void test2274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2274");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) ' ', (-35), 35);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation7 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, 52, (int) (byte) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution8 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation7);
        boolean boolean9 = equation3.equals((java.lang.Object) solution8);
        solution8.setY(52);
        org.junit.Assert.assertNotNull(solution8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test2275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2275");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution4 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        int int5 = equation3.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution6 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        java.lang.Object obj7 = null;
        boolean boolean8 = solution6.equals(obj7);
        org.junit.Assert.assertNotNull(solution4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 52 + "'", int5 == 52);
        org.junit.Assert.assertNotNull(solution6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test2276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2276");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (short) -1, 32, 0);
        java.lang.String str4 = equation3.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) ' ', 52, 100);
        int int9 = equation8.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation13 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int14 = equation13.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution15 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation13);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution17 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper18 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution17);
        boolean boolean20 = gcdSolutionWrapper18.equals((java.lang.Object) 1);
        boolean boolean21 = equation13.equals((java.lang.Object) boolean20);
        int int22 = equation13.a();
        int int23 = equation13.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution25 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper26 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution25);
        gcdSolutionWrapper26.setGcd((int) ' ');
        gcdSolutionWrapper26.setGcd((int) (short) 1);
        int int31 = gcdSolutionWrapper26.getGcd();
        int int32 = gcdSolutionWrapper26.getGcd();
        boolean boolean33 = equation13.equals((java.lang.Object) int32);
        boolean boolean34 = equation8.equals((java.lang.Object) equation13);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution35 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation13);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution36 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation13);
        boolean boolean37 = equation3.equals((java.lang.Object) equation13);
        java.lang.String str38 = equation3.toString();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Equation[a=-1, b=32, c=0]" + "'", str4, "Equation[a=-1, b=32, c=0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 32 + "'", int9 == 32);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertNotNull(solution15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(solution35);
        org.junit.Assert.assertNotNull(solution36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Equation[a=-1, b=32, c=0]" + "'", str38, "Equation[a=-1, b=32, c=0]");
    }

    @Test
    public void test2277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2277");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(10, 0);
        int int3 = solution2.getX();
        solution2.setY(1);
        solution2.setX((int) (short) 0);
        solution2.setY((int) ' ');
        solution2.setX((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution14 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(35, (int) (short) 100);
        int int15 = solution14.getY();
        boolean boolean16 = solution2.equals((java.lang.Object) int15);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test2278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2278");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution4 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        java.lang.String str5 = solution4.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation10 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int11 = equation10.c();
        int int12 = equation10.b();
        int int13 = equation10.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution14 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation10);
        java.lang.String str15 = solution14.toString();
        int int16 = solution14.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper17 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(10, solution14);
        boolean boolean18 = solution4.equals((java.lang.Object) gcdSolutionWrapper17);
        int int19 = gcdSolutionWrapper17.getGcd();
        org.junit.Assert.assertNotNull(solution4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Solution[x=0, y=0]" + "'", str5, "Solution[x=0, y=0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 35 + "'", int11 == 35);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNotNull(solution14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Solution[x=0, y=-35]" + "'", str15, "Solution[x=0, y=-35]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-35) + "'", int16 == (-35));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
    }

    @Test
    public void test2279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2279");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int4 = equation3.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution5 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution6 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        int int7 = equation3.b();
        int int8 = equation3.c();
        int int9 = equation3.a();
        java.lang.String str10 = equation3.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution11 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNotNull(solution5);
        org.junit.Assert.assertNotNull(solution6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 35 + "'", int8 == 35);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str10, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertNotNull(solution11);
    }

    @Test
    public void test2280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2280");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution5 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation4);
        int int6 = solution5.getX();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation10 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        int int11 = equation10.c();
        int int12 = equation10.c();
        int int13 = equation10.a();
        boolean boolean14 = solution5.equals((java.lang.Object) equation10);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution15 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation10);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper16 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 100, solution15);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution17 = gcdSolutionWrapper16.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation21 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int22 = equation21.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution23 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation21);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution25 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper26 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution25);
        boolean boolean28 = gcdSolutionWrapper26.equals((java.lang.Object) 1);
        boolean boolean29 = equation21.equals((java.lang.Object) boolean28);
        int int30 = equation21.c();
        boolean boolean31 = gcdSolutionWrapper16.equals((java.lang.Object) equation21);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution35 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int36 = solution35.getY();
        java.lang.String str37 = solution35.toString();
        solution35.setX((int) (short) 1);
        boolean boolean41 = solution35.equals((java.lang.Object) true);
        solution35.setY(32);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper44 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 10, solution35);
        boolean boolean45 = gcdSolutionWrapper16.equals((java.lang.Object) gcdSolutionWrapper44);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation49 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '#', 52, 32);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution52 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int53 = solution52.getY();
        java.lang.String str54 = solution52.toString();
        solution52.setX((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation60 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int61 = equation60.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution62 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation60);
        boolean boolean63 = solution52.equals((java.lang.Object) solution62);
        boolean boolean65 = solution62.equals((java.lang.Object) 0);
        boolean boolean66 = equation49.equals((java.lang.Object) solution62);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution70 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) '4', (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper71 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(0, solution70);
        java.lang.String str72 = gcdSolutionWrapper71.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation76 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        java.lang.String str77 = equation76.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution78 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation76);
        boolean boolean79 = gcdSolutionWrapper71.equals((java.lang.Object) solution78);
        boolean boolean80 = equation49.equals((java.lang.Object) gcdSolutionWrapper71);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution81 = gcdSolutionWrapper71.getSolution();
        gcdSolutionWrapper16.setSolution(solution81);
        java.lang.Class<?> wildcardClass83 = gcdSolutionWrapper16.getClass();
        org.junit.Assert.assertNotNull(solution5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(solution15);
        org.junit.Assert.assertNotNull(solution17);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 35 + "'", int22 == 35);
        org.junit.Assert.assertNotNull(solution23);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 35 + "'", int30 == 35);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Solution[x=97, y=1]" + "'", str37, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Solution[x=97, y=1]" + "'", str54, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 35 + "'", int61 == 35);
        org.junit.Assert.assertNotNull(solution62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]" + "'", str72, "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str77, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertNotNull(solution78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(solution81);
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test2281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2281");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(0, (int) (short) -1, (int) (byte) 100);
        java.lang.Class<?> wildcardClass4 = equation3.getClass();
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test2282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2282");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) -1, 1, 32);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation7 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(0, (int) (short) 10, 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution10 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int11 = solution10.getY();
        java.lang.String str12 = solution10.toString();
        int int13 = solution10.getX();
        int int14 = solution10.getY();
        solution10.setY((int) (short) 100);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation21 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution22 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation21);
        int int23 = solution22.getX();
        int int24 = solution22.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper25 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) ' ', solution22);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution26 = gcdSolutionWrapper25.getSolution();
        boolean boolean27 = solution10.equals((java.lang.Object) gcdSolutionWrapper25);
        solution10.setX(52);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation33 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int34 = equation33.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution35 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation33);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution37 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper38 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution37);
        boolean boolean40 = gcdSolutionWrapper38.equals((java.lang.Object) 1);
        boolean boolean41 = equation33.equals((java.lang.Object) boolean40);
        int int42 = equation33.a();
        int int43 = equation33.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution45 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper46 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution45);
        gcdSolutionWrapper46.setGcd((int) ' ');
        gcdSolutionWrapper46.setGcd((int) (short) 1);
        int int51 = gcdSolutionWrapper46.getGcd();
        int int52 = gcdSolutionWrapper46.getGcd();
        boolean boolean53 = equation33.equals((java.lang.Object) int52);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution55 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper56 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution55);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution59 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int60 = solution59.getY();
        solution59.setY((int) (byte) 1);
        gcdSolutionWrapper56.setSolution(solution59);
        boolean boolean64 = equation33.equals((java.lang.Object) gcdSolutionWrapper56);
        java.lang.String str65 = gcdSolutionWrapper56.toString();
        boolean boolean66 = solution10.equals((java.lang.Object) gcdSolutionWrapper56);
        boolean boolean67 = equation7.equals((java.lang.Object) boolean66);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution68 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation7);
        boolean boolean69 = equation3.equals((java.lang.Object) solution68);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Solution[x=97, y=1]" + "'", str12, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 97 + "'", int13 == 97);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(solution22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(solution26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 35 + "'", int34 == 35);
        org.junit.Assert.assertNotNull(solution35);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]" + "'", str65, "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(solution68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test2283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2283");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution5 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation4);
        int int6 = solution5.getX();
        int int7 = solution5.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) 'a', solution5);
        boolean boolean10 = solution5.equals((java.lang.Object) '#');
        int int11 = solution5.getY();
        int int12 = solution5.getX();
        solution5.setY((int) (byte) 10);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation18 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) -1, 0, 0);
        java.lang.String str19 = equation18.toString();
        java.lang.Class<?> wildcardClass20 = equation18.getClass();
        boolean boolean21 = solution5.equals((java.lang.Object) wildcardClass20);
        int int22 = solution5.getY();
        org.junit.Assert.assertNotNull(solution5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Equation[a=-1, b=0, c=0]" + "'", str19, "Equation[a=-1, b=0, c=0]");
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
    }

    @Test
    public void test2284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2284");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int4 = equation3.c();
        int int5 = equation3.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int10 = solution9.getY();
        solution9.setY((int) (byte) 1);
        boolean boolean14 = solution9.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper15 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution9);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution16 = gcdSolutionWrapper15.getSolution();
        java.lang.String str17 = gcdSolutionWrapper15.toString();
        gcdSolutionWrapper15.setGcd((int) (byte) 1);
        boolean boolean20 = equation3.equals((java.lang.Object) gcdSolutionWrapper15);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution21 = gcdSolutionWrapper15.getSolution();
        int int22 = gcdSolutionWrapper15.getGcd();
        java.lang.String str23 = gcdSolutionWrapper15.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation27 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, 0, (int) (short) -1);
        int int28 = equation27.c();
        int int29 = equation27.a();
        int int30 = equation27.a();
        boolean boolean31 = gcdSolutionWrapper15.equals((java.lang.Object) int30);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution34 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(10, 0);
        int int35 = solution34.getX();
        int int36 = solution34.getX();
        solution34.setX((int) ' ');
        gcdSolutionWrapper15.setSolution(solution34);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution42 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) 100, 0);
        java.lang.String str43 = solution42.toString();
        solution42.setX((int) ' ');
        gcdSolutionWrapper15.setSolution(solution42);
        int int47 = gcdSolutionWrapper15.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution48 = gcdSolutionWrapper15.getSolution();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(solution16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str17, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(solution21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]" + "'", str23, "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Solution[x=100, y=0]" + "'", str43, "Solution[x=100, y=0]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(solution48);
    }

    @Test
    public void test2285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2285");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int4 = solution3.getY();
        solution3.setY((int) (byte) 1);
        boolean boolean8 = solution3.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution3);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution10 = gcdSolutionWrapper9.getSolution();
        java.lang.String str11 = gcdSolutionWrapper9.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation15 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution19 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int20 = solution19.getY();
        solution19.setY((int) (byte) 1);
        boolean boolean24 = solution19.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper25 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution19);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution26 = gcdSolutionWrapper25.getSolution();
        java.lang.String str27 = gcdSolutionWrapper25.toString();
        gcdSolutionWrapper25.setGcd((int) (byte) 1);
        boolean boolean30 = equation15.equals((java.lang.Object) gcdSolutionWrapper25);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution32 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper33 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution32);
        gcdSolutionWrapper33.setGcd((int) ' ');
        gcdSolutionWrapper33.setGcd((int) (short) 100);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution40 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int41 = solution40.getY();
        java.lang.String str42 = solution40.toString();
        solution40.setX((int) (short) 1);
        boolean boolean46 = solution40.equals((java.lang.Object) (-1.0f));
        gcdSolutionWrapper33.setSolution(solution40);
        gcdSolutionWrapper25.setSolution(solution40);
        java.lang.String str49 = solution40.toString();
        gcdSolutionWrapper9.setSolution(solution40);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(solution10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str11, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(solution26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str27, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Solution[x=97, y=1]" + "'", str42, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Solution[x=1, y=1]" + "'", str49, "Solution[x=1, y=1]");
    }

    @Test
    public void test2286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2286");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution1 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(1, solution1);
    }

    @Test
    public void test2287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2287");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, (int) 'a', (-35));
        int int4 = equation3.a();
        java.lang.String str5 = equation3.toString();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 97 + "'", int4 == 97);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Equation[a=97, b=97, c=-35]" + "'", str5, "Equation[a=97, b=97, c=-35]");
    }

    @Test
    public void test2288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2288");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(0, (int) (byte) 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution6 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int7 = solution6.getY();
        solution6.setY((int) (byte) 1);
        boolean boolean11 = solution6.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper12 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution6);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution13 = gcdSolutionWrapper12.getSolution();
        java.lang.String str14 = gcdSolutionWrapper12.toString();
        boolean boolean15 = solution2.equals((java.lang.Object) str14);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation19 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 1, (int) (short) 10, (int) (short) -1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution20 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation19);
        int int21 = solution20.getX();
        solution20.setX((-75));
        int int24 = solution20.getY();
        int int25 = solution20.getY();
        boolean boolean26 = solution2.equals((java.lang.Object) solution20);
        int int27 = solution20.getY();
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(solution13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str14, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(solution20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
    }

    @Test
    public void test2289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2289");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) '4', (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) 'a', solution3);
        gcdSolutionWrapper4.setGcd(32);
    }

    @Test
    public void test2290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2290");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) 1, (int) (short) 100);
        solution2.setX(35);
        java.lang.String str5 = solution2.toString();
        int int6 = solution2.getX();
        int int7 = solution2.getX();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Solution[x=35, y=100]" + "'", str5, "Solution[x=35, y=100]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 35 + "'", int6 == 35);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 35 + "'", int7 == 35);
    }

    @Test
    public void test2291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2291");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int3 = solution2.getY();
        java.lang.String str4 = solution2.toString();
        int int5 = solution2.getY();
        java.lang.String str6 = solution2.toString();
        java.lang.String str7 = solution2.toString();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Solution[x=97, y=1]" + "'", str4, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Solution[x=97, y=1]" + "'", str6, "Solution[x=97, y=1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Solution[x=97, y=1]" + "'", str7, "Solution[x=97, y=1]");
    }

    @Test
    public void test2292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2292");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int3 = solution2.getY();
        java.lang.String str4 = solution2.toString();
        solution2.setX((int) (short) 1);
        java.lang.String str7 = solution2.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation11 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) ' ', 52, 100);
        int int12 = equation11.a();
        int int13 = equation11.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution17 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int18 = solution17.getY();
        solution17.setY((int) (byte) 1);
        boolean boolean22 = solution17.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper23 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution17);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution24 = gcdSolutionWrapper23.getSolution();
        java.lang.String str25 = gcdSolutionWrapper23.toString();
        gcdSolutionWrapper23.setGcd((int) (byte) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution30 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((-1), (int) '4');
        gcdSolutionWrapper23.setSolution(solution30);
        boolean boolean32 = equation11.equals((java.lang.Object) gcdSolutionWrapper23);
        boolean boolean33 = solution2.equals((java.lang.Object) equation11);
        java.lang.String str34 = solution2.toString();
        int int35 = solution2.getY();
        int int36 = solution2.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Solution[x=97, y=1]" + "'", str4, "Solution[x=97, y=1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Solution[x=1, y=1]" + "'", str7, "Solution[x=1, y=1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 32 + "'", int12 == 32);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 100 + "'", int13 == 100);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(solution24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str25, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Solution[x=1, y=1]" + "'", str34, "Solution[x=1, y=1]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
    }

    @Test
    public void test2293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2293");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution1 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution1);
        boolean boolean4 = gcdSolutionWrapper2.equals((java.lang.Object) 1);
        java.lang.String str5 = gcdSolutionWrapper2.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution6 = gcdSolutionWrapper2.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(100, (int) (short) 100);
        gcdSolutionWrapper2.setSolution(solution9);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution11 = gcdSolutionWrapper2.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation16 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution17 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation16);
        int int18 = solution17.getX();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation22 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        int int23 = equation22.c();
        int int24 = equation22.c();
        int int25 = equation22.a();
        boolean boolean26 = solution17.equals((java.lang.Object) equation22);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution27 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation22);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper28 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 100, solution27);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution29 = gcdSolutionWrapper28.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation33 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int34 = equation33.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution35 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation33);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution37 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper38 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution37);
        boolean boolean40 = gcdSolutionWrapper38.equals((java.lang.Object) 1);
        boolean boolean41 = equation33.equals((java.lang.Object) boolean40);
        int int42 = equation33.c();
        boolean boolean43 = gcdSolutionWrapper28.equals((java.lang.Object) equation33);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution44 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation33);
        boolean boolean45 = solution11.equals((java.lang.Object) solution44);
        solution44.setY((int) 'a');
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=null]" + "'", str5, "GcdSolutionWrapper[gcd=1, solution=null]");
        org.junit.Assert.assertNull(solution6);
        org.junit.Assert.assertNotNull(solution11);
        org.junit.Assert.assertNotNull(solution17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(solution27);
        org.junit.Assert.assertNotNull(solution29);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 35 + "'", int34 == 35);
        org.junit.Assert.assertNotNull(solution35);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 35 + "'", int42 == 35);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(solution44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test2294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2294");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '#', (int) '4', 125);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution6 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper7 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution6);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution10 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int11 = solution10.getY();
        solution10.setY((int) (byte) 1);
        gcdSolutionWrapper7.setSolution(solution10);
        int int15 = gcdSolutionWrapper7.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution18 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int19 = solution18.getY();
        java.lang.String str20 = solution18.toString();
        solution18.setX((int) (short) 1);
        boolean boolean24 = solution18.equals((java.lang.Object) (-1.0f));
        java.lang.String str25 = solution18.toString();
        java.lang.String str26 = solution18.toString();
        gcdSolutionWrapper7.setSolution(solution18);
        java.lang.String str28 = solution18.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper29 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) -1, solution18);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution33 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(10, 0);
        int int34 = solution33.getX();
        solution33.setX(100);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper37 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) -1, solution33);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution39 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper40 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution39);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution43 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int44 = solution43.getY();
        solution43.setY((int) (byte) 1);
        gcdSolutionWrapper40.setSolution(solution43);
        int int48 = gcdSolutionWrapper40.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution51 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int52 = solution51.getY();
        java.lang.String str53 = solution51.toString();
        solution51.setX((int) (short) 1);
        boolean boolean57 = solution51.equals((java.lang.Object) (-1.0f));
        java.lang.String str58 = solution51.toString();
        java.lang.String str59 = solution51.toString();
        gcdSolutionWrapper40.setSolution(solution51);
        solution51.setX((int) '4');
        java.lang.String str63 = solution51.toString();
        gcdSolutionWrapper37.setSolution(solution51);
        int int65 = gcdSolutionWrapper37.getGcd();
        boolean boolean66 = gcdSolutionWrapper29.equals((java.lang.Object) gcdSolutionWrapper37);
        boolean boolean67 = equation3.equals((java.lang.Object) gcdSolutionWrapper37);
        int int68 = equation3.c();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Solution[x=97, y=1]" + "'", str20, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Solution[x=1, y=1]" + "'", str25, "Solution[x=1, y=1]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Solution[x=1, y=1]" + "'", str26, "Solution[x=1, y=1]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Solution[x=1, y=1]" + "'", str28, "Solution[x=1, y=1]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 10 + "'", int34 == 10);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Solution[x=97, y=1]" + "'", str53, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "Solution[x=1, y=1]" + "'", str58, "Solution[x=1, y=1]");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Solution[x=1, y=1]" + "'", str59, "Solution[x=1, y=1]");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "Solution[x=52, y=1]" + "'", str63, "Solution[x=52, y=1]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 125 + "'", int68 == 125);
    }

    @Test
    public void test2295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2295");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(97, 10);
        int int3 = solution2.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
    }

    @Test
    public void test2296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2296");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', 52, 100);
        int int4 = equation3.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(32, 100);
        java.lang.String str9 = solution8.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper10 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(32, solution8);
        boolean boolean11 = equation3.equals((java.lang.Object) gcdSolutionWrapper10);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution12 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Solution[x=32, y=100]" + "'", str9, "Solution[x=32, y=100]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(solution12);
    }

    @Test
    public void test2297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2297");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((-35), (int) (short) 1, (-1));
        int int4 = equation3.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution5 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution6 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution7 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        java.lang.String str8 = equation3.toString();
        int int9 = equation3.a();
        int int10 = equation3.a();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(solution5);
        org.junit.Assert.assertNotNull(solution6);
        org.junit.Assert.assertNotNull(solution7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Equation[a=-35, b=1, c=-1]" + "'", str8, "Equation[a=-35, b=1, c=-1]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-35) + "'", int9 == (-35));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-35) + "'", int10 == (-35));
    }

    @Test
    public void test2298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2298");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int4 = solution3.getY();
        solution3.setY((int) (byte) 1);
        boolean boolean8 = solution3.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution3);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution12 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int13 = solution12.getY();
        java.lang.String str14 = solution12.toString();
        boolean boolean16 = solution12.equals((java.lang.Object) (-1L));
        gcdSolutionWrapper9.setSolution(solution12);
        solution12.setX(1);
        java.lang.String str20 = solution12.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation24 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '#', 52, 32);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution27 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int28 = solution27.getY();
        java.lang.String str29 = solution27.toString();
        solution27.setX((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation35 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int36 = equation35.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution37 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation35);
        boolean boolean38 = solution27.equals((java.lang.Object) solution37);
        boolean boolean40 = solution37.equals((java.lang.Object) 0);
        boolean boolean41 = equation24.equals((java.lang.Object) solution37);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation45 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int46 = equation45.c();
        int int47 = equation45.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution51 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int52 = solution51.getY();
        solution51.setY((int) (byte) 1);
        boolean boolean56 = solution51.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper57 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution51);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution58 = gcdSolutionWrapper57.getSolution();
        java.lang.String str59 = gcdSolutionWrapper57.toString();
        gcdSolutionWrapper57.setGcd((int) (byte) 1);
        boolean boolean62 = equation45.equals((java.lang.Object) gcdSolutionWrapper57);
        boolean boolean63 = equation24.equals((java.lang.Object) equation45);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution64 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation24);
        boolean boolean65 = solution12.equals((java.lang.Object) equation24);
        int int66 = solution12.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation70 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (short) 100, (int) (byte) 100);
        boolean boolean71 = solution12.equals((java.lang.Object) (byte) 100);
        int int72 = solution12.getY();
        solution12.setY((int) (byte) 10);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Solution[x=97, y=1]" + "'", str14, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Solution[x=1, y=1]" + "'", str20, "Solution[x=1, y=1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Solution[x=97, y=1]" + "'", str29, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 35 + "'", int36 == 35);
        org.junit.Assert.assertNotNull(solution37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 35 + "'", int46 == 35);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(solution58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str59, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(solution64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
    }

    @Test
    public void test2299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2299");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) ' ', (int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) '4', solution3);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution5 = gcdSolutionWrapper4.getSolution();
        java.lang.String str6 = gcdSolutionWrapper4.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(0, 1);
        boolean boolean10 = gcdSolutionWrapper4.equals((java.lang.Object) solution9);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution11 = gcdSolutionWrapper4.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution12 = gcdSolutionWrapper4.getSolution();
        org.junit.Assert.assertNotNull(solution5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "GcdSolutionWrapper[gcd=52, solution=Solution[x=32, y=1]]" + "'", str6, "GcdSolutionWrapper[gcd=52, solution=Solution[x=32, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(solution11);
        org.junit.Assert.assertNotNull(solution12);
    }

    @Test
    public void test2300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2300");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (short) 10, (int) (byte) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution3);
        java.lang.String str5 = gcdSolutionWrapper4.toString();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=10, y=1]]" + "'", str5, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=10, y=1]]");
    }

    @Test
    public void test2301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2301");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (short) 100, 52, 96);
    }

    @Test
    public void test2302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2302");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(52, 1, 0);
        int int4 = equation3.c();
        java.lang.String str5 = equation3.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation11 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution12 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation11);
        int int13 = solution12.getX();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation17 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        int int18 = equation17.c();
        int int19 = equation17.c();
        int int20 = equation17.a();
        boolean boolean21 = solution12.equals((java.lang.Object) equation17);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution22 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation17);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper23 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 100, solution22);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper24 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution22);
        boolean boolean25 = equation3.equals((java.lang.Object) solution22);
        int int26 = equation3.b();
        java.lang.String str27 = equation3.toString();
        int int28 = equation3.b();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Equation[a=52, b=1, c=0]" + "'", str5, "Equation[a=52, b=1, c=0]");
        org.junit.Assert.assertNotNull(solution12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 52 + "'", int20 == 52);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(solution22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Equation[a=52, b=1, c=0]" + "'", str27, "Equation[a=52, b=1, c=0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
    }

    @Test
    public void test2303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2303");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, 0, (int) (short) -1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int9 = solution8.getY();
        solution8.setY((int) (byte) 1);
        boolean boolean13 = solution8.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper14 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution8);
        boolean boolean15 = equation4.equals((java.lang.Object) gcdSolutionWrapper14);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation19 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution20 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation19);
        solution20.setY(0);
        gcdSolutionWrapper14.setSolution(solution20);
        int int24 = gcdSolutionWrapper14.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution26 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper27 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution26);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution30 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int31 = solution30.getY();
        solution30.setY((int) (byte) 1);
        gcdSolutionWrapper27.setSolution(solution30);
        gcdSolutionWrapper14.setSolution(solution30);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution36 = gcdSolutionWrapper14.getSolution();
        int int37 = gcdSolutionWrapper14.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution38 = gcdSolutionWrapper14.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution41 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int42 = solution41.getY();
        java.lang.String str43 = solution41.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation47 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        int int48 = equation47.c();
        int int49 = equation47.a();
        int int50 = equation47.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution51 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation47);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation55 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int56 = equation55.c();
        int int57 = equation55.b();
        int int58 = equation55.c();
        boolean boolean59 = solution51.equals((java.lang.Object) equation55);
        boolean boolean60 = solution41.equals((java.lang.Object) boolean59);
        gcdSolutionWrapper14.setSolution(solution41);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper62 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) -1, solution41);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(solution20);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(solution36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(solution38);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Solution[x=97, y=1]" + "'", str43, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 52 + "'", int48 == 52);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 97 + "'", int49 == 97);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 97 + "'", int50 == 97);
        org.junit.Assert.assertNotNull(solution51);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 35 + "'", int56 == 35);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 35 + "'", int58 == 35);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test2304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2304");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(35, 100, (int) 'a');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution7 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int8 = solution7.getY();
        java.lang.String str9 = solution7.toString();
        java.lang.String str10 = solution7.toString();
        java.lang.String str11 = solution7.toString();
        solution7.setY((int) (short) 0);
        solution7.setY((int) (short) 10);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper16 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) 100, solution7);
        boolean boolean17 = equation3.equals((java.lang.Object) gcdSolutionWrapper16);
        java.lang.String str18 = gcdSolutionWrapper16.toString();
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Solution[x=97, y=1]" + "'", str9, "Solution[x=97, y=1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Solution[x=97, y=1]" + "'", str10, "Solution[x=97, y=1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Solution[x=97, y=1]" + "'", str11, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "GcdSolutionWrapper[gcd=100, solution=Solution[x=97, y=10]]" + "'", str18, "GcdSolutionWrapper[gcd=100, solution=Solution[x=97, y=10]]");
    }

    @Test
    public void test2305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2305");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution4 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        int int5 = equation3.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) 10, (int) (short) -1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation14 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '#', 52, 32);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution17 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int18 = solution17.getY();
        java.lang.String str19 = solution17.toString();
        solution17.setX((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation25 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int26 = equation25.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution27 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation25);
        boolean boolean28 = solution17.equals((java.lang.Object) solution27);
        boolean boolean30 = solution27.equals((java.lang.Object) 0);
        boolean boolean31 = equation14.equals((java.lang.Object) solution27);
        boolean boolean33 = solution27.equals((java.lang.Object) (byte) -1);
        int int34 = solution27.getY();
        int int35 = solution27.getX();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper36 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) -1, solution27);
        boolean boolean37 = equation9.equals((java.lang.Object) solution27);
        solution27.setY((int) (byte) 100);
        boolean boolean40 = equation3.equals((java.lang.Object) solution27);
        int int41 = equation3.b();
        org.junit.Assert.assertNotNull(solution4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Solution[x=97, y=1]" + "'", str19, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 35 + "'", int26 == 35);
        org.junit.Assert.assertNotNull(solution27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-35) + "'", int34 == (-35));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
    }

    @Test
    public void test2306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2306");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) -1, (int) '#', (-1));
        java.lang.String str4 = equation3.toString();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Equation[a=-1, b=35, c=-1]" + "'", str4, "Equation[a=-1, b=35, c=-1]");
    }

    @Test
    public void test2307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2307");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(0, (int) 'a', 100);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution4 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        org.junit.Assert.assertNotNull(solution4);
    }

    @Test
    public void test2308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2308");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 1, (int) (short) 10, (int) (short) -1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution4 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution5 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int10 = solution9.getY();
        solution9.setY((int) (byte) 1);
        boolean boolean14 = solution9.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper15 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution9);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution18 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int19 = solution18.getY();
        java.lang.String str20 = solution18.toString();
        boolean boolean22 = solution18.equals((java.lang.Object) (-1L));
        gcdSolutionWrapper15.setSolution(solution18);
        int int24 = solution18.getX();
        boolean boolean25 = equation3.equals((java.lang.Object) solution18);
        java.lang.Object obj26 = null;
        boolean boolean27 = solution18.equals(obj26);
        org.junit.Assert.assertNotNull(solution4);
        org.junit.Assert.assertNotNull(solution5);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Solution[x=97, y=1]" + "'", str20, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 97 + "'", int24 == 97);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test2309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2309");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) ' ', 52, 100);
        int int4 = equation3.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int9 = equation8.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution10 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation8);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution12 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper13 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution12);
        boolean boolean15 = gcdSolutionWrapper13.equals((java.lang.Object) 1);
        boolean boolean16 = equation8.equals((java.lang.Object) boolean15);
        int int17 = equation8.a();
        int int18 = equation8.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution20 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper21 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution20);
        gcdSolutionWrapper21.setGcd((int) ' ');
        gcdSolutionWrapper21.setGcd((int) (short) 1);
        int int26 = gcdSolutionWrapper21.getGcd();
        int int27 = gcdSolutionWrapper21.getGcd();
        boolean boolean28 = equation8.equals((java.lang.Object) int27);
        boolean boolean29 = equation3.equals((java.lang.Object) equation8);
        java.lang.String str30 = equation3.toString();
        java.lang.String str31 = equation3.toString();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 32 + "'", int4 == 32);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(solution10);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Equation[a=32, b=52, c=100]" + "'", str30, "Equation[a=32, b=52, c=100]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Equation[a=32, b=52, c=100]" + "'", str31, "Equation[a=32, b=52, c=100]");
    }

    @Test
    public void test2310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2310");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(0, (int) (short) 10, 0);
        int int4 = equation3.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution5 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        int int6 = equation3.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution7 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        java.lang.Class<?> wildcardClass8 = equation3.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertNotNull(solution5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10 + "'", int6 == 10);
        org.junit.Assert.assertNotNull(solution7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test2311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2311");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(32, (int) (short) 10);
        solution2.setX((int) (byte) 0);
        int int5 = solution2.getY();
        java.lang.Class<?> wildcardClass6 = solution2.getClass();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 10 + "'", int5 == 10);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test2312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2312");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution1 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution1);
        gcdSolutionWrapper2.setGcd((int) ' ');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution5 = gcdSolutionWrapper2.getSolution();
        int int6 = gcdSolutionWrapper2.getGcd();
        int int7 = gcdSolutionWrapper2.getGcd();
        org.junit.Assert.assertNull(solution5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 32 + "'", int6 == 32);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 32 + "'", int7 == 32);
    }

    @Test
    public void test2313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2313");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int3 = solution2.getY();
        java.lang.String str4 = solution2.toString();
        solution2.setX((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation10 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, 0, (int) (short) -1);
        boolean boolean11 = solution2.equals((java.lang.Object) equation10);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation15 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(32, (-35), (int) (byte) 1);
        boolean boolean16 = solution2.equals((java.lang.Object) (byte) 1);
        int int17 = solution2.getY();
        solution2.setX((int) (short) -1);
        int int20 = solution2.getY();
        solution2.setX((int) (short) 10);
        int int23 = solution2.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Solution[x=97, y=1]" + "'", str4, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 10 + "'", int23 == 10);
    }

    @Test
    public void test2314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2314");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int4 = solution3.getY();
        java.lang.String str5 = solution3.toString();
        solution3.setX((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((-35), solution3);
        int int9 = gcdSolutionWrapper8.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution10 = gcdSolutionWrapper8.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation14 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution15 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation14);
        solution15.setY((int) (byte) 10);
        gcdSolutionWrapper8.setSolution(solution15);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution19 = gcdSolutionWrapper8.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation23 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int24 = equation23.c();
        int int25 = equation23.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution29 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int30 = solution29.getY();
        solution29.setY((int) (byte) 1);
        boolean boolean34 = solution29.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper35 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution29);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution36 = gcdSolutionWrapper35.getSolution();
        java.lang.String str37 = gcdSolutionWrapper35.toString();
        gcdSolutionWrapper35.setGcd((int) (byte) 1);
        boolean boolean40 = equation23.equals((java.lang.Object) gcdSolutionWrapper35);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution41 = gcdSolutionWrapper35.getSolution();
        boolean boolean42 = gcdSolutionWrapper8.equals((java.lang.Object) gcdSolutionWrapper35);
        gcdSolutionWrapper35.setGcd(52);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution45 = gcdSolutionWrapper35.getSolution();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Solution[x=97, y=1]" + "'", str5, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-35) + "'", int9 == (-35));
        org.junit.Assert.assertNotNull(solution10);
        org.junit.Assert.assertNotNull(solution15);
        org.junit.Assert.assertNotNull(solution19);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 35 + "'", int24 == 35);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(solution36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str37, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(solution41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(solution45);
    }

    @Test
    public void test2315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2315");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(32, (int) (byte) 10);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution4 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper5 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution4);
        boolean boolean7 = gcdSolutionWrapper5.equals((java.lang.Object) "Equation[a=0, b=-1, c=35]");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution10 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) '4', (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution13 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int14 = solution13.getY();
        java.lang.String str15 = solution13.toString();
        solution13.setX((int) (short) 1);
        boolean boolean19 = solution13.equals((java.lang.Object) (-1.0f));
        java.lang.String str20 = solution13.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation24 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        java.lang.String str25 = equation24.toString();
        int int26 = equation24.c();
        boolean boolean27 = solution13.equals((java.lang.Object) equation24);
        int int28 = equation24.c();
        boolean boolean29 = solution10.equals((java.lang.Object) equation24);
        boolean boolean30 = gcdSolutionWrapper5.equals((java.lang.Object) equation24);
        boolean boolean31 = solution2.equals((java.lang.Object) gcdSolutionWrapper5);
        gcdSolutionWrapper5.setGcd((int) (short) 100);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution37 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int38 = solution37.getY();
        java.lang.String str39 = solution37.toString();
        solution37.setX((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper42 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((-35), solution37);
        int int43 = gcdSolutionWrapper42.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution44 = gcdSolutionWrapper42.getSolution();
        java.lang.String str45 = gcdSolutionWrapper42.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution48 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) '4', (int) '4');
        solution48.setX((int) (short) 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation54 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution58 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int59 = solution58.getY();
        solution58.setY((int) (byte) 1);
        boolean boolean63 = solution58.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper64 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution58);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution65 = gcdSolutionWrapper64.getSolution();
        java.lang.String str66 = gcdSolutionWrapper64.toString();
        gcdSolutionWrapper64.setGcd((int) (byte) 1);
        boolean boolean69 = equation54.equals((java.lang.Object) gcdSolutionWrapper64);
        int int70 = gcdSolutionWrapper64.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution71 = gcdSolutionWrapper64.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation75 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        java.lang.String str76 = equation75.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution77 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation75);
        solution77.setY((int) (byte) 10);
        boolean boolean80 = solution71.equals((java.lang.Object) solution77);
        int int81 = solution77.getY();
        boolean boolean82 = solution48.equals((java.lang.Object) solution77);
        gcdSolutionWrapper42.setSolution(solution77);
        int int84 = solution77.getY();
        boolean boolean85 = gcdSolutionWrapper5.equals((java.lang.Object) solution77);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution88 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) 100, (int) (short) 0);
        gcdSolutionWrapper5.setSolution(solution88);
        gcdSolutionWrapper5.setGcd((int) (byte) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation95 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (short) -1, 97, (int) ' ');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution96 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation95);
        java.lang.String str97 = solution96.toString();
        boolean boolean98 = gcdSolutionWrapper5.equals((java.lang.Object) str97);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution99 = gcdSolutionWrapper5.getSolution();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Solution[x=97, y=1]" + "'", str15, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Solution[x=1, y=1]" + "'", str20, "Solution[x=1, y=1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str25, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 35 + "'", int26 == 35);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 35 + "'", int28 == 35);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Solution[x=97, y=1]" + "'", str39, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-35) + "'", int43 == (-35));
        org.junit.Assert.assertNotNull(solution44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "GcdSolutionWrapper[gcd=-35, solution=Solution[x=1, y=1]]" + "'", str45, "GcdSolutionWrapper[gcd=-35, solution=Solution[x=1, y=1]]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(solution65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str66, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertNotNull(solution71);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str76, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertNotNull(solution77);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 10 + "'", int81 == 10);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 10 + "'", int84 == 10);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(solution96);
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "Solution[x=-32, y=0]" + "'", str97, "Solution[x=-32, y=0]");
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
        org.junit.Assert.assertNotNull(solution99);
    }

    @Test
    public void test2316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2316");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int4 = equation3.c();
        int int5 = equation3.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int10 = solution9.getY();
        solution9.setY((int) (byte) 1);
        boolean boolean14 = solution9.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper15 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution9);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution16 = gcdSolutionWrapper15.getSolution();
        java.lang.String str17 = gcdSolutionWrapper15.toString();
        gcdSolutionWrapper15.setGcd((int) (byte) 1);
        boolean boolean20 = equation3.equals((java.lang.Object) gcdSolutionWrapper15);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution21 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        java.lang.String str22 = equation3.toString();
        java.lang.String str23 = equation3.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution24 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(solution16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str17, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(solution21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str22, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str23, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertNotNull(solution24);
    }

    @Test
    public void test2317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2317");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int4 = solution3.getY();
        java.lang.String str5 = solution3.toString();
        solution3.setX((int) (short) 1);
        java.lang.String str8 = solution3.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(35, solution3);
        java.lang.Object obj10 = null;
        boolean boolean11 = gcdSolutionWrapper9.equals(obj10);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution12 = gcdSolutionWrapper9.getSolution();
        java.lang.String str13 = gcdSolutionWrapper9.toString();
        gcdSolutionWrapper9.setGcd((int) '#');
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Solution[x=97, y=1]" + "'", str5, "Solution[x=97, y=1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Solution[x=1, y=1]" + "'", str8, "Solution[x=1, y=1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(solution12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "GcdSolutionWrapper[gcd=35, solution=Solution[x=1, y=1]]" + "'", str13, "GcdSolutionWrapper[gcd=35, solution=Solution[x=1, y=1]]");
    }

    @Test
    public void test2318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2318");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 1, 100, (-1));
        int int4 = equation3.c();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
    }

    @Test
    public void test2319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2319");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        java.lang.String str4 = equation3.toString();
        java.lang.Object obj5 = null;
        boolean boolean6 = equation3.equals(obj5);
        int int7 = equation3.b();
        int int8 = equation3.c();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str4, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 35 + "'", int8 == 35);
    }

    @Test
    public void test2320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2320");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int4 = equation3.c();
        int int5 = equation3.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int10 = solution9.getY();
        solution9.setY((int) (byte) 1);
        boolean boolean14 = solution9.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper15 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution9);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution16 = gcdSolutionWrapper15.getSolution();
        java.lang.String str17 = gcdSolutionWrapper15.toString();
        gcdSolutionWrapper15.setGcd((int) (byte) 1);
        boolean boolean20 = equation3.equals((java.lang.Object) gcdSolutionWrapper15);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution21 = gcdSolutionWrapper15.getSolution();
        int int22 = gcdSolutionWrapper15.getGcd();
        java.lang.String str23 = gcdSolutionWrapper15.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation27 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, 0, (int) (short) -1);
        int int28 = equation27.c();
        int int29 = equation27.a();
        int int30 = equation27.a();
        boolean boolean31 = gcdSolutionWrapper15.equals((java.lang.Object) int30);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution34 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(10, 0);
        int int35 = solution34.getX();
        int int36 = solution34.getX();
        solution34.setX((int) ' ');
        gcdSolutionWrapper15.setSolution(solution34);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution40 = gcdSolutionWrapper15.getSolution();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(solution16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str17, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(solution21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]" + "'", str23, "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertNotNull(solution40);
    }

    @Test
    public void test2321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2321");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution5 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation4);
        int int6 = solution5.getX();
        int int7 = solution5.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) 'a', solution5);
        boolean boolean10 = solution5.equals((java.lang.Object) '#');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution12 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper13 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution12);
        boolean boolean14 = solution5.equals((java.lang.Object) (byte) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution18 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int19 = solution18.getY();
        solution18.setY((int) (byte) 1);
        boolean boolean23 = solution18.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper24 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution18);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution25 = gcdSolutionWrapper24.getSolution();
        solution25.setX((int) 'a');
        boolean boolean28 = solution5.equals((java.lang.Object) 'a');
        solution5.setY((int) (short) 0);
        int int31 = solution5.getY();
        org.junit.Assert.assertNotNull(solution5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(solution25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
    }

    @Test
    public void test2322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2322");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int4 = solution3.getY();
        java.lang.String str5 = solution3.toString();
        solution3.setX((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((-35), solution3);
        gcdSolutionWrapper8.setGcd((int) (byte) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution12 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper13 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution12);
        gcdSolutionWrapper13.setGcd((int) ' ');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution18 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int19 = solution18.getY();
        java.lang.String str20 = solution18.toString();
        gcdSolutionWrapper13.setSolution(solution18);
        boolean boolean23 = gcdSolutionWrapper13.equals((java.lang.Object) (short) 0);
        gcdSolutionWrapper13.setGcd(35);
        boolean boolean26 = gcdSolutionWrapper8.equals((java.lang.Object) 35);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution27 = gcdSolutionWrapper8.getSolution();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Solution[x=97, y=1]" + "'", str5, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Solution[x=97, y=1]" + "'", str20, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(solution27);
    }

    @Test
    public void test2323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2323");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) 100, (int) ' ');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) 10, solution3);
        gcdSolutionWrapper4.setGcd(97);
        gcdSolutionWrapper4.setGcd(0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution11 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(32, (int) (byte) 10);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution15 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int16 = solution15.getY();
        solution15.setY((int) (byte) 1);
        boolean boolean20 = solution15.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper21 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution15);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution24 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int25 = solution24.getY();
        java.lang.String str26 = solution24.toString();
        boolean boolean28 = solution24.equals((java.lang.Object) (-1L));
        gcdSolutionWrapper21.setSolution(solution24);
        int int30 = solution24.getX();
        int int31 = solution24.getY();
        solution24.setY((int) (short) 10);
        solution24.setY(35);
        solution24.setX(0);
        boolean boolean38 = solution11.equals((java.lang.Object) solution24);
        gcdSolutionWrapper4.setSolution(solution11);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution42 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(100, (int) (byte) -1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation46 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution50 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int51 = solution50.getY();
        solution50.setY((int) (byte) 1);
        boolean boolean55 = solution50.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper56 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution50);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution57 = gcdSolutionWrapper56.getSolution();
        java.lang.String str58 = gcdSolutionWrapper56.toString();
        gcdSolutionWrapper56.setGcd((int) (byte) 1);
        boolean boolean61 = equation46.equals((java.lang.Object) gcdSolutionWrapper56);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution63 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper64 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution63);
        gcdSolutionWrapper64.setGcd((int) ' ');
        gcdSolutionWrapper64.setGcd((int) (short) 100);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution71 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int72 = solution71.getY();
        java.lang.String str73 = solution71.toString();
        solution71.setX((int) (short) 1);
        boolean boolean77 = solution71.equals((java.lang.Object) (-1.0f));
        gcdSolutionWrapper64.setSolution(solution71);
        gcdSolutionWrapper56.setSolution(solution71);
        int int80 = gcdSolutionWrapper56.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution82 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper83 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution82);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution86 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int87 = solution86.getY();
        solution86.setY((int) (byte) 1);
        gcdSolutionWrapper83.setSolution(solution86);
        gcdSolutionWrapper83.setGcd((int) (byte) 0);
        boolean boolean93 = gcdSolutionWrapper56.equals((java.lang.Object) (byte) 0);
        boolean boolean94 = solution42.equals((java.lang.Object) gcdSolutionWrapper56);
        boolean boolean95 = gcdSolutionWrapper4.equals((java.lang.Object) gcdSolutionWrapper56);
        gcdSolutionWrapper56.setGcd((int) (byte) 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Solution[x=97, y=1]" + "'", str26, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 97 + "'", int30 == 97);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(solution57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str58, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "Solution[x=97, y=1]" + "'", str73, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1 + "'", int87 == 1);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test2324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2324");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(32, (int) (byte) 10);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution4 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper5 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution4);
        boolean boolean7 = gcdSolutionWrapper5.equals((java.lang.Object) "Equation[a=0, b=-1, c=35]");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution10 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) '4', (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution13 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int14 = solution13.getY();
        java.lang.String str15 = solution13.toString();
        solution13.setX((int) (short) 1);
        boolean boolean19 = solution13.equals((java.lang.Object) (-1.0f));
        java.lang.String str20 = solution13.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation24 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        java.lang.String str25 = equation24.toString();
        int int26 = equation24.c();
        boolean boolean27 = solution13.equals((java.lang.Object) equation24);
        int int28 = equation24.c();
        boolean boolean29 = solution10.equals((java.lang.Object) equation24);
        boolean boolean30 = gcdSolutionWrapper5.equals((java.lang.Object) equation24);
        boolean boolean31 = solution2.equals((java.lang.Object) gcdSolutionWrapper5);
        gcdSolutionWrapper5.setGcd((int) (short) 100);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution34 = gcdSolutionWrapper5.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation38 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 1, (int) (short) 10, (int) (short) -1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution39 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation38);
        int int40 = solution39.getX();
        solution39.setX((-75));
        gcdSolutionWrapper5.setSolution(solution39);
        int int44 = solution39.getX();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Solution[x=97, y=1]" + "'", str15, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Solution[x=1, y=1]" + "'", str20, "Solution[x=1, y=1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str25, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 35 + "'", int26 == 35);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 35 + "'", int28 == 35);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(solution34);
        org.junit.Assert.assertNotNull(solution39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-75) + "'", int44 == (-75));
    }

    @Test
    public void test2325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2325");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int4 = equation3.c();
        int int5 = equation3.b();
        int int6 = equation3.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution7 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        java.lang.String str8 = solution7.toString();
        int int9 = solution7.getY();
        int int10 = solution7.getX();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 35 + "'", int6 == 35);
        org.junit.Assert.assertNotNull(solution7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Solution[x=0, y=-35]" + "'", str8, "Solution[x=0, y=-35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-35) + "'", int9 == (-35));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test2326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2326");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int4 = solution3.getY();
        solution3.setY((int) (byte) 1);
        boolean boolean8 = solution3.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution3);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution10 = gcdSolutionWrapper9.getSolution();
        java.lang.String str11 = gcdSolutionWrapper9.toString();
        gcdSolutionWrapper9.setGcd((int) (byte) 1);
        java.lang.String str14 = gcdSolutionWrapper9.toString();
        java.lang.String str15 = gcdSolutionWrapper9.toString();
        int int16 = gcdSolutionWrapper9.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation20 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int21 = equation20.c();
        int int22 = equation20.b();
        int int23 = equation20.c();
        int int24 = equation20.c();
        boolean boolean25 = gcdSolutionWrapper9.equals((java.lang.Object) int24);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution29 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (short) -1, (int) (byte) 10);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper30 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(0, solution29);
        int int31 = gcdSolutionWrapper30.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution33 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper34 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution33);
        gcdSolutionWrapper34.setGcd((int) ' ');
        gcdSolutionWrapper34.setGcd((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution39 = gcdSolutionWrapper34.getSolution();
        int int40 = gcdSolutionWrapper34.getGcd();
        gcdSolutionWrapper34.setGcd(0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation46 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution47 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation46);
        solution47.setY(0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation53 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (short) 10, 10, 52);
        boolean boolean54 = solution47.equals((java.lang.Object) (short) 10);
        gcdSolutionWrapper34.setSolution(solution47);
        gcdSolutionWrapper30.setSolution(solution47);
        solution47.setY((int) '4');
        int int59 = solution47.getY();
        gcdSolutionWrapper9.setSolution(solution47);
        solution47.setY(1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(solution10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str11, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]" + "'", str14, "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]" + "'", str15, "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 35 + "'", int21 == 35);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 35 + "'", int23 == 35);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 35 + "'", int24 == 35);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNull(solution39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(solution47);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 52 + "'", int59 == 52);
    }

    @Test
    public void test2327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2327");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int9 = solution8.getY();
        solution8.setY((int) (byte) 1);
        boolean boolean13 = solution8.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper14 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution8);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution15 = gcdSolutionWrapper14.getSolution();
        java.lang.String str16 = gcdSolutionWrapper14.toString();
        gcdSolutionWrapper14.setGcd((int) (byte) 1);
        boolean boolean19 = equation4.equals((java.lang.Object) gcdSolutionWrapper14);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation23 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int24 = equation23.c();
        int int25 = equation23.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution26 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation23);
        boolean boolean27 = gcdSolutionWrapper14.equals((java.lang.Object) solution26);
        boolean boolean29 = gcdSolutionWrapper14.equals((java.lang.Object) (short) 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation34 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution35 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation34);
        int int36 = solution35.getX();
        int int37 = solution35.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper38 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) 'a', solution35);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution41 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int42 = solution41.getY();
        java.lang.String str43 = solution41.toString();
        solution41.setX((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation49 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int50 = equation49.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution51 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation49);
        boolean boolean52 = solution41.equals((java.lang.Object) solution51);
        boolean boolean53 = solution35.equals((java.lang.Object) boolean52);
        gcdSolutionWrapper14.setSolution(solution35);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper55 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((-1), solution35);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution59 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) '4', (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper60 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(0, solution59);
        java.lang.String str61 = gcdSolutionWrapper60.toString();
        gcdSolutionWrapper60.setGcd(32);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation67 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution68 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation67);
        solution68.setY((int) (byte) 10);
        int int71 = solution68.getY();
        gcdSolutionWrapper60.setSolution(solution68);
        int int73 = gcdSolutionWrapper60.getGcd();
        java.lang.String str74 = gcdSolutionWrapper60.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution75 = gcdSolutionWrapper60.getSolution();
        gcdSolutionWrapper55.setSolution(solution75);
        java.lang.String str77 = solution75.toString();
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(solution15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str16, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 35 + "'", int24 == 35);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(solution26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(solution35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Solution[x=97, y=1]" + "'", str43, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 35 + "'", int50 == 35);
        org.junit.Assert.assertNotNull(solution51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]" + "'", str61, "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]");
        org.junit.Assert.assertNotNull(solution68);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 10 + "'", int71 == 10);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 32 + "'", int73 == 32);
// flaky:         org.junit.Assert.assertEquals("'" + str74 + "' != '" + "GcdSolutionWrapper[gcd=32, solution=Solution[x=35, y=10]]" + "'", str74, "GcdSolutionWrapper[gcd=32, solution=Solution[x=35, y=10]]");
        org.junit.Assert.assertNotNull(solution75);
// flaky:         org.junit.Assert.assertEquals("'" + str77 + "' != '" + "Solution[x=35, y=10]" + "'", str77, "Solution[x=35, y=10]");
    }

    @Test
    public void test2328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2328");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int4 = solution3.getY();
        solution3.setY((int) (byte) 1);
        boolean boolean8 = solution3.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution3);
        gcdSolutionWrapper9.setGcd((-1));
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution16 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int17 = solution16.getY();
        java.lang.String str18 = solution16.toString();
        solution16.setX((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper21 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((-35), solution16);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper22 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) ' ', solution16);
        gcdSolutionWrapper9.setSolution(solution16);
        int int24 = gcdSolutionWrapper9.getGcd();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Solution[x=97, y=1]" + "'", str18, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
    }

    @Test
    public void test2329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2329");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) '4', (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(0, solution3);
        java.lang.String str5 = gcdSolutionWrapper4.toString();
        gcdSolutionWrapper4.setGcd(32);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation11 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution12 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation11);
        solution12.setY((int) (byte) 10);
        int int15 = solution12.getY();
        gcdSolutionWrapper4.setSolution(solution12);
        int int17 = gcdSolutionWrapper4.getGcd();
        java.lang.String str18 = gcdSolutionWrapper4.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution19 = gcdSolutionWrapper4.getSolution();
        gcdSolutionWrapper4.setGcd(0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]" + "'", str5, "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]");
        org.junit.Assert.assertNotNull(solution12);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 32 + "'", int17 == 32);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "GcdSolutionWrapper[gcd=32, solution=Solution[x=35, y=10]]" + "'", str18, "GcdSolutionWrapper[gcd=32, solution=Solution[x=35, y=10]]");
        org.junit.Assert.assertNotNull(solution19);
    }

    @Test
    public void test2330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2330");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) 0, (-35));
        solution3.setX((int) (byte) 10);
        int int6 = solution3.getX();
        solution3.setX(10);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 10, solution3);
        gcdSolutionWrapper9.setGcd((int) '#');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution13 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper14 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution13);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution17 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int18 = solution17.getY();
        solution17.setY((int) (byte) 1);
        gcdSolutionWrapper14.setSolution(solution17);
        int int22 = gcdSolutionWrapper14.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution25 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int26 = solution25.getY();
        java.lang.String str27 = solution25.toString();
        solution25.setX((int) (short) 1);
        boolean boolean31 = solution25.equals((java.lang.Object) (-1.0f));
        java.lang.String str32 = solution25.toString();
        java.lang.String str33 = solution25.toString();
        gcdSolutionWrapper14.setSolution(solution25);
        solution25.setX((int) '4');
        java.lang.String str37 = solution25.toString();
        gcdSolutionWrapper9.setSolution(solution25);
        solution25.setY((int) 'a');
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10 + "'", int6 == 10);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Solution[x=97, y=1]" + "'", str27, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Solution[x=1, y=1]" + "'", str32, "Solution[x=1, y=1]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Solution[x=1, y=1]" + "'", str33, "Solution[x=1, y=1]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Solution[x=52, y=1]" + "'", str37, "Solution[x=52, y=1]");
    }

    @Test
    public void test2331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2331");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(32, (-35), (int) (byte) 1);
        int int4 = equation3.b();
        int int5 = equation3.c();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-35) + "'", int4 == (-35));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
    }

    @Test
    public void test2332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2332");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (short) -1, 97, (int) ' ');
        int int4 = equation3.a();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
    }

    @Test
    public void test2333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2333");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int4 = equation3.c();
        int int5 = equation3.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution6 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        int int7 = equation3.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution8 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution13 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int14 = solution13.getY();
        solution13.setY((int) (byte) 1);
        boolean boolean18 = solution13.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper19 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution13);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper20 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution13);
        gcdSolutionWrapper20.setGcd(32);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution26 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) 100, (int) ' ');
        java.lang.String str27 = solution26.toString();
        int int28 = solution26.getX();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper29 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(35, solution26);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution33 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) 0, (-35));
        int int34 = solution33.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper35 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(10, solution33);
        gcdSolutionWrapper29.setSolution(solution33);
        gcdSolutionWrapper20.setSolution(solution33);
        boolean boolean38 = equation3.equals((java.lang.Object) gcdSolutionWrapper20);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution39 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        int int40 = equation3.a();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(solution6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(solution8);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Solution[x=100, y=32]" + "'", str27, "Solution[x=100, y=32]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 100 + "'", int28 == 100);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-35) + "'", int34 == (-35));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(solution39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
    }

    @Test
    public void test2334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2334");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((-1), (int) 'a', (int) (byte) 10);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution5 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation4);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper6 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution5);
        org.junit.Assert.assertNotNull(solution5);
    }

    @Test
    public void test2335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2335");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((-1), (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper5 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) 0, solution4);
        int int6 = gcdSolutionWrapper5.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) 0, (-35));
        solution9.setX((int) (byte) 10);
        solution9.setX((int) '#');
        gcdSolutionWrapper5.setSolution(solution9);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper15 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) 100, solution9);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution16 = gcdSolutionWrapper15.getSolution();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(solution16);
    }

    @Test
    public void test2336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2336");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        int int4 = equation3.c();
        boolean boolean6 = equation3.equals((java.lang.Object) false);
        int int7 = equation3.a();
        int int8 = equation3.c();
        int int9 = equation3.b();
        int int10 = equation3.a();
        java.lang.String str11 = equation3.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution13 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper14 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution13);
        gcdSolutionWrapper14.setGcd((int) ' ');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution19 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int20 = solution19.getY();
        java.lang.String str21 = solution19.toString();
        gcdSolutionWrapper14.setSolution(solution19);
        int int23 = gcdSolutionWrapper14.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution26 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int27 = solution26.getY();
        gcdSolutionWrapper14.setSolution(solution26);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution30 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper31 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution30);
        gcdSolutionWrapper31.setGcd((int) ' ');
        gcdSolutionWrapper31.setGcd((int) (short) 100);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution38 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int39 = solution38.getY();
        java.lang.String str40 = solution38.toString();
        solution38.setX((int) (short) 1);
        boolean boolean44 = solution38.equals((java.lang.Object) (-1.0f));
        gcdSolutionWrapper31.setSolution(solution38);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution47 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper48 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution47);
        boolean boolean50 = gcdSolutionWrapper48.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution52 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper53 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution52);
        gcdSolutionWrapper53.setGcd((int) ' ');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution58 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int59 = solution58.getY();
        java.lang.String str60 = solution58.toString();
        gcdSolutionWrapper53.setSolution(solution58);
        gcdSolutionWrapper48.setSolution(solution58);
        int int63 = solution58.getY();
        java.lang.String str64 = solution58.toString();
        gcdSolutionWrapper31.setSolution(solution58);
        gcdSolutionWrapper14.setSolution(solution58);
        gcdSolutionWrapper14.setGcd(1);
        int int69 = gcdSolutionWrapper14.getGcd();
        java.lang.String str70 = gcdSolutionWrapper14.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution74 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) '4', (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper75 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(0, solution74);
        java.lang.String str76 = gcdSolutionWrapper75.toString();
        gcdSolutionWrapper75.setGcd(32);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation82 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution83 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation82);
        solution83.setY((int) (byte) 10);
        int int86 = solution83.getY();
        gcdSolutionWrapper75.setSolution(solution83);
        gcdSolutionWrapper14.setSolution(solution83);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution89 = gcdSolutionWrapper14.getSolution();
        boolean boolean90 = equation3.equals((java.lang.Object) gcdSolutionWrapper14);
        java.lang.String str91 = equation3.toString();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 97 + "'", int7 == 97);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 52 + "'", int8 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 97 + "'", int10 == 97);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Equation[a=97, b=0, c=52]" + "'", str11, "Equation[a=97, b=0, c=52]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Solution[x=97, y=1]" + "'", str21, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 32 + "'", int23 == 32);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Solution[x=97, y=1]" + "'", str40, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "Solution[x=97, y=1]" + "'", str60, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "Solution[x=97, y=1]" + "'", str64, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]" + "'", str70, "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]" + "'", str76, "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]");
        org.junit.Assert.assertNotNull(solution83);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 10 + "'", int86 == 10);
        org.junit.Assert.assertNotNull(solution89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "Equation[a=97, b=0, c=52]" + "'", str91, "Equation[a=97, b=0, c=52]");
    }

    @Test
    public void test2337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2337");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int4 = equation3.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution5 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution7 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution7);
        boolean boolean10 = gcdSolutionWrapper8.equals((java.lang.Object) 1);
        boolean boolean11 = equation3.equals((java.lang.Object) boolean10);
        int int12 = equation3.a();
        int int13 = equation3.b();
        int int14 = equation3.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution18 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int19 = solution18.getY();
        java.lang.String str20 = solution18.toString();
        solution18.setX((int) (short) 1);
        boolean boolean24 = solution18.equals((java.lang.Object) (-1.0f));
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper25 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 100, solution18);
        boolean boolean26 = equation3.equals((java.lang.Object) gcdSolutionWrapper25);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation30 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (short) 0, (int) (byte) -1, (int) ' ');
        boolean boolean31 = equation3.equals((java.lang.Object) (short) 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNotNull(solution5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Solution[x=97, y=1]" + "'", str20, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test2338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2338");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int3 = solution2.getY();
        java.lang.String str4 = solution2.toString();
        solution2.setX((int) (short) 1);
        solution2.setX((int) (byte) 1);
        solution2.setX((-35));
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Solution[x=97, y=1]" + "'", str4, "Solution[x=97, y=1]");
    }

    @Test
    public void test2339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2339");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) 0, (-35));
        solution2.setX((int) (byte) 10);
        solution2.setX((int) '#');
        int int7 = solution2.getY();
        int int8 = solution2.getY();
        java.lang.String str9 = solution2.toString();
        solution2.setY((int) '#');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution15 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int16 = solution15.getY();
        java.lang.String str17 = solution15.toString();
        solution15.setX((int) (short) 1);
        java.lang.String str20 = solution15.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper21 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(35, solution15);
        java.lang.Object obj22 = null;
        boolean boolean23 = gcdSolutionWrapper21.equals(obj22);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution24 = gcdSolutionWrapper21.getSolution();
        boolean boolean25 = solution2.equals((java.lang.Object) gcdSolutionWrapper21);
        int int26 = solution2.getX();
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-35) + "'", int7 == (-35));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-35) + "'", int8 == (-35));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Solution[x=35, y=-35]" + "'", str9, "Solution[x=35, y=-35]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Solution[x=97, y=1]" + "'", str17, "Solution[x=97, y=1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Solution[x=1, y=1]" + "'", str20, "Solution[x=1, y=1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(solution24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 35 + "'", int26 == 35);
    }

    @Test
    public void test2340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2340");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) -1, 32, 10);
    }

    @Test
    public void test2341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2341");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution4 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        java.lang.Class<?> wildcardClass5 = equation3.getClass();
        org.junit.Assert.assertNotNull(solution4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test2342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2342");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) -1, (int) '#');
    }

    @Test
    public void test2343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2343");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution7 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int8 = solution7.getY();
        solution7.setY((int) (byte) 1);
        boolean boolean12 = solution7.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper13 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution7);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution14 = gcdSolutionWrapper13.getSolution();
        java.lang.String str15 = gcdSolutionWrapper13.toString();
        gcdSolutionWrapper13.setGcd((int) (byte) 1);
        boolean boolean18 = equation3.equals((java.lang.Object) gcdSolutionWrapper13);
        int int19 = gcdSolutionWrapper13.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution22 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((-1), (int) '4');
        gcdSolutionWrapper13.setSolution(solution22);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution24 = gcdSolutionWrapper13.getSolution();
        int int25 = gcdSolutionWrapper13.getGcd();
        gcdSolutionWrapper13.setGcd((int) '#');
        java.lang.String str28 = gcdSolutionWrapper13.toString();
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(solution14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str15, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(solution24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "GcdSolutionWrapper[gcd=35, solution=Solution[x=-1, y=52]]" + "'", str28, "GcdSolutionWrapper[gcd=35, solution=Solution[x=-1, y=52]]");
    }

    @Test
    public void test2344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2344");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, 0, (int) (short) -1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution7 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int8 = solution7.getY();
        solution7.setY((int) (byte) 1);
        boolean boolean12 = solution7.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper13 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution7);
        boolean boolean14 = equation3.equals((java.lang.Object) gcdSolutionWrapper13);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation18 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution19 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation18);
        solution19.setY(0);
        gcdSolutionWrapper13.setSolution(solution19);
        int int23 = gcdSolutionWrapper13.getGcd();
        gcdSolutionWrapper13.setGcd(100);
        int int26 = gcdSolutionWrapper13.getGcd();
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(solution19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 100 + "'", int26 == 100);
    }

    @Test
    public void test2345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2345");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution1 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution1);
        gcdSolutionWrapper2.setGcd((int) ' ');
        gcdSolutionWrapper2.setGcd((int) (short) 100);
        java.lang.String str7 = gcdSolutionWrapper2.toString();
        int int8 = gcdSolutionWrapper2.getGcd();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "GcdSolutionWrapper[gcd=100, solution=null]" + "'", str7, "GcdSolutionWrapper[gcd=100, solution=null]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 100 + "'", int8 == 100);
    }

    @Test
    public void test2346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2346");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) (short) 1, (int) (byte) 100);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution9 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation8);
        java.lang.String str10 = solution9.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper11 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(1, solution9);
        boolean boolean12 = equation3.equals((java.lang.Object) solution9);
        solution9.setY(96);
        org.junit.Assert.assertNotNull(solution9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Solution[x=0, y=0]" + "'", str10, "Solution[x=0, y=0]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test2347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2347");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution7 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int8 = solution7.getY();
        solution7.setY((int) (byte) 1);
        boolean boolean12 = solution7.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper13 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution7);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution14 = gcdSolutionWrapper13.getSolution();
        java.lang.String str15 = gcdSolutionWrapper13.toString();
        gcdSolutionWrapper13.setGcd((int) (byte) 1);
        boolean boolean18 = equation3.equals((java.lang.Object) gcdSolutionWrapper13);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation22 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int23 = equation22.c();
        int int24 = equation22.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution25 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation22);
        boolean boolean26 = gcdSolutionWrapper13.equals((java.lang.Object) solution25);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation30 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int31 = equation30.c();
        int int32 = equation30.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution36 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int37 = solution36.getY();
        solution36.setY((int) (byte) 1);
        boolean boolean41 = solution36.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper42 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution36);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution43 = gcdSolutionWrapper42.getSolution();
        java.lang.String str44 = gcdSolutionWrapper42.toString();
        gcdSolutionWrapper42.setGcd((int) (byte) 1);
        boolean boolean47 = equation30.equals((java.lang.Object) gcdSolutionWrapper42);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution48 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation30);
        int int49 = solution48.getY();
        boolean boolean50 = gcdSolutionWrapper13.equals((java.lang.Object) int49);
        java.lang.String str51 = gcdSolutionWrapper13.toString();
        int int52 = gcdSolutionWrapper13.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution53 = gcdSolutionWrapper13.getSolution();
        solution53.setX((int) ' ');
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(solution14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str15, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 35 + "'", int23 == 35);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(solution25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 35 + "'", int31 == 35);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(solution43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str44, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(solution48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-35) + "'", int49 == (-35));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]" + "'", str51, "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(solution53);
    }

    @Test
    public void test2348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2348");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '#', 52, 32);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution6 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int7 = solution6.getY();
        java.lang.String str8 = solution6.toString();
        solution6.setX((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation14 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int15 = equation14.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution16 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation14);
        boolean boolean17 = solution6.equals((java.lang.Object) solution16);
        boolean boolean19 = solution16.equals((java.lang.Object) 0);
        boolean boolean20 = equation3.equals((java.lang.Object) solution16);
        boolean boolean22 = solution16.equals((java.lang.Object) (byte) -1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation27 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution28 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation27);
        solution28.setY(0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper31 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(0, solution28);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation35 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution36 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation35);
        solution36.setY((int) (byte) 10);
        boolean boolean39 = solution28.equals((java.lang.Object) (byte) 10);
        boolean boolean40 = solution16.equals((java.lang.Object) (byte) 10);
        int int41 = solution16.getX();
        solution16.setY((-75));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Solution[x=97, y=1]" + "'", str8, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 35 + "'", int15 == 35);
        org.junit.Assert.assertNotNull(solution16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(solution28);
        org.junit.Assert.assertNotNull(solution36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
    }

    @Test
    public void test2349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2349");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int4 = equation3.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution5 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution7 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution7);
        boolean boolean10 = gcdSolutionWrapper8.equals((java.lang.Object) 1);
        boolean boolean11 = equation3.equals((java.lang.Object) boolean10);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation15 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution16 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation15);
        solution16.setY((int) (byte) 10);
        boolean boolean19 = equation3.equals((java.lang.Object) solution16);
        int int20 = solution16.getY();
        java.lang.String str21 = solution16.toString();
        java.lang.Class<?> wildcardClass22 = solution16.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNotNull(solution5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(solution16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10 + "'", int20 == 10);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Solution[x=35, y=10]" + "'", str21, "Solution[x=35, y=10]");
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test2350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2350");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, 0, (int) (short) -1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution7 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int8 = solution7.getY();
        solution7.setY((int) (byte) 1);
        boolean boolean12 = solution7.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper13 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution7);
        boolean boolean14 = equation3.equals((java.lang.Object) gcdSolutionWrapper13);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation18 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int19 = equation18.c();
        int int20 = equation18.b();
        java.lang.Class<?> wildcardClass21 = equation18.getClass();
        boolean boolean22 = equation3.equals((java.lang.Object) wildcardClass21);
        int int23 = equation3.a();
        int int24 = equation3.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution28 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int29 = solution28.getY();
        solution28.setY((int) (byte) 1);
        boolean boolean33 = solution28.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper34 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution28);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution35 = gcdSolutionWrapper34.getSolution();
        java.lang.String str36 = gcdSolutionWrapper34.toString();
        gcdSolutionWrapper34.setGcd((int) (byte) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution41 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((-1), (int) '4');
        gcdSolutionWrapper34.setSolution(solution41);
        boolean boolean43 = equation3.equals((java.lang.Object) solution41);
        int int44 = equation3.b();
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35 + "'", int19 == 35);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(solution35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str36, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
    }

    @Test
    public void test2351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2351");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int4 = equation3.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution5 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution7 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution7);
        boolean boolean10 = gcdSolutionWrapper8.equals((java.lang.Object) 1);
        boolean boolean11 = equation3.equals((java.lang.Object) boolean10);
        int int12 = equation3.a();
        int int13 = equation3.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution15 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper16 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution15);
        gcdSolutionWrapper16.setGcd((int) ' ');
        gcdSolutionWrapper16.setGcd((int) (short) 1);
        int int21 = gcdSolutionWrapper16.getGcd();
        int int22 = gcdSolutionWrapper16.getGcd();
        boolean boolean23 = equation3.equals((java.lang.Object) int22);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution25 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper26 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution25);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution29 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int30 = solution29.getY();
        solution29.setY((int) (byte) 1);
        gcdSolutionWrapper26.setSolution(solution29);
        boolean boolean34 = equation3.equals((java.lang.Object) gcdSolutionWrapper26);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution35 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        int int36 = solution35.getX();
        solution35.setY(0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNotNull(solution5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(solution35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
    }

    @Test
    public void test2352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2352");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution0 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution.INFINITE_SOLUTIONS;
        solution0.setY((int) (short) 100);
        int int3 = solution0.getX();
        int int4 = solution0.getY();
        org.junit.Assert.assertNotNull(solution0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 100 + "'", int4 == 100);
    }

    @Test
    public void test2353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2353");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int3 = solution2.getY();
        java.lang.String str4 = solution2.toString();
        solution2.setX((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation10 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, 0, (int) (short) -1);
        boolean boolean11 = solution2.equals((java.lang.Object) equation10);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation15 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(32, (-35), (int) (byte) 1);
        boolean boolean16 = solution2.equals((java.lang.Object) (byte) 1);
        int int17 = solution2.getY();
        solution2.setX((int) (short) -1);
        int int20 = solution2.getY();
        solution2.setY((int) (short) 1);
        solution2.setY((int) (short) 0);
        java.lang.Class<?> wildcardClass25 = solution2.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Solution[x=97, y=1]" + "'", str4, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test2354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2354");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int4 = equation3.c();
        int int5 = equation3.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int10 = solution9.getY();
        solution9.setY((int) (byte) 1);
        boolean boolean14 = solution9.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper15 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution9);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution16 = gcdSolutionWrapper15.getSolution();
        java.lang.String str17 = gcdSolutionWrapper15.toString();
        gcdSolutionWrapper15.setGcd((int) (byte) 1);
        boolean boolean20 = equation3.equals((java.lang.Object) gcdSolutionWrapper15);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution21 = gcdSolutionWrapper15.getSolution();
        gcdSolutionWrapper15.setGcd(10);
        java.lang.String str24 = gcdSolutionWrapper15.toString();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(solution16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str17, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(solution21);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "GcdSolutionWrapper[gcd=10, solution=Solution[x=97, y=1]]" + "'", str24, "GcdSolutionWrapper[gcd=10, solution=Solution[x=97, y=1]]");
    }

    @Test
    public void test2355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2355");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) 'a', 32, (int) (byte) 100);
        int int4 = equation3.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution12 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int13 = solution12.getY();
        solution12.setY((int) (byte) 1);
        boolean boolean17 = solution12.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper18 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution12);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution19 = gcdSolutionWrapper18.getSolution();
        java.lang.String str20 = gcdSolutionWrapper18.toString();
        gcdSolutionWrapper18.setGcd((int) (byte) 1);
        boolean boolean23 = equation8.equals((java.lang.Object) gcdSolutionWrapper18);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution25 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper26 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution25);
        gcdSolutionWrapper26.setGcd((int) ' ');
        gcdSolutionWrapper26.setGcd((int) (short) 100);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution33 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int34 = solution33.getY();
        java.lang.String str35 = solution33.toString();
        solution33.setX((int) (short) 1);
        boolean boolean39 = solution33.equals((java.lang.Object) (-1.0f));
        gcdSolutionWrapper26.setSolution(solution33);
        gcdSolutionWrapper18.setSolution(solution33);
        int int42 = gcdSolutionWrapper18.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution44 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper45 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution44);
        boolean boolean47 = gcdSolutionWrapper45.equals((java.lang.Object) 1);
        java.lang.String str48 = gcdSolutionWrapper45.toString();
        gcdSolutionWrapper45.setGcd(32);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution53 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) 100, (int) (byte) -1);
        gcdSolutionWrapper45.setSolution(solution53);
        int int55 = solution53.getX();
        gcdSolutionWrapper18.setSolution(solution53);
        boolean boolean57 = equation3.equals((java.lang.Object) solution53);
        java.lang.String str58 = equation3.toString();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 32 + "'", int4 == 32);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(solution19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str20, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Solution[x=97, y=1]" + "'", str35, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=null]" + "'", str48, "GcdSolutionWrapper[gcd=1, solution=null]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 100 + "'", int55 == 100);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "Equation[a=97, b=32, c=100]" + "'", str58, "Equation[a=97, b=32, c=100]");
    }

    @Test
    public void test2356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2356");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int3 = solution2.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution9 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation8);
        int int10 = solution9.getX();
        int int11 = solution9.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper12 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) 'a', solution9);
        java.lang.String str13 = solution9.toString();
        boolean boolean14 = solution2.equals((java.lang.Object) solution9);
        solution9.setX((int) (byte) 1);
        int int17 = solution9.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(solution9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Solution[x=0, y=0]" + "'", str13, "Solution[x=0, y=0]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
    }

    @Test
    public void test2357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2357");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution4 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        int int5 = equation3.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) 10, (int) (short) -1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation14 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '#', 52, 32);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution17 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int18 = solution17.getY();
        java.lang.String str19 = solution17.toString();
        solution17.setX((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation25 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int26 = equation25.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution27 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation25);
        boolean boolean28 = solution17.equals((java.lang.Object) solution27);
        boolean boolean30 = solution27.equals((java.lang.Object) 0);
        boolean boolean31 = equation14.equals((java.lang.Object) solution27);
        boolean boolean33 = solution27.equals((java.lang.Object) (byte) -1);
        int int34 = solution27.getY();
        int int35 = solution27.getX();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper36 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) -1, solution27);
        boolean boolean37 = equation9.equals((java.lang.Object) solution27);
        solution27.setY((int) (byte) 100);
        boolean boolean40 = equation3.equals((java.lang.Object) solution27);
        solution27.setX((-35));
        org.junit.Assert.assertNotNull(solution4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Solution[x=97, y=1]" + "'", str19, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 35 + "'", int26 == 35);
        org.junit.Assert.assertNotNull(solution27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-35) + "'", int34 == (-35));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test2358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2358");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (short) -1, (int) (byte) 10);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(0, solution3);
        int int5 = gcdSolutionWrapper4.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution7 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution7);
        gcdSolutionWrapper8.setGcd((int) ' ');
        gcdSolutionWrapper8.setGcd((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution13 = gcdSolutionWrapper8.getSolution();
        int int14 = gcdSolutionWrapper8.getGcd();
        gcdSolutionWrapper8.setGcd(0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation20 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution21 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation20);
        solution21.setY(0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation27 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (short) 10, 10, 52);
        boolean boolean28 = solution21.equals((java.lang.Object) (short) 10);
        gcdSolutionWrapper8.setSolution(solution21);
        gcdSolutionWrapper4.setSolution(solution21);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation34 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int35 = equation34.c();
        int int36 = equation34.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution40 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int41 = solution40.getY();
        solution40.setY((int) (byte) 1);
        boolean boolean45 = solution40.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper46 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution40);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution47 = gcdSolutionWrapper46.getSolution();
        java.lang.String str48 = gcdSolutionWrapper46.toString();
        gcdSolutionWrapper46.setGcd((int) (byte) 1);
        boolean boolean51 = equation34.equals((java.lang.Object) gcdSolutionWrapper46);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution52 = gcdSolutionWrapper46.getSolution();
        int int53 = solution52.getX();
        solution52.setY((int) 'a');
        gcdSolutionWrapper4.setSolution(solution52);
        solution52.setY(0);
        int int59 = solution52.getY();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(solution13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(solution21);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 35 + "'", int35 == 35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(solution47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str48, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(solution52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 97 + "'", int53 == 97);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
    }

    @Test
    public void test2359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2359");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(0, 100, (int) '#');
    }

    @Test
    public void test2360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2360");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution5 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation4);
        int int6 = solution5.getX();
        int int7 = solution5.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) ' ', solution5);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution9 = gcdSolutionWrapper8.getSolution();
        int int10 = gcdSolutionWrapper8.getGcd();
        java.lang.Class<?> wildcardClass11 = gcdSolutionWrapper8.getClass();
        org.junit.Assert.assertNotNull(solution5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(solution9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 32 + "'", int10 == 32);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test2361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2361");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation6 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution7 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation6);
        int int8 = solution7.getX();
        int int9 = solution7.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper10 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) 'a', solution7);
        gcdSolutionWrapper10.setGcd((int) (short) 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution16 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(1, 52);
        int int17 = solution16.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper18 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((-1), solution16);
        boolean boolean19 = gcdSolutionWrapper10.equals((java.lang.Object) solution16);
        java.lang.String str20 = solution16.toString();
        solution16.setY((int) (byte) -1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper23 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(96, solution16);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper24 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(0, solution16);
        int int25 = gcdSolutionWrapper24.getGcd();
        org.junit.Assert.assertNotNull(solution7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 52 + "'", int17 == 52);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Solution[x=1, y=52]" + "'", str20, "Solution[x=1, y=52]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
    }

    @Test
    public void test2362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2362");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) 0, (-35));
        solution2.setX((int) (byte) 10);
        solution2.setX((int) '#');
        int int7 = solution2.getX();
        int int8 = solution2.getY();
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 35 + "'", int7 == 35);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-35) + "'", int8 == (-35));
    }

    @Test
    public void test2363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2363");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int3 = solution2.getY();
        java.lang.String str4 = solution2.toString();
        int int5 = solution2.getX();
        solution2.setY((int) (byte) -1);
        int int8 = solution2.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Solution[x=97, y=1]" + "'", str4, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 97 + "'", int5 == 97);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
    }

    @Test
    public void test2364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2364");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) 1, (int) (short) 100);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) 1, solution3);
        int int5 = gcdSolutionWrapper4.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution6 = gcdSolutionWrapper4.getSolution();
        solution6.setY((int) (byte) 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(solution6);
    }

    @Test
    public void test2365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2365");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int3 = solution2.getY();
        java.lang.String str4 = solution2.toString();
        solution2.setX((int) (short) 1);
        java.lang.String str7 = solution2.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution11 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) ' ', (int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper12 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) '4', solution11);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution13 = gcdSolutionWrapper12.getSolution();
        java.lang.String str14 = gcdSolutionWrapper12.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution17 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(0, 1);
        boolean boolean18 = gcdSolutionWrapper12.equals((java.lang.Object) solution17);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution19 = gcdSolutionWrapper12.getSolution();
        boolean boolean20 = solution2.equals((java.lang.Object) solution19);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Solution[x=97, y=1]" + "'", str4, "Solution[x=97, y=1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Solution[x=1, y=1]" + "'", str7, "Solution[x=1, y=1]");
        org.junit.Assert.assertNotNull(solution13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "GcdSolutionWrapper[gcd=52, solution=Solution[x=32, y=1]]" + "'", str14, "GcdSolutionWrapper[gcd=52, solution=Solution[x=32, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(solution19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test2366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2366");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) (byte) 1);
    }

    @Test
    public void test2367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2367");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((-1), (int) (short) 100);
    }

    @Test
    public void test2368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2368");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int4 = equation3.c();
        int int5 = equation3.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int10 = solution9.getY();
        solution9.setY((int) (byte) 1);
        boolean boolean14 = solution9.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper15 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution9);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution16 = gcdSolutionWrapper15.getSolution();
        java.lang.String str17 = gcdSolutionWrapper15.toString();
        gcdSolutionWrapper15.setGcd((int) (byte) 1);
        boolean boolean20 = equation3.equals((java.lang.Object) gcdSolutionWrapper15);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution21 = gcdSolutionWrapper15.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution22 = gcdSolutionWrapper15.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution26 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int27 = solution26.getY();
        solution26.setY((int) (byte) 1);
        boolean boolean31 = solution26.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper32 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution26);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution35 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int36 = solution35.getY();
        java.lang.String str37 = solution35.toString();
        boolean boolean39 = solution35.equals((java.lang.Object) (-1L));
        gcdSolutionWrapper32.setSolution(solution35);
        int int41 = solution35.getX();
        java.lang.String str42 = solution35.toString();
        solution35.setX((int) (byte) 0);
        boolean boolean45 = gcdSolutionWrapper15.equals((java.lang.Object) (byte) 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution46 = gcdSolutionWrapper15.getSolution();
        java.lang.String str47 = gcdSolutionWrapper15.toString();
        java.lang.String str48 = gcdSolutionWrapper15.toString();
        int int49 = gcdSolutionWrapper15.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution54 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int55 = solution54.getX();
        java.lang.String str56 = solution54.toString();
        solution54.setX((int) '#');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper59 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(0, solution54);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper60 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) ' ', solution54);
        boolean boolean61 = gcdSolutionWrapper15.equals((java.lang.Object) ' ');
        java.lang.String str62 = gcdSolutionWrapper15.toString();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(solution16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str17, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(solution21);
        org.junit.Assert.assertNotNull(solution22);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Solution[x=97, y=1]" + "'", str37, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 97 + "'", int41 == 97);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Solution[x=97, y=1]" + "'", str42, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(solution46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]" + "'", str47, "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]" + "'", str48, "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 97 + "'", int55 == 97);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Solution[x=97, y=1]" + "'", str56, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]" + "'", str62, "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]");
    }

    @Test
    public void test2369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2369");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution1 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution1);
        boolean boolean4 = gcdSolutionWrapper2.equals((java.lang.Object) "Equation[a=0, b=-1, c=35]");
        java.lang.String str5 = gcdSolutionWrapper2.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution10 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation9);
        boolean boolean11 = gcdSolutionWrapper2.equals((java.lang.Object) equation9);
        gcdSolutionWrapper2.setGcd((-97));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=null]" + "'", str5, "GcdSolutionWrapper[gcd=1, solution=null]");
        org.junit.Assert.assertNotNull(solution10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test2370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2370");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) '4', (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper5 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(0, solution4);
        java.lang.String str6 = gcdSolutionWrapper5.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution7 = gcdSolutionWrapper5.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation11 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int12 = equation11.c();
        int int13 = equation11.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution17 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int18 = solution17.getY();
        solution17.setY((int) (byte) 1);
        boolean boolean22 = solution17.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper23 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution17);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution24 = gcdSolutionWrapper23.getSolution();
        java.lang.String str25 = gcdSolutionWrapper23.toString();
        gcdSolutionWrapper23.setGcd((int) (byte) 1);
        boolean boolean28 = equation11.equals((java.lang.Object) gcdSolutionWrapper23);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution29 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation11);
        boolean boolean30 = gcdSolutionWrapper5.equals((java.lang.Object) solution29);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution32 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper33 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution32);
        gcdSolutionWrapper33.setGcd((int) ' ');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution38 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int39 = solution38.getY();
        java.lang.String str40 = solution38.toString();
        gcdSolutionWrapper33.setSolution(solution38);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution42 = gcdSolutionWrapper33.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation46 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        java.lang.String str47 = equation46.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution48 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation46);
        java.lang.String str49 = solution48.toString();
        boolean boolean50 = gcdSolutionWrapper33.equals((java.lang.Object) solution48);
        gcdSolutionWrapper5.setSolution(solution48);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper52 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((-75), solution48);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution53 = gcdSolutionWrapper52.getSolution();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]" + "'", str6, "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]");
        org.junit.Assert.assertNotNull(solution7);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 35 + "'", int12 == 35);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(solution24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str25, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(solution29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Solution[x=97, y=1]" + "'", str40, "Solution[x=97, y=1]");
        org.junit.Assert.assertNotNull(solution42);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str47, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertNotNull(solution48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Solution[x=0, y=-35]" + "'", str49, "Solution[x=0, y=-35]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(solution53);
    }

    @Test
    public void test2371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2371");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(0, (int) (short) 10, 0);
        int int4 = equation3.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution5 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        int int6 = equation3.c();
        int int7 = equation3.a();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertNotNull(solution5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test2372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2372");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (short) -1, (int) (byte) 10);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(0, solution3);
        int int5 = gcdSolutionWrapper4.getGcd();
        int int6 = gcdSolutionWrapper4.getGcd();
        gcdSolutionWrapper4.setGcd((-97));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test2373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2373");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int3 = solution2.getY();
        solution2.setY((int) (byte) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (short) 0, (int) (short) 1);
        boolean boolean9 = solution2.equals((java.lang.Object) solution8);
        java.lang.String str10 = solution2.toString();
        java.lang.String str11 = solution2.toString();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Solution[x=97, y=1]" + "'", str10, "Solution[x=97, y=1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Solution[x=97, y=1]" + "'", str11, "Solution[x=97, y=1]");
    }

    @Test
    public void test2374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2374");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '#', 0, 125);
    }

    @Test
    public void test2375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2375");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int4 = equation3.c();
        int int5 = equation3.b();
        int int6 = equation3.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution7 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        int int8 = equation3.b();
        int int9 = equation3.a();
        int int10 = equation3.b();
        java.lang.String str11 = equation3.toString();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 35 + "'", int6 == 35);
        org.junit.Assert.assertNotNull(solution7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str11, "Equation[a=0, b=-1, c=35]");
    }

    @Test
    public void test2376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2376");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (short) 100, (int) (short) 0, 1);
        int int4 = equation3.b();
        int int5 = equation3.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution6 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution7 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        solution7.setY((int) (byte) 10);
        java.lang.Object obj10 = null;
        boolean boolean11 = solution7.equals(obj10);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(solution6);
        org.junit.Assert.assertNotNull(solution7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test2377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2377");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) '4', (int) 'a');
        int int3 = solution2.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 97 + "'", int3 == 97);
    }

    @Test
    public void test2378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2378");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(0, (int) 'a');
        int int3 = solution2.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test2379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2379");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((-35), (int) ' ', 0);
        java.lang.String str4 = equation3.toString();
        boolean boolean6 = equation3.equals((java.lang.Object) true);
        int int7 = equation3.c();
        int int8 = equation3.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution9 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution10 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        int int11 = equation3.c();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Equation[a=-35, b=32, c=0]" + "'", str4, "Equation[a=-35, b=32, c=0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 32 + "'", int8 == 32);
        org.junit.Assert.assertNotNull(solution9);
        org.junit.Assert.assertNotNull(solution10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test2380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2380");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) -1, 35, 35);
        int int4 = equation3.a();
        java.lang.String str5 = equation3.toString();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Equation[a=-1, b=35, c=35]" + "'", str5, "Equation[a=-1, b=35, c=35]");
    }

    @Test
    public void test2381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2381");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(10, 0);
        int int4 = solution3.getX();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper5 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) -1, solution3);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution8 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution8);
        gcdSolutionWrapper9.setGcd((int) ' ');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution14 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int15 = solution14.getY();
        java.lang.String str16 = solution14.toString();
        gcdSolutionWrapper9.setSolution(solution14);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution21 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int22 = solution21.getY();
        solution21.setY((int) (byte) 1);
        boolean boolean26 = solution21.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper27 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution21);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution28 = gcdSolutionWrapper27.getSolution();
        java.lang.String str29 = gcdSolutionWrapper27.toString();
        gcdSolutionWrapper27.setGcd((int) (byte) 1);
        int int32 = gcdSolutionWrapper27.getGcd();
        boolean boolean33 = solution14.equals((java.lang.Object) gcdSolutionWrapper27);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper34 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) ' ', solution14);
        gcdSolutionWrapper5.setSolution(solution14);
        java.lang.String str36 = solution14.toString();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Solution[x=97, y=1]" + "'", str16, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(solution28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str29, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Solution[x=97, y=1]" + "'", str36, "Solution[x=97, y=1]");
    }

    @Test
    public void test2382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2382");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution1 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution1);
        gcdSolutionWrapper2.setGcd((int) ' ');
        int int5 = gcdSolutionWrapper2.getGcd();
        gcdSolutionWrapper2.setGcd((int) (byte) 100);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 32 + "'", int5 == 32);
    }

    @Test
    public void test2383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2383");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution1 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution1);
        boolean boolean4 = gcdSolutionWrapper2.equals((java.lang.Object) 1);
        gcdSolutionWrapper2.setGcd(10);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) '#', 0);
        gcdSolutionWrapper2.setSolution(solution9);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution11 = null;
        gcdSolutionWrapper2.setSolution(solution11);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation19 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution20 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation19);
        int int21 = solution20.getX();
        int int22 = solution20.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper23 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) 'a', solution20);
        gcdSolutionWrapper23.setGcd((int) (short) 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution29 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(1, 52);
        int int30 = solution29.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper31 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((-1), solution29);
        boolean boolean32 = gcdSolutionWrapper23.equals((java.lang.Object) solution29);
        java.lang.String str33 = solution29.toString();
        solution29.setY((int) (byte) -1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper36 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(96, solution29);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper37 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(0, solution29);
        gcdSolutionWrapper2.setSolution(solution29);
        java.lang.String str39 = gcdSolutionWrapper2.toString();
        int int40 = gcdSolutionWrapper2.getGcd();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(solution20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 52 + "'", int30 == 52);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Solution[x=1, y=52]" + "'", str33, "Solution[x=1, y=52]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "GcdSolutionWrapper[gcd=10, solution=Solution[x=1, y=-1]]" + "'", str39, "GcdSolutionWrapper[gcd=10, solution=Solution[x=1, y=-1]]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 10 + "'", int40 == 10);
    }

    @Test
    public void test2384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2384");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (short) 0, (int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution6 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) '4', (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper7 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(0, solution6);
        java.lang.String str8 = gcdSolutionWrapper7.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution9 = gcdSolutionWrapper7.getSolution();
        gcdSolutionWrapper7.setGcd(52);
        java.lang.String str12 = gcdSolutionWrapper7.toString();
        int int13 = gcdSolutionWrapper7.getGcd();
        int int14 = gcdSolutionWrapper7.getGcd();
        boolean boolean15 = solution2.equals((java.lang.Object) int14);
        java.lang.Object obj16 = null;
        boolean boolean17 = solution2.equals(obj16);
        int int18 = solution2.getX();
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]" + "'", str8, "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]");
        org.junit.Assert.assertNotNull(solution9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "GcdSolutionWrapper[gcd=52, solution=Solution[x=52, y=52]]" + "'", str12, "GcdSolutionWrapper[gcd=52, solution=Solution[x=52, y=52]]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test2385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2385");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution1 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution1);
        boolean boolean4 = gcdSolutionWrapper2.equals((java.lang.Object) 1);
        gcdSolutionWrapper2.setGcd(10);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) '#', 0);
        gcdSolutionWrapper2.setSolution(solution9);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution14 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(10, 0);
        int int15 = solution14.getX();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper16 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) -1, solution14);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution19 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper20 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution19);
        gcdSolutionWrapper20.setGcd((int) ' ');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution25 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int26 = solution25.getY();
        java.lang.String str27 = solution25.toString();
        gcdSolutionWrapper20.setSolution(solution25);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution32 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int33 = solution32.getY();
        solution32.setY((int) (byte) 1);
        boolean boolean37 = solution32.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper38 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution32);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution39 = gcdSolutionWrapper38.getSolution();
        java.lang.String str40 = gcdSolutionWrapper38.toString();
        gcdSolutionWrapper38.setGcd((int) (byte) 1);
        int int43 = gcdSolutionWrapper38.getGcd();
        boolean boolean44 = solution25.equals((java.lang.Object) gcdSolutionWrapper38);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper45 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) ' ', solution25);
        gcdSolutionWrapper16.setSolution(solution25);
        java.lang.String str47 = gcdSolutionWrapper16.toString();
        boolean boolean48 = solution9.equals((java.lang.Object) gcdSolutionWrapper16);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation52 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 100, (int) (byte) 10, (int) (short) 0);
        java.lang.String str53 = equation52.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation57 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((-35), (int) (short) 1, (-1));
        int int58 = equation57.b();
        boolean boolean59 = equation52.equals((java.lang.Object) int58);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation63 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (short) 10, 10, 100);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution64 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation63);
        java.lang.String str65 = equation63.toString();
        int int66 = equation63.a();
        java.lang.Object obj67 = null;
        boolean boolean68 = equation63.equals(obj67);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution69 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation63);
        solution69.setX((int) (byte) 100);
        boolean boolean72 = equation52.equals((java.lang.Object) solution69);
        gcdSolutionWrapper16.setSolution(solution69);
        int int74 = solution69.getX();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Solution[x=97, y=1]" + "'", str27, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(solution39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str40, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str47, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Equation[a=100, b=10, c=0]" + "'", str53, "Equation[a=100, b=10, c=0]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(solution64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "Equation[a=10, b=10, c=100]" + "'", str65, "Equation[a=10, b=10, c=100]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 10 + "'", int66 == 10);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(solution69);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 100 + "'", int74 == 100);
    }

    @Test
    public void test2386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2386");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int5 = solution4.getY();
        solution4.setY((int) (byte) 1);
        boolean boolean9 = solution4.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper10 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution4);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution13 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int14 = solution13.getY();
        java.lang.String str15 = solution13.toString();
        boolean boolean17 = solution13.equals((java.lang.Object) (-1L));
        gcdSolutionWrapper10.setSolution(solution13);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper19 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) 'a', solution13);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution20 = gcdSolutionWrapper19.getSolution();
        int int21 = gcdSolutionWrapper19.getGcd();
        int int22 = gcdSolutionWrapper19.getGcd();
        int int23 = gcdSolutionWrapper19.getGcd();
        java.lang.String str24 = gcdSolutionWrapper19.toString();
        int int25 = gcdSolutionWrapper19.getGcd();
        java.lang.String str26 = gcdSolutionWrapper19.toString();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Solution[x=97, y=1]" + "'", str15, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(solution20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 97 + "'", int22 == 97);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 97 + "'", int23 == 97);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "GcdSolutionWrapper[gcd=97, solution=Solution[x=97, y=1]]" + "'", str24, "GcdSolutionWrapper[gcd=97, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 97 + "'", int25 == 97);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "GcdSolutionWrapper[gcd=97, solution=Solution[x=97, y=1]]" + "'", str26, "GcdSolutionWrapper[gcd=97, solution=Solution[x=97, y=1]]");
    }

    @Test
    public void test2387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2387");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) 0, 32);
        int int3 = solution2.getX();
        solution2.setY((int) (short) 1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test2388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2388");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution7 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int8 = solution7.getY();
        solution7.setY((int) (byte) 1);
        boolean boolean12 = solution7.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper13 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution7);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution14 = gcdSolutionWrapper13.getSolution();
        java.lang.String str15 = gcdSolutionWrapper13.toString();
        gcdSolutionWrapper13.setGcd((int) (byte) 1);
        boolean boolean18 = equation3.equals((java.lang.Object) gcdSolutionWrapper13);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution20 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper21 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution20);
        gcdSolutionWrapper21.setGcd((int) ' ');
        gcdSolutionWrapper21.setGcd((int) (short) 100);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution28 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int29 = solution28.getY();
        java.lang.String str30 = solution28.toString();
        solution28.setX((int) (short) 1);
        boolean boolean34 = solution28.equals((java.lang.Object) (-1.0f));
        gcdSolutionWrapper21.setSolution(solution28);
        gcdSolutionWrapper13.setSolution(solution28);
        gcdSolutionWrapper13.setGcd(52);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution42 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int43 = solution42.getY();
        solution42.setY((int) (byte) 1);
        boolean boolean47 = solution42.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper48 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution42);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution51 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int52 = solution51.getY();
        java.lang.String str53 = solution51.toString();
        boolean boolean55 = solution51.equals((java.lang.Object) (-1L));
        gcdSolutionWrapper48.setSolution(solution51);
        int int57 = solution51.getX();
        java.lang.String str58 = solution51.toString();
        solution51.setX((int) (byte) 0);
        boolean boolean61 = gcdSolutionWrapper13.equals((java.lang.Object) (byte) 0);
        java.lang.Class<?> wildcardClass62 = gcdSolutionWrapper13.getClass();
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(solution14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str15, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Solution[x=97, y=1]" + "'", str30, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Solution[x=97, y=1]" + "'", str53, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 97 + "'", int57 == 97);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "Solution[x=97, y=1]" + "'", str58, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(wildcardClass62);
    }

    @Test
    public void test2389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2389");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(0, 125);
        solution2.setY(52);
    }

    @Test
    public void test2390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2390");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) ' ', 52, 100);
        int int4 = equation3.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '#', (int) (byte) -1, (int) (short) 100);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution9 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation8);
        boolean boolean10 = equation3.equals((java.lang.Object) equation8);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 32 + "'", int4 == 32);
        org.junit.Assert.assertNotNull(solution9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test2391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2391");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        int int4 = equation3.a();
        int int5 = equation3.c();
        int int6 = equation3.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation11 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution12 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation11);
        int int13 = solution12.getX();
        int int14 = solution12.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper15 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) 'a', solution12);
        gcdSolutionWrapper15.setGcd((int) (short) 0);
        gcdSolutionWrapper15.setGcd((int) '4');
        int int20 = gcdSolutionWrapper15.getGcd();
        java.lang.String str21 = gcdSolutionWrapper15.toString();
        boolean boolean22 = equation3.equals((java.lang.Object) str21);
        int int23 = equation3.b();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 97 + "'", int4 == 97);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 52 + "'", int5 == 52);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertNotNull(solution12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 52 + "'", int20 == 52);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "GcdSolutionWrapper[gcd=52, solution=Solution[x=0, y=0]]" + "'", str21, "GcdSolutionWrapper[gcd=52, solution=Solution[x=0, y=0]]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
    }

    @Test
    public void test2392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2392");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution1 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution1);
        gcdSolutionWrapper2.setGcd((int) ' ');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution7 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int8 = solution7.getY();
        java.lang.String str9 = solution7.toString();
        gcdSolutionWrapper2.setSolution(solution7);
        int int11 = gcdSolutionWrapper2.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution14 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int15 = solution14.getY();
        gcdSolutionWrapper2.setSolution(solution14);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution18 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper19 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution18);
        gcdSolutionWrapper19.setGcd((int) ' ');
        gcdSolutionWrapper19.setGcd((int) (short) 100);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution26 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int27 = solution26.getY();
        java.lang.String str28 = solution26.toString();
        solution26.setX((int) (short) 1);
        boolean boolean32 = solution26.equals((java.lang.Object) (-1.0f));
        gcdSolutionWrapper19.setSolution(solution26);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution35 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper36 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution35);
        boolean boolean38 = gcdSolutionWrapper36.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution40 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper41 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution40);
        gcdSolutionWrapper41.setGcd((int) ' ');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution46 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int47 = solution46.getY();
        java.lang.String str48 = solution46.toString();
        gcdSolutionWrapper41.setSolution(solution46);
        gcdSolutionWrapper36.setSolution(solution46);
        int int51 = solution46.getY();
        java.lang.String str52 = solution46.toString();
        gcdSolutionWrapper19.setSolution(solution46);
        gcdSolutionWrapper2.setSolution(solution46);
        gcdSolutionWrapper2.setGcd(1);
        int int57 = gcdSolutionWrapper2.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation61 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution65 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int66 = solution65.getY();
        solution65.setY((int) (byte) 1);
        boolean boolean70 = solution65.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper71 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution65);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution72 = gcdSolutionWrapper71.getSolution();
        java.lang.String str73 = gcdSolutionWrapper71.toString();
        gcdSolutionWrapper71.setGcd((int) (byte) 1);
        boolean boolean76 = equation61.equals((java.lang.Object) gcdSolutionWrapper71);
        java.lang.String str77 = equation61.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution78 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation61);
        solution78.setY((int) (byte) 0);
        int int81 = solution78.getX();
        gcdSolutionWrapper2.setSolution(solution78);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Solution[x=97, y=1]" + "'", str9, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 32 + "'", int11 == 32);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Solution[x=97, y=1]" + "'", str28, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Solution[x=97, y=1]" + "'", str48, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Solution[x=97, y=1]" + "'", str52, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(solution72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str73, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str77, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertNotNull(solution78);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
    }

    @Test
    public void test2393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2393");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) -1, 35, 0);
    }

    @Test
    public void test2394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2394");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int4 = solution3.getY();
        solution3.setY((int) (byte) 1);
        boolean boolean8 = solution3.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution3);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution12 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int13 = solution12.getY();
        java.lang.String str14 = solution12.toString();
        boolean boolean16 = solution12.equals((java.lang.Object) (-1L));
        gcdSolutionWrapper9.setSolution(solution12);
        int int18 = solution12.getX();
        int int19 = solution12.getY();
        solution12.setY((int) (short) 10);
        solution12.setY(35);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution27 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int28 = solution27.getY();
        solution27.setY((int) (byte) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution33 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (short) 0, (int) (short) 1);
        boolean boolean34 = solution27.equals((java.lang.Object) solution33);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper35 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(0, solution27);
        boolean boolean36 = solution12.equals((java.lang.Object) gcdSolutionWrapper35);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation40 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (short) 100, (int) (short) 0, 1);
        int int41 = equation40.b();
        int int42 = equation40.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution43 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation40);
        gcdSolutionWrapper35.setSolution(solution43);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution47 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) 0, (-35));
        solution47.setX((int) (byte) 10);
        solution47.setX((int) '#');
        int int52 = solution47.getX();
        boolean boolean53 = solution43.equals((java.lang.Object) solution47);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Solution[x=97, y=1]" + "'", str14, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 97 + "'", int18 == 97);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(solution43);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 35 + "'", int52 == 35);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test2395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2395");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (short) 10, 10, 52);
        java.lang.String str4 = equation3.toString();
        int int5 = equation3.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution6 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        int int7 = equation3.c();
        int int8 = equation3.b();
        java.lang.String str9 = equation3.toString();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Equation[a=10, b=10, c=52]" + "'", str4, "Equation[a=10, b=10, c=52]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 52 + "'", int5 == 52);
        org.junit.Assert.assertNotNull(solution6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Equation[a=10, b=10, c=52]" + "'", str9, "Equation[a=10, b=10, c=52]");
    }

    @Test
    public void test2396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2396");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution1 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution5 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int6 = solution5.getY();
        solution5.setY((int) (byte) 1);
        gcdSolutionWrapper2.setSolution(solution5);
        gcdSolutionWrapper2.setGcd((int) (byte) 0);
        gcdSolutionWrapper2.setGcd((int) (byte) 0);
        java.lang.String str14 = gcdSolutionWrapper2.toString();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "GcdSolutionWrapper[gcd=0, solution=Solution[x=97, y=1]]" + "'", str14, "GcdSolutionWrapper[gcd=0, solution=Solution[x=97, y=1]]");
    }

    @Test
    public void test2397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2397");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(32, (int) (short) 10);
        int int5 = solution4.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper6 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution4);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper7 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(1, solution4);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution11 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int12 = solution11.getY();
        java.lang.String str13 = solution11.toString();
        solution11.setX((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation19 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int20 = equation19.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution21 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation19);
        boolean boolean22 = solution11.equals((java.lang.Object) solution21);
        int int23 = solution21.getY();
        int int24 = solution21.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper25 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) '#', solution21);
        gcdSolutionWrapper25.setGcd(97);
        java.lang.Class<?> wildcardClass28 = gcdSolutionWrapper25.getClass();
        boolean boolean29 = gcdSolutionWrapper7.equals((java.lang.Object) wildcardClass28);
        java.lang.String str30 = gcdSolutionWrapper7.toString();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 10 + "'", int5 == 10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Solution[x=97, y=1]" + "'", str13, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 35 + "'", int20 == 35);
        org.junit.Assert.assertNotNull(solution21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-35) + "'", int23 == (-35));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-35) + "'", int24 == (-35));
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=Solution[x=32, y=10]]" + "'", str30, "GcdSolutionWrapper[gcd=1, solution=Solution[x=32, y=10]]");
    }

    @Test
    public void test2398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2398");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution1 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution5 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int6 = solution5.getY();
        solution5.setY((int) (byte) 1);
        gcdSolutionWrapper2.setSolution(solution5);
        int int10 = gcdSolutionWrapper2.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution13 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int14 = solution13.getY();
        java.lang.String str15 = solution13.toString();
        solution13.setX((int) (short) 1);
        boolean boolean19 = solution13.equals((java.lang.Object) (-1.0f));
        java.lang.String str20 = solution13.toString();
        java.lang.String str21 = solution13.toString();
        gcdSolutionWrapper2.setSolution(solution13);
        java.lang.String str23 = solution13.toString();
        solution13.setY(52);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation29 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        int int30 = equation29.c();
        int int31 = equation29.a();
        int int32 = equation29.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution33 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation29);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation37 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int38 = equation37.c();
        int int39 = equation37.b();
        int int40 = equation37.c();
        boolean boolean41 = solution33.equals((java.lang.Object) equation37);
        java.lang.String str42 = equation37.toString();
        int int43 = equation37.b();
        boolean boolean44 = solution13.equals((java.lang.Object) int43);
        int int45 = solution13.getY();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Solution[x=97, y=1]" + "'", str15, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Solution[x=1, y=1]" + "'", str20, "Solution[x=1, y=1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Solution[x=1, y=1]" + "'", str21, "Solution[x=1, y=1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Solution[x=1, y=1]" + "'", str23, "Solution[x=1, y=1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 52 + "'", int30 == 52);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 97 + "'", int31 == 97);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 97 + "'", int32 == 97);
        org.junit.Assert.assertNotNull(solution33);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 35 + "'", int38 == 35);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 35 + "'", int40 == 35);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str42, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 52 + "'", int45 == 52);
    }

    @Test
    public void test2399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2399");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(32, 100);
        java.lang.String str4 = solution3.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper5 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(32, solution3);
        int int6 = gcdSolutionWrapper5.getGcd();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Solution[x=32, y=100]" + "'", str4, "Solution[x=32, y=100]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 32 + "'", int6 == 32);
    }

    @Test
    public void test2400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2400");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int4 = solution3.getX();
        java.lang.String str5 = solution3.toString();
        solution3.setX((int) '#');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(0, solution3);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution10 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper11 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution10);
        boolean boolean13 = gcdSolutionWrapper11.equals((java.lang.Object) 1);
        gcdSolutionWrapper11.setGcd(10);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution18 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) '#', 0);
        gcdSolutionWrapper11.setSolution(solution18);
        gcdSolutionWrapper8.setSolution(solution18);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution21 = gcdSolutionWrapper8.getSolution();
        int int22 = gcdSolutionWrapper8.getGcd();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 97 + "'", int4 == 97);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Solution[x=97, y=1]" + "'", str5, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(solution21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
    }

    @Test
    public void test2401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2401");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(35, (int) (short) 0, 97);
        java.lang.String str4 = equation3.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int9 = equation8.c();
        int int10 = equation8.b();
        int int11 = equation8.c();
        int int12 = equation8.c();
        boolean boolean13 = equation3.equals((java.lang.Object) equation8);
        int int14 = equation3.b();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Equation[a=35, b=0, c=97]" + "'", str4, "Equation[a=35, b=0, c=97]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 35 + "'", int11 == 35);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 35 + "'", int12 == 35);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test2402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2402");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution5 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation4);
        solution5.setY(0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(0, solution5);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation13 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution14 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation13);
        int int15 = solution14.getX();
        int int16 = solution14.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper17 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) 'a', solution14);
        int int18 = solution14.getX();
        gcdSolutionWrapper8.setSolution(solution14);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution20 = gcdSolutionWrapper8.getSolution();
        int int21 = gcdSolutionWrapper8.getGcd();
        org.junit.Assert.assertNotNull(solution5);
        org.junit.Assert.assertNotNull(solution14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(solution20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
    }

    @Test
    public void test2403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2403");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution7 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int8 = solution7.getY();
        solution7.setY((int) (byte) 1);
        boolean boolean12 = solution7.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper13 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution7);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution14 = gcdSolutionWrapper13.getSolution();
        java.lang.String str15 = gcdSolutionWrapper13.toString();
        gcdSolutionWrapper13.setGcd((int) (byte) 1);
        boolean boolean18 = equation3.equals((java.lang.Object) gcdSolutionWrapper13);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution20 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper21 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution20);
        gcdSolutionWrapper21.setGcd((int) ' ');
        gcdSolutionWrapper21.setGcd((int) (short) 100);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution28 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int29 = solution28.getY();
        java.lang.String str30 = solution28.toString();
        solution28.setX((int) (short) 1);
        boolean boolean34 = solution28.equals((java.lang.Object) (-1.0f));
        gcdSolutionWrapper21.setSolution(solution28);
        gcdSolutionWrapper13.setSolution(solution28);
        int int37 = gcdSolutionWrapper13.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution39 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper40 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution39);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution43 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int44 = solution43.getY();
        solution43.setY((int) (byte) 1);
        gcdSolutionWrapper40.setSolution(solution43);
        gcdSolutionWrapper40.setGcd((int) (byte) 0);
        boolean boolean50 = gcdSolutionWrapper13.equals((java.lang.Object) (byte) 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution54 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) '4', (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper55 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(0, solution54);
        java.lang.String str56 = gcdSolutionWrapper55.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution57 = gcdSolutionWrapper55.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution58 = gcdSolutionWrapper55.getSolution();
        java.lang.String str59 = gcdSolutionWrapper55.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation63 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) ' ', 52, 100);
        int int64 = equation63.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation68 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int69 = equation68.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution70 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation68);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution72 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper73 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution72);
        boolean boolean75 = gcdSolutionWrapper73.equals((java.lang.Object) 1);
        boolean boolean76 = equation68.equals((java.lang.Object) boolean75);
        int int77 = equation68.a();
        int int78 = equation68.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution80 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper81 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution80);
        gcdSolutionWrapper81.setGcd((int) ' ');
        gcdSolutionWrapper81.setGcd((int) (short) 1);
        int int86 = gcdSolutionWrapper81.getGcd();
        int int87 = gcdSolutionWrapper81.getGcd();
        boolean boolean88 = equation68.equals((java.lang.Object) int87);
        boolean boolean89 = equation63.equals((java.lang.Object) equation68);
        java.lang.String str90 = equation68.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution91 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation68);
        gcdSolutionWrapper55.setSolution(solution91);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution93 = gcdSolutionWrapper55.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution94 = gcdSolutionWrapper55.getSolution();
        boolean boolean95 = gcdSolutionWrapper13.equals((java.lang.Object) solution94);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution96 = gcdSolutionWrapper13.getSolution();
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(solution14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str15, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Solution[x=97, y=1]" + "'", str30, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]" + "'", str56, "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]");
        org.junit.Assert.assertNotNull(solution57);
        org.junit.Assert.assertNotNull(solution58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]" + "'", str59, "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 32 + "'", int64 == 32);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 35 + "'", int69 == 35);
        org.junit.Assert.assertNotNull(solution70);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-1) + "'", int78 == (-1));
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 1 + "'", int86 == 1);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1 + "'", int87 == 1);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str90, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertNotNull(solution91);
        org.junit.Assert.assertNotNull(solution93);
        org.junit.Assert.assertNotNull(solution94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(solution96);
    }

    @Test
    public void test2404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2404");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) ' ', 32);
        solution2.setY((int) (short) 10);
    }

    @Test
    public void test2405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2405");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (short) 10, (int) (byte) 10);
    }

    @Test
    public void test2406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2406");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution2);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution6 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int7 = solution6.getY();
        solution6.setY((int) (byte) 1);
        gcdSolutionWrapper3.setSolution(solution6);
        java.lang.String str11 = solution6.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper12 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) ' ', solution6);
        solution6.setX(97);
        solution6.setX(1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Solution[x=97, y=1]" + "'", str11, "Solution[x=97, y=1]");
    }

    @Test
    public void test2407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2407");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(32, 100);
        java.lang.String str3 = solution2.toString();
        int int4 = solution2.getX();
        int int5 = solution2.getX();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Solution[x=32, y=100]" + "'", str3, "Solution[x=32, y=100]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 32 + "'", int4 == 32);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 32 + "'", int5 == 32);
    }

    @Test
    public void test2408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2408");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution2);
        gcdSolutionWrapper3.setGcd((int) ' ');
        gcdSolutionWrapper3.setGcd((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution8 = gcdSolutionWrapper3.getSolution();
        int int9 = gcdSolutionWrapper3.getGcd();
        gcdSolutionWrapper3.setGcd(0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation15 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution16 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation15);
        solution16.setY(0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation22 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (short) 10, 10, 52);
        boolean boolean23 = solution16.equals((java.lang.Object) (short) 10);
        gcdSolutionWrapper3.setSolution(solution16);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution28 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int29 = solution28.getY();
        java.lang.String str30 = solution28.toString();
        solution28.setX((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper33 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((-35), solution28);
        java.lang.String str34 = solution28.toString();
        gcdSolutionWrapper3.setSolution(solution28);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper36 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 10, solution28);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution40 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int41 = solution40.getY();
        solution40.setY((int) (byte) 1);
        boolean boolean45 = solution40.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper46 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution40);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution49 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int50 = solution49.getY();
        java.lang.String str51 = solution49.toString();
        boolean boolean53 = solution49.equals((java.lang.Object) (-1L));
        gcdSolutionWrapper46.setSolution(solution49);
        solution49.setX(1);
        boolean boolean57 = gcdSolutionWrapper36.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution58 = gcdSolutionWrapper36.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution59 = gcdSolutionWrapper36.getSolution();
        org.junit.Assert.assertNull(solution8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(solution16);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Solution[x=97, y=1]" + "'", str30, "Solution[x=97, y=1]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Solution[x=1, y=1]" + "'", str34, "Solution[x=1, y=1]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Solution[x=97, y=1]" + "'", str51, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(solution58);
        org.junit.Assert.assertNotNull(solution59);
    }

    @Test
    public void test2409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2409");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (short) 10, 125);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((-97), solution3);
    }

    @Test
    public void test2410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2410");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution1 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution1);
        gcdSolutionWrapper2.setGcd((int) ' ');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution7 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int8 = solution7.getY();
        java.lang.String str9 = solution7.toString();
        gcdSolutionWrapper2.setSolution(solution7);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution11 = gcdSolutionWrapper2.getSolution();
        java.lang.String str12 = gcdSolutionWrapper2.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution13 = gcdSolutionWrapper2.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation18 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution19 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation18);
        int int20 = solution19.getX();
        int int21 = solution19.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper22 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) 'a', solution19);
        gcdSolutionWrapper22.setGcd((int) (short) 0);
        gcdSolutionWrapper22.setGcd((int) '4');
        int int27 = gcdSolutionWrapper22.getGcd();
        gcdSolutionWrapper22.setGcd((int) (short) -1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution30 = gcdSolutionWrapper22.getSolution();
        boolean boolean31 = solution13.equals((java.lang.Object) gcdSolutionWrapper22);
        int int32 = solution13.getY();
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Solution[x=97, y=1]" + "'", str9, "Solution[x=97, y=1]");
        org.junit.Assert.assertNotNull(solution11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "GcdSolutionWrapper[gcd=32, solution=Solution[x=97, y=1]]" + "'", str12, "GcdSolutionWrapper[gcd=32, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertNotNull(solution13);
        org.junit.Assert.assertNotNull(solution19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 52 + "'", int27 == 52);
        org.junit.Assert.assertNotNull(solution30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
    }

    @Test
    public void test2411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2411");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int3 = solution2.getY();
        java.lang.String str4 = solution2.toString();
        java.lang.String str5 = solution2.toString();
        java.lang.String str6 = solution2.toString();
        solution2.setY((int) (short) 0);
        solution2.setY((int) (short) 10);
        int int11 = solution2.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation15 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, 0, 10);
        int int16 = equation15.a();
        int int17 = equation15.a();
        int int18 = equation15.c();
        boolean boolean19 = solution2.equals((java.lang.Object) equation15);
        solution2.setY((int) (short) 10);
        int int22 = solution2.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Solution[x=97, y=1]" + "'", str4, "Solution[x=97, y=1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Solution[x=97, y=1]" + "'", str5, "Solution[x=97, y=1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Solution[x=97, y=1]" + "'", str6, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10 + "'", int18 == 10);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 97 + "'", int22 == 97);
    }

    @Test
    public void test2412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2412");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(0, 125);
        solution2.setX(35);
    }

    @Test
    public void test2413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2413");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int4 = equation3.c();
        int int5 = equation3.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int10 = solution9.getY();
        solution9.setY((int) (byte) 1);
        boolean boolean14 = solution9.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper15 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution9);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution16 = gcdSolutionWrapper15.getSolution();
        java.lang.String str17 = gcdSolutionWrapper15.toString();
        gcdSolutionWrapper15.setGcd((int) (byte) 1);
        boolean boolean20 = equation3.equals((java.lang.Object) gcdSolutionWrapper15);
        int int21 = gcdSolutionWrapper15.getGcd();
        java.lang.String str22 = gcdSolutionWrapper15.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution23 = gcdSolutionWrapper15.getSolution();
        java.lang.String str24 = solution23.toString();
        java.lang.Class<?> wildcardClass25 = solution23.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(solution16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str17, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]" + "'", str22, "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertNotNull(solution23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Solution[x=97, y=1]" + "'", str24, "Solution[x=97, y=1]");
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test2414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2414");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 1, (int) (short) 10, (int) (short) -1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution4 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution5 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int10 = solution9.getY();
        solution9.setY((int) (byte) 1);
        boolean boolean14 = solution9.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper15 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution9);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution18 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int19 = solution18.getY();
        java.lang.String str20 = solution18.toString();
        boolean boolean22 = solution18.equals((java.lang.Object) (-1L));
        gcdSolutionWrapper15.setSolution(solution18);
        int int24 = solution18.getX();
        boolean boolean25 = equation3.equals((java.lang.Object) solution18);
        int int26 = equation3.c();
        org.junit.Assert.assertNotNull(solution4);
        org.junit.Assert.assertNotNull(solution5);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Solution[x=97, y=1]" + "'", str20, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 97 + "'", int24 == 97);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
    }

    @Test
    public void test2415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2415");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((-97), 100);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution3);
    }

    @Test
    public void test2416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2416");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        java.lang.String str4 = equation3.toString();
        int int5 = equation3.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution10 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int11 = solution10.getY();
        java.lang.String str12 = solution10.toString();
        solution10.setX((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper15 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((-35), solution10);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper16 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) ' ', solution10);
        gcdSolutionWrapper16.setGcd(52);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution19 = gcdSolutionWrapper16.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution23 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) '4', (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper24 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(0, solution23);
        java.lang.String str25 = gcdSolutionWrapper24.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution26 = gcdSolutionWrapper24.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation30 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int31 = equation30.c();
        int int32 = equation30.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution36 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int37 = solution36.getY();
        solution36.setY((int) (byte) 1);
        boolean boolean41 = solution36.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper42 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution36);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution43 = gcdSolutionWrapper42.getSolution();
        java.lang.String str44 = gcdSolutionWrapper42.toString();
        gcdSolutionWrapper42.setGcd((int) (byte) 1);
        boolean boolean47 = equation30.equals((java.lang.Object) gcdSolutionWrapper42);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution48 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation30);
        boolean boolean49 = gcdSolutionWrapper24.equals((java.lang.Object) solution48);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution53 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int54 = solution53.getY();
        solution53.setY((int) (byte) 1);
        boolean boolean58 = solution53.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper59 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution53);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution62 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int63 = solution62.getY();
        java.lang.String str64 = solution62.toString();
        boolean boolean66 = solution62.equals((java.lang.Object) (-1L));
        gcdSolutionWrapper59.setSolution(solution62);
        int int68 = solution62.getX();
        boolean boolean69 = solution48.equals((java.lang.Object) solution62);
        gcdSolutionWrapper16.setSolution(solution48);
        boolean boolean71 = equation3.equals((java.lang.Object) solution48);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution72 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        boolean boolean74 = equation3.equals((java.lang.Object) "Solution[x=52, y=0]");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation78 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) -1, 0, 0);
        java.lang.String str79 = equation78.toString();
        java.lang.Class<?> wildcardClass80 = equation78.getClass();
        boolean boolean81 = equation3.equals((java.lang.Object) wildcardClass80);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str4, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 35 + "'", int5 == 35);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Solution[x=97, y=1]" + "'", str12, "Solution[x=97, y=1]");
        org.junit.Assert.assertNotNull(solution19);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]" + "'", str25, "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]");
        org.junit.Assert.assertNotNull(solution26);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 35 + "'", int31 == 35);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(solution43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str44, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(solution48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "Solution[x=97, y=1]" + "'", str64, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 97 + "'", int68 == 97);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(solution72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "Equation[a=-1, b=0, c=0]" + "'", str79, "Equation[a=-1, b=0, c=0]");
        org.junit.Assert.assertNotNull(wildcardClass80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test2417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2417");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, 0, (int) (short) -1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution7 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int8 = solution7.getY();
        solution7.setY((int) (byte) 1);
        boolean boolean12 = solution7.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper13 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution7);
        boolean boolean14 = equation3.equals((java.lang.Object) gcdSolutionWrapper13);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation18 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution19 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation18);
        solution19.setY(0);
        gcdSolutionWrapper13.setSolution(solution19);
        int int23 = gcdSolutionWrapper13.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution25 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper26 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution25);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution29 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int30 = solution29.getY();
        solution29.setY((int) (byte) 1);
        gcdSolutionWrapper26.setSolution(solution29);
        gcdSolutionWrapper13.setSolution(solution29);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution35 = gcdSolutionWrapper13.getSolution();
        int int36 = gcdSolutionWrapper13.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation41 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution42 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation41);
        solution42.setY(0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper45 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(97, solution42);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation49 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        int int50 = equation49.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution51 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation49);
        int int52 = solution51.getX();
        gcdSolutionWrapper45.setSolution(solution51);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation57 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) ' ', 52, 100);
        int int58 = equation57.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation62 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int63 = equation62.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution64 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation62);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution66 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper67 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution66);
        boolean boolean69 = gcdSolutionWrapper67.equals((java.lang.Object) 1);
        boolean boolean70 = equation62.equals((java.lang.Object) boolean69);
        int int71 = equation62.a();
        int int72 = equation62.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution74 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper75 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution74);
        gcdSolutionWrapper75.setGcd((int) ' ');
        gcdSolutionWrapper75.setGcd((int) (short) 1);
        int int80 = gcdSolutionWrapper75.getGcd();
        int int81 = gcdSolutionWrapper75.getGcd();
        boolean boolean82 = equation62.equals((java.lang.Object) int81);
        boolean boolean83 = equation57.equals((java.lang.Object) equation62);
        java.lang.String str84 = equation57.toString();
        boolean boolean85 = solution51.equals((java.lang.Object) str84);
        boolean boolean86 = gcdSolutionWrapper13.equals((java.lang.Object) boolean85);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation90 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(52, (int) (short) 100, (int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution91 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation90);
        gcdSolutionWrapper13.setSolution(solution91);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(solution19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(solution35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(solution42);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 52 + "'", int50 == 52);
        org.junit.Assert.assertNotNull(solution51);
// flaky:         org.junit.Assert.assertTrue("'" + int52 + "' != '" + 35 + "'", int52 == 35);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 32 + "'", int58 == 32);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 35 + "'", int63 == 35);
        org.junit.Assert.assertNotNull(solution64);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "Equation[a=32, b=52, c=100]" + "'", str84, "Equation[a=32, b=52, c=100]");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(solution91);
    }

    @Test
    public void test2418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2418");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(0, (int) (short) 10, 0);
        int int4 = equation3.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution5 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        int int6 = equation3.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation10 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        int int11 = equation10.a();
        int int12 = equation10.c();
        int int13 = equation10.c();
        boolean boolean14 = equation3.equals((java.lang.Object) equation10);
        java.lang.String str15 = equation3.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation19 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (short) 1, 1, 100);
        int int20 = equation19.b();
        int int21 = equation19.a();
        int int22 = equation19.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation26 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', 52, 100);
        int int27 = equation26.b();
        boolean boolean28 = equation19.equals((java.lang.Object) equation26);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution29 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation19);
        boolean boolean30 = equation3.equals((java.lang.Object) solution29);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertNotNull(solution5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 97 + "'", int11 == 97);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Equation[a=0, b=10, c=0]" + "'", str15, "Equation[a=0, b=10, c=0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 100 + "'", int22 == 100);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 52 + "'", int27 == 52);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(solution29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test2419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2419");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution5 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation4);
        int int6 = solution5.getX();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation10 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        int int11 = equation10.c();
        int int12 = equation10.c();
        int int13 = equation10.a();
        boolean boolean14 = solution5.equals((java.lang.Object) equation10);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution15 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation10);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper16 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 100, solution15);
        int int17 = gcdSolutionWrapper16.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution18 = gcdSolutionWrapper16.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution21 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int22 = solution21.getY();
        java.lang.String str23 = solution21.toString();
        solution21.setX((int) (short) 1);
        solution21.setX((int) (byte) 10);
        java.lang.String str28 = solution21.toString();
        gcdSolutionWrapper16.setSolution(solution21);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution30 = gcdSolutionWrapper16.getSolution();
        org.junit.Assert.assertNotNull(solution5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(solution15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 100 + "'", int17 == 100);
        org.junit.Assert.assertNotNull(solution18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Solution[x=97, y=1]" + "'", str23, "Solution[x=97, y=1]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Solution[x=10, y=1]" + "'", str28, "Solution[x=10, y=1]");
        org.junit.Assert.assertNotNull(solution30);
    }

    @Test
    public void test2420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2420");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (short) -1, 32, (int) 'a');
        java.lang.String str4 = equation3.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution5 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution6 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        int int7 = equation3.a();
        int int8 = equation3.c();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Equation[a=-1, b=32, c=97]" + "'", str4, "Equation[a=-1, b=32, c=97]");
        org.junit.Assert.assertNotNull(solution5);
        org.junit.Assert.assertNotNull(solution6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 97 + "'", int8 == 97);
    }

    @Test
    public void test2421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2421");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) '#', 1);
        int int3 = solution2.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 35 + "'", int3 == 35);
    }

    @Test
    public void test2422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2422");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int4 = solution3.getY();
        solution3.setY((int) (byte) 1);
        boolean boolean8 = solution3.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution3);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution10 = gcdSolutionWrapper9.getSolution();
        java.lang.String str11 = gcdSolutionWrapper9.toString();
        gcdSolutionWrapper9.setGcd((int) (byte) 1);
        java.lang.String str14 = gcdSolutionWrapper9.toString();
        java.lang.String str15 = gcdSolutionWrapper9.toString();
        int int16 = gcdSolutionWrapper9.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation20 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int21 = equation20.c();
        int int22 = equation20.b();
        int int23 = equation20.c();
        int int24 = equation20.c();
        boolean boolean25 = gcdSolutionWrapper9.equals((java.lang.Object) int24);
        gcdSolutionWrapper9.setGcd((int) (byte) 10);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution30 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (short) -1, (int) (byte) 10);
        boolean boolean31 = gcdSolutionWrapper9.equals((java.lang.Object) solution30);
        solution30.setY((int) (byte) 0);
        solution30.setY(0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(solution10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str11, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]" + "'", str14, "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]" + "'", str15, "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 35 + "'", int21 == 35);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 35 + "'", int23 == 35);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 35 + "'", int24 == 35);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test2423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2423");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '#', 0, (int) (byte) 100);
        int int4 = equation3.c();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 100 + "'", int4 == 100);
    }

    @Test
    public void test2424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2424");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) 100, (int) ' ');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) 10, solution3);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution5 = gcdSolutionWrapper4.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        boolean boolean10 = gcdSolutionWrapper4.equals((java.lang.Object) 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution11 = gcdSolutionWrapper4.getSolution();
        java.lang.String str12 = gcdSolutionWrapper4.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution16 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int17 = solution16.getY();
        java.lang.String str18 = solution16.toString();
        solution16.setX((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper21 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((-35), solution16);
        int int22 = gcdSolutionWrapper21.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution23 = gcdSolutionWrapper21.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution24 = gcdSolutionWrapper21.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution27 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int28 = solution27.getY();
        java.lang.String str29 = solution27.toString();
        solution27.setX((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation35 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, 0, (int) (short) -1);
        boolean boolean36 = solution27.equals((java.lang.Object) equation35);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation40 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(32, (-35), (int) (byte) 1);
        boolean boolean41 = solution27.equals((java.lang.Object) (byte) 1);
        int int42 = solution27.getY();
        solution27.setX((int) (short) -1);
        boolean boolean45 = gcdSolutionWrapper21.equals((java.lang.Object) solution27);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution46 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution.INFINITE_SOLUTIONS;
        solution46.setY((int) (short) 100);
        boolean boolean49 = gcdSolutionWrapper21.equals((java.lang.Object) (short) 100);
        boolean boolean50 = gcdSolutionWrapper4.equals((java.lang.Object) boolean49);
        java.lang.String str51 = gcdSolutionWrapper4.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution52 = gcdSolutionWrapper4.getSolution();
        java.lang.String str53 = gcdSolutionWrapper4.toString();
        org.junit.Assert.assertNotNull(solution5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(solution11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "GcdSolutionWrapper[gcd=10, solution=Solution[x=100, y=32]]" + "'", str12, "GcdSolutionWrapper[gcd=10, solution=Solution[x=100, y=32]]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Solution[x=97, y=1]" + "'", str18, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-35) + "'", int22 == (-35));
        org.junit.Assert.assertNotNull(solution23);
        org.junit.Assert.assertNotNull(solution24);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Solution[x=97, y=1]" + "'", str29, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(solution46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "GcdSolutionWrapper[gcd=10, solution=Solution[x=100, y=32]]" + "'", str51, "GcdSolutionWrapper[gcd=10, solution=Solution[x=100, y=32]]");
        org.junit.Assert.assertNotNull(solution52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "GcdSolutionWrapper[gcd=10, solution=Solution[x=100, y=32]]" + "'", str53, "GcdSolutionWrapper[gcd=10, solution=Solution[x=100, y=32]]");
    }

    @Test
    public void test2425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2425");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(0, (int) (short) 100, (int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution5 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation4);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper6 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution5);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution12 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int13 = solution12.getY();
        solution12.setY((int) (byte) 1);
        boolean boolean17 = solution12.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper18 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution12);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution21 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int22 = solution21.getY();
        java.lang.String str23 = solution21.toString();
        boolean boolean25 = solution21.equals((java.lang.Object) (-1L));
        gcdSolutionWrapper18.setSolution(solution21);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper27 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) 'a', solution21);
        int int28 = solution21.getX();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper29 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((-1), solution21);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution30 = gcdSolutionWrapper29.getSolution();
        gcdSolutionWrapper6.setSolution(solution30);
        org.junit.Assert.assertNotNull(solution5);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Solution[x=97, y=1]" + "'", str23, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 97 + "'", int28 == 97);
        org.junit.Assert.assertNotNull(solution30);
    }

    @Test
    public void test2426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2426");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        java.lang.String str4 = equation3.toString();
        java.lang.Object obj5 = null;
        boolean boolean6 = equation3.equals(obj5);
        int int7 = equation3.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution10 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(32, 100);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution14 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper15 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution14);
        boolean boolean17 = gcdSolutionWrapper15.equals((java.lang.Object) 1);
        java.lang.String str18 = gcdSolutionWrapper15.toString();
        gcdSolutionWrapper15.setGcd(32);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution23 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) 100, (int) (byte) -1);
        gcdSolutionWrapper15.setSolution(solution23);
        int int25 = solution23.getX();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper26 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution23);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper27 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(10, solution23);
        gcdSolutionWrapper27.setGcd(0);
        boolean boolean30 = solution10.equals((java.lang.Object) 0);
        boolean boolean31 = equation3.equals((java.lang.Object) solution10);
        solution10.setY((int) '4');
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str4, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=null]" + "'", str18, "GcdSolutionWrapper[gcd=1, solution=null]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 100 + "'", int25 == 100);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test2427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2427");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution7 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int8 = solution7.getY();
        solution7.setY((int) (byte) 1);
        boolean boolean12 = solution7.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper13 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution7);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution14 = gcdSolutionWrapper13.getSolution();
        java.lang.String str15 = gcdSolutionWrapper13.toString();
        gcdSolutionWrapper13.setGcd((int) (byte) 1);
        boolean boolean18 = equation3.equals((java.lang.Object) gcdSolutionWrapper13);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation22 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int23 = equation22.c();
        int int24 = equation22.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution25 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation22);
        boolean boolean26 = gcdSolutionWrapper13.equals((java.lang.Object) solution25);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation31 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution32 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation31);
        int int33 = solution32.getX();
        int int34 = solution32.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper35 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) 'a', solution32);
        gcdSolutionWrapper35.setGcd((int) (short) 0);
        gcdSolutionWrapper35.setGcd((int) '4');
        int int40 = gcdSolutionWrapper35.getGcd();
        java.lang.String str41 = gcdSolutionWrapper35.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution44 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(10, 0);
        int int45 = solution44.getX();
        int int46 = solution44.getX();
        gcdSolutionWrapper35.setSolution(solution44);
        boolean boolean48 = solution25.equals((java.lang.Object) gcdSolutionWrapper35);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution51 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(10, 0);
        int int52 = solution51.getX();
        solution51.setX(100);
        solution51.setY((int) '#');
        gcdSolutionWrapper35.setSolution(solution51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(solution14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str15, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 35 + "'", int23 == 35);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(solution25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(solution32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 52 + "'", int40 == 52);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "GcdSolutionWrapper[gcd=52, solution=Solution[x=0, y=0]]" + "'", str41, "GcdSolutionWrapper[gcd=52, solution=Solution[x=0, y=0]]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 10 + "'", int45 == 10);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 10 + "'", int46 == 10);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 10 + "'", int52 == 10);
    }

    @Test
    public void test2428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2428");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) ' ', (int) (short) -1);
        int int3 = solution2.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
    }

    @Test
    public void test2429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2429");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (short) 100, (int) (byte) 1, 100);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation7 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(52, (int) '#', (int) (short) 10);
        int int8 = equation7.a();
        boolean boolean9 = equation3.equals((java.lang.Object) equation7);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution13 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int14 = solution13.getY();
        java.lang.String str15 = solution13.toString();
        solution13.setX((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper18 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((-35), solution13);
        int int19 = gcdSolutionWrapper18.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution20 = gcdSolutionWrapper18.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution21 = gcdSolutionWrapper18.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution24 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int25 = solution24.getY();
        java.lang.String str26 = solution24.toString();
        solution24.setX((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation32 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, 0, (int) (short) -1);
        boolean boolean33 = solution24.equals((java.lang.Object) equation32);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation37 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(32, (-35), (int) (byte) 1);
        boolean boolean38 = solution24.equals((java.lang.Object) (byte) 1);
        int int39 = solution24.getY();
        solution24.setX((int) (short) -1);
        boolean boolean42 = gcdSolutionWrapper18.equals((java.lang.Object) solution24);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution43 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution.INFINITE_SOLUTIONS;
        solution43.setY((int) (short) 100);
        boolean boolean46 = gcdSolutionWrapper18.equals((java.lang.Object) (short) 100);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution49 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) '4', (int) '4');
        boolean boolean50 = gcdSolutionWrapper18.equals((java.lang.Object) solution49);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution53 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper54 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution53);
        boolean boolean56 = gcdSolutionWrapper54.equals((java.lang.Object) 1);
        java.lang.String str57 = gcdSolutionWrapper54.toString();
        gcdSolutionWrapper54.setGcd(32);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution62 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) 100, (int) (byte) -1);
        gcdSolutionWrapper54.setSolution(solution62);
        int int64 = solution62.getX();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper65 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution62);
        java.lang.String str66 = gcdSolutionWrapper65.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution70 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) '4', (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper71 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(0, solution70);
        int int72 = solution70.getX();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution76 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(0, 35);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper77 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(0, solution76);
        solution76.setY((int) '#');
        boolean boolean80 = solution70.equals((java.lang.Object) solution76);
        gcdSolutionWrapper65.setSolution(solution70);
        gcdSolutionWrapper18.setSolution(solution70);
        boolean boolean83 = equation7.equals((java.lang.Object) solution70);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 52 + "'", int8 == 52);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Solution[x=97, y=1]" + "'", str15, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-35) + "'", int19 == (-35));
        org.junit.Assert.assertNotNull(solution20);
        org.junit.Assert.assertNotNull(solution21);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Solution[x=97, y=1]" + "'", str26, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(solution43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=null]" + "'", str57, "GcdSolutionWrapper[gcd=1, solution=null]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 100 + "'", int64 == 100);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=Solution[x=100, y=-1]]" + "'", str66, "GcdSolutionWrapper[gcd=1, solution=Solution[x=100, y=-1]]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 52 + "'", int72 == 52);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test2430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2430");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution1 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution1);
        boolean boolean4 = gcdSolutionWrapper2.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution6 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper7 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution6);
        gcdSolutionWrapper7.setGcd((int) ' ');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution12 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int13 = solution12.getY();
        java.lang.String str14 = solution12.toString();
        gcdSolutionWrapper7.setSolution(solution12);
        gcdSolutionWrapper2.setSolution(solution12);
        int int17 = gcdSolutionWrapper2.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution21 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int22 = solution21.getY();
        solution21.setY((int) (byte) 1);
        boolean boolean26 = solution21.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper27 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution21);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution28 = gcdSolutionWrapper27.getSolution();
        java.lang.String str29 = gcdSolutionWrapper27.toString();
        gcdSolutionWrapper27.setGcd((int) (byte) 1);
        java.lang.String str32 = gcdSolutionWrapper27.toString();
        java.lang.String str33 = gcdSolutionWrapper27.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation37 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        int int38 = equation37.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution39 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation37);
        boolean boolean40 = gcdSolutionWrapper27.equals((java.lang.Object) equation37);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution41 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation37);
        gcdSolutionWrapper2.setSolution(solution41);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution43 = gcdSolutionWrapper2.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation47 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution51 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int52 = solution51.getY();
        solution51.setY((int) (byte) 1);
        boolean boolean56 = solution51.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper57 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution51);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution58 = gcdSolutionWrapper57.getSolution();
        java.lang.String str59 = gcdSolutionWrapper57.toString();
        gcdSolutionWrapper57.setGcd((int) (byte) 1);
        boolean boolean62 = equation47.equals((java.lang.Object) gcdSolutionWrapper57);
        java.lang.String str63 = equation47.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution64 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation47);
        solution64.setY((int) (byte) 0);
        int int67 = solution64.getX();
        solution64.setX(35);
        gcdSolutionWrapper2.setSolution(solution64);
        java.lang.String str71 = gcdSolutionWrapper2.toString();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Solution[x=97, y=1]" + "'", str14, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(solution28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str29, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]" + "'", str32, "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]" + "'", str33, "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 97 + "'", int38 == 97);
        org.junit.Assert.assertNotNull(solution39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(solution41);
        org.junit.Assert.assertNotNull(solution43);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(solution58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str59, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str63, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertNotNull(solution64);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=Solution[x=35, y=0]]" + "'", str71, "GcdSolutionWrapper[gcd=1, solution=Solution[x=35, y=0]]");
    }

    @Test
    public void test2431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2431");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution1 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution1);
        gcdSolutionWrapper2.setGcd((int) ' ');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution7 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int8 = solution7.getY();
        java.lang.String str9 = solution7.toString();
        gcdSolutionWrapper2.setSolution(solution7);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution11 = gcdSolutionWrapper2.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution12 = gcdSolutionWrapper2.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation16 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int17 = equation16.c();
        int int18 = equation16.b();
        int int19 = equation16.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution20 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation16);
        gcdSolutionWrapper2.setSolution(solution20);
        int int22 = gcdSolutionWrapper2.getGcd();
        gcdSolutionWrapper2.setGcd((int) ' ');
        java.lang.String str25 = gcdSolutionWrapper2.toString();
        gcdSolutionWrapper2.setGcd((int) (short) 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Solution[x=97, y=1]" + "'", str9, "Solution[x=97, y=1]");
        org.junit.Assert.assertNotNull(solution11);
        org.junit.Assert.assertNotNull(solution12);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 35 + "'", int17 == 35);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35 + "'", int19 == 35);
        org.junit.Assert.assertNotNull(solution20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 32 + "'", int22 == 32);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "GcdSolutionWrapper[gcd=32, solution=Solution[x=0, y=-35]]" + "'", str25, "GcdSolutionWrapper[gcd=32, solution=Solution[x=0, y=-35]]");
    }

    @Test
    public void test2432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2432");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution1 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution1);
        gcdSolutionWrapper2.setGcd((int) ' ');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution7 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int8 = solution7.getY();
        java.lang.String str9 = solution7.toString();
        gcdSolutionWrapper2.setSolution(solution7);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution11 = gcdSolutionWrapper2.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution15 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper16 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution15);
        boolean boolean18 = gcdSolutionWrapper16.equals((java.lang.Object) 1);
        java.lang.String str19 = gcdSolutionWrapper16.toString();
        gcdSolutionWrapper16.setGcd(32);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution24 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) 100, (int) (byte) -1);
        gcdSolutionWrapper16.setSolution(solution24);
        int int26 = solution24.getX();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper27 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution24);
        java.lang.String str28 = solution24.toString();
        solution24.setX((int) (byte) 10);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper31 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) ' ', solution24);
        gcdSolutionWrapper2.setSolution(solution24);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution35 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) ' ', (int) (short) 10);
        boolean boolean36 = solution24.equals((java.lang.Object) ' ');
        int int37 = solution24.getX();
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Solution[x=97, y=1]" + "'", str9, "Solution[x=97, y=1]");
        org.junit.Assert.assertNotNull(solution11);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=null]" + "'", str19, "GcdSolutionWrapper[gcd=1, solution=null]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 100 + "'", int26 == 100);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Solution[x=100, y=-1]" + "'", str28, "Solution[x=100, y=-1]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 10 + "'", int37 == 10);
    }

    @Test
    public void test2433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2433");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (short) -1, (int) (byte) 10);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(0, solution3);
        int int5 = gcdSolutionWrapper4.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution7 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution7);
        gcdSolutionWrapper8.setGcd((int) ' ');
        gcdSolutionWrapper8.setGcd((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution13 = gcdSolutionWrapper8.getSolution();
        int int14 = gcdSolutionWrapper8.getGcd();
        gcdSolutionWrapper8.setGcd(0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation20 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution21 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation20);
        solution21.setY(0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation27 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (short) 10, 10, 52);
        boolean boolean28 = solution21.equals((java.lang.Object) (short) 10);
        gcdSolutionWrapper8.setSolution(solution21);
        gcdSolutionWrapper4.setSolution(solution21);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation34 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int35 = equation34.c();
        int int36 = equation34.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution40 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int41 = solution40.getY();
        solution40.setY((int) (byte) 1);
        boolean boolean45 = solution40.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper46 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution40);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution47 = gcdSolutionWrapper46.getSolution();
        java.lang.String str48 = gcdSolutionWrapper46.toString();
        gcdSolutionWrapper46.setGcd((int) (byte) 1);
        boolean boolean51 = equation34.equals((java.lang.Object) gcdSolutionWrapper46);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution52 = gcdSolutionWrapper46.getSolution();
        int int53 = solution52.getX();
        solution52.setY((int) 'a');
        gcdSolutionWrapper4.setSolution(solution52);
        solution52.setY(97);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(solution13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(solution21);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 35 + "'", int35 == 35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(solution47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str48, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(solution52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 97 + "'", int53 == 97);
    }

    @Test
    public void test2434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2434");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(32, (-35), (int) (byte) 1);
        java.lang.String str4 = equation3.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) '4', (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(0, solution8);
        java.lang.String str10 = gcdSolutionWrapper9.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation14 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        java.lang.String str15 = equation14.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution16 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation14);
        boolean boolean17 = gcdSolutionWrapper9.equals((java.lang.Object) solution16);
        boolean boolean18 = equation3.equals((java.lang.Object) gcdSolutionWrapper9);
        int int19 = equation3.b();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Equation[a=32, b=-35, c=1]" + "'", str4, "Equation[a=32, b=-35, c=1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]" + "'", str10, "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str15, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertNotNull(solution16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-35) + "'", int19 == (-35));
    }

    @Test
    public void test2435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2435");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(32, (int) (short) 10);
        int int4 = solution3.getY();
        int int5 = solution3.getY();
        boolean boolean7 = solution3.equals((java.lang.Object) "GcdSolutionWrapper[gcd=100, solution=null]");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(97, solution3);
        gcdSolutionWrapper8.setGcd(97);
        gcdSolutionWrapper8.setGcd((int) (byte) -1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 10 + "'", int5 == 10);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test2436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2436");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) 0, (int) (byte) 100);
    }

    @Test
    public void test2437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2437");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution7 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int8 = solution7.getY();
        solution7.setY((int) (byte) 1);
        boolean boolean12 = solution7.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper13 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution7);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution14 = gcdSolutionWrapper13.getSolution();
        java.lang.String str15 = gcdSolutionWrapper13.toString();
        gcdSolutionWrapper13.setGcd((int) (byte) 1);
        boolean boolean18 = equation3.equals((java.lang.Object) gcdSolutionWrapper13);
        int int19 = equation3.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution23 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(1, 52);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation28 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution29 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation28);
        int int30 = solution29.getX();
        int int31 = solution29.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper32 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) 'a', solution29);
        boolean boolean33 = solution23.equals((java.lang.Object) 'a');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper34 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((-35), solution23);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution35 = gcdSolutionWrapper34.getSolution();
        boolean boolean36 = equation3.equals((java.lang.Object) gcdSolutionWrapper34);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation40 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, 0, (int) (short) -1);
        int int41 = equation40.c();
        int int42 = equation40.a();
        int int43 = equation40.a();
        boolean boolean44 = equation3.equals((java.lang.Object) equation40);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation48 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((-35), (int) (short) 1, (-1));
        int int49 = equation48.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution50 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation48);
        int int51 = equation48.b();
        boolean boolean52 = equation3.equals((java.lang.Object) equation48);
        java.lang.String str53 = equation48.toString();
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(solution14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str15, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35 + "'", int19 == 35);
        org.junit.Assert.assertNotNull(solution29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(solution35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(solution50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Equation[a=-35, b=1, c=-1]" + "'", str53, "Equation[a=-35, b=1, c=-1]");
    }

    @Test
    public void test2438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2438");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution5 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation4);
        java.lang.String str6 = solution5.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper7 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(1, solution5);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution11 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(10, 0);
        int int12 = solution11.getX();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper13 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) -1, solution11);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution16 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper17 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution16);
        gcdSolutionWrapper17.setGcd((int) ' ');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution22 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int23 = solution22.getY();
        java.lang.String str24 = solution22.toString();
        gcdSolutionWrapper17.setSolution(solution22);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution29 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int30 = solution29.getY();
        solution29.setY((int) (byte) 1);
        boolean boolean34 = solution29.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper35 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution29);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution36 = gcdSolutionWrapper35.getSolution();
        java.lang.String str37 = gcdSolutionWrapper35.toString();
        gcdSolutionWrapper35.setGcd((int) (byte) 1);
        int int40 = gcdSolutionWrapper35.getGcd();
        boolean boolean41 = solution22.equals((java.lang.Object) gcdSolutionWrapper35);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper42 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) ' ', solution22);
        gcdSolutionWrapper13.setSolution(solution22);
        gcdSolutionWrapper7.setSolution(solution22);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation48 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, 0, (int) (short) -1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution52 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int53 = solution52.getY();
        solution52.setY((int) (byte) 1);
        boolean boolean57 = solution52.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper58 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution52);
        boolean boolean59 = equation48.equals((java.lang.Object) gcdSolutionWrapper58);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation63 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution64 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation63);
        solution64.setY(0);
        gcdSolutionWrapper58.setSolution(solution64);
        java.lang.String str68 = gcdSolutionWrapper58.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution69 = gcdSolutionWrapper58.getSolution();
        solution69.setX((int) (short) 10);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution74 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((-1), (int) (byte) 1);
        boolean boolean75 = solution69.equals((java.lang.Object) solution74);
        gcdSolutionWrapper7.setSolution(solution74);
        int int77 = gcdSolutionWrapper7.getGcd();
        org.junit.Assert.assertNotNull(solution5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Solution[x=0, y=0]" + "'", str6, "Solution[x=0, y=0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10 + "'", int12 == 10);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Solution[x=97, y=1]" + "'", str24, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(solution36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str37, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(solution64);
// flaky:         org.junit.Assert.assertEquals("'" + str68 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=35, y=0]]" + "'", str68, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=35, y=0]]");
        org.junit.Assert.assertNotNull(solution69);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
    }

    @Test
    public void test2439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2439");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int5 = solution4.getY();
        solution4.setY((int) (byte) 1);
        boolean boolean9 = solution4.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper10 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution4);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper11 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution4);
        int int12 = gcdSolutionWrapper11.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution13 = gcdSolutionWrapper11.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution16 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((-1), 100);
        gcdSolutionWrapper11.setSolution(solution16);
        solution16.setX((-35));
        solution16.setY((int) 'a');
        java.lang.String str22 = solution16.toString();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(solution13);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Solution[x=-35, y=97]" + "'", str22, "Solution[x=-35, y=97]");
    }

    @Test
    public void test2440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2440");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution1 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution1);
        gcdSolutionWrapper2.setGcd((int) ' ');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution7 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int8 = solution7.getY();
        java.lang.String str9 = solution7.toString();
        gcdSolutionWrapper2.setSolution(solution7);
        int int11 = gcdSolutionWrapper2.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution14 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int15 = solution14.getY();
        gcdSolutionWrapper2.setSolution(solution14);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution18 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper19 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution18);
        gcdSolutionWrapper19.setGcd((int) ' ');
        gcdSolutionWrapper19.setGcd((int) (short) 100);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution26 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int27 = solution26.getY();
        java.lang.String str28 = solution26.toString();
        solution26.setX((int) (short) 1);
        boolean boolean32 = solution26.equals((java.lang.Object) (-1.0f));
        gcdSolutionWrapper19.setSolution(solution26);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution35 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper36 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution35);
        boolean boolean38 = gcdSolutionWrapper36.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution40 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper41 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution40);
        gcdSolutionWrapper41.setGcd((int) ' ');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution46 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int47 = solution46.getY();
        java.lang.String str48 = solution46.toString();
        gcdSolutionWrapper41.setSolution(solution46);
        gcdSolutionWrapper36.setSolution(solution46);
        int int51 = solution46.getY();
        java.lang.String str52 = solution46.toString();
        gcdSolutionWrapper19.setSolution(solution46);
        gcdSolutionWrapper2.setSolution(solution46);
        gcdSolutionWrapper2.setGcd(1);
        boolean boolean58 = gcdSolutionWrapper2.equals((java.lang.Object) false);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution61 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int62 = solution61.getY();
        java.lang.String str63 = solution61.toString();
        java.lang.String str64 = solution61.toString();
        gcdSolutionWrapper2.setSolution(solution61);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution66 = gcdSolutionWrapper2.getSolution();
        int int67 = solution66.getX();
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Solution[x=97, y=1]" + "'", str9, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 32 + "'", int11 == 32);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Solution[x=97, y=1]" + "'", str28, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Solution[x=97, y=1]" + "'", str48, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Solution[x=97, y=1]" + "'", str52, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "Solution[x=97, y=1]" + "'", str63, "Solution[x=97, y=1]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "Solution[x=97, y=1]" + "'", str64, "Solution[x=97, y=1]");
        org.junit.Assert.assertNotNull(solution66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 97 + "'", int67 == 97);
    }

    @Test
    public void test2441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2441");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution5 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation4);
        java.lang.String str6 = solution5.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution9 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper10 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution9);
        boolean boolean12 = gcdSolutionWrapper10.equals((java.lang.Object) 1);
        java.lang.String str13 = gcdSolutionWrapper10.toString();
        gcdSolutionWrapper10.setGcd(32);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution18 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) 100, (int) (byte) -1);
        gcdSolutionWrapper10.setSolution(solution18);
        int int20 = solution18.getX();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper21 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution18);
        java.lang.String str22 = gcdSolutionWrapper21.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation26 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (short) 10, 10, 52);
        java.lang.String str27 = equation26.toString();
        int int28 = equation26.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution29 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation26);
        gcdSolutionWrapper21.setSolution(solution29);
        int int31 = solution29.getY();
        boolean boolean32 = solution5.equals((java.lang.Object) int31);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper33 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 0, solution5);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation38 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int39 = equation38.c();
        int int40 = equation38.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution44 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int45 = solution44.getY();
        solution44.setY((int) (byte) 1);
        boolean boolean49 = solution44.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper50 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution44);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution51 = gcdSolutionWrapper50.getSolution();
        java.lang.String str52 = gcdSolutionWrapper50.toString();
        gcdSolutionWrapper50.setGcd((int) (byte) 1);
        boolean boolean55 = equation38.equals((java.lang.Object) gcdSolutionWrapper50);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution56 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation38);
        int int57 = solution56.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper58 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(1, solution56);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation62 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 100, (int) '4', (int) (byte) 1);
        boolean boolean63 = solution56.equals((java.lang.Object) equation62);
        boolean boolean64 = gcdSolutionWrapper33.equals((java.lang.Object) solution56);
        org.junit.Assert.assertNotNull(solution5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Solution[x=0, y=0]" + "'", str6, "Solution[x=0, y=0]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=null]" + "'", str13, "GcdSolutionWrapper[gcd=1, solution=null]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 100 + "'", int20 == 100);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=Solution[x=100, y=-1]]" + "'", str22, "GcdSolutionWrapper[gcd=1, solution=Solution[x=100, y=-1]]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Equation[a=10, b=10, c=52]" + "'", str27, "Equation[a=10, b=10, c=52]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 52 + "'", int28 == 52);
        org.junit.Assert.assertNotNull(solution29);
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + 32 + "'", int31 == 32);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 35 + "'", int39 == 35);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(solution51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str52, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(solution56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-35) + "'", int57 == (-35));
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test2442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2442");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((-35), (int) (byte) 100, 125);
        int int4 = equation3.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int9 = solution8.getY();
        solution8.setY((int) (byte) 1);
        boolean boolean13 = solution8.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper14 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution8);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution17 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int18 = solution17.getY();
        java.lang.String str19 = solution17.toString();
        boolean boolean21 = solution17.equals((java.lang.Object) (-1L));
        gcdSolutionWrapper14.setSolution(solution17);
        int int23 = solution17.getX();
        int int24 = solution17.getY();
        solution17.setY((int) (short) 10);
        solution17.setY(35);
        solution17.setY((int) 'a');
        boolean boolean31 = equation3.equals((java.lang.Object) solution17);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 100 + "'", int4 == 100);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Solution[x=97, y=1]" + "'", str19, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 97 + "'", int23 == 97);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test2443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2443");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(0, (-75));
    }

    @Test
    public void test2444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2444");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation5 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int10 = solution9.getY();
        solution9.setY((int) (byte) 1);
        boolean boolean14 = solution9.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper15 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution9);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution16 = gcdSolutionWrapper15.getSolution();
        java.lang.String str17 = gcdSolutionWrapper15.toString();
        gcdSolutionWrapper15.setGcd((int) (byte) 1);
        boolean boolean20 = equation5.equals((java.lang.Object) gcdSolutionWrapper15);
        int int21 = gcdSolutionWrapper15.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution22 = gcdSolutionWrapper15.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper23 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(32, solution22);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper24 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) ' ', solution22);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution25 = gcdSolutionWrapper24.getSolution();
        int int26 = solution25.getX();
        int int27 = solution25.getX();
        solution25.setY(10);
        java.lang.String str30 = solution25.toString();
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(solution16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str17, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(solution22);
        org.junit.Assert.assertNotNull(solution25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 97 + "'", int26 == 97);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 97 + "'", int27 == 97);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Solution[x=97, y=10]" + "'", str30, "Solution[x=97, y=10]");
    }

    @Test
    public void test2445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2445");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) -1, (int) (byte) 0);
        solution2.setY((int) (short) 10);
        int int5 = solution2.getX();
        solution2.setY((-75));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
    }

    @Test
    public void test2446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2446");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution7 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int8 = solution7.getY();
        solution7.setY((int) (byte) 1);
        boolean boolean12 = solution7.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper13 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution7);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution14 = gcdSolutionWrapper13.getSolution();
        java.lang.String str15 = gcdSolutionWrapper13.toString();
        gcdSolutionWrapper13.setGcd((int) (byte) 1);
        boolean boolean18 = equation3.equals((java.lang.Object) gcdSolutionWrapper13);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation22 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int23 = equation22.c();
        int int24 = equation22.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution25 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation22);
        boolean boolean26 = gcdSolutionWrapper13.equals((java.lang.Object) solution25);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation30 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int31 = equation30.c();
        int int32 = equation30.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution36 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int37 = solution36.getY();
        solution36.setY((int) (byte) 1);
        boolean boolean41 = solution36.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper42 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution36);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution43 = gcdSolutionWrapper42.getSolution();
        java.lang.String str44 = gcdSolutionWrapper42.toString();
        gcdSolutionWrapper42.setGcd((int) (byte) 1);
        boolean boolean47 = equation30.equals((java.lang.Object) gcdSolutionWrapper42);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution48 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation30);
        int int49 = solution48.getY();
        boolean boolean50 = gcdSolutionWrapper13.equals((java.lang.Object) int49);
        java.lang.String str51 = gcdSolutionWrapper13.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution52 = gcdSolutionWrapper13.getSolution();
        gcdSolutionWrapper13.setGcd((int) (byte) -1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution58 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int59 = solution58.getY();
        java.lang.String str60 = solution58.toString();
        solution58.setX((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper63 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((-35), solution58);
        int int64 = gcdSolutionWrapper63.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution65 = gcdSolutionWrapper63.getSolution();
        java.lang.String str66 = solution65.toString();
        gcdSolutionWrapper13.setSolution(solution65);
        int int68 = gcdSolutionWrapper13.getGcd();
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(solution14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str15, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 35 + "'", int23 == 35);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(solution25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 35 + "'", int31 == 35);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(solution43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str44, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(solution48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-35) + "'", int49 == (-35));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]" + "'", str51, "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertNotNull(solution52);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "Solution[x=97, y=1]" + "'", str60, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-35) + "'", int64 == (-35));
        org.junit.Assert.assertNotNull(solution65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "Solution[x=1, y=1]" + "'", str66, "Solution[x=1, y=1]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
    }

    @Test
    public void test2447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2447");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution1 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution1);
        boolean boolean4 = gcdSolutionWrapper2.equals((java.lang.Object) "Equation[a=0, b=-1, c=35]");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution7 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) '4', (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution10 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int11 = solution10.getY();
        java.lang.String str12 = solution10.toString();
        solution10.setX((int) (short) 1);
        boolean boolean16 = solution10.equals((java.lang.Object) (-1.0f));
        java.lang.String str17 = solution10.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation21 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        java.lang.String str22 = equation21.toString();
        int int23 = equation21.c();
        boolean boolean24 = solution10.equals((java.lang.Object) equation21);
        int int25 = equation21.c();
        boolean boolean26 = solution7.equals((java.lang.Object) equation21);
        boolean boolean27 = gcdSolutionWrapper2.equals((java.lang.Object) equation21);
        int int28 = equation21.a();
        int int29 = equation21.b();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Solution[x=97, y=1]" + "'", str12, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Solution[x=1, y=1]" + "'", str17, "Solution[x=1, y=1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str22, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 35 + "'", int23 == 35);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
    }

    @Test
    public void test2448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2448");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (short) 10, (int) (byte) 0, (int) 'a');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution4 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        org.junit.Assert.assertNotNull(solution4);
    }

    @Test
    public void test2449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2449");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 1, (int) (short) 10, (int) (short) -1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution4 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        int int5 = equation3.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution6 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        org.junit.Assert.assertNotNull(solution4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 10 + "'", int5 == 10);
        org.junit.Assert.assertNotNull(solution6);
    }

    @Test
    public void test2450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2450");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int5 = equation4.c();
        int int6 = equation4.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution10 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int11 = solution10.getY();
        solution10.setY((int) (byte) 1);
        boolean boolean15 = solution10.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper16 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution10);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution17 = gcdSolutionWrapper16.getSolution();
        java.lang.String str18 = gcdSolutionWrapper16.toString();
        gcdSolutionWrapper16.setGcd((int) (byte) 1);
        boolean boolean21 = equation4.equals((java.lang.Object) gcdSolutionWrapper16);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution22 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation4);
        int int23 = solution22.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation27 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution28 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation27);
        int int29 = solution28.getX();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation33 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        int int34 = equation33.c();
        int int35 = equation33.c();
        int int36 = equation33.a();
        boolean boolean37 = solution28.equals((java.lang.Object) equation33);
        int int38 = equation33.c();
        boolean boolean39 = solution22.equals((java.lang.Object) equation33);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper40 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(125, solution22);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 35 + "'", int5 == 35);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(solution17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str18, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(solution22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-35) + "'", int23 == (-35));
        org.junit.Assert.assertNotNull(solution28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 52 + "'", int36 == 52);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test2451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2451");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution1 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution1);
        gcdSolutionWrapper2.setGcd((int) ' ');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution7 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int8 = solution7.getY();
        java.lang.String str9 = solution7.toString();
        gcdSolutionWrapper2.setSolution(solution7);
        boolean boolean12 = gcdSolutionWrapper2.equals((java.lang.Object) (short) 0);
        gcdSolutionWrapper2.setGcd(35);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution17 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int18 = solution17.getY();
        java.lang.String str19 = solution17.toString();
        int int20 = solution17.getX();
        int int21 = solution17.getY();
        solution17.setY((int) (short) 100);
        int int24 = solution17.getX();
        solution17.setY(52);
        java.lang.String str27 = solution17.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation31 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int32 = equation31.c();
        int int33 = equation31.a();
        int int34 = equation31.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution35 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation31);
        boolean boolean36 = solution17.equals((java.lang.Object) equation31);
        gcdSolutionWrapper2.setSolution(solution17);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution40 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int41 = solution40.getY();
        java.lang.String str42 = solution40.toString();
        solution40.setX((int) (short) 1);
        solution40.setX((int) (byte) 10);
        java.lang.String str47 = solution40.toString();
        solution40.setY((int) 'a');
        solution40.setY(35);
        boolean boolean52 = solution17.equals((java.lang.Object) solution40);
        int int53 = solution17.getY();
        java.lang.String str54 = solution17.toString();
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Solution[x=97, y=1]" + "'", str9, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Solution[x=97, y=1]" + "'", str19, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 97 + "'", int20 == 97);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 97 + "'", int24 == 97);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Solution[x=97, y=52]" + "'", str27, "Solution[x=97, y=52]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 35 + "'", int32 == 35);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(solution35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Solution[x=97, y=1]" + "'", str42, "Solution[x=97, y=1]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Solution[x=10, y=1]" + "'", str47, "Solution[x=10, y=1]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 52 + "'", int53 == 52);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Solution[x=97, y=52]" + "'", str54, "Solution[x=97, y=52]");
    }

    @Test
    public void test2452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2452");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) '4', (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(0, solution3);
        java.lang.String str5 = gcdSolutionWrapper4.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution6 = gcdSolutionWrapper4.getSolution();
        gcdSolutionWrapper4.setGcd(52);
        java.lang.String str9 = gcdSolutionWrapper4.toString();
        int int10 = gcdSolutionWrapper4.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution11 = gcdSolutionWrapper4.getSolution();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]" + "'", str5, "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]");
        org.junit.Assert.assertNotNull(solution6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "GcdSolutionWrapper[gcd=52, solution=Solution[x=52, y=52]]" + "'", str9, "GcdSolutionWrapper[gcd=52, solution=Solution[x=52, y=52]]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertNotNull(solution11);
    }

    @Test
    public void test2453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2453");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((-1), 125);
    }

    @Test
    public void test2454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2454");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (short) 10, (int) (short) 10, (int) (short) 10);
    }

    @Test
    public void test2455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2455");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, 0, (int) (short) -1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution7 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int8 = solution7.getY();
        solution7.setY((int) (byte) 1);
        boolean boolean12 = solution7.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper13 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution7);
        boolean boolean14 = equation3.equals((java.lang.Object) gcdSolutionWrapper13);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation18 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int19 = equation18.c();
        int int20 = equation18.b();
        java.lang.Class<?> wildcardClass21 = equation18.getClass();
        boolean boolean22 = equation3.equals((java.lang.Object) wildcardClass21);
        java.lang.String str23 = equation3.toString();
        int int24 = equation3.b();
        int int25 = equation3.a();
        int int26 = equation3.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution30 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) 100, (int) ' ');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper31 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) 10, solution30);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution32 = gcdSolutionWrapper31.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation36 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        boolean boolean37 = gcdSolutionWrapper31.equals((java.lang.Object) 0);
        int int38 = gcdSolutionWrapper31.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation42 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        int int43 = equation42.c();
        boolean boolean45 = equation42.equals((java.lang.Object) false);
        java.lang.String str46 = equation42.toString();
        boolean boolean48 = equation42.equals((java.lang.Object) "");
        boolean boolean49 = gcdSolutionWrapper31.equals((java.lang.Object) "");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation54 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution55 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation54);
        int int56 = solution55.getX();
        int int57 = solution55.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper58 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) 'a', solution55);
        gcdSolutionWrapper58.setGcd((int) (short) 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution64 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(1, 52);
        int int65 = solution64.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper66 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((-1), solution64);
        boolean boolean67 = gcdSolutionWrapper58.equals((java.lang.Object) solution64);
        boolean boolean68 = gcdSolutionWrapper31.equals((java.lang.Object) solution64);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution72 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) '4', (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper73 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(0, solution72);
        java.lang.String str74 = gcdSolutionWrapper73.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution75 = gcdSolutionWrapper73.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution76 = gcdSolutionWrapper73.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation80 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) ' ', (int) ' ', 35);
        boolean boolean81 = gcdSolutionWrapper73.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution82 = gcdSolutionWrapper73.getSolution();
        boolean boolean83 = solution64.equals((java.lang.Object) gcdSolutionWrapper73);
        boolean boolean84 = equation3.equals((java.lang.Object) solution64);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35 + "'", int19 == 35);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Equation[a=0, b=0, c=-1]" + "'", str23, "Equation[a=0, b=0, c=-1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(solution32);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 10 + "'", int38 == 10);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 52 + "'", int43 == 52);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Equation[a=97, b=0, c=52]" + "'", str46, "Equation[a=97, b=0, c=52]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(solution55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 52 + "'", int65 == 52);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]" + "'", str74, "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]");
        org.junit.Assert.assertNotNull(solution75);
        org.junit.Assert.assertNotNull(solution76);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(solution82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test2456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2456");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (short) -1, (int) (byte) 10);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(0, solution3);
        int int5 = gcdSolutionWrapper4.getGcd();
        gcdSolutionWrapper4.setGcd(1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution8 = gcdSolutionWrapper4.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution10 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper11 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution10);
        gcdSolutionWrapper11.setGcd((int) ' ');
        gcdSolutionWrapper11.setGcd((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution16 = gcdSolutionWrapper11.getSolution();
        int int17 = gcdSolutionWrapper11.getGcd();
        gcdSolutionWrapper11.setGcd(0);
        int int20 = gcdSolutionWrapper11.getGcd();
        boolean boolean21 = solution8.equals((java.lang.Object) int20);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(solution8);
        org.junit.Assert.assertNull(solution16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test2457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2457");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution1 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution1);
        gcdSolutionWrapper2.setGcd((int) ' ');
        gcdSolutionWrapper2.setGcd((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution7 = gcdSolutionWrapper2.getSolution();
        int int8 = gcdSolutionWrapper2.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution12 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int13 = solution12.getY();
        solution12.setY((int) (byte) 1);
        boolean boolean17 = solution12.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper18 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution12);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution21 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int22 = solution21.getY();
        java.lang.String str23 = solution21.toString();
        boolean boolean25 = solution21.equals((java.lang.Object) (-1L));
        gcdSolutionWrapper18.setSolution(solution21);
        int int27 = solution21.getX();
        gcdSolutionWrapper2.setSolution(solution21);
        java.lang.String str29 = gcdSolutionWrapper2.toString();
        org.junit.Assert.assertNull(solution7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Solution[x=97, y=1]" + "'", str23, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 97 + "'", int27 == 97);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]" + "'", str29, "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]");
    }

    @Test
    public void test2458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2458");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((-1), (int) (byte) 10, (int) 'a');
    }

    @Test
    public void test2459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2459");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(10, 0);
        int int4 = solution3.getX();
        solution3.setY(1);
        solution3.setX((int) (short) 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(0, solution3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
    }

    @Test
    public void test2460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2460");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution7 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int8 = solution7.getY();
        solution7.setY((int) (byte) 1);
        boolean boolean12 = solution7.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper13 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution7);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution14 = gcdSolutionWrapper13.getSolution();
        java.lang.String str15 = gcdSolutionWrapper13.toString();
        gcdSolutionWrapper13.setGcd((int) (byte) 1);
        boolean boolean18 = equation3.equals((java.lang.Object) gcdSolutionWrapper13);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution19 = gcdSolutionWrapper13.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution22 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(0, (int) (byte) 10);
        gcdSolutionWrapper13.setSolution(solution22);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution24 = gcdSolutionWrapper13.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation29 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution30 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation29);
        int int31 = solution30.getX();
        int int32 = solution30.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper33 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) 'a', solution30);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation38 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution39 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation38);
        solution39.setY(0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper42 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(0, solution39);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation46 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution47 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation46);
        solution47.setY((int) (byte) 10);
        boolean boolean50 = solution39.equals((java.lang.Object) (byte) 10);
        boolean boolean52 = solution39.equals((java.lang.Object) (-1));
        solution39.setY((int) (byte) 0);
        gcdSolutionWrapper33.setSolution(solution39);
        solution39.setY((int) ' ');
        int int58 = solution39.getX();
        boolean boolean59 = gcdSolutionWrapper13.equals((java.lang.Object) int58);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(solution14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str15, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(solution19);
        org.junit.Assert.assertNotNull(solution24);
        org.junit.Assert.assertNotNull(solution30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(solution39);
        org.junit.Assert.assertNotNull(solution47);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 10 + "'", int58 == 10);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test2461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2461");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((-1), 0, (int) (short) 10);
        int int4 = equation3.a();
        java.lang.String str5 = equation3.toString();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Equation[a=-1, b=0, c=10]" + "'", str5, "Equation[a=-1, b=0, c=10]");
    }

    @Test
    public void test2462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2462");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(10, 0);
        int int4 = solution3.getX();
        solution3.setX(100);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper7 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) -1, solution3);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution9 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper10 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution9);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution13 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int14 = solution13.getY();
        solution13.setY((int) (byte) 1);
        gcdSolutionWrapper10.setSolution(solution13);
        int int18 = gcdSolutionWrapper10.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution21 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int22 = solution21.getY();
        java.lang.String str23 = solution21.toString();
        solution21.setX((int) (short) 1);
        boolean boolean27 = solution21.equals((java.lang.Object) (-1.0f));
        java.lang.String str28 = solution21.toString();
        java.lang.String str29 = solution21.toString();
        gcdSolutionWrapper10.setSolution(solution21);
        solution21.setX((int) '4');
        java.lang.String str33 = solution21.toString();
        gcdSolutionWrapper7.setSolution(solution21);
        int int35 = gcdSolutionWrapper7.getGcd();
        gcdSolutionWrapper7.setGcd(32);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Solution[x=97, y=1]" + "'", str23, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Solution[x=1, y=1]" + "'", str28, "Solution[x=1, y=1]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Solution[x=1, y=1]" + "'", str29, "Solution[x=1, y=1]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Solution[x=52, y=1]" + "'", str33, "Solution[x=52, y=1]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
    }

    @Test
    public void test2463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2463");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        java.lang.String str5 = equation4.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution6 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation4);
        solution6.setY((int) (byte) 10);
        solution6.setY((int) (short) 100);
        solution6.setX(97);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper13 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(35, solution6);
        int int14 = solution6.getX();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str5, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertNotNull(solution6);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 97 + "'", int14 == 97);
    }

    @Test
    public void test2464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2464");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(52, (-1));
        java.lang.String str3 = solution2.toString();
        solution2.setY((int) (byte) 1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Solution[x=52, y=-1]" + "'", str3, "Solution[x=52, y=-1]");
    }

    @Test
    public void test2465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2465");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(0, (int) ' ', (int) '#');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution4 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        java.lang.String str5 = equation3.toString();
        org.junit.Assert.assertNotNull(solution4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Equation[a=0, b=32, c=35]" + "'", str5, "Equation[a=0, b=32, c=35]");
    }

    @Test
    public void test2466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2466");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int4 = equation3.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution5 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution7 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution7);
        boolean boolean10 = gcdSolutionWrapper8.equals((java.lang.Object) 1);
        boolean boolean11 = equation3.equals((java.lang.Object) boolean10);
        int int12 = equation3.a();
        int int13 = equation3.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution15 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper16 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution15);
        gcdSolutionWrapper16.setGcd((int) ' ');
        gcdSolutionWrapper16.setGcd((int) (short) 1);
        int int21 = gcdSolutionWrapper16.getGcd();
        int int22 = gcdSolutionWrapper16.getGcd();
        boolean boolean23 = equation3.equals((java.lang.Object) int22);
        int int24 = equation3.a();
        int int25 = equation3.a();
        int int26 = equation3.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution28 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper29 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution28);
        gcdSolutionWrapper29.setGcd((int) ' ');
        gcdSolutionWrapper29.setGcd((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution34 = gcdSolutionWrapper29.getSolution();
        int int35 = gcdSolutionWrapper29.getGcd();
        gcdSolutionWrapper29.setGcd(0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation41 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution42 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation41);
        solution42.setY(0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation48 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (short) 10, 10, 52);
        boolean boolean49 = solution42.equals((java.lang.Object) (short) 10);
        gcdSolutionWrapper29.setSolution(solution42);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution54 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int55 = solution54.getY();
        java.lang.String str56 = solution54.toString();
        solution54.setX((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper59 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((-35), solution54);
        java.lang.String str60 = solution54.toString();
        gcdSolutionWrapper29.setSolution(solution54);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation65 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(32, (int) (byte) 100, 1);
        int int66 = equation65.b();
        boolean boolean67 = gcdSolutionWrapper29.equals((java.lang.Object) int66);
        java.lang.String str68 = gcdSolutionWrapper29.toString();
        boolean boolean69 = equation3.equals((java.lang.Object) gcdSolutionWrapper29);
        java.lang.String str70 = equation3.toString();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNotNull(solution5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNull(solution34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(solution42);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Solution[x=97, y=1]" + "'", str56, "Solution[x=97, y=1]");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "Solution[x=1, y=1]" + "'", str60, "Solution[x=1, y=1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 100 + "'", int66 == 100);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "GcdSolutionWrapper[gcd=0, solution=Solution[x=1, y=1]]" + "'", str68, "GcdSolutionWrapper[gcd=0, solution=Solution[x=1, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str70, "Equation[a=0, b=-1, c=35]");
    }

    @Test
    public void test2467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2467");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution5 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation4);
        int int6 = solution5.getX();
        int int7 = solution5.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) ' ', solution5);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution9 = gcdSolutionWrapper8.getSolution();
        java.lang.String str10 = gcdSolutionWrapper8.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution13 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int14 = solution13.getY();
        java.lang.String str15 = solution13.toString();
        int int16 = solution13.getX();
        int int17 = solution13.getY();
        solution13.setX((int) (short) 0);
        solution13.setY(35);
        gcdSolutionWrapper8.setSolution(solution13);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution23 = gcdSolutionWrapper8.getSolution();
        java.lang.String str24 = gcdSolutionWrapper8.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution28 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (short) -1, (int) (byte) 10);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper29 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(52, solution28);
        int int30 = solution28.getY();
        gcdSolutionWrapper8.setSolution(solution28);
        org.junit.Assert.assertNotNull(solution5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(solution9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "GcdSolutionWrapper[gcd=32, solution=Solution[x=0, y=0]]" + "'", str10, "GcdSolutionWrapper[gcd=32, solution=Solution[x=0, y=0]]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Solution[x=97, y=1]" + "'", str15, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 97 + "'", int16 == 97);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(solution23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "GcdSolutionWrapper[gcd=32, solution=Solution[x=0, y=35]]" + "'", str24, "GcdSolutionWrapper[gcd=32, solution=Solution[x=0, y=35]]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 10 + "'", int30 == 10);
    }

    @Test
    public void test2468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2468");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 10, (int) (byte) 100, 35);
    }

    @Test
    public void test2469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2469");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) '4', (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(0, solution3);
        java.lang.String str5 = gcdSolutionWrapper4.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution6 = gcdSolutionWrapper4.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation10 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int11 = equation10.c();
        int int12 = equation10.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution16 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int17 = solution16.getY();
        solution16.setY((int) (byte) 1);
        boolean boolean21 = solution16.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper22 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution16);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution23 = gcdSolutionWrapper22.getSolution();
        java.lang.String str24 = gcdSolutionWrapper22.toString();
        gcdSolutionWrapper22.setGcd((int) (byte) 1);
        boolean boolean27 = equation10.equals((java.lang.Object) gcdSolutionWrapper22);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution28 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation10);
        boolean boolean29 = gcdSolutionWrapper4.equals((java.lang.Object) solution28);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution33 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int34 = solution33.getY();
        solution33.setY((int) (byte) 1);
        boolean boolean38 = solution33.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper39 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution33);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution42 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int43 = solution42.getY();
        java.lang.String str44 = solution42.toString();
        boolean boolean46 = solution42.equals((java.lang.Object) (-1L));
        gcdSolutionWrapper39.setSolution(solution42);
        int int48 = solution42.getX();
        boolean boolean49 = solution28.equals((java.lang.Object) solution42);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation54 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution55 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation54);
        int int56 = solution55.getX();
        int int57 = solution55.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper58 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) 'a', solution55);
        gcdSolutionWrapper58.setGcd((int) (short) 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation64 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution65 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation64);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation69 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((-1), 0, (int) (byte) 10);
        boolean boolean70 = solution65.equals((java.lang.Object) (byte) 10);
        gcdSolutionWrapper58.setSolution(solution65);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution72 = gcdSolutionWrapper58.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution73 = gcdSolutionWrapper58.getSolution();
        int int74 = solution73.getY();
        boolean boolean75 = solution28.equals((java.lang.Object) solution73);
        java.lang.String str76 = solution73.toString();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]" + "'", str5, "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]");
        org.junit.Assert.assertNotNull(solution6);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 35 + "'", int11 == 35);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(solution23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str24, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(solution28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Solution[x=97, y=1]" + "'", str44, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 97 + "'", int48 == 97);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(solution55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(solution65);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(solution72);
        org.junit.Assert.assertNotNull(solution73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "Solution[x=10, y=0]" + "'", str76, "Solution[x=10, y=0]");
    }

    @Test
    public void test2470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2470");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) 0, 97);
    }

    @Test
    public void test2471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2471");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int5 = solution4.getY();
        solution4.setY((int) (byte) 1);
        boolean boolean9 = solution4.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper10 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution4);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution13 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int14 = solution13.getY();
        java.lang.String str15 = solution13.toString();
        boolean boolean17 = solution13.equals((java.lang.Object) (-1L));
        gcdSolutionWrapper10.setSolution(solution13);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper19 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) 'a', solution13);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution20 = gcdSolutionWrapper19.getSolution();
        solution20.setX(100);
        solution20.setY(1);
        solution20.setX((int) (short) -1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Solution[x=97, y=1]" + "'", str15, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(solution20);
    }

    @Test
    public void test2472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2472");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(32, (int) (short) 10);
        int int4 = solution3.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper5 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution3);
        solution3.setX((int) (byte) 0);
        solution3.setX((int) (byte) -1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
    }

    @Test
    public void test2473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2473");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution2);
        gcdSolutionWrapper3.setGcd((int) ' ');
        gcdSolutionWrapper3.setGcd((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution8 = gcdSolutionWrapper3.getSolution();
        int int9 = gcdSolutionWrapper3.getGcd();
        gcdSolutionWrapper3.setGcd(0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation15 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution16 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation15);
        solution16.setY(0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation22 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (short) 10, 10, 52);
        boolean boolean23 = solution16.equals((java.lang.Object) (short) 10);
        gcdSolutionWrapper3.setSolution(solution16);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution28 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int29 = solution28.getY();
        java.lang.String str30 = solution28.toString();
        solution28.setX((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper33 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((-35), solution28);
        java.lang.String str34 = solution28.toString();
        gcdSolutionWrapper3.setSolution(solution28);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation39 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(32, (int) (byte) 100, 1);
        int int40 = equation39.b();
        boolean boolean41 = gcdSolutionWrapper3.equals((java.lang.Object) int40);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution44 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int45 = solution44.getY();
        java.lang.String str46 = solution44.toString();
        solution44.setX((int) (short) 1);
        solution44.setX((int) (byte) 10);
        java.lang.String str51 = solution44.toString();
        solution44.setY((int) 'a');
        solution44.setY(35);
        gcdSolutionWrapper3.setSolution(solution44);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper57 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(0, solution44);
        gcdSolutionWrapper57.setGcd((int) (byte) -1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution60 = gcdSolutionWrapper57.getSolution();
        org.junit.Assert.assertNull(solution8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(solution16);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Solution[x=97, y=1]" + "'", str30, "Solution[x=97, y=1]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Solution[x=1, y=1]" + "'", str34, "Solution[x=1, y=1]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 100 + "'", int40 == 100);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Solution[x=97, y=1]" + "'", str46, "Solution[x=97, y=1]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Solution[x=10, y=1]" + "'", str51, "Solution[x=10, y=1]");
        org.junit.Assert.assertNotNull(solution60);
    }

    @Test
    public void test2474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2474");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        int int5 = equation4.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution6 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation4);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution7 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation4);
        solution7.setX(35);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper10 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) -1, solution7);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution14 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int15 = solution14.getY();
        solution14.setY((int) (byte) 1);
        boolean boolean19 = solution14.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper20 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution14);
        gcdSolutionWrapper20.setGcd((-1));
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution26 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int27 = solution26.getY();
        java.lang.String str28 = solution26.toString();
        solution26.setX((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper31 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((-35), solution26);
        int int32 = gcdSolutionWrapper31.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution33 = gcdSolutionWrapper31.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation37 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution38 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation37);
        solution38.setY((int) (byte) 10);
        gcdSolutionWrapper31.setSolution(solution38);
        gcdSolutionWrapper20.setSolution(solution38);
        int int43 = gcdSolutionWrapper20.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution44 = gcdSolutionWrapper20.getSolution();
        gcdSolutionWrapper10.setSolution(solution44);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution46 = gcdSolutionWrapper10.getSolution();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 97 + "'", int5 == 97);
        org.junit.Assert.assertNotNull(solution6);
        org.junit.Assert.assertNotNull(solution7);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Solution[x=97, y=1]" + "'", str28, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-35) + "'", int32 == (-35));
        org.junit.Assert.assertNotNull(solution33);
        org.junit.Assert.assertNotNull(solution38);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(solution44);
        org.junit.Assert.assertNotNull(solution46);
    }

    @Test
    public void test2475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2475");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) '4', (int) (byte) 0);
        java.lang.Class<?> wildcardClass3 = solution2.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test2476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2476");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((-97), (int) 'a', (int) (short) 100);
        int int4 = equation3.b();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 97 + "'", int4 == 97);
    }

    @Test
    public void test2477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2477");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(1, 97);
        java.lang.Class<?> wildcardClass3 = solution2.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test2478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2478");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution5 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation4);
        int int6 = solution5.getX();
        int int7 = solution5.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) 'a', solution5);
        boolean boolean10 = solution5.equals((java.lang.Object) '#');
        int int11 = solution5.getY();
        int int12 = solution5.getY();
        org.junit.Assert.assertNotNull(solution5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test2479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2479");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int3 = solution2.getY();
        java.lang.String str4 = solution2.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution6 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper7 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution6);
        gcdSolutionWrapper7.setGcd((int) ' ');
        gcdSolutionWrapper7.setGcd((int) (short) 1);
        int int12 = gcdSolutionWrapper7.getGcd();
        gcdSolutionWrapper7.setGcd((int) (byte) -1);
        int int15 = gcdSolutionWrapper7.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution19 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int20 = solution19.getY();
        java.lang.String str21 = solution19.toString();
        solution19.setX((int) (short) 1);
        java.lang.String str24 = solution19.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper25 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(35, solution19);
        boolean boolean26 = gcdSolutionWrapper7.equals((java.lang.Object) solution19);
        boolean boolean27 = solution2.equals((java.lang.Object) gcdSolutionWrapper7);
        java.lang.String str28 = gcdSolutionWrapper7.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation32 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution33 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation32);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution36 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper37 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution36);
        boolean boolean39 = gcdSolutionWrapper37.equals((java.lang.Object) 1);
        java.lang.String str40 = gcdSolutionWrapper37.toString();
        gcdSolutionWrapper37.setGcd(32);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution45 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) 100, (int) (byte) -1);
        gcdSolutionWrapper37.setSolution(solution45);
        int int47 = solution45.getX();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper48 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution45);
        java.lang.String str49 = gcdSolutionWrapper48.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation53 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (short) 10, 10, 52);
        java.lang.String str54 = equation53.toString();
        int int55 = equation53.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution56 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation53);
        gcdSolutionWrapper48.setSolution(solution56);
        boolean boolean58 = equation32.equals((java.lang.Object) solution56);
        boolean boolean59 = gcdSolutionWrapper7.equals((java.lang.Object) solution56);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution62 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int63 = solution62.getY();
        java.lang.String str64 = solution62.toString();
        solution62.setX((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation70 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, 0, (int) (short) -1);
        boolean boolean71 = solution62.equals((java.lang.Object) equation70);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation75 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(32, (-35), (int) (byte) 1);
        boolean boolean76 = solution62.equals((java.lang.Object) (byte) 1);
        int int77 = solution62.getY();
        solution62.setX((int) (short) -1);
        int int80 = solution62.getY();
        int int81 = solution62.getX();
        gcdSolutionWrapper7.setSolution(solution62);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Solution[x=97, y=1]" + "'", str4, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Solution[x=97, y=1]" + "'", str21, "Solution[x=97, y=1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Solution[x=1, y=1]" + "'", str24, "Solution[x=1, y=1]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=null]" + "'", str28, "GcdSolutionWrapper[gcd=-1, solution=null]");
        org.junit.Assert.assertNotNull(solution33);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=null]" + "'", str40, "GcdSolutionWrapper[gcd=1, solution=null]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 100 + "'", int47 == 100);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=Solution[x=100, y=-1]]" + "'", str49, "GcdSolutionWrapper[gcd=1, solution=Solution[x=100, y=-1]]");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Equation[a=10, b=10, c=52]" + "'", str54, "Equation[a=10, b=10, c=52]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 52 + "'", int55 == 52);
        org.junit.Assert.assertNotNull(solution56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "Solution[x=97, y=1]" + "'", str64, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-1) + "'", int81 == (-1));
    }

    @Test
    public void test2480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2480");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation5 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution6 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation5);
        int int7 = solution6.getX();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation11 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        int int12 = equation11.c();
        int int13 = equation11.c();
        int int14 = equation11.a();
        boolean boolean15 = solution6.equals((java.lang.Object) equation11);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution16 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation11);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper17 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 100, solution16);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper18 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution16);
        int int19 = solution16.getX();
        org.junit.Assert.assertNotNull(solution6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(solution16);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test2481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2481");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int3 = solution2.getY();
        java.lang.String str4 = solution2.toString();
        solution2.setX((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation10 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int11 = equation10.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution12 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation10);
        boolean boolean13 = solution2.equals((java.lang.Object) solution12);
        solution2.setX((int) 'a');
        solution2.setY(10);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Solution[x=97, y=1]" + "'", str4, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 35 + "'", int11 == 35);
        org.junit.Assert.assertNotNull(solution12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test2482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2482");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        int int4 = equation3.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution5 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        java.lang.String str6 = equation3.toString();
        int int7 = equation3.b();
        int int8 = equation3.b();
        java.lang.String str9 = equation3.toString();
        int int10 = equation3.b();
        int int11 = equation3.c();
        int int12 = equation3.a();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 97 + "'", int4 == 97);
        org.junit.Assert.assertNotNull(solution5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Equation[a=97, b=0, c=52]" + "'", str6, "Equation[a=97, b=0, c=52]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Equation[a=97, b=0, c=52]" + "'", str9, "Equation[a=97, b=0, c=52]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 97 + "'", int12 == 97);
    }

    @Test
    public void test2483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2483");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', 0);
    }

    @Test
    public void test2484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2484");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(32, 0, (int) (short) 0);
    }

    @Test
    public void test2485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2485");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(0, (int) (byte) 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution6 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int7 = solution6.getY();
        solution6.setY((int) (byte) 1);
        boolean boolean11 = solution6.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper12 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution6);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution13 = gcdSolutionWrapper12.getSolution();
        java.lang.String str14 = gcdSolutionWrapper12.toString();
        boolean boolean15 = solution2.equals((java.lang.Object) str14);
        solution2.setX(10);
        solution2.setY(97);
        solution2.setY((int) (short) -1);
        int int22 = solution2.getY();
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(solution13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str14, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
    }

    @Test
    public void test2486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2486");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) 100, (int) ' ');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) 10, solution3);
        gcdSolutionWrapper4.setGcd(97);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution10 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) 100, (int) ' ');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper11 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) 10, solution10);
        gcdSolutionWrapper11.setGcd(97);
        boolean boolean14 = gcdSolutionWrapper4.equals((java.lang.Object) gcdSolutionWrapper11);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution17 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) -1, 52);
        solution17.setY((-75));
        gcdSolutionWrapper11.setSolution(solution17);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution24 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) 100, (int) ' ');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper25 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) 10, solution24);
        gcdSolutionWrapper25.setGcd(97);
        gcdSolutionWrapper25.setGcd(0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution32 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(32, (int) (byte) 10);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution36 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int37 = solution36.getY();
        solution36.setY((int) (byte) 1);
        boolean boolean41 = solution36.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper42 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution36);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution45 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int46 = solution45.getY();
        java.lang.String str47 = solution45.toString();
        boolean boolean49 = solution45.equals((java.lang.Object) (-1L));
        gcdSolutionWrapper42.setSolution(solution45);
        int int51 = solution45.getX();
        int int52 = solution45.getY();
        solution45.setY((int) (short) 10);
        solution45.setY(35);
        solution45.setX(0);
        boolean boolean59 = solution32.equals((java.lang.Object) solution45);
        gcdSolutionWrapper25.setSolution(solution32);
        boolean boolean61 = solution17.equals((java.lang.Object) solution32);
        java.lang.String str62 = solution32.toString();
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Solution[x=97, y=1]" + "'", str47, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 97 + "'", int51 == 97);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "Solution[x=32, y=10]" + "'", str62, "Solution[x=32, y=10]");
    }

    @Test
    public void test2487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2487");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(100, (int) (byte) -1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation7 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int8 = equation7.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution9 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation7);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution11 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper12 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution11);
        boolean boolean14 = gcdSolutionWrapper12.equals((java.lang.Object) 1);
        boolean boolean15 = equation7.equals((java.lang.Object) boolean14);
        int int16 = equation7.a();
        boolean boolean17 = solution3.equals((java.lang.Object) int16);
        solution3.setY(10);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper20 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) 1, solution3);
        int int21 = gcdSolutionWrapper20.getGcd();
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 35 + "'", int8 == 35);
        org.junit.Assert.assertNotNull(solution9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
    }

    @Test
    public void test2488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2488");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (short) 10, (int) (byte) 0);
        solution2.setY(0);
    }

    @Test
    public void test2489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2489");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution1 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution1);
        gcdSolutionWrapper2.setGcd((int) ' ');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution7 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int8 = solution7.getY();
        java.lang.String str9 = solution7.toString();
        gcdSolutionWrapper2.setSolution(solution7);
        int int11 = gcdSolutionWrapper2.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution12 = gcdSolutionWrapper2.getSolution();
        solution12.setX((int) (short) 10);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Solution[x=97, y=1]" + "'", str9, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 32 + "'", int11 == 32);
        org.junit.Assert.assertNotNull(solution12);
    }

    @Test
    public void test2490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2490");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution1 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution1);
        gcdSolutionWrapper2.setGcd((int) ' ');
        int int5 = gcdSolutionWrapper2.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation10 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((-35), (int) ' ', 0);
        java.lang.String str11 = equation10.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution12 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation10);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper13 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) 1, solution12);
        solution12.setX((-1));
        gcdSolutionWrapper2.setSolution(solution12);
        int int17 = solution12.getX();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 32 + "'", int5 == 32);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Equation[a=-35, b=32, c=0]" + "'", str11, "Equation[a=-35, b=32, c=0]");
        org.junit.Assert.assertNotNull(solution12);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
    }

    @Test
    public void test2491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2491");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) '4', (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(0, solution3);
        java.lang.String str5 = gcdSolutionWrapper4.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution6 = gcdSolutionWrapper4.getSolution();
        gcdSolutionWrapper4.setGcd(52);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution9 = gcdSolutionWrapper4.getSolution();
        java.lang.String str10 = gcdSolutionWrapper4.toString();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]" + "'", str5, "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]");
        org.junit.Assert.assertNotNull(solution6);
        org.junit.Assert.assertNotNull(solution9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "GcdSolutionWrapper[gcd=52, solution=Solution[x=52, y=52]]" + "'", str10, "GcdSolutionWrapper[gcd=52, solution=Solution[x=52, y=52]]");
    }

    @Test
    public void test2492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2492");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int5 = solution4.getY();
        solution4.setY((int) (byte) 1);
        boolean boolean9 = solution4.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper10 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution4);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper11 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution4);
        gcdSolutionWrapper11.setGcd(32);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation17 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int18 = equation17.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution19 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation17);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution21 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper22 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution21);
        boolean boolean24 = gcdSolutionWrapper22.equals((java.lang.Object) 1);
        boolean boolean25 = equation17.equals((java.lang.Object) boolean24);
        boolean boolean26 = gcdSolutionWrapper11.equals((java.lang.Object) boolean24);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution29 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper30 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution29);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution33 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int34 = solution33.getY();
        solution33.setY((int) (byte) 1);
        gcdSolutionWrapper30.setSolution(solution33);
        int int38 = gcdSolutionWrapper30.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution41 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int42 = solution41.getY();
        java.lang.String str43 = solution41.toString();
        solution41.setX((int) (short) 1);
        boolean boolean47 = solution41.equals((java.lang.Object) (-1.0f));
        java.lang.String str48 = solution41.toString();
        java.lang.String str49 = solution41.toString();
        gcdSolutionWrapper30.setSolution(solution41);
        java.lang.String str51 = solution41.toString();
        solution41.setY(52);
        int int54 = solution41.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution57 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper58 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution57);
        boolean boolean60 = gcdSolutionWrapper58.equals((java.lang.Object) 1);
        java.lang.String str61 = gcdSolutionWrapper58.toString();
        gcdSolutionWrapper58.setGcd(32);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution66 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) 100, (int) (byte) -1);
        gcdSolutionWrapper58.setSolution(solution66);
        int int68 = solution66.getX();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper69 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution66);
        java.lang.String str70 = gcdSolutionWrapper69.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation74 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (short) 10, 10, 52);
        java.lang.String str75 = equation74.toString();
        int int76 = equation74.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution77 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation74);
        gcdSolutionWrapper69.setSolution(solution77);
        java.lang.Class<?> wildcardClass79 = gcdSolutionWrapper69.getClass();
        boolean boolean80 = solution41.equals((java.lang.Object) wildcardClass79);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper81 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((-97), solution41);
        gcdSolutionWrapper11.setSolution(solution41);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution83 = gcdSolutionWrapper11.getSolution();
        java.lang.String str84 = gcdSolutionWrapper11.toString();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 35 + "'", int18 == 35);
        org.junit.Assert.assertNotNull(solution19);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Solution[x=97, y=1]" + "'", str43, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Solution[x=1, y=1]" + "'", str48, "Solution[x=1, y=1]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Solution[x=1, y=1]" + "'", str49, "Solution[x=1, y=1]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Solution[x=1, y=1]" + "'", str51, "Solution[x=1, y=1]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 52 + "'", int54 == 52);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=null]" + "'", str61, "GcdSolutionWrapper[gcd=1, solution=null]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 100 + "'", int68 == 100);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=Solution[x=100, y=-1]]" + "'", str70, "GcdSolutionWrapper[gcd=1, solution=Solution[x=100, y=-1]]");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "Equation[a=10, b=10, c=52]" + "'", str75, "Equation[a=10, b=10, c=52]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 52 + "'", int76 == 52);
        org.junit.Assert.assertNotNull(solution77);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(solution83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "GcdSolutionWrapper[gcd=32, solution=Solution[x=1, y=52]]" + "'", str84, "GcdSolutionWrapper[gcd=32, solution=Solution[x=1, y=52]]");
    }

    @Test
    public void test2493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2493");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int4 = solution3.getY();
        java.lang.String str5 = solution3.toString();
        solution3.setX((int) (short) 1);
        boolean boolean9 = solution3.equals((java.lang.Object) (-1.0f));
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper10 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 100, solution3);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation15 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution16 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation15);
        int int17 = solution16.getX();
        int int18 = solution16.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper19 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) ' ', solution16);
        java.lang.String str20 = gcdSolutionWrapper19.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution22 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper23 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution22);
        boolean boolean25 = gcdSolutionWrapper23.equals((java.lang.Object) 1);
        java.lang.String str26 = gcdSolutionWrapper23.toString();
        gcdSolutionWrapper23.setGcd(32);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution31 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) 100, (int) (byte) -1);
        gcdSolutionWrapper23.setSolution(solution31);
        int int33 = solution31.getX();
        gcdSolutionWrapper19.setSolution(solution31);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution35 = gcdSolutionWrapper19.getSolution();
        int int36 = solution35.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation40 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int41 = equation40.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution42 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation40);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution44 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper45 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution44);
        boolean boolean47 = gcdSolutionWrapper45.equals((java.lang.Object) 1);
        boolean boolean48 = equation40.equals((java.lang.Object) boolean47);
        int int49 = equation40.a();
        int int50 = equation40.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution52 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper53 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution52);
        gcdSolutionWrapper53.setGcd((int) ' ');
        gcdSolutionWrapper53.setGcd((int) (short) 1);
        int int58 = gcdSolutionWrapper53.getGcd();
        int int59 = gcdSolutionWrapper53.getGcd();
        boolean boolean60 = equation40.equals((java.lang.Object) int59);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution62 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper63 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution62);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution66 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int67 = solution66.getY();
        solution66.setY((int) (byte) 1);
        gcdSolutionWrapper63.setSolution(solution66);
        boolean boolean71 = equation40.equals((java.lang.Object) gcdSolutionWrapper63);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution72 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation40);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution73 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation40);
        int int74 = equation40.a();
        boolean boolean75 = solution35.equals((java.lang.Object) int74);
        java.lang.Class<?> wildcardClass76 = solution35.getClass();
        boolean boolean77 = solution3.equals((java.lang.Object) wildcardClass76);
        java.lang.String str78 = solution3.toString();
        java.lang.Class<?> wildcardClass79 = solution3.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Solution[x=97, y=1]" + "'", str5, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(solution16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "GcdSolutionWrapper[gcd=32, solution=Solution[x=0, y=0]]" + "'", str20, "GcdSolutionWrapper[gcd=32, solution=Solution[x=0, y=0]]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=null]" + "'", str26, "GcdSolutionWrapper[gcd=1, solution=null]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 100 + "'", int33 == 100);
        org.junit.Assert.assertNotNull(solution35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 35 + "'", int41 == 35);
        org.junit.Assert.assertNotNull(solution42);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(solution72);
        org.junit.Assert.assertNotNull(solution73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(wildcardClass76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "Solution[x=1, y=1]" + "'", str78, "Solution[x=1, y=1]");
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test2494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2494");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(32, (int) (short) 10);
        int int4 = solution3.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper5 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution3);
        solution3.setX(96);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
    }

    @Test
    public void test2495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2495");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) 0, (-35));
        int int4 = solution3.getY();
        java.lang.String str5 = solution3.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper6 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(97, solution3);
        gcdSolutionWrapper6.setGcd(0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-35) + "'", int4 == (-35));
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Solution[x=0, y=-35]" + "'", str5, "Solution[x=0, y=-35]");
    }

    @Test
    public void test2496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2496");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) ' ', (int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper5 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) '4', solution4);
        int int6 = solution4.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper7 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 0, solution4);
        java.lang.Class<?> wildcardClass8 = solution4.getClass();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test2497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2497");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) 100, (int) ' ');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) 10, solution3);
        gcdSolutionWrapper4.setGcd(97);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution10 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) 100, (int) ' ');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper11 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) 10, solution10);
        gcdSolutionWrapper11.setGcd(97);
        boolean boolean14 = gcdSolutionWrapper4.equals((java.lang.Object) gcdSolutionWrapper11);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution17 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) -1, 52);
        solution17.setY((-75));
        gcdSolutionWrapper11.setSolution(solution17);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution24 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) 100, (int) ' ');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper25 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) 10, solution24);
        gcdSolutionWrapper25.setGcd(97);
        gcdSolutionWrapper25.setGcd(0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution32 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(32, (int) (byte) 10);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution36 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int37 = solution36.getY();
        solution36.setY((int) (byte) 1);
        boolean boolean41 = solution36.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper42 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution36);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution45 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int46 = solution45.getY();
        java.lang.String str47 = solution45.toString();
        boolean boolean49 = solution45.equals((java.lang.Object) (-1L));
        gcdSolutionWrapper42.setSolution(solution45);
        int int51 = solution45.getX();
        int int52 = solution45.getY();
        solution45.setY((int) (short) 10);
        solution45.setY(35);
        solution45.setX(0);
        boolean boolean59 = solution32.equals((java.lang.Object) solution45);
        gcdSolutionWrapper25.setSolution(solution32);
        boolean boolean61 = solution17.equals((java.lang.Object) solution32);
        solution17.setY((int) '#');
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Solution[x=97, y=1]" + "'", str47, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 97 + "'", int51 == 97);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test2498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2498");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (short) 0, 1, (int) (byte) 100);
    }

    @Test
    public void test2499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2499");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation5 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int10 = solution9.getY();
        solution9.setY((int) (byte) 1);
        boolean boolean14 = solution9.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper15 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution9);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution16 = gcdSolutionWrapper15.getSolution();
        java.lang.String str17 = gcdSolutionWrapper15.toString();
        gcdSolutionWrapper15.setGcd((int) (byte) 1);
        boolean boolean20 = equation5.equals((java.lang.Object) gcdSolutionWrapper15);
        int int21 = gcdSolutionWrapper15.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution22 = gcdSolutionWrapper15.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper23 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(32, solution22);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper24 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) ' ', solution22);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution25 = gcdSolutionWrapper24.getSolution();
        int int26 = solution25.getX();
        int int27 = solution25.getX();
        solution25.setY((-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(solution16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str17, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(solution22);
        org.junit.Assert.assertNotNull(solution25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 97 + "'", int26 == 97);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 97 + "'", int27 == 97);
    }

    @Test
    public void test2500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2500");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int3 = solution2.getY();
        java.lang.String str4 = solution2.toString();
        solution2.setX((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation10 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, 0, (int) (short) -1);
        boolean boolean11 = solution2.equals((java.lang.Object) equation10);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation15 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution16 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation15);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation20 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((-1), 0, (int) (byte) 10);
        boolean boolean21 = solution16.equals((java.lang.Object) (byte) 10);
        solution16.setX((-1));
        boolean boolean24 = solution2.equals((java.lang.Object) (-1));
        solution2.setX(32);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Solution[x=97, y=1]" + "'", str4, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(solution16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }
}
